

Microchip Technology PIC LITE Macro Assembler V1.41 build -162212810 
                                                                                               Tue May 22 07:49:46 2018

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	12F1572
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	inittext,global,class=CODE,delta=2
    11                           	psect	clrtext,global,class=CODE,delta=2
    12                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    15                           	psect	text1,local,class=CODE,merge=1,delta=2
    16                           	psect	text2,local,class=CODE,merge=1,delta=2
    17                           	psect	text3,local,class=CODE,merge=1,delta=2
    18                           	psect	text4,local,class=CODE,merge=1,delta=2
    19                           	psect	text5,local,class=CODE,merge=1,delta=2
    20                           	psect	text6,local,class=CODE,merge=1,delta=2
    21                           	psect	text7,local,class=CODE,merge=1,delta=2
    22                           	psect	text8,local,class=CODE,merge=1,delta=2
    23                           	psect	text9,local,class=CODE,merge=1,delta=2
    24                           	psect	text10,local,class=CODE,merge=1,delta=2
    25                           	psect	swtext1,local,class=CONST,delta=2
    26                           	psect	text11,local,class=CODE,merge=1,delta=2
    27                           	psect	swtext2,local,class=CONST,delta=2
    28                           	psect	text12,local,class=CODE,merge=1,delta=2,group=1
    29                           	psect	text13,local,class=CODE,merge=1,delta=2,group=1
    30                           	psect	text14,local,class=CODE,merge=1,delta=2
    31                           	psect	text15,local,class=CODE,merge=1,delta=2
    32                           	psect	text16,local,class=CODE,merge=1,delta=2
    33                           	psect	text17,local,class=CODE,merge=1,delta=2
    34                           	psect	text18,local,class=CODE,merge=1,delta=2
    35                           	psect	text19,local,class=CODE,merge=1,delta=2
    36                           	psect	text20,local,class=CODE,merge=1,delta=2
    37                           	psect	intentry,global,class=CODE,delta=2
    38                           	psect	text22,local,class=CODE,merge=1,delta=2
    39                           	psect	text23,local,class=CODE,merge=1,delta=2
    40                           	psect	text24,local,class=CODE,merge=1,delta=2
    41                           	psect	text25,local,class=CODE,merge=1,delta=2
    42                           	psect	text26,local,class=CODE,merge=1,delta=2
    43                           	psect	text27,local,class=CODE,merge=1,delta=2
    44                           	psect	text28,local,class=CODE,merge=1,delta=2
    45                           	psect	text29,local,class=CODE,merge=1,delta=2
    46                           	dabs	1,0x7E,2
    47  0000                     
    48                           ; Version 1.41
    49                           ; Generated 25/01/2017 GMT
    50                           ; 
    51                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    52                           ; All rights reserved.
    53                           ; 
    54                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    55                           ; 
    56                           ; Redistribution and use in source and binary forms, with or without modification, are
    57                           ; permitted provided that the following conditions are met:
    58                           ; 
    59                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    60                           ;        conditions and the following disclaimer.
    61                           ; 
    62                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    63                           ;        of conditions and the following disclaimer in the documentation and/or other
    64                           ;        materials provided with the distribution.
    65                           ; 
    66                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    67                           ;        software without specific prior written permission.
    68                           ; 
    69                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    70                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    71                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    72                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    73                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    74                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    75                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    76                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    77                           ; 
    78                           ; 
    79                           ; Code-generator required, PIC12F1572 Definitions
    80                           ; 
    81                           ; SFR Addresses
    82  0000                     	;# 
    83  0001                     	;# 
    84  0002                     	;# 
    85  0003                     	;# 
    86  0004                     	;# 
    87  0005                     	;# 
    88  0006                     	;# 
    89  0007                     	;# 
    90  0008                     	;# 
    91  0009                     	;# 
    92  000A                     	;# 
    93  000B                     	;# 
    94  000C                     	;# 
    95  0011                     	;# 
    96  0012                     	;# 
    97  0013                     	;# 
    98  0015                     	;# 
    99  0016                     	;# 
   100  0016                     	;# 
   101  0017                     	;# 
   102  0018                     	;# 
   103  0019                     	;# 
   104  001A                     	;# 
   105  001B                     	;# 
   106  001C                     	;# 
   107  008C                     	;# 
   108  0091                     	;# 
   109  0092                     	;# 
   110  0093                     	;# 
   111  0095                     	;# 
   112  0096                     	;# 
   113  0097                     	;# 
   114  0098                     	;# 
   115  0099                     	;# 
   116  009A                     	;# 
   117  009B                     	;# 
   118  009B                     	;# 
   119  009C                     	;# 
   120  009D                     	;# 
   121  009E                     	;# 
   122  009F                     	;# 
   123  010C                     	;# 
   124  0111                     	;# 
   125  0112                     	;# 
   126  0115                     	;# 
   127  0116                     	;# 
   128  0117                     	;# 
   129  0118                     	;# 
   130  0119                     	;# 
   131  011D                     	;# 
   132  011D                     	;# 
   133  018C                     	;# 
   134  0191                     	;# 
   135  0191                     	;# 
   136  0192                     	;# 
   137  0193                     	;# 
   138  0193                     	;# 
   139  0194                     	;# 
   140  0195                     	;# 
   141  0196                     	;# 
   142  0197                     	;# 
   143  0199                     	;# 
   144  019A                     	;# 
   145  019B                     	;# 
   146  019B                     	;# 
   147  019C                     	;# 
   148  019D                     	;# 
   149  019E                     	;# 
   150  019F                     	;# 
   151  020C                     	;# 
   152  028C                     	;# 
   153  030C                     	;# 
   154  038C                     	;# 
   155  0391                     	;# 
   156  0392                     	;# 
   157  0393                     	;# 
   158  0691                     	;# 
   159  0692                     	;# 
   160  0693                     	;# 
   161  0694                     	;# 
   162  0695                     	;# 
   163  0D8E                     	;# 
   164  0D8F                     	;# 
   165  0D90                     	;# 
   166  0D91                     	;# 
   167  0D91                     	;# 
   168  0D92                     	;# 
   169  0D93                     	;# 
   170  0D93                     	;# 
   171  0D94                     	;# 
   172  0D95                     	;# 
   173  0D95                     	;# 
   174  0D96                     	;# 
   175  0D97                     	;# 
   176  0D97                     	;# 
   177  0D98                     	;# 
   178  0D99                     	;# 
   179  0D99                     	;# 
   180  0D9A                     	;# 
   181  0D9B                     	;# 
   182  0D9C                     	;# 
   183  0D9C                     	;# 
   184  0D9D                     	;# 
   185  0D9D                     	;# 
   186  0D9E                     	;# 
   187  0D9F                     	;# 
   188  0DA0                     	;# 
   189  0DA1                     	;# 
   190  0DA1                     	;# 
   191  0DA2                     	;# 
   192  0DA3                     	;# 
   193  0DA3                     	;# 
   194  0DA4                     	;# 
   195  0DA5                     	;# 
   196  0DA5                     	;# 
   197  0DA6                     	;# 
   198  0DA7                     	;# 
   199  0DA7                     	;# 
   200  0DA8                     	;# 
   201  0DA9                     	;# 
   202  0DA9                     	;# 
   203  0DAA                     	;# 
   204  0DAB                     	;# 
   205  0DAC                     	;# 
   206  0DAC                     	;# 
   207  0DAD                     	;# 
   208  0DAD                     	;# 
   209  0DAE                     	;# 
   210  0DAF                     	;# 
   211  0DB0                     	;# 
   212  0DB1                     	;# 
   213  0DB1                     	;# 
   214  0DB2                     	;# 
   215  0DB3                     	;# 
   216  0DB3                     	;# 
   217  0DB4                     	;# 
   218  0DB5                     	;# 
   219  0DB5                     	;# 
   220  0DB6                     	;# 
   221  0DB7                     	;# 
   222  0DB7                     	;# 
   223  0DB8                     	;# 
   224  0DB9                     	;# 
   225  0DB9                     	;# 
   226  0DBA                     	;# 
   227  0DBB                     	;# 
   228  0DBC                     	;# 
   229  0DBC                     	;# 
   230  0DBD                     	;# 
   231  0DBD                     	;# 
   232  0DBE                     	;# 
   233  0DBF                     	;# 
   234  0DC0                     	;# 
   235  0FE4                     	;# 
   236  0FE5                     	;# 
   237  0FE6                     	;# 
   238  0FE7                     	;# 
   239  0FE8                     	;# 
   240  0FE8                     	;# 
   241  0FE9                     	;# 
   242  0FEA                     	;# 
   243  0FEA                     	;# 
   244  0FEB                     	;# 
   245  0FED                     	;# 
   246  0FEE                     	;# 
   247  0FEE                     	;# 
   248  0FEF                     	;# 
   249  0000                     	;# 
   250  0001                     	;# 
   251  0002                     	;# 
   252  0003                     	;# 
   253  0004                     	;# 
   254  0005                     	;# 
   255  0006                     	;# 
   256  0007                     	;# 
   257  0008                     	;# 
   258  0009                     	;# 
   259  000A                     	;# 
   260  000B                     	;# 
   261  000C                     	;# 
   262  0011                     	;# 
   263  0012                     	;# 
   264  0013                     	;# 
   265  0015                     	;# 
   266  0016                     	;# 
   267  0016                     	;# 
   268  0017                     	;# 
   269  0018                     	;# 
   270  0019                     	;# 
   271  001A                     	;# 
   272  001B                     	;# 
   273  001C                     	;# 
   274  008C                     	;# 
   275  0091                     	;# 
   276  0092                     	;# 
   277  0093                     	;# 
   278  0095                     	;# 
   279  0096                     	;# 
   280  0097                     	;# 
   281  0098                     	;# 
   282  0099                     	;# 
   283  009A                     	;# 
   284  009B                     	;# 
   285  009B                     	;# 
   286  009C                     	;# 
   287  009D                     	;# 
   288  009E                     	;# 
   289  009F                     	;# 
   290  010C                     	;# 
   291  0111                     	;# 
   292  0112                     	;# 
   293  0115                     	;# 
   294  0116                     	;# 
   295  0117                     	;# 
   296  0118                     	;# 
   297  0119                     	;# 
   298  011D                     	;# 
   299  011D                     	;# 
   300  018C                     	;# 
   301  0191                     	;# 
   302  0191                     	;# 
   303  0192                     	;# 
   304  0193                     	;# 
   305  0193                     	;# 
   306  0194                     	;# 
   307  0195                     	;# 
   308  0196                     	;# 
   309  0197                     	;# 
   310  0199                     	;# 
   311  019A                     	;# 
   312  019B                     	;# 
   313  019B                     	;# 
   314  019C                     	;# 
   315  019D                     	;# 
   316  019E                     	;# 
   317  019F                     	;# 
   318  020C                     	;# 
   319  028C                     	;# 
   320  030C                     	;# 
   321  038C                     	;# 
   322  0391                     	;# 
   323  0392                     	;# 
   324  0393                     	;# 
   325  0691                     	;# 
   326  0692                     	;# 
   327  0693                     	;# 
   328  0694                     	;# 
   329  0695                     	;# 
   330  0D8E                     	;# 
   331  0D8F                     	;# 
   332  0D90                     	;# 
   333  0D91                     	;# 
   334  0D91                     	;# 
   335  0D92                     	;# 
   336  0D93                     	;# 
   337  0D93                     	;# 
   338  0D94                     	;# 
   339  0D95                     	;# 
   340  0D95                     	;# 
   341  0D96                     	;# 
   342  0D97                     	;# 
   343  0D97                     	;# 
   344  0D98                     	;# 
   345  0D99                     	;# 
   346  0D99                     	;# 
   347  0D9A                     	;# 
   348  0D9B                     	;# 
   349  0D9C                     	;# 
   350  0D9C                     	;# 
   351  0D9D                     	;# 
   352  0D9D                     	;# 
   353  0D9E                     	;# 
   354  0D9F                     	;# 
   355  0DA0                     	;# 
   356  0DA1                     	;# 
   357  0DA1                     	;# 
   358  0DA2                     	;# 
   359  0DA3                     	;# 
   360  0DA3                     	;# 
   361  0DA4                     	;# 
   362  0DA5                     	;# 
   363  0DA5                     	;# 
   364  0DA6                     	;# 
   365  0DA7                     	;# 
   366  0DA7                     	;# 
   367  0DA8                     	;# 
   368  0DA9                     	;# 
   369  0DA9                     	;# 
   370  0DAA                     	;# 
   371  0DAB                     	;# 
   372  0DAC                     	;# 
   373  0DAC                     	;# 
   374  0DAD                     	;# 
   375  0DAD                     	;# 
   376  0DAE                     	;# 
   377  0DAF                     	;# 
   378  0DB0                     	;# 
   379  0DB1                     	;# 
   380  0DB1                     	;# 
   381  0DB2                     	;# 
   382  0DB3                     	;# 
   383  0DB3                     	;# 
   384  0DB4                     	;# 
   385  0DB5                     	;# 
   386  0DB5                     	;# 
   387  0DB6                     	;# 
   388  0DB7                     	;# 
   389  0DB7                     	;# 
   390  0DB8                     	;# 
   391  0DB9                     	;# 
   392  0DB9                     	;# 
   393  0DBA                     	;# 
   394  0DBB                     	;# 
   395  0DBC                     	;# 
   396  0DBC                     	;# 
   397  0DBD                     	;# 
   398  0DBD                     	;# 
   399  0DBE                     	;# 
   400  0DBF                     	;# 
   401  0DC0                     	;# 
   402  0FE4                     	;# 
   403  0FE5                     	;# 
   404  0FE6                     	;# 
   405  0FE7                     	;# 
   406  0FE8                     	;# 
   407  0FE8                     	;# 
   408  0FE9                     	;# 
   409  0FEA                     	;# 
   410  0FEA                     	;# 
   411  0FEB                     	;# 
   412  0FED                     	;# 
   413  0FEE                     	;# 
   414  0FEE                     	;# 
   415  0FEF                     	;# 
   416  0000                     	;# 
   417  0001                     	;# 
   418  0002                     	;# 
   419  0003                     	;# 
   420  0004                     	;# 
   421  0005                     	;# 
   422  0006                     	;# 
   423  0007                     	;# 
   424  0008                     	;# 
   425  0009                     	;# 
   426  000A                     	;# 
   427  000B                     	;# 
   428  000C                     	;# 
   429  0011                     	;# 
   430  0012                     	;# 
   431  0013                     	;# 
   432  0015                     	;# 
   433  0016                     	;# 
   434  0016                     	;# 
   435  0017                     	;# 
   436  0018                     	;# 
   437  0019                     	;# 
   438  001A                     	;# 
   439  001B                     	;# 
   440  001C                     	;# 
   441  008C                     	;# 
   442  0091                     	;# 
   443  0092                     	;# 
   444  0093                     	;# 
   445  0095                     	;# 
   446  0096                     	;# 
   447  0097                     	;# 
   448  0098                     	;# 
   449  0099                     	;# 
   450  009A                     	;# 
   451  009B                     	;# 
   452  009B                     	;# 
   453  009C                     	;# 
   454  009D                     	;# 
   455  009E                     	;# 
   456  009F                     	;# 
   457  010C                     	;# 
   458  0111                     	;# 
   459  0112                     	;# 
   460  0115                     	;# 
   461  0116                     	;# 
   462  0117                     	;# 
   463  0118                     	;# 
   464  0119                     	;# 
   465  011D                     	;# 
   466  011D                     	;# 
   467  018C                     	;# 
   468  0191                     	;# 
   469  0191                     	;# 
   470  0192                     	;# 
   471  0193                     	;# 
   472  0193                     	;# 
   473  0194                     	;# 
   474  0195                     	;# 
   475  0196                     	;# 
   476  0197                     	;# 
   477  0199                     	;# 
   478  019A                     	;# 
   479  019B                     	;# 
   480  019B                     	;# 
   481  019C                     	;# 
   482  019D                     	;# 
   483  019E                     	;# 
   484  019F                     	;# 
   485  020C                     	;# 
   486  028C                     	;# 
   487  030C                     	;# 
   488  038C                     	;# 
   489  0391                     	;# 
   490  0392                     	;# 
   491  0393                     	;# 
   492  0691                     	;# 
   493  0692                     	;# 
   494  0693                     	;# 
   495  0694                     	;# 
   496  0695                     	;# 
   497  0D8E                     	;# 
   498  0D8F                     	;# 
   499  0D90                     	;# 
   500  0D91                     	;# 
   501  0D91                     	;# 
   502  0D92                     	;# 
   503  0D93                     	;# 
   504  0D93                     	;# 
   505  0D94                     	;# 
   506  0D95                     	;# 
   507  0D95                     	;# 
   508  0D96                     	;# 
   509  0D97                     	;# 
   510  0D97                     	;# 
   511  0D98                     	;# 
   512  0D99                     	;# 
   513  0D99                     	;# 
   514  0D9A                     	;# 
   515  0D9B                     	;# 
   516  0D9C                     	;# 
   517  0D9C                     	;# 
   518  0D9D                     	;# 
   519  0D9D                     	;# 
   520  0D9E                     	;# 
   521  0D9F                     	;# 
   522  0DA0                     	;# 
   523  0DA1                     	;# 
   524  0DA1                     	;# 
   525  0DA2                     	;# 
   526  0DA3                     	;# 
   527  0DA3                     	;# 
   528  0DA4                     	;# 
   529  0DA5                     	;# 
   530  0DA5                     	;# 
   531  0DA6                     	;# 
   532  0DA7                     	;# 
   533  0DA7                     	;# 
   534  0DA8                     	;# 
   535  0DA9                     	;# 
   536  0DA9                     	;# 
   537  0DAA                     	;# 
   538  0DAB                     	;# 
   539  0DAC                     	;# 
   540  0DAC                     	;# 
   541  0DAD                     	;# 
   542  0DAD                     	;# 
   543  0DAE                     	;# 
   544  0DAF                     	;# 
   545  0DB0                     	;# 
   546  0DB1                     	;# 
   547  0DB1                     	;# 
   548  0DB2                     	;# 
   549  0DB3                     	;# 
   550  0DB3                     	;# 
   551  0DB4                     	;# 
   552  0DB5                     	;# 
   553  0DB5                     	;# 
   554  0DB6                     	;# 
   555  0DB7                     	;# 
   556  0DB7                     	;# 
   557  0DB8                     	;# 
   558  0DB9                     	;# 
   559  0DB9                     	;# 
   560  0DBA                     	;# 
   561  0DBB                     	;# 
   562  0DBC                     	;# 
   563  0DBC                     	;# 
   564  0DBD                     	;# 
   565  0DBD                     	;# 
   566  0DBE                     	;# 
   567  0DBF                     	;# 
   568  0DC0                     	;# 
   569  0FE4                     	;# 
   570  0FE5                     	;# 
   571  0FE6                     	;# 
   572  0FE7                     	;# 
   573  0FE8                     	;# 
   574  0FE8                     	;# 
   575  0FE9                     	;# 
   576  0FEA                     	;# 
   577  0FEA                     	;# 
   578  0FEB                     	;# 
   579  0FED                     	;# 
   580  0FEE                     	;# 
   581  0FEE                     	;# 
   582  0FEF                     	;# 
   583  0000                     	;# 
   584  0001                     	;# 
   585  0002                     	;# 
   586  0003                     	;# 
   587  0004                     	;# 
   588  0005                     	;# 
   589  0006                     	;# 
   590  0007                     	;# 
   591  0008                     	;# 
   592  0009                     	;# 
   593  000A                     	;# 
   594  000B                     	;# 
   595  000C                     	;# 
   596  0011                     	;# 
   597  0012                     	;# 
   598  0013                     	;# 
   599  0015                     	;# 
   600  0016                     	;# 
   601  0016                     	;# 
   602  0017                     	;# 
   603  0018                     	;# 
   604  0019                     	;# 
   605  001A                     	;# 
   606  001B                     	;# 
   607  001C                     	;# 
   608  008C                     	;# 
   609  0091                     	;# 
   610  0092                     	;# 
   611  0093                     	;# 
   612  0095                     	;# 
   613  0096                     	;# 
   614  0097                     	;# 
   615  0098                     	;# 
   616  0099                     	;# 
   617  009A                     	;# 
   618  009B                     	;# 
   619  009B                     	;# 
   620  009C                     	;# 
   621  009D                     	;# 
   622  009E                     	;# 
   623  009F                     	;# 
   624  010C                     	;# 
   625  0111                     	;# 
   626  0112                     	;# 
   627  0115                     	;# 
   628  0116                     	;# 
   629  0117                     	;# 
   630  0118                     	;# 
   631  0119                     	;# 
   632  011D                     	;# 
   633  011D                     	;# 
   634  018C                     	;# 
   635  0191                     	;# 
   636  0191                     	;# 
   637  0192                     	;# 
   638  0193                     	;# 
   639  0193                     	;# 
   640  0194                     	;# 
   641  0195                     	;# 
   642  0196                     	;# 
   643  0197                     	;# 
   644  0199                     	;# 
   645  019A                     	;# 
   646  019B                     	;# 
   647  019B                     	;# 
   648  019C                     	;# 
   649  019D                     	;# 
   650  019E                     	;# 
   651  019F                     	;# 
   652  020C                     	;# 
   653  028C                     	;# 
   654  030C                     	;# 
   655  038C                     	;# 
   656  0391                     	;# 
   657  0392                     	;# 
   658  0393                     	;# 
   659  0691                     	;# 
   660  0692                     	;# 
   661  0693                     	;# 
   662  0694                     	;# 
   663  0695                     	;# 
   664  0D8E                     	;# 
   665  0D8F                     	;# 
   666  0D90                     	;# 
   667  0D91                     	;# 
   668  0D91                     	;# 
   669  0D92                     	;# 
   670  0D93                     	;# 
   671  0D93                     	;# 
   672  0D94                     	;# 
   673  0D95                     	;# 
   674  0D95                     	;# 
   675  0D96                     	;# 
   676  0D97                     	;# 
   677  0D97                     	;# 
   678  0D98                     	;# 
   679  0D99                     	;# 
   680  0D99                     	;# 
   681  0D9A                     	;# 
   682  0D9B                     	;# 
   683  0D9C                     	;# 
   684  0D9C                     	;# 
   685  0D9D                     	;# 
   686  0D9D                     	;# 
   687  0D9E                     	;# 
   688  0D9F                     	;# 
   689  0DA0                     	;# 
   690  0DA1                     	;# 
   691  0DA1                     	;# 
   692  0DA2                     	;# 
   693  0DA3                     	;# 
   694  0DA3                     	;# 
   695  0DA4                     	;# 
   696  0DA5                     	;# 
   697  0DA5                     	;# 
   698  0DA6                     	;# 
   699  0DA7                     	;# 
   700  0DA7                     	;# 
   701  0DA8                     	;# 
   702  0DA9                     	;# 
   703  0DA9                     	;# 
   704  0DAA                     	;# 
   705  0DAB                     	;# 
   706  0DAC                     	;# 
   707  0DAC                     	;# 
   708  0DAD                     	;# 
   709  0DAD                     	;# 
   710  0DAE                     	;# 
   711  0DAF                     	;# 
   712  0DB0                     	;# 
   713  0DB1                     	;# 
   714  0DB1                     	;# 
   715  0DB2                     	;# 
   716  0DB3                     	;# 
   717  0DB3                     	;# 
   718  0DB4                     	;# 
   719  0DB5                     	;# 
   720  0DB5                     	;# 
   721  0DB6                     	;# 
   722  0DB7                     	;# 
   723  0DB7                     	;# 
   724  0DB8                     	;# 
   725  0DB9                     	;# 
   726  0DB9                     	;# 
   727  0DBA                     	;# 
   728  0DBB                     	;# 
   729  0DBC                     	;# 
   730  0DBC                     	;# 
   731  0DBD                     	;# 
   732  0DBD                     	;# 
   733  0DBE                     	;# 
   734  0DBF                     	;# 
   735  0DC0                     	;# 
   736  0FE4                     	;# 
   737  0FE5                     	;# 
   738  0FE6                     	;# 
   739  0FE7                     	;# 
   740  0FE8                     	;# 
   741  0FE8                     	;# 
   742  0FE9                     	;# 
   743  0FEA                     	;# 
   744  0FEA                     	;# 
   745  0FEB                     	;# 
   746  0FED                     	;# 
   747  0FEE                     	;# 
   748  0FEE                     	;# 
   749  0FEF                     	;# 
   750  0000                     	;# 
   751  0001                     	;# 
   752  0002                     	;# 
   753  0003                     	;# 
   754  0004                     	;# 
   755  0005                     	;# 
   756  0006                     	;# 
   757  0007                     	;# 
   758  0008                     	;# 
   759  0009                     	;# 
   760  000A                     	;# 
   761  000B                     	;# 
   762  000C                     	;# 
   763  0011                     	;# 
   764  0012                     	;# 
   765  0013                     	;# 
   766  0015                     	;# 
   767  0016                     	;# 
   768  0016                     	;# 
   769  0017                     	;# 
   770  0018                     	;# 
   771  0019                     	;# 
   772  001A                     	;# 
   773  001B                     	;# 
   774  001C                     	;# 
   775  008C                     	;# 
   776  0091                     	;# 
   777  0092                     	;# 
   778  0093                     	;# 
   779  0095                     	;# 
   780  0096                     	;# 
   781  0097                     	;# 
   782  0098                     	;# 
   783  0099                     	;# 
   784  009A                     	;# 
   785  009B                     	;# 
   786  009B                     	;# 
   787  009C                     	;# 
   788  009D                     	;# 
   789  009E                     	;# 
   790  009F                     	;# 
   791  010C                     	;# 
   792  0111                     	;# 
   793  0112                     	;# 
   794  0115                     	;# 
   795  0116                     	;# 
   796  0117                     	;# 
   797  0118                     	;# 
   798  0119                     	;# 
   799  011D                     	;# 
   800  011D                     	;# 
   801  018C                     	;# 
   802  0191                     	;# 
   803  0191                     	;# 
   804  0192                     	;# 
   805  0193                     	;# 
   806  0193                     	;# 
   807  0194                     	;# 
   808  0195                     	;# 
   809  0196                     	;# 
   810  0197                     	;# 
   811  0199                     	;# 
   812  019A                     	;# 
   813  019B                     	;# 
   814  019B                     	;# 
   815  019C                     	;# 
   816  019D                     	;# 
   817  019E                     	;# 
   818  019F                     	;# 
   819  020C                     	;# 
   820  028C                     	;# 
   821  030C                     	;# 
   822  038C                     	;# 
   823  0391                     	;# 
   824  0392                     	;# 
   825  0393                     	;# 
   826  0691                     	;# 
   827  0692                     	;# 
   828  0693                     	;# 
   829  0694                     	;# 
   830  0695                     	;# 
   831  0D8E                     	;# 
   832  0D8F                     	;# 
   833  0D90                     	;# 
   834  0D91                     	;# 
   835  0D91                     	;# 
   836  0D92                     	;# 
   837  0D93                     	;# 
   838  0D93                     	;# 
   839  0D94                     	;# 
   840  0D95                     	;# 
   841  0D95                     	;# 
   842  0D96                     	;# 
   843  0D97                     	;# 
   844  0D97                     	;# 
   845  0D98                     	;# 
   846  0D99                     	;# 
   847  0D99                     	;# 
   848  0D9A                     	;# 
   849  0D9B                     	;# 
   850  0D9C                     	;# 
   851  0D9C                     	;# 
   852  0D9D                     	;# 
   853  0D9D                     	;# 
   854  0D9E                     	;# 
   855  0D9F                     	;# 
   856  0DA0                     	;# 
   857  0DA1                     	;# 
   858  0DA1                     	;# 
   859  0DA2                     	;# 
   860  0DA3                     	;# 
   861  0DA3                     	;# 
   862  0DA4                     	;# 
   863  0DA5                     	;# 
   864  0DA5                     	;# 
   865  0DA6                     	;# 
   866  0DA7                     	;# 
   867  0DA7                     	;# 
   868  0DA8                     	;# 
   869  0DA9                     	;# 
   870  0DA9                     	;# 
   871  0DAA                     	;# 
   872  0DAB                     	;# 
   873  0DAC                     	;# 
   874  0DAC                     	;# 
   875  0DAD                     	;# 
   876  0DAD                     	;# 
   877  0DAE                     	;# 
   878  0DAF                     	;# 
   879  0DB0                     	;# 
   880  0DB1                     	;# 
   881  0DB1                     	;# 
   882  0DB2                     	;# 
   883  0DB3                     	;# 
   884  0DB3                     	;# 
   885  0DB4                     	;# 
   886  0DB5                     	;# 
   887  0DB5                     	;# 
   888  0DB6                     	;# 
   889  0DB7                     	;# 
   890  0DB7                     	;# 
   891  0DB8                     	;# 
   892  0DB9                     	;# 
   893  0DB9                     	;# 
   894  0DBA                     	;# 
   895  0DBB                     	;# 
   896  0DBC                     	;# 
   897  0DBC                     	;# 
   898  0DBD                     	;# 
   899  0DBD                     	;# 
   900  0DBE                     	;# 
   901  0DBF                     	;# 
   902  0DC0                     	;# 
   903  0FE4                     	;# 
   904  0FE5                     	;# 
   905  0FE6                     	;# 
   906  0FE7                     	;# 
   907  0FE8                     	;# 
   908  0FE8                     	;# 
   909  0FE9                     	;# 
   910  0FEA                     	;# 
   911  0FEA                     	;# 
   912  0FEB                     	;# 
   913  0FED                     	;# 
   914  0FEE                     	;# 
   915  0FEE                     	;# 
   916  0FEF                     	;# 
   917                           
   918                           	psect	idataBANK0
   919  03AE                     __pidataBANK0:	
   920                           
   921                           ;initializer for _PORTTable
   922  03AE  3401               	retlw	1
   923  03AF  3402               	retlw	2
   924  03B0  3410               	retlw	16
   925  03B1  3420               	retlw	32
   926  03B2  3420               	retlw	32
   927  03B3  3401               	retlw	1
   928  03B4  3410               	retlw	16
   929  03B5  3402               	retlw	2
   930                           
   931                           ;initializer for _TRISTable
   932  03B6  34FC               	retlw	252
   933  03B7  34FC               	retlw	252
   934  03B8  34CF               	retlw	207
   935  03B9  34CF               	retlw	207
   936  03BA  34DE               	retlw	222
   937  03BB  34DE               	retlw	222
   938  03BC  34ED               	retlw	237
   939  03BD  34ED               	retlw	237
   940                           
   941                           ;initializer for RunLeftFlash@left_delay
   942  03BE  34FA               	retlw	250
   943  03BF  3400               	retlw	0
   944                           
   945                           ;initializer for RunRightFlash@right_delay
   946  03C0  34FA               	retlw	250
   947  03C1  3400               	retlw	0
   948                           
   949                           	psect	nvBANK0
   950  0065                     __pnvBANK0:	
   951  0065                     _TMR0_InterruptHandler:	
   952  0065                     	ds	2
   953  0067                     _IOCAF3_InterruptHandler:	
   954  0067                     	ds	2
   955  0069                     _IOCAF2_InterruptHandler:	
   956  0069                     	ds	2
   957  006B                     _timer0ReloadVal:	
   958  006B                     	ds	1
   959  000C                     _PORTAbits	set	12
   960  000C                     _PORTA	set	12
   961  0015                     _TMR0	set	21
   962  000B                     _INTCONbits	set	11
   963  0095                     _OPTION_REG	set	149
   964  0097                     _WDTCON	set	151
   965  0098                     _OSCTUNE	set	152
   966  0099                     _OSCCON	set	153
   967  0095                     _OPTION_REGbits	set	149
   968  008C                     _TRISA	set	140
   969  0116                     _BORCON	set	278
   970  011D                     _APFCON	set	285
   971  010C                     _LATA	set	268
   972  0197                     _VREGCONbits	set	407
   973  018C                     _ANSELA	set	396
   974  020C                     _WPUA	set	524
   975  028C                     _ODCONA	set	652
   976  0391                     _IOCAPbits	set	913
   977  0392                     _IOCANbits	set	914
   978  0393                     _IOCAFbits	set	915
   979                           
   980                           ; #config settings
   981  0000                     
   982                           	psect	cinit
   983  0018                     start_initialization:	
   984  0018                     __initialization:	
   985                           
   986                           ; Initialize objects allocated to BANK0
   987  0018  30AE               	movlw	low __pidataBANK0
   988  0019  0084               	movwf	4
   989  001A  3083               	movlw	(high __pidataBANK0)| (0+128)
   990  001B  0085               	movwf	5
   991  001C  3041               	movlw	low __pdataBANK0
   992  001D  0086               	movwf	6
   993  001E  3000               	movlw	high __pdataBANK0
   994  001F  0087               	movwf	7
   995  0020  3014               	movlw	20
   996  0021  2454               	fcall	init_ram
   997                           
   998                           ; Clear objects allocated to COMMON
   999  0022  01F6               	clrf	__pbssCOMMON& (0+127)
  1000  0023  01F7               	clrf	(__pbssCOMMON+1)& (0+127)
  1001  0024  01F8               	clrf	(__pbssCOMMON+2)& (0+127)
  1002  0025  01F9               	clrf	(__pbssCOMMON+3)& (0+127)
  1003                           
  1004                           ; Clear objects allocated to BANK0
  1005  0026  3020               	movlw	low __pbssBANK0
  1006  0027  0084               	movwf	4
  1007  0028  3000               	movlw	high __pbssBANK0
  1008  0029  0085               	movwf	5
  1009  002A  3021               	movlw	33
  1010  002B  245A               	fcall	clear_ram0
  1011  002C                     end_of_initialization:	
  1012                           ;End of C runtime variable initialization code
  1013                           
  1014  002C                     __end_of__initialization:	
  1015  002C  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  1016  002D  0020               	movlb	0
  1017  002E  2AD9               	ljmp	_main	;jump to C main() function
  1018                           
  1019                           	psect	bssCOMMON
  1020  0076                     __pbssCOMMON:	
  1021  0076                     _RightButtonState:	
  1022  0076                     	ds	1
  1023  0077                     _LeftButtonState:	
  1024  0077                     	ds	1
  1025  0078                     _RightDebounceTimer:	
  1026  0078                     	ds	1
  1027  0079                     _LeftDebounceTimer:	
  1028  0079                     	ds	1
  1029                           
  1030                           	psect	bssBANK0
  1031  0020                     __pbssBANK0:	
  1032  0020                     _PatternDelay:	
  1033  0020                     	ds	16
  1034  0030                     _PatternState:	
  1035  0030                     	ds	8
  1036  0038                     _WakeTimer:	
  1037  0038                     	ds	4
  1038  003C                     CheckForButtonPushes@LastRightButtonState:	
  1039  003C                     	ds	1
  1040  003D                     CheckForButtonPushes@LastLeftButtonState:	
  1041  003D                     	ds	1
  1042  003E                     _ShutdownDelayTimer:	
  1043  003E                     	ds	1
  1044  003F                     _LEDOns:	
  1045  003F                     	ds	1
  1046  0040                     _LEDState:	
  1047  0040                     	ds	1
  1048                           
  1049                           	psect	dataBANK0
  1050  0041                     __pdataBANK0:	
  1051  0041                     _PORTTable:	
  1052  0041                     	ds	8
  1053  0049                     _TRISTable:	
  1054  0049                     	ds	8
  1055  0051                     RunLeftFlash@left_delay:	
  1056  0051                     	ds	2
  1057  0053                     RunRightFlash@right_delay:	
  1058  0053                     	ds	2
  1059                           
  1060                           	psect	inittext
  1061  0454                     init_ram:	
  1062  0454  00FE               	movwf	126
  1063  0455                     initloop:	
  1064  0455  0012               	moviw fsr0++
  1065  0456  001E               	movwi fsr1++
  1066  0457  0BFE               	decfsz	126,f
  1067  0458  2C55               	goto	initloop
  1068  0459  3400               	retlw	0
  1069                           
  1070                           	psect	clrtext
  1071  045A                     clear_ram0:	
  1072                           ;	Called with FSR0 containing the base address, and
  1073                           ;	WREG with the size to clear
  1074                           
  1075  045A  0064               	clrwdt	;clear the watchdog before getting into this loop
  1076  045B                     clrloop0:	
  1077  045B  0180               	clrf	0	;clear RAM location pointed to by FSR
  1078  045C  3101               	addfsr 0,1
  1079  045D  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  1080  045E  2C5B               	goto	clrloop0	;have we reached the end yet?
  1081  045F  3400               	retlw	0	;all done for this memory range, return
  1082                           
  1083                           	psect	cstackCOMMON
  1084  0070                     __pcstackCOMMON:	
  1085  0070                     ?_IOCAF2_DefaultInterruptHandler:	
  1086  0070                     ??_IOCAF2_DefaultInterruptHandler:	
  1087                           ; 1 bytes @ 0x0
  1088                           
  1089  0070                     ?_IOCAF3_DefaultInterruptHandler:	
  1090                           ; 1 bytes @ 0x0
  1091                           
  1092  0070                     ??_IOCAF3_DefaultInterruptHandler:	
  1093                           ; 1 bytes @ 0x0
  1094                           
  1095  0070                     ?_IOCAF2_ISR:	
  1096                           ; 1 bytes @ 0x0
  1097                           
  1098  0070                     ??_IOCAF2_ISR:	
  1099                           ; 1 bytes @ 0x0
  1100                           
  1101  0070                     ?_IOCAF3_ISR:	
  1102                           ; 1 bytes @ 0x0
  1103                           
  1104  0070                     ??_IOCAF3_ISR:	
  1105                           ; 1 bytes @ 0x0
  1106                           
  1107  0070                     ?_OSCILLATOR_Initialize:	
  1108                           ; 1 bytes @ 0x0
  1109                           
  1110  0070                     ?_WDT_Initialize:	
  1111                           ; 1 bytes @ 0x0
  1112                           
  1113  0070                     ?_TMR0_Initialize:	
  1114                           ; 1 bytes @ 0x0
  1115                           
  1116  0070                     ?_TMR0_ISR:	
  1117                           ; 1 bytes @ 0x0
  1118                           
  1119  0070                     ?_TMR0_CallBack:	
  1120                           ; 1 bytes @ 0x0
  1121                           
  1122  0070                     ?_PIN_MANAGER_Initialize:	
  1123                           ; 1 bytes @ 0x0
  1124                           
  1125  0070                     ?_PIN_MANAGER_IOC:	
  1126                           ; 1 bytes @ 0x0
  1127                           
  1128  0070                     ??_PIN_MANAGER_IOC:	
  1129                           ; 1 bytes @ 0x0
  1130                           
  1131  0070                     ?_SYSTEM_Initialize:	
  1132                           ; 1 bytes @ 0x0
  1133                           
  1134  0070                     ?_INTERRUPT_InterruptManager:	
  1135                           ; 1 bytes @ 0x0
  1136                           
  1137  0070                     ?_SetLEDOn:	
  1138                           ; 1 bytes @ 0x0
  1139                           
  1140  0070                     ?_SetLEDOff:	
  1141                           ; 1 bytes @ 0x0
  1142                           
  1143  0070                     ?_SetAllLEDsOff:	
  1144                           ; 1 bytes @ 0x0
  1145                           
  1146  0070                     ?_TMR0_Callback:	
  1147                           ; 1 bytes @ 0x0
  1148                           
  1149  0070                     ??_TMR0_Callback:	
  1150                           ; 1 bytes @ 0x0
  1151                           
  1152  0070                     ?_RightButtonPressedRaw:	
  1153                           ; 1 bytes @ 0x0
  1154                           
  1155  0070                     ?_LeftButtonPressedRaw:	
  1156                           ; 1 bytes @ 0x0
  1157                           
  1158  0070                     ?_RightButtonPressed:	
  1159                           ; 1 bytes @ 0x0
  1160                           
  1161  0070                     ?_LeftButtonPressed:	
  1162                           ; 1 bytes @ 0x0
  1163                           
  1164  0070                     ?_RunRightFlash:	
  1165                           ; 1 bytes @ 0x0
  1166                           
  1167  0070                     ?_RunLeftFlash:	
  1168                           ; 1 bytes @ 0x0
  1169                           
  1170  0070                     ?_CheckForButtonPushes:	
  1171                           ; 1 bytes @ 0x0
  1172                           
  1173  0070                     ?_main:	
  1174                           ; 1 bytes @ 0x0
  1175                           
  1176                           
  1177                           ; 1 bytes @ 0x0
  1178  0070                     	ds	2
  1179  0072                     TMR0_Callback@i:	
  1180                           
  1181                           ; 1 bytes @ 0x2
  1182  0072                     	ds	1
  1183  0073                     ??_TMR0_ISR:	
  1184  0073                     ??_TMR0_CallBack:	
  1185                           ; 1 bytes @ 0x3
  1186                           
  1187  0073                     ??_INTERRUPT_InterruptManager:	
  1188                           ; 1 bytes @ 0x3
  1189                           
  1190                           
  1191                           ; 1 bytes @ 0x3
  1192  0073                     	ds	1
  1193  0074                     ?_IOCAF2_SetInterruptHandler:	
  1194  0074                     ?_IOCAF3_SetInterruptHandler:	
  1195                           ; 1 bytes @ 0x4
  1196                           
  1197  0074                     ??_OSCILLATOR_Initialize:	
  1198                           ; 1 bytes @ 0x4
  1199                           
  1200  0074                     ??_WDT_Initialize:	
  1201                           ; 1 bytes @ 0x4
  1202                           
  1203  0074                     ??_TMR0_Initialize:	
  1204                           ; 1 bytes @ 0x4
  1205                           
  1206  0074                     ?_TMR0_SetInterruptHandler:	
  1207                           ; 1 bytes @ 0x4
  1208                           
  1209  0074                     ??_SetLEDOn:	
  1210                           ; 1 bytes @ 0x4
  1211                           
  1212  0074                     ??_SetLEDOff:	
  1213                           ; 1 bytes @ 0x4
  1214                           
  1215  0074                     ??_SetAllLEDsOff:	
  1216                           ; 1 bytes @ 0x4
  1217                           
  1218  0074                     ??_RightButtonPressedRaw:	
  1219                           ; 1 bytes @ 0x4
  1220                           
  1221  0074                     ??_LeftButtonPressedRaw:	
  1222                           ; 1 bytes @ 0x4
  1223                           
  1224  0074                     ??_RightButtonPressed:	
  1225                           ; 1 bytes @ 0x4
  1226                           
  1227  0074                     ??_LeftButtonPressed:	
  1228                           ; 1 bytes @ 0x4
  1229                           
  1230  0074                     ??_CheckForButtonPushes:	
  1231                           ; 1 bytes @ 0x4
  1232                           
  1233  0074                     ??___wmul:	
  1234                           ; 1 bytes @ 0x4
  1235                           
  1236  0074                     IOCAF2_SetInterruptHandler@InterruptHandler:	
  1237                           ; 1 bytes @ 0x4
  1238                           
  1239  0074                     IOCAF3_SetInterruptHandler@InterruptHandler:	
  1240                           ; 2 bytes @ 0x4
  1241                           
  1242  0074                     TMR0_SetInterruptHandler@InterruptHandler:	
  1243                           ; 2 bytes @ 0x4
  1244                           
  1245  0074                     ___wmul@product:	
  1246                           ; 2 bytes @ 0x4
  1247                           
  1248                           
  1249                           ; 2 bytes @ 0x4
  1250  0074                     	ds	1
  1251  0075                     SetLEDOn@LED:	
  1252  0075                     SetLEDOff@LED:	
  1253                           ; 1 bytes @ 0x5
  1254                           
  1255  0075                     _CheckForButtonPushes$429:	
  1256                           ; 1 bytes @ 0x5
  1257                           
  1258                           
  1259                           ; 1 bytes @ 0x5
  1260  0075                     	ds	1
  1261  0076                     ??_IOCAF2_SetInterruptHandler:	
  1262  0076                     ??_IOCAF3_SetInterruptHandler:	
  1263                           ; 1 bytes @ 0x6
  1264                           
  1265  0076                     ??_PIN_MANAGER_Initialize:	
  1266                           ; 1 bytes @ 0x6
  1267                           
  1268  0076                     ??_SYSTEM_Initialize:	
  1269                           ; 1 bytes @ 0x6
  1270                           
  1271  0076                     ??_TMR0_SetInterruptHandler:	
  1272                           ; 1 bytes @ 0x6
  1273                           
  1274                           
  1275                           	psect	cstackBANK0
  1276  0055                     __pcstackBANK0:	
  1277                           ; 1 bytes @ 0x6
  1278                           
  1279  0055                     ?___wmul:	
  1280  0055                     ___wmul@multiplier:	
  1281                           ; 2 bytes @ 0x0
  1282                           
  1283                           
  1284                           ; 2 bytes @ 0x0
  1285  0055                     	ds	2
  1286  0057                     ___wmul@multiplicand:	
  1287                           
  1288                           ; 2 bytes @ 0x2
  1289  0057                     	ds	2
  1290  0059                     ?___lwdiv:	
  1291  0059                     ___lwdiv@divisor:	
  1292                           ; 2 bytes @ 0x4
  1293                           
  1294                           
  1295                           ; 2 bytes @ 0x4
  1296  0059                     	ds	2
  1297  005B                     ___lwdiv@dividend:	
  1298                           
  1299                           ; 2 bytes @ 0x6
  1300  005B                     	ds	2
  1301  005D                     ??___lwdiv:	
  1302                           
  1303                           ; 1 bytes @ 0x8
  1304  005D                     	ds	1
  1305  005E                     ___lwdiv@quotient:	
  1306                           
  1307                           ; 2 bytes @ 0x9
  1308  005E                     	ds	2
  1309  0060                     ___lwdiv@counter:	
  1310                           
  1311                           ; 1 bytes @ 0xB
  1312  0060                     	ds	1
  1313  0061                     ??_RunRightFlash:	
  1314  0061                     ??_RunLeftFlash:	
  1315                           ; 1 bytes @ 0xC
  1316                           
  1317                           
  1318                           ; 1 bytes @ 0xC
  1319  0061                     	ds	1
  1320  0062                     ??_main:	
  1321                           
  1322                           ; 1 bytes @ 0xD
  1323  0062                     	ds	1
  1324  0063                     main@APatternIsRunning:	
  1325                           
  1326                           ; 1 bytes @ 0xE
  1327  0063                     	ds	1
  1328  0064                     main@i:	
  1329                           
  1330                           ; 1 bytes @ 0xF
  1331  0064                     	ds	1
  1332                           
  1333                           	psect	maintext
  1334  02D9                     __pmaintext:	
  1335 ;;
  1336 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  1337 ;;
  1338 ;; *************** function _main *****************
  1339 ;; Defined at:
  1340 ;;		line 647 in file "main.c"
  1341 ;; Parameters:    Size  Location     Type
  1342 ;;		None
  1343 ;; Auto vars:     Size  Location     Type
  1344 ;;  i               1   15[BANK0 ] unsigned char 
  1345 ;;  APatternIsRu    1   14[BANK0 ] unsigned char 
  1346 ;; Return value:  Size  Location     Type
  1347 ;;                  1    wreg      void 
  1348 ;; Registers used:
  1349 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1350 ;; Tracked objects:
  1351 ;;		On entry : B1F/0
  1352 ;;		On exit  : 0/0
  1353 ;;		Unchanged: 0/0
  1354 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1355 ;;      Params:         0       0       0       0
  1356 ;;      Locals:         0       2       0       0
  1357 ;;      Temps:          0       1       0       0
  1358 ;;      Totals:         0       3       0       0
  1359 ;;Total ram usage:        3 bytes
  1360 ;; Hardware stack levels required when called:    7
  1361 ;; This function calls:
  1362 ;;		_CheckForButtonPushes
  1363 ;;		_RunLeftFlash
  1364 ;;		_RunRightFlash
  1365 ;;		_SYSTEM_Initialize
  1366 ;;		_SetAllLEDsOff
  1367 ;;		_TMR0_SetInterruptHandler
  1368 ;; This function is called by:
  1369 ;;		Startup code after reset
  1370 ;; This function uses a non-reentrant model
  1371 ;;
  1372                           
  1373                           
  1374                           ;psect for function _main
  1375  02D9                     _main:	
  1376                           
  1377                           ;main.c: 650: SYSTEM_Initialize();
  1378                           
  1379                           ;incstack = 0
  1380                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1381  02D9  2478               	fcall	_SYSTEM_Initialize
  1382                           
  1383                           ;main.c: 652: TMR0_SetInterruptHandler(TMR0_Callback);
  1384  02DA  3076               	movlw	low _TMR0_Callback
  1385  02DB  00F4               	movwf	TMR0_SetInterruptHandler@InterruptHandler
  1386  02DC  3002               	movlw	high _TMR0_Callback
  1387  02DD  00F5               	movwf	TMR0_SetInterruptHandler@InterruptHandler+1
  1388  02DE  2460               	fcall	_TMR0_SetInterruptHandler
  1389                           
  1390                           ;main.c: 658: (INTCONbits.GIE = 1);
  1391  02DF  178B               	bsf	11,7	;volatile
  1392                           
  1393                           ;main.c: 661: (INTCONbits.PEIE = 1);
  1394  02E0  170B               	bsf	11,6	;volatile
  1395                           
  1396                           ;main.c: 669: uint8_t i;
  1397                           ;main.c: 670: bool APatternIsRunning = 0;
  1398  02E1  0020               	movlb	0	; select bank0
  1399  02E2  01E3               	clrf	main@APatternIsRunning
  1400  02E3                     l1864:	
  1401                           ;main.c: 672: while (1)
  1402                           
  1403                           
  1404                           ;main.c: 673: {
  1405                           ;main.c: 674: RunRightFlash();
  1406  02E3  202F               	fcall	_RunRightFlash
  1407                           
  1408                           ;main.c: 675: RunLeftFlash();
  1409  02E4  2111               	fcall	_RunLeftFlash
  1410                           
  1411                           ;main.c: 677: APatternIsRunning = 0;
  1412  02E5  0020               	movlb	0	; select bank0
  1413  02E6  01E3               	clrf	main@APatternIsRunning
  1414                           
  1415                           ;main.c: 678: for (i=0; i < 8; i++)
  1416  02E7  01E4               	clrf	main@i
  1417  02E8  3008               	movlw	8
  1418  02E9  0264               	subwf	main@i,w
  1419  02EA  1803               	btfsc	3,0
  1420  02EB  2AFD               	goto	l1884
  1421  02EC                     l1876:	
  1422                           
  1423                           ;main.c: 679: {
  1424                           ;main.c: 680: if (PatternState[i] != 0)
  1425  02EC  0864               	movf	main@i,w
  1426  02ED  3E30               	addlw	(low (_PatternState| 0))& (0+255)
  1427  02EE  0086               	movwf	6
  1428  02EF  0187               	clrf	7
  1429  02F0  0801               	movf	1,w
  1430  02F1  1903               	btfsc	3,2
  1431  02F2  2AF5               	goto	l1880
  1432                           
  1433                           ;main.c: 681: {
  1434                           ;main.c: 682: APatternIsRunning = 1;
  1435  02F3  01E3               	clrf	main@APatternIsRunning
  1436  02F4  0AE3               	incf	main@APatternIsRunning,f
  1437  02F5                     l1880:	
  1438  02F5  3001               	movlw	1
  1439  02F6  00E2               	movwf	??_main
  1440  02F7  0862               	movf	??_main,w
  1441  02F8  07E4               	addwf	main@i,f
  1442  02F9  3008               	movlw	8
  1443  02FA  0264               	subwf	main@i,w
  1444  02FB  1C03               	skipc
  1445  02FC  2AEC               	goto	l1876
  1446  02FD                     l1884:	
  1447                           
  1448                           ;main.c: 683: }
  1449                           ;main.c: 684: }
  1450                           ;main.c: 685: if ((!APatternIsRunning && RightDebounceTimer == 0 && LeftDebounceTimer ==
      +                           0) || (WakeTimer > (5UL * 60UL * 1000UL)))
  1451  02FD  0863               	movf	main@APatternIsRunning,w
  1452  02FE  1D03               	btfss	3,2
  1453  02FF  2B05               	goto	l1890
  1454  0300  0878               	movf	_RightDebounceTimer,w	;volatile
  1455  0301  1903               	btfsc	3,2
  1456  0302  0879               	movf	_LeftDebounceTimer,w	;volatile
  1457  0303  1903               	btfsc	3,2
  1458  0304  2B10               	goto	l1892
  1459  0305                     l1890:	
  1460  0305  083B               	movf	_WakeTimer+3,w	;volatile
  1461  0306  1D03               	btfss	3,2
  1462  0307  2B10               	goto	l1892
  1463  0308  30E1               	movlw	225
  1464  0309  0238               	subwf	_WakeTimer,w	;volatile
  1465  030A  3093               	movlw	147
  1466  030B  3B39               	subwfb	_WakeTimer+1,w	;volatile
  1467  030C  3004               	movlw	4
  1468  030D  3B3A               	subwfb	_WakeTimer+2,w	;volatile
  1469  030E  1C03               	btfss	3,0
  1470  030F  2B37               	goto	l1908
  1471  0310                     l1892:	
  1472                           
  1473                           ;main.c: 686: {
  1474                           ;main.c: 687: SetAllLEDsOff();
  1475  0310  2481               	fcall	_SetAllLEDsOff
  1476                           
  1477                           ;main.c: 689: _delay((unsigned long)((5)*(16000000/4000.0)));
  1478  0311  301A               	movlw	26
  1479  0312  0020               	movlb	0	; select bank0
  1480  0313  00E2               	movwf	??_main
  1481  0314  30F8               	movlw	248
  1482  0315                     u1897:	
  1483  0315  0B89               	decfsz	9,f
  1484  0316  2B15               	goto	u1897
  1485  0317  0BE2               	decfsz	??_main,f
  1486  0318  2B15               	goto	u1897
  1487  0319  0000               	nop
  1488                           
  1489                           ;main.c: 691: ShutdownDelayTimer = 100;
  1490  031A  3064               	movlw	100
  1491  031B  0020               	movlb	0	; select bank0
  1492  031C  00E2               	movwf	??_main
  1493  031D  0862               	movf	??_main,w
  1494  031E  00BE               	movwf	_ShutdownDelayTimer	;volatile
  1495  031F                     l1898:	
  1496                           ;main.c: 694: {
  1497                           
  1498                           ;main.c: 693: while (ShutdownDelayTimer && !CheckForButtonPushes())
  1499                           
  1500  031F  0020               	movlb	0	; select bank0
  1501  0320  083E               	movf	_ShutdownDelayTimer,w	;volatile
  1502  0321  1903               	btfsc	3,2
  1503  0322  2B27               	goto	l1902
  1504  0323  21F3               	fcall	_CheckForButtonPushes
  1505  0324  3A00               	xorlw	0
  1506  0325  1903               	skipnz
  1507  0326  2B1F               	goto	l1898
  1508  0327                     l1902:	
  1509                           
  1510                           ;main.c: 695: }
  1511                           ;main.c: 697: if (ShutdownDelayTimer == 0)
  1512  0327  0020               	movlb	0	; select bank0
  1513  0328  083E               	movf	_ShutdownDelayTimer,w	;volatile
  1514  0329  1D03               	btfss	3,2
  1515  032A  2B37               	goto	l1908
  1516                           
  1517                           ;main.c: 698: {
  1518                           ;main.c: 700: VREGCONbits.VREGPM = 1;
  1519  032B  0023               	movlb	3	; select bank3
  1520  032C  1497               	bsf	23,1	;volatile
  1521  032D  0063               	sleep	;# 
  1522                           
  1523                           ;main.c: 705: WakeTimer = 0;
  1524  032E  3000               	movlw	0
  1525  032F  0020               	movlb	0	; select bank0
  1526  0330  00BB               	movwf	_WakeTimer+3	;volatile
  1527  0331  3000               	movlw	0
  1528  0332  00BA               	movwf	_WakeTimer+2	;volatile
  1529  0333  3000               	movlw	0
  1530  0334  00B9               	movwf	_WakeTimer+1	;volatile
  1531  0335  3000               	movlw	0
  1532  0336  00B8               	movwf	_WakeTimer	;volatile
  1533  0337                     l1908:	
  1534                           
  1535                           ;main.c: 706: }
  1536                           ;main.c: 707: }
  1537                           ;main.c: 709: CheckForButtonPushes();
  1538  0337  21F3               	fcall	_CheckForButtonPushes
  1539  0338  2AE3               	goto	l1864
  1540  0339                     __end_of_main:	
  1541                           
  1542                           	psect	text1
  1543  0460                     __ptext1:	
  1544 ;; *************** function _TMR0_SetInterruptHandler *****************
  1545 ;; Defined at:
  1546 ;;		line 133 in file "mcc_generated_files/tmr0.c"
  1547 ;; Parameters:    Size  Location     Type
  1548 ;;  InterruptHan    2    4[COMMON] PTR FTN()void 
  1549 ;;		 -> TMR0_Callback(1), 
  1550 ;; Auto vars:     Size  Location     Type
  1551 ;;		None
  1552 ;; Return value:  Size  Location     Type
  1553 ;;                  1    wreg      void 
  1554 ;; Registers used:
  1555 ;;		wreg
  1556 ;; Tracked objects:
  1557 ;;		On entry : 0/0
  1558 ;;		On exit  : 0/0
  1559 ;;		Unchanged: 0/0
  1560 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1561 ;;      Params:         2       0       0       0
  1562 ;;      Locals:         0       0       0       0
  1563 ;;      Temps:          0       0       0       0
  1564 ;;      Totals:         2       0       0       0
  1565 ;;Total ram usage:        2 bytes
  1566 ;; Hardware stack levels used:    1
  1567 ;; Hardware stack levels required when called:    4
  1568 ;; This function calls:
  1569 ;;		Nothing
  1570 ;; This function is called by:
  1571 ;;		_main
  1572 ;; This function uses a non-reentrant model
  1573 ;;
  1574                           
  1575                           
  1576                           ;psect for function _TMR0_SetInterruptHandler
  1577  0460                     _TMR0_SetInterruptHandler:	
  1578                           
  1579                           ;tmr0.c: 134: TMR0_InterruptHandler = InterruptHandler;
  1580                           
  1581                           ;incstack = 0
  1582                           ; Regs used in _TMR0_SetInterruptHandler: [wreg]
  1583  0460  0875               	movf	TMR0_SetInterruptHandler@InterruptHandler+1,w
  1584  0461  0020               	movlb	0	; select bank0
  1585  0462  00E6               	movwf	_TMR0_InterruptHandler+1
  1586  0463  0874               	movf	TMR0_SetInterruptHandler@InterruptHandler,w
  1587  0464  00E5               	movwf	_TMR0_InterruptHandler
  1588  0465  0008               	return
  1589  0466                     __end_of_TMR0_SetInterruptHandler:	
  1590                           
  1591                           	psect	text2
  1592  0481                     __ptext2:	
  1593 ;; *************** function _SetAllLEDsOff *****************
  1594 ;; Defined at:
  1595 ;;		line 199 in file "main.c"
  1596 ;; Parameters:    Size  Location     Type
  1597 ;;		None
  1598 ;; Auto vars:     Size  Location     Type
  1599 ;;		None
  1600 ;; Return value:  Size  Location     Type
  1601 ;;                  1    wreg      void 
  1602 ;; Registers used:
  1603 ;;		status,2
  1604 ;; Tracked objects:
  1605 ;;		On entry : 0/0
  1606 ;;		On exit  : 0/0
  1607 ;;		Unchanged: 0/0
  1608 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1609 ;;      Params:         0       0       0       0
  1610 ;;      Locals:         0       0       0       0
  1611 ;;      Temps:          0       0       0       0
  1612 ;;      Totals:         0       0       0       0
  1613 ;;Total ram usage:        0 bytes
  1614 ;; Hardware stack levels used:    1
  1615 ;; Hardware stack levels required when called:    4
  1616 ;; This function calls:
  1617 ;;		Nothing
  1618 ;; This function is called by:
  1619 ;;		_main
  1620 ;; This function uses a non-reentrant model
  1621 ;;
  1622                           
  1623                           
  1624                           ;psect for function _SetAllLEDsOff
  1625  0481                     _SetAllLEDsOff:	
  1626                           
  1627                           ;main.c: 201: LEDOns = 0;
  1628                           
  1629                           ;incstack = 0
  1630                           ; Regs used in _SetAllLEDsOff: [status,2]
  1631  0481  0020               	movlb	0	; select bank0
  1632  0482  01BF               	clrf	_LEDOns	;volatile
  1633  0483  0008               	return
  1634  0484                     __end_of_SetAllLEDsOff:	
  1635                           
  1636                           	psect	text3
  1637  0478                     __ptext3:	
  1638 ;; *************** function _SYSTEM_Initialize *****************
  1639 ;; Defined at:
  1640 ;;		line 68 in file "mcc_generated_files/mcc.c"
  1641 ;; Parameters:    Size  Location     Type
  1642 ;;		None
  1643 ;; Auto vars:     Size  Location     Type
  1644 ;;		None
  1645 ;; Return value:  Size  Location     Type
  1646 ;;                  1    wreg      void 
  1647 ;; Registers used:
  1648 ;;		wreg, status,2, status,0, pclath, cstack
  1649 ;; Tracked objects:
  1650 ;;		On entry : 0/0
  1651 ;;		On exit  : 0/0
  1652 ;;		Unchanged: 0/0
  1653 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1654 ;;      Params:         0       0       0       0
  1655 ;;      Locals:         0       0       0       0
  1656 ;;      Temps:          0       0       0       0
  1657 ;;      Totals:         0       0       0       0
  1658 ;;Total ram usage:        0 bytes
  1659 ;; Hardware stack levels used:    1
  1660 ;; Hardware stack levels required when called:    6
  1661 ;; This function calls:
  1662 ;;		_OSCILLATOR_Initialize
  1663 ;;		_PIN_MANAGER_Initialize
  1664 ;;		_TMR0_Initialize
  1665 ;;		_WDT_Initialize
  1666 ;; This function is called by:
  1667 ;;		_main
  1668 ;; This function uses a non-reentrant model
  1669 ;;
  1670                           
  1671                           
  1672                           ;psect for function _SYSTEM_Initialize
  1673  0478                     _SYSTEM_Initialize:	
  1674                           
  1675                           ;mcc.c: 71: PIN_MANAGER_Initialize();
  1676                           
  1677                           ;incstack = 0
  1678                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  1679  0478  236E               	fcall	_PIN_MANAGER_Initialize
  1680                           
  1681                           ;mcc.c: 72: OSCILLATOR_Initialize();
  1682  0479  243F               	fcall	_OSCILLATOR_Initialize
  1683                           
  1684                           ;mcc.c: 73: WDT_Initialize();
  1685  047A  247D               	fcall	_WDT_Initialize
  1686                           
  1687                           ;mcc.c: 74: TMR0_Initialize();
  1688  047B  23C2               	fcall	_TMR0_Initialize
  1689  047C  0008               	return
  1690  047D                     __end_of_SYSTEM_Initialize:	
  1691                           
  1692                           	psect	text4
  1693  047D                     __ptext4:	
  1694 ;; *************** function _WDT_Initialize *****************
  1695 ;; Defined at:
  1696 ;;		line 87 in file "mcc_generated_files/mcc.c"
  1697 ;; Parameters:    Size  Location     Type
  1698 ;;		None
  1699 ;; Auto vars:     Size  Location     Type
  1700 ;;		None
  1701 ;; Return value:  Size  Location     Type
  1702 ;;                  1    wreg      void 
  1703 ;; Registers used:
  1704 ;;		wreg
  1705 ;; Tracked objects:
  1706 ;;		On entry : 0/0
  1707 ;;		On exit  : 0/0
  1708 ;;		Unchanged: 0/0
  1709 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1710 ;;      Params:         0       0       0       0
  1711 ;;      Locals:         0       0       0       0
  1712 ;;      Temps:          0       0       0       0
  1713 ;;      Totals:         0       0       0       0
  1714 ;;Total ram usage:        0 bytes
  1715 ;; Hardware stack levels used:    1
  1716 ;; Hardware stack levels required when called:    4
  1717 ;; This function calls:
  1718 ;;		Nothing
  1719 ;; This function is called by:
  1720 ;;		_SYSTEM_Initialize
  1721 ;; This function uses a non-reentrant model
  1722 ;;
  1723                           
  1724                           
  1725                           ;psect for function _WDT_Initialize
  1726  047D                     _WDT_Initialize:	
  1727                           
  1728                           ;mcc.c: 90: WDTCON = 0x16;
  1729                           
  1730                           ;incstack = 0
  1731                           ; Regs used in _WDT_Initialize: [wreg]
  1732  047D  3016               	movlw	22
  1733  047E  0021               	movlb	1	; select bank1
  1734  047F  0097               	movwf	23	;volatile
  1735  0480  0008               	return
  1736  0481                     __end_of_WDT_Initialize:	
  1737                           
  1738                           	psect	text5
  1739  03C2                     __ptext5:	
  1740 ;; *************** function _TMR0_Initialize *****************
  1741 ;; Defined at:
  1742 ;;		line 65 in file "mcc_generated_files/tmr0.c"
  1743 ;; Parameters:    Size  Location     Type
  1744 ;;		None
  1745 ;; Auto vars:     Size  Location     Type
  1746 ;;		None
  1747 ;; Return value:  Size  Location     Type
  1748 ;;                  1    wreg      void 
  1749 ;; Registers used:
  1750 ;;		wreg, status,2
  1751 ;; Tracked objects:
  1752 ;;		On entry : 0/0
  1753 ;;		On exit  : 0/0
  1754 ;;		Unchanged: 0/0
  1755 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1756 ;;      Params:         0       0       0       0
  1757 ;;      Locals:         0       0       0       0
  1758 ;;      Temps:          1       0       0       0
  1759 ;;      Totals:         1       0       0       0
  1760 ;;Total ram usage:        1 bytes
  1761 ;; Hardware stack levels used:    1
  1762 ;; Hardware stack levels required when called:    4
  1763 ;; This function calls:
  1764 ;;		Nothing
  1765 ;; This function is called by:
  1766 ;;		_SYSTEM_Initialize
  1767 ;; This function uses a non-reentrant model
  1768 ;;
  1769                           
  1770                           
  1771                           ;psect for function _TMR0_Initialize
  1772  03C2                     _TMR0_Initialize:	
  1773                           
  1774                           ;tmr0.c: 70: OPTION_REG = (uint8_t)((OPTION_REG & 0xC0) | 0xD1 & 0x3F);
  1775                           
  1776                           ;incstack = 0
  1777                           ; Regs used in _TMR0_Initialize: [wreg+status,2]
  1778  03C2  0021               	movlb	1	; select bank1
  1779  03C3  0815               	movf	21,w	;volatile
  1780  03C4  39C0               	andlw	192
  1781  03C5  3811               	iorlw	17
  1782  03C6  0095               	movwf	21	;volatile
  1783                           
  1784                           ;tmr0.c: 73: TMR0 = 0x87;
  1785  03C7  3087               	movlw	135
  1786  03C8  0020               	movlb	0	; select bank0
  1787  03C9  0095               	movwf	21	;volatile
  1788                           
  1789                           ;tmr0.c: 76: timer0ReloadVal= 0x87;
  1790  03CA  3087               	movlw	135
  1791  03CB  00F4               	movwf	??_TMR0_Initialize
  1792  03CC  0874               	movf	??_TMR0_Initialize,w
  1793  03CD  00EB               	movwf	_timer0ReloadVal	;volatile
  1794                           
  1795                           ;tmr0.c: 79: INTCONbits.TMR0IF = 0;
  1796  03CE  110B               	bcf	11,2	;volatile
  1797                           
  1798                           ;tmr0.c: 82: INTCONbits.TMR0IE = 1;
  1799  03CF  168B               	bsf	11,5	;volatile
  1800  03D0  0008               	return
  1801  03D1                     __end_of_TMR0_Initialize:	
  1802                           
  1803                           	psect	text6
  1804  036E                     __ptext6:	
  1805 ;; *************** function _PIN_MANAGER_Initialize *****************
  1806 ;; Defined at:
  1807 ;;		line 55 in file "mcc_generated_files/pin_manager.c"
  1808 ;; Parameters:    Size  Location     Type
  1809 ;;		None
  1810 ;; Auto vars:     Size  Location     Type
  1811 ;;		None
  1812 ;; Return value:  Size  Location     Type
  1813 ;;                  1    wreg      void 
  1814 ;; Registers used:
  1815 ;;		wreg, status,2, status,0, pclath, cstack
  1816 ;; Tracked objects:
  1817 ;;		On entry : 0/0
  1818 ;;		On exit  : 0/0
  1819 ;;		Unchanged: 0/0
  1820 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1821 ;;      Params:         0       0       0       0
  1822 ;;      Locals:         0       0       0       0
  1823 ;;      Temps:          0       0       0       0
  1824 ;;      Totals:         0       0       0       0
  1825 ;;Total ram usage:        0 bytes
  1826 ;; Hardware stack levels used:    1
  1827 ;; Hardware stack levels required when called:    5
  1828 ;; This function calls:
  1829 ;;		_IOCAF2_SetInterruptHandler
  1830 ;;		_IOCAF3_SetInterruptHandler
  1831 ;; This function is called by:
  1832 ;;		_SYSTEM_Initialize
  1833 ;; This function uses a non-reentrant model
  1834 ;;
  1835                           
  1836                           
  1837                           ;psect for function _PIN_MANAGER_Initialize
  1838  036E                     _PIN_MANAGER_Initialize:	
  1839                           
  1840                           ;pin_manager.c: 60: LATA = 0x00;
  1841                           
  1842                           ;incstack = 0
  1843                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2+status,0+pclath+cstack]
  1844  036E  0022               	movlb	2	; select bank2
  1845  036F  018C               	clrf	12	;volatile
  1846                           
  1847                           ;pin_manager.c: 65: TRISA = 0x3F;
  1848  0370  303F               	movlw	63
  1849  0371  0021               	movlb	1	; select bank1
  1850  0372  008C               	movwf	12	;volatile
  1851                           
  1852                           ;pin_manager.c: 70: ANSELA = 0x13;
  1853  0373  3013               	movlw	19
  1854  0374  0023               	movlb	3	; select bank3
  1855  0375  008C               	movwf	12	;volatile
  1856                           
  1857                           ;pin_manager.c: 75: WPUA = 0x0C;
  1858  0376  300C               	movlw	12
  1859  0377  0024               	movlb	4	; select bank4
  1860  0378  008C               	movwf	12	;volatile
  1861                           
  1862                           ;pin_manager.c: 76: OPTION_REGbits.nWPUEN = 0;
  1863  0379  0021               	movlb	1	; select bank1
  1864  037A  1395               	bcf	21,7	;volatile
  1865                           
  1866                           ;pin_manager.c: 81: ODCONA = 0x00;
  1867  037B  0025               	movlb	5	; select bank5
  1868  037C  018C               	clrf	12	;volatile
  1869                           
  1870                           ;pin_manager.c: 86: APFCON = 0x00;
  1871  037D  0022               	movlb	2	; select bank2
  1872  037E  019D               	clrf	29	;volatile
  1873                           
  1874                           ;pin_manager.c: 92: IOCAFbits.IOCAF2 = 0;
  1875  037F  0027               	movlb	7	; select bank7
  1876  0380  1113               	bcf	19,2	;volatile
  1877                           
  1878                           ;pin_manager.c: 93: IOCAFbits.IOCAF3 = 0;
  1879  0381  1193               	bcf	19,3	;volatile
  1880                           
  1881                           ;pin_manager.c: 95: IOCANbits.IOCAN2 = 1;
  1882  0382  1512               	bsf	18,2	;volatile
  1883                           
  1884                           ;pin_manager.c: 96: IOCANbits.IOCAN3 = 1;
  1885  0383  1592               	bsf	18,3	;volatile
  1886                           
  1887                           ;pin_manager.c: 98: IOCAPbits.IOCAP2 = 1;
  1888  0384  1511               	bsf	17,2	;volatile
  1889                           
  1890                           ;pin_manager.c: 99: IOCAPbits.IOCAP3 = 1;
  1891  0385  1591               	bsf	17,3	;volatile
  1892                           
  1893                           ;pin_manager.c: 102: IOCAF2_SetInterruptHandler(IOCAF2_DefaultInterruptHandler);
  1894  0386  3085               	movlw	low _IOCAF2_DefaultInterruptHandler
  1895  0387  00F4               	movwf	IOCAF2_SetInterruptHandler@InterruptHandler
  1896  0388  3004               	movlw	high _IOCAF2_DefaultInterruptHandler
  1897  0389  00F5               	movwf	IOCAF2_SetInterruptHandler@InterruptHandler+1
  1898  038A  246C               	fcall	_IOCAF2_SetInterruptHandler
  1899                           
  1900                           ;pin_manager.c: 103: IOCAF3_SetInterruptHandler(IOCAF3_DefaultInterruptHandler);
  1901  038B  3084               	movlw	low _IOCAF3_DefaultInterruptHandler
  1902  038C  00F4               	movwf	IOCAF3_SetInterruptHandler@InterruptHandler
  1903  038D  3004               	movlw	high _IOCAF3_DefaultInterruptHandler
  1904  038E  00F5               	movwf	IOCAF3_SetInterruptHandler@InterruptHandler+1
  1905  038F  2466               	fcall	_IOCAF3_SetInterruptHandler
  1906                           
  1907                           ;pin_manager.c: 106: INTCONbits.IOCIE = 1;
  1908  0390  158B               	bsf	11,3	;volatile
  1909  0391  0008               	return
  1910  0392                     __end_of_PIN_MANAGER_Initialize:	
  1911                           
  1912                           	psect	text7
  1913  0466                     __ptext7:	
  1914 ;; *************** function _IOCAF3_SetInterruptHandler *****************
  1915 ;; Defined at:
  1916 ;;		line 175 in file "mcc_generated_files/pin_manager.c"
  1917 ;; Parameters:    Size  Location     Type
  1918 ;;  InterruptHan    2    4[COMMON] PTR FTN()void 
  1919 ;;		 -> IOCAF3_DefaultInterruptHandler(1), 
  1920 ;; Auto vars:     Size  Location     Type
  1921 ;;		None
  1922 ;; Return value:  Size  Location     Type
  1923 ;;                  1    wreg      void 
  1924 ;; Registers used:
  1925 ;;		wreg
  1926 ;; Tracked objects:
  1927 ;;		On entry : 0/0
  1928 ;;		On exit  : 0/0
  1929 ;;		Unchanged: 0/0
  1930 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1931 ;;      Params:         2       0       0       0
  1932 ;;      Locals:         0       0       0       0
  1933 ;;      Temps:          0       0       0       0
  1934 ;;      Totals:         2       0       0       0
  1935 ;;Total ram usage:        2 bytes
  1936 ;; Hardware stack levels used:    1
  1937 ;; Hardware stack levels required when called:    4
  1938 ;; This function calls:
  1939 ;;		Nothing
  1940 ;; This function is called by:
  1941 ;;		_PIN_MANAGER_Initialize
  1942 ;; This function uses a non-reentrant model
  1943 ;;
  1944                           
  1945                           
  1946                           ;psect for function _IOCAF3_SetInterruptHandler
  1947  0466                     _IOCAF3_SetInterruptHandler:	
  1948                           
  1949                           ;pin_manager.c: 176: IOCAF3_InterruptHandler = InterruptHandler;
  1950                           
  1951                           ;incstack = 0
  1952                           ; Regs used in _IOCAF3_SetInterruptHandler: [wreg]
  1953  0466  0875               	movf	IOCAF3_SetInterruptHandler@InterruptHandler+1,w
  1954  0467  0020               	movlb	0	; select bank0
  1955  0468  00E8               	movwf	_IOCAF3_InterruptHandler+1
  1956  0469  0874               	movf	IOCAF3_SetInterruptHandler@InterruptHandler,w
  1957  046A  00E7               	movwf	_IOCAF3_InterruptHandler
  1958  046B  0008               	return
  1959  046C                     __end_of_IOCAF3_SetInterruptHandler:	
  1960                           
  1961                           	psect	text8
  1962  046C                     __ptext8:	
  1963 ;; *************** function _IOCAF2_SetInterruptHandler *****************
  1964 ;; Defined at:
  1965 ;;		line 145 in file "mcc_generated_files/pin_manager.c"
  1966 ;; Parameters:    Size  Location     Type
  1967 ;;  InterruptHan    2    4[COMMON] PTR FTN()void 
  1968 ;;		 -> IOCAF2_DefaultInterruptHandler(1), 
  1969 ;; Auto vars:     Size  Location     Type
  1970 ;;		None
  1971 ;; Return value:  Size  Location     Type
  1972 ;;                  1    wreg      void 
  1973 ;; Registers used:
  1974 ;;		wreg
  1975 ;; Tracked objects:
  1976 ;;		On entry : 0/0
  1977 ;;		On exit  : 0/0
  1978 ;;		Unchanged: 0/0
  1979 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1980 ;;      Params:         2       0       0       0
  1981 ;;      Locals:         0       0       0       0
  1982 ;;      Temps:          0       0       0       0
  1983 ;;      Totals:         2       0       0       0
  1984 ;;Total ram usage:        2 bytes
  1985 ;; Hardware stack levels used:    1
  1986 ;; Hardware stack levels required when called:    4
  1987 ;; This function calls:
  1988 ;;		Nothing
  1989 ;; This function is called by:
  1990 ;;		_PIN_MANAGER_Initialize
  1991 ;; This function uses a non-reentrant model
  1992 ;;
  1993                           
  1994                           
  1995                           ;psect for function _IOCAF2_SetInterruptHandler
  1996  046C                     _IOCAF2_SetInterruptHandler:	
  1997                           
  1998                           ;pin_manager.c: 146: IOCAF2_InterruptHandler = InterruptHandler;
  1999                           
  2000                           ;incstack = 0
  2001                           ; Regs used in _IOCAF2_SetInterruptHandler: [wreg]
  2002  046C  0875               	movf	IOCAF2_SetInterruptHandler@InterruptHandler+1,w
  2003  046D  0020               	movlb	0	; select bank0
  2004  046E  00EA               	movwf	_IOCAF2_InterruptHandler+1
  2005  046F  0874               	movf	IOCAF2_SetInterruptHandler@InterruptHandler,w
  2006  0470  00E9               	movwf	_IOCAF2_InterruptHandler
  2007  0471  0008               	return
  2008  0472                     __end_of_IOCAF2_SetInterruptHandler:	
  2009                           
  2010                           	psect	text9
  2011  043F                     __ptext9:	
  2012 ;; *************** function _OSCILLATOR_Initialize *****************
  2013 ;; Defined at:
  2014 ;;		line 77 in file "mcc_generated_files/mcc.c"
  2015 ;; Parameters:    Size  Location     Type
  2016 ;;		None
  2017 ;; Auto vars:     Size  Location     Type
  2018 ;;		None
  2019 ;; Return value:  Size  Location     Type
  2020 ;;                  1    wreg      void 
  2021 ;; Registers used:
  2022 ;;		wreg, status,2
  2023 ;; Tracked objects:
  2024 ;;		On entry : 0/0
  2025 ;;		On exit  : 0/0
  2026 ;;		Unchanged: 0/0
  2027 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2028 ;;      Params:         0       0       0       0
  2029 ;;      Locals:         0       0       0       0
  2030 ;;      Temps:          0       0       0       0
  2031 ;;      Totals:         0       0       0       0
  2032 ;;Total ram usage:        0 bytes
  2033 ;; Hardware stack levels used:    1
  2034 ;; Hardware stack levels required when called:    4
  2035 ;; This function calls:
  2036 ;;		Nothing
  2037 ;; This function is called by:
  2038 ;;		_SYSTEM_Initialize
  2039 ;; This function uses a non-reentrant model
  2040 ;;
  2041                           
  2042                           
  2043                           ;psect for function _OSCILLATOR_Initialize
  2044  043F                     _OSCILLATOR_Initialize:	
  2045                           
  2046                           ;mcc.c: 80: OSCCON = 0x78;
  2047                           
  2048                           ;incstack = 0
  2049                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  2050  043F  3078               	movlw	120
  2051  0440  0021               	movlb	1	; select bank1
  2052  0441  0099               	movwf	25	;volatile
  2053                           
  2054                           ;mcc.c: 82: OSCTUNE = 0x00;
  2055  0442  0198               	clrf	24	;volatile
  2056                           
  2057                           ;mcc.c: 84: BORCON = 0x00;
  2058  0443  0022               	movlb	2	; select bank2
  2059  0444  0196               	clrf	22	;volatile
  2060  0445  0008               	return
  2061  0446                     __end_of_OSCILLATOR_Initialize:	
  2062                           
  2063                           	psect	text10
  2064  002F                     __ptext10:	
  2065 ;; *************** function _RunRightFlash *****************
  2066 ;; Defined at:
  2067 ;;		line 290 in file "main.c"
  2068 ;; Parameters:    Size  Location     Type
  2069 ;;		None
  2070 ;; Auto vars:     Size  Location     Type
  2071 ;;		None
  2072 ;; Return value:  Size  Location     Type
  2073 ;;                  1    wreg      void 
  2074 ;; Registers used:
  2075 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2076 ;; Tracked objects:
  2077 ;;		On entry : 0/0
  2078 ;;		On exit  : 0/0
  2079 ;;		Unchanged: 0/0
  2080 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2081 ;;      Params:         0       0       0       0
  2082 ;;      Locals:         0       0       0       0
  2083 ;;      Temps:          0       1       0       0
  2084 ;;      Totals:         0       1       0       0
  2085 ;;Total ram usage:        1 bytes
  2086 ;; Hardware stack levels used:    1
  2087 ;; Hardware stack levels required when called:    5
  2088 ;; This function calls:
  2089 ;;		_RightButtonPressed
  2090 ;;		_SetLEDOff
  2091 ;;		_SetLEDOn
  2092 ;;		___lwdiv
  2093 ;;		___wmul
  2094 ;; This function is called by:
  2095 ;;		_main
  2096 ;; This function uses a non-reentrant model
  2097 ;;
  2098                           
  2099                           
  2100                           ;psect for function _RunRightFlash
  2101  002F                     _RunRightFlash:	
  2102                           
  2103                           ;main.c: 292: static uint16_t right_delay = 250;
  2104                           ;main.c: 294: if (PatternDelay[0] == 0)
  2105                           
  2106                           ;incstack = 0
  2107                           ; Regs used in _RunRightFlash: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2108  002F  0020               	movlb	0	; select bank0
  2109  0030  0820               	movf	_PatternDelay,w	;volatile
  2110  0031  0421               	iorwf	_PatternDelay+1,w	;volatile
  2111  0032  1D03               	btfss	3,2
  2112  0033  0008               	return
  2113  0034  2896               	goto	l1752
  2114  0035                     l1724:	
  2115                           ;main.c: 297: {
  2116                           ;main.c: 298: case 0:
  2117                           
  2118                           ;main.c: 295: {
  2119                           ;main.c: 296: switch(PatternState[0])
  2120                           
  2121                           
  2122                           ;main.c: 300: right_delay = 250;
  2123  0035  30FA               	movlw	250
  2124  0036  00D3               	movwf	RunRightFlash@right_delay
  2125  0037  3000               	movlw	0
  2126  0038  00D4               	movwf	RunRightFlash@right_delay+1
  2127                           
  2128                           ;main.c: 301: break;
  2129  0039  28A0               	goto	l1754
  2130  003A                     l1726:	
  2131                           ;main.c: 303: case 1:
  2132                           
  2133                           
  2134                           ;main.c: 304: SetLEDOn(0x01);
  2135  003A  3001               	movlw	1
  2136  003B  241F               	fcall	_SetLEDOn
  2137                           
  2138                           ;main.c: 305: SetLEDOff(0x02);
  2139  003C  3002               	movlw	2
  2140  003D  2427               	fcall	_SetLEDOff
  2141                           
  2142                           ;main.c: 306: SetLEDOff(0x04);
  2143  003E  3004               	movlw	4
  2144  003F  2427               	fcall	_SetLEDOff
  2145                           
  2146                           ;main.c: 307: SetLEDOff(0x08);
  2147  0040  3008               	movlw	8
  2148  0041  2427               	fcall	_SetLEDOff
  2149                           
  2150                           ;main.c: 308: break;
  2151  0042  28A0               	goto	l1754
  2152  0043                     l1728:	
  2153                           ;main.c: 310: case 2:
  2154                           
  2155                           
  2156                           ;main.c: 311: SetLEDOff(0x01);
  2157  0043  3001               	movlw	1
  2158  0044  2427               	fcall	_SetLEDOff
  2159                           
  2160                           ;main.c: 312: SetLEDOn(0x02);
  2161  0045  3002               	movlw	2
  2162  0046  241F               	fcall	_SetLEDOn
  2163                           
  2164                           ;main.c: 313: SetLEDOff(0x04);
  2165  0047  3004               	movlw	4
  2166  0048  2427               	fcall	_SetLEDOff
  2167                           
  2168                           ;main.c: 314: SetLEDOff(0x08);
  2169  0049  3008               	movlw	8
  2170  004A  2427               	fcall	_SetLEDOff
  2171                           
  2172                           ;main.c: 315: break;
  2173  004B  28A0               	goto	l1754
  2174  004C                     l1730:	
  2175                           ;main.c: 317: case 3:
  2176                           
  2177                           
  2178                           ;main.c: 318: SetLEDOff(0x01);
  2179  004C  3001               	movlw	1
  2180  004D  2427               	fcall	_SetLEDOff
  2181                           
  2182                           ;main.c: 319: SetLEDOff(0x02);
  2183  004E  3002               	movlw	2
  2184  004F  2427               	fcall	_SetLEDOff
  2185                           
  2186                           ;main.c: 320: SetLEDOn(0x04);
  2187  0050  3004               	movlw	4
  2188  0051  241F               	fcall	_SetLEDOn
  2189                           
  2190                           ;main.c: 321: SetLEDOff(0x08);
  2191  0052  3008               	movlw	8
  2192  0053  2427               	fcall	_SetLEDOff
  2193                           
  2194                           ;main.c: 322: break;
  2195  0054  28A0               	goto	l1754
  2196  0055                     l1732:	
  2197                           ;main.c: 324: case 4:
  2198                           
  2199                           
  2200                           ;main.c: 325: SetLEDOff(0x01);
  2201  0055  3001               	movlw	1
  2202  0056  2427               	fcall	_SetLEDOff
  2203                           
  2204                           ;main.c: 326: SetLEDOff(0x02);
  2205  0057  3002               	movlw	2
  2206  0058  2427               	fcall	_SetLEDOff
  2207                           
  2208                           ;main.c: 327: SetLEDOff(0x04);
  2209  0059  3004               	movlw	4
  2210  005A  2427               	fcall	_SetLEDOff
  2211                           
  2212                           ;main.c: 328: SetLEDOn(0x08);
  2213  005B  3008               	movlw	8
  2214  005C  241F               	fcall	_SetLEDOn
  2215                           
  2216                           ;main.c: 329: break;
  2217  005D  28A0               	goto	l1754
  2218  005E                     l1734:	
  2219                           ;main.c: 331: case 5:
  2220                           
  2221                           
  2222                           ;main.c: 332: SetLEDOff(0x01);
  2223  005E  3001               	movlw	1
  2224  005F  2427               	fcall	_SetLEDOff
  2225                           
  2226                           ;main.c: 333: SetLEDOff(0x02);
  2227  0060  3002               	movlw	2
  2228  0061  2427               	fcall	_SetLEDOff
  2229                           
  2230                           ;main.c: 334: SetLEDOn(0x04);
  2231  0062  3004               	movlw	4
  2232  0063  241F               	fcall	_SetLEDOn
  2233                           
  2234                           ;main.c: 335: SetLEDOff(0x08);
  2235  0064  3008               	movlw	8
  2236  0065  2427               	fcall	_SetLEDOff
  2237                           
  2238                           ;main.c: 336: break;
  2239  0066  28A0               	goto	l1754
  2240  0067                     l1736:	
  2241                           ;main.c: 338: case 6:
  2242                           
  2243                           
  2244                           ;main.c: 339: SetLEDOff(0x01);
  2245  0067  3001               	movlw	1
  2246  0068  2427               	fcall	_SetLEDOff
  2247                           
  2248                           ;main.c: 340: SetLEDOn(0x02);
  2249  0069  3002               	movlw	2
  2250  006A  241F               	fcall	_SetLEDOn
  2251                           
  2252                           ;main.c: 341: SetLEDOff(0x04);
  2253  006B  3004               	movlw	4
  2254  006C  2427               	fcall	_SetLEDOff
  2255                           
  2256                           ;main.c: 342: SetLEDOff(0x08);
  2257  006D  3008               	movlw	8
  2258  006E  2427               	fcall	_SetLEDOff
  2259                           
  2260                           ;main.c: 343: break;
  2261  006F  28A0               	goto	l1754
  2262  0070                     l1738:	
  2263                           ;main.c: 345: case 7:
  2264                           
  2265                           
  2266                           ;main.c: 346: SetLEDOn(0x01);
  2267  0070  3001               	movlw	1
  2268  0071  241F               	fcall	_SetLEDOn
  2269                           
  2270                           ;main.c: 347: SetLEDOff(0x02);
  2271  0072  3002               	movlw	2
  2272  0073  2427               	fcall	_SetLEDOff
  2273                           
  2274                           ;main.c: 348: SetLEDOff(0x04);
  2275  0074  3004               	movlw	4
  2276  0075  2427               	fcall	_SetLEDOff
  2277                           
  2278                           ;main.c: 349: SetLEDOff(0x08);
  2279  0076  3008               	movlw	8
  2280  0077  2427               	fcall	_SetLEDOff
  2281                           
  2282                           ;main.c: 350: break;
  2283  0078  28A0               	goto	l1754
  2284  0079                     l1740:	
  2285                           ;main.c: 352: case 8:
  2286                           
  2287                           
  2288                           ;main.c: 353: SetLEDOn(0x01);
  2289  0079  3001               	movlw	1
  2290  007A  241F               	fcall	_SetLEDOn
  2291                           
  2292                           ;main.c: 354: SetLEDOn(0x02);
  2293  007B  3002               	movlw	2
  2294  007C  241F               	fcall	_SetLEDOn
  2295                           
  2296                           ;main.c: 355: SetLEDOn(0x04);
  2297  007D  3004               	movlw	4
  2298  007E  241F               	fcall	_SetLEDOn
  2299                           
  2300                           ;main.c: 356: SetLEDOn(0x08);
  2301  007F  3008               	movlw	8
  2302  0080  241F               	fcall	_SetLEDOn
  2303                           
  2304                           ;main.c: 357: break;
  2305  0081  28A0               	goto	l1754
  2306  0082                     l1742:	
  2307                           ;main.c: 359: case 9:
  2308                           
  2309                           
  2310                           ;main.c: 360: SetLEDOff(0x01);
  2311  0082  3001               	movlw	1
  2312  0083  2427               	fcall	_SetLEDOff
  2313                           
  2314                           ;main.c: 361: SetLEDOff(0x02);
  2315  0084  3002               	movlw	2
  2316  0085  2427               	fcall	_SetLEDOff
  2317                           
  2318                           ;main.c: 362: SetLEDOff(0x04);
  2319  0086  3004               	movlw	4
  2320  0087  2427               	fcall	_SetLEDOff
  2321                           
  2322                           ;main.c: 363: SetLEDOff(0x08);
  2323  0088  3008               	movlw	8
  2324  0089  2427               	fcall	_SetLEDOff
  2325                           
  2326                           ;main.c: 364: break;
  2327  008A  28A0               	goto	l1754
  2328  008B                     l1744:	
  2329                           ;main.c: 366: case 10:
  2330                           
  2331                           
  2332                           ;main.c: 367: SetLEDOff(0x01);
  2333  008B  3001               	movlw	1
  2334  008C  2427               	fcall	_SetLEDOff
  2335                           
  2336                           ;main.c: 368: SetLEDOff(0x02);
  2337  008D  3002               	movlw	2
  2338  008E  2427               	fcall	_SetLEDOff
  2339                           
  2340                           ;main.c: 369: SetLEDOff(0x04);
  2341  008F  3004               	movlw	4
  2342  0090  2427               	fcall	_SetLEDOff
  2343                           
  2344                           ;main.c: 370: SetLEDOff(0x08);
  2345  0091  3008               	movlw	8
  2346  0092  2427               	fcall	_SetLEDOff
  2347                           
  2348                           ;main.c: 371: PatternState[0] = 0;
  2349  0093  0020               	movlb	0	; select bank0
  2350  0094                     l1748:	
  2351                           ;main.c: 374: default:
  2352                           
  2353                           ;main.c: 372: break;
  2354                           
  2355                           
  2356                           ;main.c: 375: PatternState[0] = 0;
  2357  0094  01B0               	clrf	_PatternState	;volatile
  2358                           
  2359                           ;main.c: 377: }
  2360                           
  2361                           ;main.c: 376: break;
  2362  0095  28A0               	goto	l1754
  2363  0096                     l1752:	
  2364  0096  0830               	movf	_PatternState,w	;volatile
  2365                           
  2366                           ; Switch size 1, requested type "space"
  2367                           ; Number of cases is 11, Range of values is 0 to 10
  2368                           ; switch strategies available:
  2369                           ; Name         Instructions Cycles
  2370                           ; direct_byte           28     6 (fixed)
  2371                           ; simple_byte           34    18 (average)
  2372                           ; jumptable            260     6 (fixed)
  2373                           ;	Chosen strategy is direct_byte
  2374  0097  0084               	movwf	4
  2375  0098  300B               	movlw	11
  2376  0099  0204               	subwf	4,w
  2377  009A  1803               	skipnc
  2378  009B  2894               	goto	l1748
  2379  009C  3183               	movlp	high S1950
  2380  009D  30EB               	movlw	low S1950
  2381  009E  0704               	addwf	4,w
  2382  009F  0082               	movwf	2
  2383  00A0                     l1754:	
  2384                           
  2385                           ;main.c: 380: if (PatternState[0] != 0)
  2386  00A0  0020               	movlb	0	; select bank0
  2387  00A1  0830               	movf	_PatternState,w	;volatile
  2388  00A2  1903               	btfsc	3,2
  2389  00A3  0008               	return
  2390                           
  2391                           ;main.c: 381: {
  2392                           ;main.c: 382: if ((PatternState[0] == 7) && RightButtonPressed())
  2393  00A4  3007               	movlw	7
  2394  00A5  0630               	xorwf	_PatternState,w	;volatile
  2395  00A6  1D03               	btfss	3,2
  2396  00A7  28D0               	goto	l1768
  2397  00A8  242F               	fcall	_RightButtonPressed
  2398  00A9  3A00               	xorlw	0
  2399  00AA  1903               	skipnz
  2400  00AB  28D0               	goto	l1768
  2401                           
  2402                           ;main.c: 383: {
  2403                           ;main.c: 384: if (right_delay > 3)
  2404  00AC  3000               	movlw	0
  2405  00AD  0020               	movlb	0	; select bank0
  2406  00AE  0254               	subwf	RunRightFlash@right_delay+1,w
  2407  00AF  3004               	movlw	4
  2408  00B0  1903               	skipnz
  2409  00B1  0253               	subwf	RunRightFlash@right_delay,w
  2410  00B2  1C03               	skipc
  2411  00B3  28CE               	goto	l1766
  2412                           
  2413                           ;main.c: 385: {
  2414                           ;main.c: 386: right_delay = ((right_delay * 80)/100);
  2415  00B4  3064               	movlw	100
  2416  00B5  00D9               	movwf	___lwdiv@divisor
  2417  00B6  3000               	movlw	0
  2418  00B7  00DA               	movwf	___lwdiv@divisor+1
  2419  00B8  0854               	movf	RunRightFlash@right_delay+1,w
  2420  00B9  00D6               	movwf	___wmul@multiplier+1
  2421  00BA  0853               	movf	RunRightFlash@right_delay,w
  2422  00BB  00D5               	movwf	___wmul@multiplier
  2423  00BC  3050               	movlw	80
  2424  00BD  00D7               	movwf	___wmul@multiplicand
  2425  00BE  3000               	movlw	0
  2426  00BF  00D8               	movwf	___wmul@multiplicand+1
  2427  00C0  2392               	fcall	___wmul
  2428  00C1  0020               	movlb	0	; select bank0
  2429  00C2  0856               	movf	?___wmul+1,w
  2430  00C3  00DC               	movwf	___lwdiv@dividend+1
  2431  00C4  0855               	movf	?___wmul,w
  2432  00C5  00DB               	movwf	___lwdiv@dividend
  2433  00C6  2339               	fcall	___lwdiv
  2434  00C7  0020               	movlb	0	; select bank0
  2435  00C8  085A               	movf	?___lwdiv+1,w
  2436  00C9  00D4               	movwf	RunRightFlash@right_delay+1
  2437  00CA  0859               	movf	?___lwdiv,w
  2438  00CB  00D3               	movwf	RunRightFlash@right_delay
  2439                           
  2440                           ;main.c: 387: PatternState[0] = 2;
  2441  00CC  3002               	movlw	2
  2442  00CD  28FA               	goto	L1
  2443  00CE                     l1766:	
  2444                           ;main.c: 388: }
  2445                           
  2446                           
  2447                           ;main.c: 389: else
  2448                           ;main.c: 390: {
  2449                           ;main.c: 391: PatternState[0] = 8;
  2450  00CE  3008               	movlw	8
  2451  00CF  28FF               	goto	L2
  2452  00D0                     l1768:	
  2453                           ;main.c: 393: }
  2454                           ;main.c: 394: }
  2455                           
  2456                           ;main.c: 392: right_delay = 250;
  2457                           
  2458                           
  2459                           ;main.c: 395: else if ((PatternState[0] == 9) && RightButtonPressed())
  2460  00D0  3009               	movlw	9
  2461  00D1  0020               	movlb	0	; select bank0
  2462  00D2  0630               	xorwf	_PatternState,w	;volatile
  2463  00D3  1D03               	btfss	3,2
  2464  00D4  2907               	goto	l1780
  2465  00D5  242F               	fcall	_RightButtonPressed
  2466  00D6  3A00               	xorlw	0
  2467  00D7  1903               	skipnz
  2468  00D8  2907               	goto	l1780
  2469                           
  2470                           ;main.c: 396: {
  2471                           ;main.c: 397: if (right_delay > 10)
  2472  00D9  3000               	movlw	0
  2473  00DA  0020               	movlb	0	; select bank0
  2474  00DB  0254               	subwf	RunRightFlash@right_delay+1,w
  2475  00DC  300B               	movlw	11
  2476  00DD  1903               	skipnz
  2477  00DE  0253               	subwf	RunRightFlash@right_delay,w
  2478  00DF  1C03               	skipc
  2479  00E0  28FE               	goto	l1778
  2480                           
  2481                           ;main.c: 398: {
  2482                           ;main.c: 399: right_delay = ((right_delay * 95)/100);
  2483  00E1  3064               	movlw	100
  2484  00E2  00D9               	movwf	___lwdiv@divisor
  2485  00E3  3000               	movlw	0
  2486  00E4  00DA               	movwf	___lwdiv@divisor+1
  2487  00E5  0854               	movf	RunRightFlash@right_delay+1,w
  2488  00E6  00D6               	movwf	___wmul@multiplier+1
  2489  00E7  0853               	movf	RunRightFlash@right_delay,w
  2490  00E8  00D5               	movwf	___wmul@multiplier
  2491  00E9  305F               	movlw	95
  2492  00EA  00D7               	movwf	___wmul@multiplicand
  2493  00EB  3000               	movlw	0
  2494  00EC  00D8               	movwf	___wmul@multiplicand+1
  2495  00ED  2392               	fcall	___wmul
  2496  00EE  0020               	movlb	0	; select bank0
  2497  00EF  0856               	movf	?___wmul+1,w
  2498  00F0  00DC               	movwf	___lwdiv@dividend+1
  2499  00F1  0855               	movf	?___wmul,w
  2500  00F2  00DB               	movwf	___lwdiv@dividend
  2501  00F3  2339               	fcall	___lwdiv
  2502  00F4  0020               	movlb	0	; select bank0
  2503  00F5  085A               	movf	?___lwdiv+1,w
  2504  00F6  00D4               	movwf	RunRightFlash@right_delay+1
  2505  00F7  0859               	movf	?___lwdiv,w
  2506  00F8  00D3               	movwf	RunRightFlash@right_delay
  2507                           
  2508                           ;main.c: 400: PatternState[0] = 8;
  2509  00F9  3008               	movlw	8
  2510  00FA                     L1:	
  2511  00FA  00E1               	movwf	??_RunRightFlash
  2512  00FB  0861               	movf	??_RunRightFlash,w
  2513  00FC  00B0               	movwf	_PatternState	;volatile
  2514                           
  2515                           ;main.c: 401: }
  2516  00FD  290C               	goto	l1782
  2517  00FE                     l1778:	
  2518                           
  2519                           ;main.c: 402: else
  2520                           ;main.c: 403: {
  2521                           ;main.c: 404: PatternState[0] = 1;
  2522  00FE  3001               	movlw	1
  2523  00FF                     L2:	
  2524  00FF  00E1               	movwf	??_RunRightFlash
  2525  0100  0861               	movf	??_RunRightFlash,w
  2526  0101  00B0               	movwf	_PatternState	;volatile
  2527                           
  2528                           ;main.c: 405: right_delay = 250;
  2529  0102  30FA               	movlw	250
  2530  0103  00D3               	movwf	RunRightFlash@right_delay
  2531  0104  3000               	movlw	0
  2532  0105  00D4               	movwf	RunRightFlash@right_delay+1
  2533                           
  2534                           ;main.c: 406: }
  2535                           ;main.c: 407: }
  2536  0106  290C               	goto	l1782
  2537  0107                     l1780:	
  2538                           
  2539                           ;main.c: 408: else
  2540                           ;main.c: 409: {
  2541                           ;main.c: 410: PatternState[0]++;
  2542  0107  3001               	movlw	1
  2543  0108  0020               	movlb	0	; select bank0
  2544  0109  00E1               	movwf	??_RunRightFlash
  2545  010A  0861               	movf	??_RunRightFlash,w
  2546  010B  07B0               	addwf	_PatternState,f	;volatile
  2547  010C                     l1782:	
  2548                           
  2549                           ;main.c: 411: }
  2550                           ;main.c: 412: PatternDelay[0] = right_delay;
  2551  010C  0854               	movf	RunRightFlash@right_delay+1,w
  2552  010D  00A1               	movwf	_PatternDelay+1	;volatile
  2553  010E  0853               	movf	RunRightFlash@right_delay,w
  2554  010F  00A0               	movwf	_PatternDelay	;volatile
  2555  0110  0008               	return
  2556  0111                     __end_of_RunRightFlash:	
  2557                           
  2558                           	psect	swtext1
  2559  03EB                     __pswtext1:	
  2560  03EB                     S1950:	
  2561  03EB  2835               	ljmp	l1724
  2562  03EC  283A               	ljmp	l1726
  2563  03ED  2843               	ljmp	l1728
  2564  03EE  284C               	ljmp	l1730
  2565  03EF  2855               	ljmp	l1732
  2566  03F0  285E               	ljmp	l1734
  2567  03F1  2867               	ljmp	l1736
  2568  03F2  2870               	ljmp	l1738
  2569  03F3  2879               	ljmp	l1740
  2570  03F4  2882               	ljmp	l1742
  2571  03F5  288B               	ljmp	l1744
  2572                           
  2573                           	psect	text11
  2574  0111                     __ptext11:	
  2575 ;; *************** function _RunLeftFlash *****************
  2576 ;; Defined at:
  2577 ;;		line 417 in file "main.c"
  2578 ;; Parameters:    Size  Location     Type
  2579 ;;		None
  2580 ;; Auto vars:     Size  Location     Type
  2581 ;;		None
  2582 ;; Return value:  Size  Location     Type
  2583 ;;                  1    wreg      void 
  2584 ;; Registers used:
  2585 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2586 ;; Tracked objects:
  2587 ;;		On entry : 0/0
  2588 ;;		On exit  : 0/0
  2589 ;;		Unchanged: 0/0
  2590 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2591 ;;      Params:         0       0       0       0
  2592 ;;      Locals:         0       0       0       0
  2593 ;;      Temps:          0       1       0       0
  2594 ;;      Totals:         0       1       0       0
  2595 ;;Total ram usage:        1 bytes
  2596 ;; Hardware stack levels used:    1
  2597 ;; Hardware stack levels required when called:    5
  2598 ;; This function calls:
  2599 ;;		_LeftButtonPressed
  2600 ;;		_SetLEDOff
  2601 ;;		_SetLEDOn
  2602 ;;		___lwdiv
  2603 ;;		___wmul
  2604 ;; This function is called by:
  2605 ;;		_main
  2606 ;; This function uses a non-reentrant model
  2607 ;;
  2608                           
  2609                           
  2610                           ;psect for function _RunLeftFlash
  2611  0111                     _RunLeftFlash:	
  2612                           
  2613                           ;main.c: 419: static uint16_t left_delay = 250;
  2614                           ;main.c: 421: if (PatternDelay[1] == 0)
  2615                           
  2616                           ;incstack = 0
  2617                           ; Regs used in _RunLeftFlash: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2618  0111  0020               	movlb	0	; select bank0
  2619  0112  0822               	movf	_PatternDelay+2,w	;volatile
  2620  0113  0423               	iorwf	_PatternDelay+3,w	;volatile
  2621  0114  1D03               	btfss	3,2
  2622  0115  0008               	return
  2623  0116  2978               	goto	l1820
  2624  0117                     l1792:	
  2625                           ;main.c: 424: {
  2626                           ;main.c: 425: case 0:
  2627                           
  2628                           ;main.c: 422: {
  2629                           ;main.c: 423: switch(PatternState[1])
  2630                           
  2631                           
  2632                           ;main.c: 427: left_delay = 250;
  2633  0117  30FA               	movlw	250
  2634  0118  00D1               	movwf	RunLeftFlash@left_delay
  2635  0119  3000               	movlw	0
  2636  011A  00D2               	movwf	RunLeftFlash@left_delay+1
  2637                           
  2638                           ;main.c: 428: break;
  2639  011B  2982               	goto	l1822
  2640  011C                     l1794:	
  2641                           ;main.c: 430: case 1:
  2642                           
  2643                           
  2644                           ;main.c: 431: SetLEDOn(0x80);
  2645  011C  3080               	movlw	128
  2646  011D  241F               	fcall	_SetLEDOn
  2647                           
  2648                           ;main.c: 432: SetLEDOff(0x40);
  2649  011E  3040               	movlw	64
  2650  011F  2427               	fcall	_SetLEDOff
  2651                           
  2652                           ;main.c: 433: SetLEDOff(0x20);
  2653  0120  3020               	movlw	32
  2654  0121  2427               	fcall	_SetLEDOff
  2655                           
  2656                           ;main.c: 434: SetLEDOff(0x10);
  2657  0122  3010               	movlw	16
  2658  0123  2427               	fcall	_SetLEDOff
  2659                           
  2660                           ;main.c: 435: break;
  2661  0124  2982               	goto	l1822
  2662  0125                     l1796:	
  2663                           ;main.c: 437: case 2:
  2664                           
  2665                           
  2666                           ;main.c: 438: SetLEDOff(0x80);
  2667  0125  3080               	movlw	128
  2668  0126  2427               	fcall	_SetLEDOff
  2669                           
  2670                           ;main.c: 439: SetLEDOn(0x40);
  2671  0127  3040               	movlw	64
  2672  0128  241F               	fcall	_SetLEDOn
  2673                           
  2674                           ;main.c: 440: SetLEDOff(0x20);
  2675  0129  3020               	movlw	32
  2676  012A  2427               	fcall	_SetLEDOff
  2677                           
  2678                           ;main.c: 441: SetLEDOff(0x10);
  2679  012B  3010               	movlw	16
  2680  012C  2427               	fcall	_SetLEDOff
  2681                           
  2682                           ;main.c: 442: break;
  2683  012D  2982               	goto	l1822
  2684  012E                     l1798:	
  2685                           ;main.c: 444: case 3:
  2686                           
  2687                           
  2688                           ;main.c: 445: SetLEDOff(0x80);
  2689  012E  3080               	movlw	128
  2690  012F  2427               	fcall	_SetLEDOff
  2691                           
  2692                           ;main.c: 446: SetLEDOff(0x40);
  2693  0130  3040               	movlw	64
  2694  0131  2427               	fcall	_SetLEDOff
  2695                           
  2696                           ;main.c: 447: SetLEDOn(0x20);
  2697  0132  3020               	movlw	32
  2698  0133  241F               	fcall	_SetLEDOn
  2699                           
  2700                           ;main.c: 448: SetLEDOff(0x10);
  2701  0134  3010               	movlw	16
  2702  0135  2427               	fcall	_SetLEDOff
  2703                           
  2704                           ;main.c: 449: break;
  2705  0136  2982               	goto	l1822
  2706  0137                     l1800:	
  2707                           ;main.c: 451: case 4:
  2708                           
  2709                           
  2710                           ;main.c: 452: SetLEDOff(0x80);
  2711  0137  3080               	movlw	128
  2712  0138  2427               	fcall	_SetLEDOff
  2713                           
  2714                           ;main.c: 453: SetLEDOff(0x40);
  2715  0139  3040               	movlw	64
  2716  013A  2427               	fcall	_SetLEDOff
  2717                           
  2718                           ;main.c: 454: SetLEDOff(0x20);
  2719  013B  3020               	movlw	32
  2720  013C  2427               	fcall	_SetLEDOff
  2721                           
  2722                           ;main.c: 455: SetLEDOn(0x10);
  2723  013D  3010               	movlw	16
  2724  013E  241F               	fcall	_SetLEDOn
  2725                           
  2726                           ;main.c: 456: break;
  2727  013F  2982               	goto	l1822
  2728  0140                     l1802:	
  2729                           ;main.c: 458: case 5:
  2730                           
  2731                           
  2732                           ;main.c: 459: SetLEDOff(0x80);
  2733  0140  3080               	movlw	128
  2734  0141  2427               	fcall	_SetLEDOff
  2735                           
  2736                           ;main.c: 460: SetLEDOff(0x40);
  2737  0142  3040               	movlw	64
  2738  0143  2427               	fcall	_SetLEDOff
  2739                           
  2740                           ;main.c: 461: SetLEDOn(0x20);
  2741  0144  3020               	movlw	32
  2742  0145  241F               	fcall	_SetLEDOn
  2743                           
  2744                           ;main.c: 462: SetLEDOff(0x10);
  2745  0146  3010               	movlw	16
  2746  0147  2427               	fcall	_SetLEDOff
  2747                           
  2748                           ;main.c: 463: break;
  2749  0148  2982               	goto	l1822
  2750  0149                     l1804:	
  2751                           ;main.c: 465: case 6:
  2752                           
  2753                           
  2754                           ;main.c: 466: SetLEDOff(0x80);
  2755  0149  3080               	movlw	128
  2756  014A  2427               	fcall	_SetLEDOff
  2757                           
  2758                           ;main.c: 467: SetLEDOn(0x40);
  2759  014B  3040               	movlw	64
  2760  014C  241F               	fcall	_SetLEDOn
  2761                           
  2762                           ;main.c: 468: SetLEDOff(0x20);
  2763  014D  3020               	movlw	32
  2764  014E  2427               	fcall	_SetLEDOff
  2765                           
  2766                           ;main.c: 469: SetLEDOff(0x10);
  2767  014F  3010               	movlw	16
  2768  0150  2427               	fcall	_SetLEDOff
  2769                           
  2770                           ;main.c: 470: break;
  2771  0151  2982               	goto	l1822
  2772  0152                     l1806:	
  2773                           ;main.c: 472: case 7:
  2774                           
  2775                           
  2776                           ;main.c: 473: SetLEDOn(0x80);
  2777  0152  3080               	movlw	128
  2778  0153  241F               	fcall	_SetLEDOn
  2779                           
  2780                           ;main.c: 474: SetLEDOff(0x40);
  2781  0154  3040               	movlw	64
  2782  0155  2427               	fcall	_SetLEDOff
  2783                           
  2784                           ;main.c: 475: SetLEDOff(0x20);
  2785  0156  3020               	movlw	32
  2786  0157  2427               	fcall	_SetLEDOff
  2787                           
  2788                           ;main.c: 476: SetLEDOff(0x10);
  2789  0158  3010               	movlw	16
  2790  0159  2427               	fcall	_SetLEDOff
  2791                           
  2792                           ;main.c: 477: break;
  2793  015A  2982               	goto	l1822
  2794  015B                     l1808:	
  2795                           ;main.c: 479: case 8:
  2796                           
  2797                           
  2798                           ;main.c: 480: SetLEDOn(0x80);
  2799  015B  3080               	movlw	128
  2800  015C  241F               	fcall	_SetLEDOn
  2801                           
  2802                           ;main.c: 481: SetLEDOn(0x40);
  2803  015D  3040               	movlw	64
  2804  015E  241F               	fcall	_SetLEDOn
  2805                           
  2806                           ;main.c: 482: SetLEDOn(0x20);
  2807  015F  3020               	movlw	32
  2808  0160  241F               	fcall	_SetLEDOn
  2809                           
  2810                           ;main.c: 483: SetLEDOn(0x10);
  2811  0161  3010               	movlw	16
  2812  0162  241F               	fcall	_SetLEDOn
  2813                           
  2814                           ;main.c: 484: break;
  2815  0163  2982               	goto	l1822
  2816  0164                     l1810:	
  2817                           ;main.c: 486: case 9:
  2818                           
  2819                           
  2820                           ;main.c: 487: SetLEDOff(0x80);
  2821  0164  3080               	movlw	128
  2822  0165  2427               	fcall	_SetLEDOff
  2823                           
  2824                           ;main.c: 488: SetLEDOff(0x40);
  2825  0166  3040               	movlw	64
  2826  0167  2427               	fcall	_SetLEDOff
  2827                           
  2828                           ;main.c: 489: SetLEDOff(0x20);
  2829  0168  3020               	movlw	32
  2830  0169  2427               	fcall	_SetLEDOff
  2831                           
  2832                           ;main.c: 490: SetLEDOff(0x10);
  2833  016A  3010               	movlw	16
  2834  016B  2427               	fcall	_SetLEDOff
  2835                           
  2836                           ;main.c: 491: break;
  2837  016C  2982               	goto	l1822
  2838  016D                     l1812:	
  2839                           ;main.c: 493: case 10:
  2840                           
  2841                           
  2842                           ;main.c: 494: SetLEDOff(0x80);
  2843  016D  3080               	movlw	128
  2844  016E  2427               	fcall	_SetLEDOff
  2845                           
  2846                           ;main.c: 495: SetLEDOff(0x40);
  2847  016F  3040               	movlw	64
  2848  0170  2427               	fcall	_SetLEDOff
  2849                           
  2850                           ;main.c: 496: SetLEDOff(0x20);
  2851  0171  3020               	movlw	32
  2852  0172  2427               	fcall	_SetLEDOff
  2853                           
  2854                           ;main.c: 497: SetLEDOff(0x10);
  2855  0173  3010               	movlw	16
  2856  0174  2427               	fcall	_SetLEDOff
  2857                           
  2858                           ;main.c: 498: PatternState[1] = 0;
  2859  0175  0020               	movlb	0	; select bank0
  2860  0176                     l1816:	
  2861                           ;main.c: 501: default:
  2862                           
  2863                           ;main.c: 499: break;
  2864                           
  2865                           
  2866                           ;main.c: 502: PatternState[1] = 0;
  2867  0176  01B1               	clrf	_PatternState+1	;volatile
  2868                           
  2869                           ;main.c: 504: }
  2870                           
  2871                           ;main.c: 503: break;
  2872  0177  2982               	goto	l1822
  2873  0178                     l1820:	
  2874  0178  0831               	movf	_PatternState+1,w	;volatile
  2875                           
  2876                           ; Switch size 1, requested type "space"
  2877                           ; Number of cases is 11, Range of values is 0 to 10
  2878                           ; switch strategies available:
  2879                           ; Name         Instructions Cycles
  2880                           ; direct_byte           28     6 (fixed)
  2881                           ; simple_byte           34    18 (average)
  2882                           ; jumptable            260     6 (fixed)
  2883                           ;	Chosen strategy is direct_byte
  2884  0179  0084               	movwf	4
  2885  017A  300B               	movlw	11
  2886  017B  0204               	subwf	4,w
  2887  017C  1803               	skipnc
  2888  017D  2976               	goto	l1816
  2889  017E  3184               	movlp	high S1952
  2890  017F  3000               	movlw	low S1952
  2891  0180  0704               	addwf	4,w
  2892  0181  0082               	movwf	2
  2893  0182                     l1822:	
  2894                           
  2895                           ;main.c: 507: if (PatternState[1] != 0)
  2896  0182  0020               	movlb	0	; select bank0
  2897  0183  0831               	movf	_PatternState+1,w	;volatile
  2898  0184  1903               	btfsc	3,2
  2899  0185  0008               	return
  2900                           
  2901                           ;main.c: 508: {
  2902                           ;main.c: 509: if ((PatternState[1] == 7) && LeftButtonPressed())
  2903  0186  3007               	movlw	7
  2904  0187  0631               	xorwf	_PatternState+1,w	;volatile
  2905  0188  1D03               	btfss	3,2
  2906  0189  29B2               	goto	l1836
  2907  018A  2437               	fcall	_LeftButtonPressed
  2908  018B  3A00               	xorlw	0
  2909  018C  1903               	skipnz
  2910  018D  29B2               	goto	l1836
  2911                           
  2912                           ;main.c: 510: {
  2913                           ;main.c: 511: if (left_delay > 3)
  2914  018E  3000               	movlw	0
  2915  018F  0020               	movlb	0	; select bank0
  2916  0190  0252               	subwf	RunLeftFlash@left_delay+1,w
  2917  0191  3004               	movlw	4
  2918  0192  1903               	skipnz
  2919  0193  0251               	subwf	RunLeftFlash@left_delay,w
  2920  0194  1C03               	skipc
  2921  0195  29B0               	goto	l1834
  2922                           
  2923                           ;main.c: 512: {
  2924                           ;main.c: 513: left_delay = ((left_delay * 80)/100);
  2925  0196  3064               	movlw	100
  2926  0197  00D9               	movwf	___lwdiv@divisor
  2927  0198  3000               	movlw	0
  2928  0199  00DA               	movwf	___lwdiv@divisor+1
  2929  019A  0852               	movf	RunLeftFlash@left_delay+1,w
  2930  019B  00D6               	movwf	___wmul@multiplier+1
  2931  019C  0851               	movf	RunLeftFlash@left_delay,w
  2932  019D  00D5               	movwf	___wmul@multiplier
  2933  019E  3050               	movlw	80
  2934  019F  00D7               	movwf	___wmul@multiplicand
  2935  01A0  3000               	movlw	0
  2936  01A1  00D8               	movwf	___wmul@multiplicand+1
  2937  01A2  2392               	fcall	___wmul
  2938  01A3  0020               	movlb	0	; select bank0
  2939  01A4  0856               	movf	?___wmul+1,w
  2940  01A5  00DC               	movwf	___lwdiv@dividend+1
  2941  01A6  0855               	movf	?___wmul,w
  2942  01A7  00DB               	movwf	___lwdiv@dividend
  2943  01A8  2339               	fcall	___lwdiv
  2944  01A9  0020               	movlb	0	; select bank0
  2945  01AA  085A               	movf	?___lwdiv+1,w
  2946  01AB  00D2               	movwf	RunLeftFlash@left_delay+1
  2947  01AC  0859               	movf	?___lwdiv,w
  2948  01AD  00D1               	movwf	RunLeftFlash@left_delay
  2949                           
  2950                           ;main.c: 514: PatternState[1] = 2;
  2951  01AE  3002               	movlw	2
  2952  01AF  29DC               	goto	L3
  2953  01B0                     l1834:	
  2954                           ;main.c: 515: }
  2955                           
  2956                           
  2957                           ;main.c: 516: else
  2958                           ;main.c: 517: {
  2959                           ;main.c: 518: PatternState[1] = 8;
  2960  01B0  3008               	movlw	8
  2961  01B1  29E1               	goto	L4
  2962  01B2                     l1836:	
  2963                           ;main.c: 520: }
  2964                           ;main.c: 521: }
  2965                           
  2966                           ;main.c: 519: left_delay = 250;
  2967                           
  2968                           
  2969                           ;main.c: 522: else if ((PatternState[1] == 9) && LeftButtonPressed())
  2970  01B2  3009               	movlw	9
  2971  01B3  0020               	movlb	0	; select bank0
  2972  01B4  0631               	xorwf	_PatternState+1,w	;volatile
  2973  01B5  1D03               	btfss	3,2
  2974  01B6  29E9               	goto	l1848
  2975  01B7  2437               	fcall	_LeftButtonPressed
  2976  01B8  3A00               	xorlw	0
  2977  01B9  1903               	skipnz
  2978  01BA  29E9               	goto	l1848
  2979                           
  2980                           ;main.c: 523: {
  2981                           ;main.c: 524: if (left_delay > 10)
  2982  01BB  3000               	movlw	0
  2983  01BC  0020               	movlb	0	; select bank0
  2984  01BD  0252               	subwf	RunLeftFlash@left_delay+1,w
  2985  01BE  300B               	movlw	11
  2986  01BF  1903               	skipnz
  2987  01C0  0251               	subwf	RunLeftFlash@left_delay,w
  2988  01C1  1C03               	skipc
  2989  01C2  29E0               	goto	l1846
  2990                           
  2991                           ;main.c: 525: {
  2992                           ;main.c: 526: left_delay = ((left_delay * 95)/100);
  2993  01C3  3064               	movlw	100
  2994  01C4  00D9               	movwf	___lwdiv@divisor
  2995  01C5  3000               	movlw	0
  2996  01C6  00DA               	movwf	___lwdiv@divisor+1
  2997  01C7  0852               	movf	RunLeftFlash@left_delay+1,w
  2998  01C8  00D6               	movwf	___wmul@multiplier+1
  2999  01C9  0851               	movf	RunLeftFlash@left_delay,w
  3000  01CA  00D5               	movwf	___wmul@multiplier
  3001  01CB  305F               	movlw	95
  3002  01CC  00D7               	movwf	___wmul@multiplicand
  3003  01CD  3000               	movlw	0
  3004  01CE  00D8               	movwf	___wmul@multiplicand+1
  3005  01CF  2392               	fcall	___wmul
  3006  01D0  0020               	movlb	0	; select bank0
  3007  01D1  0856               	movf	?___wmul+1,w
  3008  01D2  00DC               	movwf	___lwdiv@dividend+1
  3009  01D3  0855               	movf	?___wmul,w
  3010  01D4  00DB               	movwf	___lwdiv@dividend
  3011  01D5  2339               	fcall	___lwdiv
  3012  01D6  0020               	movlb	0	; select bank0
  3013  01D7  085A               	movf	?___lwdiv+1,w
  3014  01D8  00D2               	movwf	RunLeftFlash@left_delay+1
  3015  01D9  0859               	movf	?___lwdiv,w
  3016  01DA  00D1               	movwf	RunLeftFlash@left_delay
  3017                           
  3018                           ;main.c: 527: PatternState[1] = 8;
  3019  01DB  3008               	movlw	8
  3020  01DC                     L3:	
  3021  01DC  00E1               	movwf	??_RunLeftFlash
  3022  01DD  0861               	movf	??_RunLeftFlash,w
  3023  01DE  00B1               	movwf	_PatternState+1	;volatile
  3024                           
  3025                           ;main.c: 528: }
  3026  01DF  29EE               	goto	l1850
  3027  01E0                     l1846:	
  3028                           
  3029                           ;main.c: 529: else
  3030                           ;main.c: 530: {
  3031                           ;main.c: 531: PatternState[1] = 1;
  3032  01E0  3001               	movlw	1
  3033  01E1                     L4:	
  3034  01E1  00E1               	movwf	??_RunLeftFlash
  3035  01E2  0861               	movf	??_RunLeftFlash,w
  3036  01E3  00B1               	movwf	_PatternState+1	;volatile
  3037                           
  3038                           ;main.c: 532: left_delay = 250;
  3039  01E4  30FA               	movlw	250
  3040  01E5  00D1               	movwf	RunLeftFlash@left_delay
  3041  01E6  3000               	movlw	0
  3042  01E7  00D2               	movwf	RunLeftFlash@left_delay+1
  3043                           
  3044                           ;main.c: 533: }
  3045                           ;main.c: 534: }
  3046  01E8  29EE               	goto	l1850
  3047  01E9                     l1848:	
  3048                           
  3049                           ;main.c: 535: else
  3050                           ;main.c: 536: {
  3051                           ;main.c: 537: PatternState[1]++;
  3052  01E9  3001               	movlw	1
  3053  01EA  0020               	movlb	0	; select bank0
  3054  01EB  00E1               	movwf	??_RunLeftFlash
  3055  01EC  0861               	movf	??_RunLeftFlash,w
  3056  01ED  07B1               	addwf	_PatternState+1,f	;volatile
  3057  01EE                     l1850:	
  3058                           
  3059                           ;main.c: 538: }
  3060                           ;main.c: 539: PatternDelay[1] = left_delay;
  3061  01EE  0852               	movf	RunLeftFlash@left_delay+1,w
  3062  01EF  00A3               	movwf	_PatternDelay+3	;volatile
  3063  01F0  0851               	movf	RunLeftFlash@left_delay,w
  3064  01F1  00A2               	movwf	_PatternDelay+2	;volatile
  3065  01F2  0008               	return
  3066  01F3                     __end_of_RunLeftFlash:	
  3067                           
  3068                           	psect	swtext2
  3069  0400                     __pswtext2:	
  3070  0400                     S1952:	
  3071  0400  2917               	ljmp	l1792
  3072  0401  291C               	ljmp	l1794
  3073  0402  2925               	ljmp	l1796
  3074  0403  292E               	ljmp	l1798
  3075  0404  2937               	ljmp	l1800
  3076  0405  2940               	ljmp	l1802
  3077  0406  2949               	ljmp	l1804
  3078  0407  2952               	ljmp	l1806
  3079  0408  295B               	ljmp	l1808
  3080  0409  2964               	ljmp	l1810
  3081  040A  296D               	ljmp	l1812
  3082                           
  3083                           	psect	text12
  3084  0392                     __ptext12:	
  3085 ;; *************** function ___wmul *****************
  3086 ;; Defined at:
  3087 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\Umul16.c"
  3088 ;; Parameters:    Size  Location     Type
  3089 ;;  multiplier      2    0[BANK0 ] unsigned int 
  3090 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  3091 ;; Auto vars:     Size  Location     Type
  3092 ;;  product         2    4[COMMON] unsigned int 
  3093 ;; Return value:  Size  Location     Type
  3094 ;;                  2    0[BANK0 ] unsigned int 
  3095 ;; Registers used:
  3096 ;;		wreg, status,2, status,0
  3097 ;; Tracked objects:
  3098 ;;		On entry : 0/0
  3099 ;;		On exit  : 0/0
  3100 ;;		Unchanged: 0/0
  3101 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3102 ;;      Params:         0       4       0       0
  3103 ;;      Locals:         2       0       0       0
  3104 ;;      Temps:          0       0       0       0
  3105 ;;      Totals:         2       4       0       0
  3106 ;;Total ram usage:        6 bytes
  3107 ;; Hardware stack levels used:    1
  3108 ;; Hardware stack levels required when called:    4
  3109 ;; This function calls:
  3110 ;;		Nothing
  3111 ;; This function is called by:
  3112 ;;		_RunRightFlash
  3113 ;;		_RunLeftFlash
  3114 ;; This function uses a non-reentrant model
  3115 ;;
  3116                           
  3117                           
  3118                           ;psect for function ___wmul
  3119  0392                     ___wmul:	
  3120                           
  3121                           ;incstack = 0
  3122                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  3123  0392  01F4               	clrf	___wmul@product
  3124  0393  01F5               	clrf	___wmul@product+1
  3125  0394                     l1708:	
  3126  0394  0020               	movlb	0	; select bank0
  3127  0395  1C55               	btfss	___wmul@multiplier,0
  3128  0396  2B9B               	goto	l318
  3129  0397  0857               	movf	___wmul@multiplicand,w
  3130  0398  07F4               	addwf	___wmul@product,f
  3131  0399  0858               	movf	___wmul@multiplicand+1,w
  3132  039A  3DF5               	addwfc	___wmul@product+1,f
  3133  039B                     l318:	
  3134  039B  3001               	movlw	1
  3135  039C                     u1605:	
  3136  039C  35D7               	lslf	___wmul@multiplicand,f
  3137  039D  0DD8               	rlf	___wmul@multiplicand+1,f
  3138  039E  0B89               	decfsz	9,f
  3139  039F  2B9C               	goto	u1605
  3140  03A0  3001               	movlw	1
  3141  03A1                     u1615:	
  3142  03A1  36D6               	lsrf	___wmul@multiplier+1,f
  3143  03A2  0CD5               	rrf	___wmul@multiplier,f
  3144  03A3  0B89               	decfsz	9,f
  3145  03A4  2BA1               	goto	u1615
  3146  03A5  0855               	movf	___wmul@multiplier,w
  3147  03A6  0456               	iorwf	___wmul@multiplier+1,w
  3148  03A7  1D03               	btfss	3,2
  3149  03A8  2B94               	goto	l1708
  3150  03A9  0875               	movf	___wmul@product+1,w
  3151  03AA  00D6               	movwf	?___wmul+1
  3152  03AB  0874               	movf	___wmul@product,w
  3153  03AC  00D5               	movwf	?___wmul
  3154  03AD  0008               	return
  3155  03AE                     __end_of___wmul:	
  3156                           
  3157                           	psect	text13
  3158  0339                     __ptext13:	
  3159 ;; *************** function ___lwdiv *****************
  3160 ;; Defined at:
  3161 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwdiv.c"
  3162 ;; Parameters:    Size  Location     Type
  3163 ;;  divisor         2    4[BANK0 ] unsigned int 
  3164 ;;  dividend        2    6[BANK0 ] unsigned int 
  3165 ;; Auto vars:     Size  Location     Type
  3166 ;;  quotient        2    9[BANK0 ] unsigned int 
  3167 ;;  counter         1   11[BANK0 ] unsigned char 
  3168 ;; Return value:  Size  Location     Type
  3169 ;;                  2    4[BANK0 ] unsigned int 
  3170 ;; Registers used:
  3171 ;;		wreg, status,2, status,0
  3172 ;; Tracked objects:
  3173 ;;		On entry : 0/0
  3174 ;;		On exit  : 0/0
  3175 ;;		Unchanged: 0/0
  3176 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3177 ;;      Params:         0       4       0       0
  3178 ;;      Locals:         0       3       0       0
  3179 ;;      Temps:          0       1       0       0
  3180 ;;      Totals:         0       8       0       0
  3181 ;;Total ram usage:        8 bytes
  3182 ;; Hardware stack levels used:    1
  3183 ;; Hardware stack levels required when called:    4
  3184 ;; This function calls:
  3185 ;;		Nothing
  3186 ;; This function is called by:
  3187 ;;		_RunRightFlash
  3188 ;;		_RunLeftFlash
  3189 ;; This function uses a non-reentrant model
  3190 ;;
  3191                           
  3192                           
  3193                           ;psect for function ___lwdiv
  3194  0339                     ___lwdiv:	
  3195                           
  3196                           ;incstack = 0
  3197                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  3198  0339  0020               	movlb	0	; select bank0
  3199  033A  01DE               	clrf	___lwdiv@quotient
  3200  033B  01DF               	clrf	___lwdiv@quotient+1
  3201  033C  0859               	movf	___lwdiv@divisor,w
  3202  033D  045A               	iorwf	___lwdiv@divisor+1,w
  3203  033E  1903               	btfsc	3,2
  3204  033F  2B69               	goto	l1366
  3205  0340  01E0               	clrf	___lwdiv@counter
  3206  0341  0AE0               	incf	___lwdiv@counter,f
  3207  0342                     l1354:	
  3208  0342  1BDA               	btfsc	___lwdiv@divisor+1,7
  3209  0343  2B4E               	goto	l1356
  3210  0344  3001               	movlw	1
  3211  0345                     u1015:	
  3212  0345  35D9               	lslf	___lwdiv@divisor,f
  3213  0346  0DDA               	rlf	___lwdiv@divisor+1,f
  3214  0347  0B89               	decfsz	9,f
  3215  0348  2B45               	goto	u1015
  3216  0349  3001               	movlw	1
  3217  034A  00DD               	movwf	??___lwdiv
  3218  034B  085D               	movf	??___lwdiv,w
  3219  034C  07E0               	addwf	___lwdiv@counter,f
  3220  034D  2B42               	goto	l1354
  3221  034E                     l1356:	
  3222  034E  3001               	movlw	1
  3223  034F                     u1035:	
  3224  034F  35DE               	lslf	___lwdiv@quotient,f
  3225  0350  0DDF               	rlf	___lwdiv@quotient+1,f
  3226  0351  0B89               	decfsz	9,f
  3227  0352  2B4F               	goto	u1035
  3228  0353  085A               	movf	___lwdiv@divisor+1,w
  3229  0354  025C               	subwf	___lwdiv@dividend+1,w
  3230  0355  1D03               	skipz
  3231  0356  2B59               	goto	u1045
  3232  0357  0859               	movf	___lwdiv@divisor,w
  3233  0358  025B               	subwf	___lwdiv@dividend,w
  3234  0359                     u1045:	
  3235  0359  1C03               	skipc
  3236  035A  2B60               	goto	l1362
  3237  035B  0859               	movf	___lwdiv@divisor,w
  3238  035C  02DB               	subwf	___lwdiv@dividend,f
  3239  035D  085A               	movf	___lwdiv@divisor+1,w
  3240  035E  3BDC               	subwfb	___lwdiv@dividend+1,f
  3241  035F  145E               	bsf	___lwdiv@quotient,0
  3242  0360                     l1362:	
  3243  0360  3001               	movlw	1
  3244  0361                     u1055:	
  3245  0361  36DA               	lsrf	___lwdiv@divisor+1,f
  3246  0362  0CD9               	rrf	___lwdiv@divisor,f
  3247  0363  0B89               	decfsz	9,f
  3248  0364  2B61               	goto	u1055
  3249  0365  3001               	movlw	1
  3250  0366  02E0               	subwf	___lwdiv@counter,f
  3251  0367  1D03               	btfss	3,2
  3252  0368  2B4E               	goto	l1356
  3253  0369                     l1366:	
  3254  0369  085F               	movf	___lwdiv@quotient+1,w
  3255  036A  00DA               	movwf	?___lwdiv+1
  3256  036B  085E               	movf	___lwdiv@quotient,w
  3257  036C  00D9               	movwf	?___lwdiv
  3258  036D  0008               	return
  3259  036E                     __end_of___lwdiv:	
  3260                           
  3261                           	psect	text14
  3262  041F                     __ptext14:	
  3263 ;; *************** function _SetLEDOn *****************
  3264 ;; Defined at:
  3265 ;;		line 189 in file "main.c"
  3266 ;; Parameters:    Size  Location     Type
  3267 ;;  LED             1    wreg     unsigned char 
  3268 ;; Auto vars:     Size  Location     Type
  3269 ;;  LED             1    5[COMMON] unsigned char 
  3270 ;; Return value:  Size  Location     Type
  3271 ;;                  1    wreg      void 
  3272 ;; Registers used:
  3273 ;;		wreg, status,2, status,0
  3274 ;; Tracked objects:
  3275 ;;		On entry : 0/0
  3276 ;;		On exit  : 0/0
  3277 ;;		Unchanged: 0/0
  3278 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3279 ;;      Params:         0       0       0       0
  3280 ;;      Locals:         1       0       0       0
  3281 ;;      Temps:          1       0       0       0
  3282 ;;      Totals:         2       0       0       0
  3283 ;;Total ram usage:        2 bytes
  3284 ;; Hardware stack levels used:    1
  3285 ;; Hardware stack levels required when called:    4
  3286 ;; This function calls:
  3287 ;;		Nothing
  3288 ;; This function is called by:
  3289 ;;		_RunRightFlash
  3290 ;;		_RunLeftFlash
  3291 ;; This function uses a non-reentrant model
  3292 ;;
  3293                           
  3294                           
  3295                           ;psect for function _SetLEDOn
  3296  041F                     _SetLEDOn:	
  3297                           
  3298                           ;incstack = 0
  3299                           ; Regs used in _SetLEDOn: [wreg+status,2+status,0]
  3300                           ;SetLEDOn@LED stored from wreg
  3301  041F  00F5               	movwf	SetLEDOn@LED
  3302                           
  3303                           ;main.c: 191: LEDOns = (uint8_t)(LEDOns | LED);
  3304  0420  0020               	movlb	0	; select bank0
  3305  0421  083F               	movf	_LEDOns,w	;volatile
  3306  0422  0475               	iorwf	SetLEDOn@LED,w
  3307  0423  00F4               	movwf	??_SetLEDOn
  3308  0424  0874               	movf	??_SetLEDOn,w
  3309  0425  00BF               	movwf	_LEDOns	;volatile
  3310  0426  0008               	return
  3311  0427                     __end_of_SetLEDOn:	
  3312                           
  3313                           	psect	text15
  3314  0427                     __ptext15:	
  3315 ;; *************** function _SetLEDOff *****************
  3316 ;; Defined at:
  3317 ;;		line 194 in file "main.c"
  3318 ;; Parameters:    Size  Location     Type
  3319 ;;  LED             1    wreg     unsigned char 
  3320 ;; Auto vars:     Size  Location     Type
  3321 ;;  LED             1    5[COMMON] unsigned char 
  3322 ;; Return value:  Size  Location     Type
  3323 ;;                  1    wreg      void 
  3324 ;; Registers used:
  3325 ;;		wreg, status,2, status,0
  3326 ;; Tracked objects:
  3327 ;;		On entry : 0/0
  3328 ;;		On exit  : 0/0
  3329 ;;		Unchanged: 0/0
  3330 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3331 ;;      Params:         0       0       0       0
  3332 ;;      Locals:         1       0       0       0
  3333 ;;      Temps:          1       0       0       0
  3334 ;;      Totals:         2       0       0       0
  3335 ;;Total ram usage:        2 bytes
  3336 ;; Hardware stack levels used:    1
  3337 ;; Hardware stack levels required when called:    4
  3338 ;; This function calls:
  3339 ;;		Nothing
  3340 ;; This function is called by:
  3341 ;;		_RunRightFlash
  3342 ;;		_RunLeftFlash
  3343 ;; This function uses a non-reentrant model
  3344 ;;
  3345                           
  3346                           
  3347                           ;psect for function _SetLEDOff
  3348  0427                     _SetLEDOff:	
  3349                           
  3350                           ;incstack = 0
  3351                           ; Regs used in _SetLEDOff: [wreg+status,2+status,0]
  3352                           ;SetLEDOff@LED stored from wreg
  3353  0427  00F5               	movwf	SetLEDOff@LED
  3354                           
  3355                           ;main.c: 196: LEDOns = (uint8_t)(LEDOns & ~LED);
  3356  0428  0975               	comf	SetLEDOff@LED,w
  3357  0429  0020               	movlb	0	; select bank0
  3358  042A  053F               	andwf	_LEDOns,w	;volatile
  3359  042B  00F4               	movwf	??_SetLEDOff
  3360  042C  0874               	movf	??_SetLEDOff,w
  3361  042D  00BF               	movwf	_LEDOns	;volatile
  3362  042E  0008               	return
  3363  042F                     __end_of_SetLEDOff:	
  3364                           
  3365                           	psect	text16
  3366  01F3                     __ptext16:	
  3367 ;; *************** function _CheckForButtonPushes *****************
  3368 ;; Defined at:
  3369 ;;		line 545 in file "main.c"
  3370 ;; Parameters:    Size  Location     Type
  3371 ;;		None
  3372 ;; Auto vars:     Size  Location     Type
  3373 ;;		None
  3374 ;; Return value:  Size  Location     Type
  3375 ;;                  1    wreg      unsigned char 
  3376 ;; Registers used:
  3377 ;;		wreg, status,2, status,0, pclath, cstack
  3378 ;; Tracked objects:
  3379 ;;		On entry : 0/0
  3380 ;;		On exit  : 0/0
  3381 ;;		Unchanged: 0/0
  3382 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3383 ;;      Params:         0       0       0       0
  3384 ;;      Locals:         1       0       0       0
  3385 ;;      Temps:          1       0       0       0
  3386 ;;      Totals:         2       0       0       0
  3387 ;;Total ram usage:        2 bytes
  3388 ;; Hardware stack levels used:    1
  3389 ;; Hardware stack levels required when called:    5
  3390 ;; This function calls:
  3391 ;;		_LeftButtonPressed
  3392 ;;		_LeftButtonPressedRaw
  3393 ;;		_RightButtonPressed
  3394 ;;		_RightButtonPressedRaw
  3395 ;; This function is called by:
  3396 ;;		_main
  3397 ;; This function uses a non-reentrant model
  3398 ;;
  3399                           
  3400                           
  3401                           ;psect for function _CheckForButtonPushes
  3402  01F3                     _CheckForButtonPushes:	
  3403                           
  3404                           ;main.c: 547: static bool LastLeftButtonState = 0;
  3405                           ;main.c: 548: static bool LastRightButtonState = 0;
  3406                           ;main.c: 551: if (LeftButtonPressedRaw())
  3407                           
  3408                           ;incstack = 0
  3409                           ; Regs used in _CheckForButtonPushes: [wreg+status,2+status,0+pclath+cstack]
  3410  01F3  244D               	fcall	_LeftButtonPressedRaw
  3411  01F4  3A00               	xorlw	0
  3412  01F5  1903               	skipnz
  3413  01F6  2A05               	goto	l1538
  3414                           
  3415                           ;main.c: 552: {
  3416                           ;main.c: 553: if (LeftButtonState == BUTTON_STATE_PRESSED_TIMING)
  3417  01F7  0377               	decf	_LeftButtonState,w	;volatile
  3418  01F8  1D03               	btfss	3,2
  3419  01F9  29FF               	goto	l1534
  3420                           
  3421                           ;main.c: 554: {
  3422                           ;main.c: 555: if (LeftDebounceTimer == 0)
  3423  01FA  0879               	movf	_LeftDebounceTimer,w	;volatile
  3424  01FB  1D03               	btfss	3,2
  3425  01FC  2A1D               	goto	l1548
  3426                           
  3427                           ;main.c: 556: {
  3428                           ;main.c: 557: LeftButtonState = BUTTON_STATE_PRESSED;
  3429  01FD  3002               	movlw	2
  3430  01FE  2A0D               	goto	L5
  3431  01FF                     l1534:	
  3432                           ;main.c: 558: }
  3433                           ;main.c: 559: }
  3434                           
  3435                           
  3436                           ;main.c: 560: else if (LeftButtonState != BUTTON_STATE_PRESSED)
  3437  01FF  3002               	movlw	2
  3438  0200  0677               	xorwf	_LeftButtonState,w	;volatile
  3439  0201  1903               	btfsc	3,2
  3440  0202  2A1D               	goto	l1548
  3441                           
  3442                           ;main.c: 561: {
  3443                           ;main.c: 562: LeftButtonState = BUTTON_STATE_PRESSED_TIMING;
  3444  0203  3001               	movlw	1
  3445  0204  2A16               	goto	L6
  3446  0205                     l1538:	
  3447                           ;main.c: 564: }
  3448                           ;main.c: 565: }
  3449                           
  3450                           ;main.c: 563: LeftDebounceTimer = 50;
  3451                           
  3452                           
  3453                           ;main.c: 566: else
  3454                           ;main.c: 567: {
  3455                           ;main.c: 568: if (LeftButtonState == BUTTON_STATE_RELEASED_TIMING)
  3456  0205  3003               	movlw	3
  3457  0206  0677               	xorwf	_LeftButtonState,w	;volatile
  3458  0207  1D03               	btfss	3,2
  3459  0208  2A11               	goto	l1544
  3460                           
  3461                           ;main.c: 569: {
  3462                           ;main.c: 570: if (LeftDebounceTimer == 0)
  3463  0209  0879               	movf	_LeftDebounceTimer,w	;volatile
  3464  020A  1D03               	btfss	3,2
  3465  020B  2A1D               	goto	l1548
  3466                           
  3467                           ;main.c: 571: {
  3468                           ;main.c: 572: LeftButtonState = BUTTON_STATE_RELEASED;
  3469  020C  3004               	movlw	4
  3470  020D                     L5:	
  3471  020D  00F4               	movwf	??_CheckForButtonPushes
  3472  020E  0874               	movf	??_CheckForButtonPushes,w
  3473  020F  00F7               	movwf	_LeftButtonState	;volatile
  3474                           
  3475                           ;main.c: 573: }
  3476                           ;main.c: 574: }
  3477  0210  2A1D               	goto	l1548
  3478  0211                     l1544:	
  3479                           
  3480                           ;main.c: 575: else if (LeftButtonState != BUTTON_STATE_RELEASED)
  3481  0211  3004               	movlw	4
  3482  0212  0677               	xorwf	_LeftButtonState,w	;volatile
  3483  0213  1903               	btfsc	3,2
  3484  0214  2A1D               	goto	l1548
  3485                           
  3486                           ;main.c: 576: {
  3487                           ;main.c: 577: LeftButtonState = BUTTON_STATE_RELEASED_TIMING;
  3488  0215  3003               	movlw	3
  3489  0216                     L6:	
  3490  0216  00F4               	movwf	??_CheckForButtonPushes
  3491  0217  0874               	movf	??_CheckForButtonPushes,w
  3492  0218  00F7               	movwf	_LeftButtonState	;volatile
  3493                           
  3494                           ;main.c: 578: LeftDebounceTimer = 50;
  3495  0219  3032               	movlw	50
  3496  021A  00F4               	movwf	??_CheckForButtonPushes
  3497  021B  0874               	movf	??_CheckForButtonPushes,w
  3498  021C  00F9               	movwf	_LeftDebounceTimer	;volatile
  3499  021D                     l1548:	
  3500                           
  3501                           ;main.c: 579: }
  3502                           ;main.c: 580: }
  3503                           ;main.c: 583: if (RightButtonPressedRaw())
  3504  021D  2446               	fcall	_RightButtonPressedRaw
  3505  021E  3A00               	xorlw	0
  3506  021F  1903               	skipnz
  3507  0220  2A2F               	goto	l1560
  3508                           
  3509                           ;main.c: 584: {
  3510                           ;main.c: 585: if (RightButtonState == BUTTON_STATE_PRESSED_TIMING)
  3511  0221  0376               	decf	_RightButtonState,w	;volatile
  3512  0222  1D03               	btfss	3,2
  3513  0223  2A29               	goto	l1556
  3514                           
  3515                           ;main.c: 586: {
  3516                           ;main.c: 587: if (RightDebounceTimer == 0)
  3517  0224  0878               	movf	_RightDebounceTimer,w	;volatile
  3518  0225  1D03               	btfss	3,2
  3519  0226  2A47               	goto	l1570
  3520                           
  3521                           ;main.c: 588: {
  3522                           ;main.c: 589: RightButtonState = BUTTON_STATE_PRESSED;
  3523  0227  3002               	movlw	2
  3524  0228  2A37               	goto	L7
  3525  0229                     l1556:	
  3526                           ;main.c: 590: }
  3527                           ;main.c: 591: }
  3528                           
  3529                           
  3530                           ;main.c: 592: else if (RightButtonState != BUTTON_STATE_PRESSED)
  3531  0229  3002               	movlw	2
  3532  022A  0676               	xorwf	_RightButtonState,w	;volatile
  3533  022B  1903               	btfsc	3,2
  3534  022C  2A47               	goto	l1570
  3535                           
  3536                           ;main.c: 593: {
  3537                           ;main.c: 594: RightButtonState = BUTTON_STATE_PRESSED_TIMING;
  3538  022D  3001               	movlw	1
  3539  022E  2A40               	goto	L8
  3540  022F                     l1560:	
  3541                           ;main.c: 596: }
  3542                           ;main.c: 597: }
  3543                           
  3544                           ;main.c: 595: RightDebounceTimer = 50;
  3545                           
  3546                           
  3547                           ;main.c: 598: else
  3548                           ;main.c: 599: {
  3549                           ;main.c: 600: if (RightButtonState == BUTTON_STATE_RELEASED_TIMING)
  3550  022F  3003               	movlw	3
  3551  0230  0676               	xorwf	_RightButtonState,w	;volatile
  3552  0231  1D03               	btfss	3,2
  3553  0232  2A3B               	goto	l1566
  3554                           
  3555                           ;main.c: 601: {
  3556                           ;main.c: 602: if (RightDebounceTimer == 0)
  3557  0233  0878               	movf	_RightDebounceTimer,w	;volatile
  3558  0234  1D03               	btfss	3,2
  3559  0235  2A47               	goto	l1570
  3560                           
  3561                           ;main.c: 603: {
  3562                           ;main.c: 604: RightButtonState = BUTTON_STATE_RELEASED;
  3563  0236  3004               	movlw	4
  3564  0237                     L7:	
  3565  0237  00F4               	movwf	??_CheckForButtonPushes
  3566  0238  0874               	movf	??_CheckForButtonPushes,w
  3567  0239  00F6               	movwf	_RightButtonState	;volatile
  3568                           
  3569                           ;main.c: 605: }
  3570                           ;main.c: 606: }
  3571  023A  2A47               	goto	l1570
  3572  023B                     l1566:	
  3573                           
  3574                           ;main.c: 607: else if (RightButtonState != BUTTON_STATE_RELEASED)
  3575  023B  3004               	movlw	4
  3576  023C  0676               	xorwf	_RightButtonState,w	;volatile
  3577  023D  1903               	btfsc	3,2
  3578  023E  2A47               	goto	l1570
  3579                           
  3580                           ;main.c: 608: {
  3581                           ;main.c: 609: RightButtonState = BUTTON_STATE_RELEASED_TIMING;
  3582  023F  3003               	movlw	3
  3583  0240                     L8:	
  3584  0240  00F4               	movwf	??_CheckForButtonPushes
  3585  0241  0874               	movf	??_CheckForButtonPushes,w
  3586  0242  00F6               	movwf	_RightButtonState	;volatile
  3587                           
  3588                           ;main.c: 610: RightDebounceTimer = 50;
  3589  0243  3032               	movlw	50
  3590  0244  00F4               	movwf	??_CheckForButtonPushes
  3591  0245  0874               	movf	??_CheckForButtonPushes,w
  3592  0246  00F8               	movwf	_RightDebounceTimer	;volatile
  3593  0247                     l1570:	
  3594                           
  3595                           ;main.c: 611: }
  3596                           ;main.c: 612: }
  3597                           ;main.c: 614: if (LeftButtonPressed())
  3598  0247  2437               	fcall	_LeftButtonPressed
  3599  0248  3A00               	xorlw	0
  3600  0249  1903               	skipnz
  3601  024A  2A56               	goto	l1578
  3602                           
  3603                           ;main.c: 615: {
  3604                           ;main.c: 616: if (LastLeftButtonState == 0)
  3605  024B  0020               	movlb	0	; select bank0
  3606  024C  083D               	movf	CheckForButtonPushes@LastLeftButtonState,w
  3607  024D  1D03               	btfss	3,2
  3608  024E  2A53               	goto	l1576
  3609                           
  3610                           ;main.c: 617: {
  3611                           ;main.c: 618: PatternState[1] = 1;
  3612  024F  3001               	movlw	1
  3613  0250  00F4               	movwf	??_CheckForButtonPushes
  3614  0251  0874               	movf	??_CheckForButtonPushes,w
  3615  0252  00B1               	movwf	_PatternState+1	;volatile
  3616  0253                     l1576:	
  3617                           
  3618                           ;main.c: 619: }
  3619                           ;main.c: 620: LastLeftButtonState = 1;
  3620  0253  01BD               	clrf	CheckForButtonPushes@LastLeftButtonState
  3621  0254  0ABD               	incf	CheckForButtonPushes@LastLeftButtonState,f
  3622                           
  3623                           ;main.c: 621: }
  3624  0255  2A58               	goto	l1580
  3625  0256                     l1578:	
  3626                           
  3627                           ;main.c: 622: else
  3628                           ;main.c: 623: {
  3629                           ;main.c: 624: LastLeftButtonState = 0;
  3630  0256  0020               	movlb	0	; select bank0
  3631  0257  01BD               	clrf	CheckForButtonPushes@LastLeftButtonState
  3632  0258                     l1580:	
  3633                           
  3634                           ;main.c: 625: }
  3635                           ;main.c: 628: if (RightButtonPressed())
  3636  0258  242F               	fcall	_RightButtonPressed
  3637  0259  3A00               	xorlw	0
  3638  025A  1903               	skipnz
  3639  025B  2A67               	goto	l1588
  3640                           
  3641                           ;main.c: 629: {
  3642                           ;main.c: 630: if (LastRightButtonState == 0)
  3643  025C  0020               	movlb	0	; select bank0
  3644  025D  083C               	movf	CheckForButtonPushes@LastRightButtonState,w
  3645  025E  1D03               	btfss	3,2
  3646  025F  2A64               	goto	l1586
  3647                           
  3648                           ;main.c: 631: {
  3649                           ;main.c: 632: PatternState[0] = 1;
  3650  0260  3001               	movlw	1
  3651  0261  00F4               	movwf	??_CheckForButtonPushes
  3652  0262  0874               	movf	??_CheckForButtonPushes,w
  3653  0263  00B0               	movwf	_PatternState	;volatile
  3654  0264                     l1586:	
  3655                           
  3656                           ;main.c: 633: }
  3657                           ;main.c: 634: LastRightButtonState = 1;
  3658  0264  01BC               	clrf	CheckForButtonPushes@LastRightButtonState
  3659  0265  0ABC               	incf	CheckForButtonPushes@LastRightButtonState,f
  3660                           
  3661                           ;main.c: 635: }
  3662  0266  2A69               	goto	l1590
  3663  0267                     l1588:	
  3664                           
  3665                           ;main.c: 636: else
  3666                           ;main.c: 637: {
  3667                           ;main.c: 638: LastRightButtonState = 0;
  3668  0267  0020               	movlb	0	; select bank0
  3669  0268  01BC               	clrf	CheckForButtonPushes@LastRightButtonState
  3670  0269                     l1590:	
  3671                           
  3672                           ;main.c: 639: }
  3673                           ;main.c: 641: return ((bool)(LeftButtonPressedRaw() || RightButtonPressedRaw()));
  3674  0269  01F5               	clrf	_CheckForButtonPushes$429
  3675  026A  0AF5               	incf	_CheckForButtonPushes$429,f
  3676  026B  244D               	fcall	_LeftButtonPressedRaw
  3677  026C  3A00               	xorlw	0
  3678  026D  1D03               	skipz
  3679  026E  2A74               	goto	l1598
  3680  026F  2446               	fcall	_RightButtonPressedRaw
  3681  0270  3A00               	xorlw	0
  3682  0271  1D03               	skipz
  3683  0272  2A74               	goto	l1598
  3684  0273  01F5               	clrf	_CheckForButtonPushes$429
  3685  0274                     l1598:	
  3686  0274  0875               	movf	_CheckForButtonPushes$429,w
  3687  0275  0008               	return
  3688  0276                     __end_of_CheckForButtonPushes:	
  3689                           
  3690                           	psect	text17
  3691  0446                     __ptext17:	
  3692 ;; *************** function _RightButtonPressedRaw *****************
  3693 ;; Defined at:
  3694 ;;		line 267 in file "main.c"
  3695 ;; Parameters:    Size  Location     Type
  3696 ;;		None
  3697 ;; Auto vars:     Size  Location     Type
  3698 ;;		None
  3699 ;; Return value:  Size  Location     Type
  3700 ;;                  1    wreg      unsigned char 
  3701 ;; Registers used:
  3702 ;;		wreg, status,0
  3703 ;; Tracked objects:
  3704 ;;		On entry : 0/0
  3705 ;;		On exit  : 0/0
  3706 ;;		Unchanged: 0/0
  3707 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3708 ;;      Params:         0       0       0       0
  3709 ;;      Locals:         0       0       0       0
  3710 ;;      Temps:          0       0       0       0
  3711 ;;      Totals:         0       0       0       0
  3712 ;;Total ram usage:        0 bytes
  3713 ;; Hardware stack levels used:    1
  3714 ;; Hardware stack levels required when called:    4
  3715 ;; This function calls:
  3716 ;;		Nothing
  3717 ;; This function is called by:
  3718 ;;		_CheckForButtonPushes
  3719 ;; This function uses a non-reentrant model
  3720 ;;
  3721                           
  3722                           
  3723                           ;psect for function _RightButtonPressedRaw
  3724  0446                     _RightButtonPressedRaw:	
  3725                           
  3726                           ;main.c: 269: return (uint8_t)(PORTAbits.RA3 == 0);
  3727                           
  3728                           ;incstack = 0
  3729                           ; Regs used in _RightButtonPressedRaw: [wreg+status,0]
  3730  0446  1003               	clrc
  3731  0447  0020               	movlb	0	; select bank0
  3732  0448  1D8C               	btfss	12,3	;volatile
  3733  0449  1403               	setc
  3734  044A  3000               	movlw	0
  3735  044B  3D09               	addwfc	9,w
  3736  044C  0008               	return
  3737  044D                     __end_of_RightButtonPressedRaw:	
  3738                           
  3739                           	psect	text18
  3740  042F                     __ptext18:	
  3741 ;; *************** function _RightButtonPressed *****************
  3742 ;; Defined at:
  3743 ;;		line 279 in file "main.c"
  3744 ;; Parameters:    Size  Location     Type
  3745 ;;		None
  3746 ;; Auto vars:     Size  Location     Type
  3747 ;;		None
  3748 ;; Return value:  Size  Location     Type
  3749 ;;                  1    wreg      unsigned char 
  3750 ;; Registers used:
  3751 ;;		wreg, status,2, status,0
  3752 ;; Tracked objects:
  3753 ;;		On entry : 0/0
  3754 ;;		On exit  : 0/0
  3755 ;;		Unchanged: 0/0
  3756 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3757 ;;      Params:         0       0       0       0
  3758 ;;      Locals:         0       0       0       0
  3759 ;;      Temps:          0       0       0       0
  3760 ;;      Totals:         0       0       0       0
  3761 ;;Total ram usage:        0 bytes
  3762 ;; Hardware stack levels used:    1
  3763 ;; Hardware stack levels required when called:    4
  3764 ;; This function calls:
  3765 ;;		Nothing
  3766 ;; This function is called by:
  3767 ;;		_RunRightFlash
  3768 ;;		_CheckForButtonPushes
  3769 ;; This function uses a non-reentrant model
  3770 ;;
  3771                           
  3772                           
  3773                           ;psect for function _RightButtonPressed
  3774  042F                     _RightButtonPressed:	
  3775                           
  3776                           ;main.c: 281: return (RightButtonState == BUTTON_STATE_PRESSED);
  3777                           
  3778                           ;incstack = 0
  3779                           ; Regs used in _RightButtonPressed: [wreg+status,2+status,0]
  3780  042F  3002               	movlw	2
  3781  0430  0676               	xorwf	_RightButtonState,w	;volatile
  3782  0431  1D03               	btfss	3,2
  3783  0432  2C35               	goto	u920
  3784  0433  3001               	movlw	1
  3785  0434  0008               	return
  3786  0435                     u920:	
  3787  0435  3000               	movlw	0
  3788  0436  0008               	return
  3789  0437                     __end_of_RightButtonPressed:	
  3790                           
  3791                           	psect	text19
  3792  044D                     __ptext19:	
  3793 ;; *************** function _LeftButtonPressedRaw *****************
  3794 ;; Defined at:
  3795 ;;		line 273 in file "main.c"
  3796 ;; Parameters:    Size  Location     Type
  3797 ;;		None
  3798 ;; Auto vars:     Size  Location     Type
  3799 ;;		None
  3800 ;; Return value:  Size  Location     Type
  3801 ;;                  1    wreg      unsigned char 
  3802 ;; Registers used:
  3803 ;;		wreg, status,0
  3804 ;; Tracked objects:
  3805 ;;		On entry : 0/0
  3806 ;;		On exit  : 0/0
  3807 ;;		Unchanged: 0/0
  3808 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3809 ;;      Params:         0       0       0       0
  3810 ;;      Locals:         0       0       0       0
  3811 ;;      Temps:          0       0       0       0
  3812 ;;      Totals:         0       0       0       0
  3813 ;;Total ram usage:        0 bytes
  3814 ;; Hardware stack levels used:    1
  3815 ;; Hardware stack levels required when called:    4
  3816 ;; This function calls:
  3817 ;;		Nothing
  3818 ;; This function is called by:
  3819 ;;		_CheckForButtonPushes
  3820 ;; This function uses a non-reentrant model
  3821 ;;
  3822                           
  3823                           
  3824                           ;psect for function _LeftButtonPressedRaw
  3825  044D                     _LeftButtonPressedRaw:	
  3826                           
  3827                           ;main.c: 275: return (uint8_t)(PORTAbits.RA2 == 0);
  3828                           
  3829                           ;incstack = 0
  3830                           ; Regs used in _LeftButtonPressedRaw: [wreg+status,0]
  3831  044D  1003               	clrc
  3832  044E  0020               	movlb	0	; select bank0
  3833  044F  1D0C               	btfss	12,2	;volatile
  3834  0450  1403               	setc
  3835  0451  3000               	movlw	0
  3836  0452  3D09               	addwfc	9,w
  3837  0453  0008               	return
  3838  0454                     __end_of_LeftButtonPressedRaw:	
  3839                           
  3840                           	psect	text20
  3841  0437                     __ptext20:	
  3842 ;; *************** function _LeftButtonPressed *****************
  3843 ;; Defined at:
  3844 ;;		line 285 in file "main.c"
  3845 ;; Parameters:    Size  Location     Type
  3846 ;;		None
  3847 ;; Auto vars:     Size  Location     Type
  3848 ;;		None
  3849 ;; Return value:  Size  Location     Type
  3850 ;;                  1    wreg      unsigned char 
  3851 ;; Registers used:
  3852 ;;		wreg, status,2, status,0
  3853 ;; Tracked objects:
  3854 ;;		On entry : 0/0
  3855 ;;		On exit  : 0/0
  3856 ;;		Unchanged: 0/0
  3857 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3858 ;;      Params:         0       0       0       0
  3859 ;;      Locals:         0       0       0       0
  3860 ;;      Temps:          0       0       0       0
  3861 ;;      Totals:         0       0       0       0
  3862 ;;Total ram usage:        0 bytes
  3863 ;; Hardware stack levels used:    1
  3864 ;; Hardware stack levels required when called:    4
  3865 ;; This function calls:
  3866 ;;		Nothing
  3867 ;; This function is called by:
  3868 ;;		_RunLeftFlash
  3869 ;;		_CheckForButtonPushes
  3870 ;; This function uses a non-reentrant model
  3871 ;;
  3872                           
  3873                           
  3874                           ;psect for function _LeftButtonPressed
  3875  0437                     _LeftButtonPressed:	
  3876                           
  3877                           ;main.c: 287: return (LeftButtonState == BUTTON_STATE_PRESSED);
  3878                           
  3879                           ;incstack = 0
  3880                           ; Regs used in _LeftButtonPressed: [wreg+status,2+status,0]
  3881  0437  3002               	movlw	2
  3882  0438  0677               	xorwf	_LeftButtonState,w	;volatile
  3883  0439  1D03               	btfss	3,2
  3884  043A  2C3D               	goto	u940
  3885  043B  3001               	movlw	1
  3886  043C  0008               	return
  3887  043D                     u940:	
  3888  043D  3000               	movlw	0
  3889  043E  0008               	return
  3890  043F                     __end_of_LeftButtonPressed:	
  3891                           
  3892                           	psect	intentry
  3893  0004                     __pintentry:	
  3894 ;; *************** function _INTERRUPT_InterruptManager *****************
  3895 ;; Defined at:
  3896 ;;		line 51 in file "mcc_generated_files/interrupt_manager.c"
  3897 ;; Parameters:    Size  Location     Type
  3898 ;;		None
  3899 ;; Auto vars:     Size  Location     Type
  3900 ;;		None
  3901 ;; Return value:  Size  Location     Type
  3902 ;;                  1    wreg      void 
  3903 ;; Registers used:
  3904 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3905 ;; Tracked objects:
  3906 ;;		On entry : 0/0
  3907 ;;		On exit  : 0/0
  3908 ;;		Unchanged: 0/0
  3909 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3910 ;;      Params:         0       0       0       0
  3911 ;;      Locals:         0       0       0       0
  3912 ;;      Temps:          1       0       0       0
  3913 ;;      Totals:         1       0       0       0
  3914 ;;Total ram usage:        1 bytes
  3915 ;; Hardware stack levels used:    1
  3916 ;; Hardware stack levels required when called:    3
  3917 ;; This function calls:
  3918 ;;		_PIN_MANAGER_IOC
  3919 ;;		_TMR0_ISR
  3920 ;; This function is called by:
  3921 ;;		Interrupt level 1
  3922 ;; This function uses a non-reentrant model
  3923 ;;
  3924                           
  3925  0004                     _INTERRUPT_InterruptManager:	
  3926                           
  3927                           ;incstack = 0
  3928  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  3929                           
  3930                           ; Regs used in _INTERRUPT_InterruptManager: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  3931  0005  3180               	pagesel	$
  3932  0006  0020               	movlb	0	; select bank0
  3933  0007  087F               	movf	127,w
  3934  0008  00F3               	movwf	??_INTERRUPT_InterruptManager
  3935                           
  3936                           ;interrupt_manager.c: 54: if(INTCONbits.TMR0IE == 1 && INTCONbits.TMR0IF == 1)
  3937  0009  1A8B               	btfsc	11,5	;volatile
  3938  000A  1D0B               	btfss	11,2	;volatile
  3939  000B  280E               	goto	i1l100
  3940                           
  3941                           ;interrupt_manager.c: 55: {
  3942                           ;interrupt_manager.c: 56: TMR0_ISR();
  3943  000C  2472               	fcall	_TMR0_ISR
  3944                           
  3945                           ;interrupt_manager.c: 57: }
  3946  000D  2812               	goto	i1l104
  3947  000E                     i1l100:	
  3948                           
  3949                           ;interrupt_manager.c: 58: else if(INTCONbits.IOCIE == 1 && INTCONbits.IOCIF == 1)
  3950  000E  198B               	btfsc	11,3	;volatile
  3951  000F  1C0B               	btfss	11,0	;volatile
  3952  0010  2812               	goto	i1l104
  3953                           
  3954                           ;interrupt_manager.c: 59: {
  3955                           ;interrupt_manager.c: 60: PIN_MANAGER_IOC();
  3956  0011  2416               	fcall	_PIN_MANAGER_IOC
  3957  0012                     i1l104:	
  3958                           ;interrupt_manager.c: 62: else
  3959                           ;interrupt_manager.c: 63: {
  3960                           
  3961                           ;interrupt_manager.c: 61: }
  3962                           
  3963  0012  0873               	movf	??_INTERRUPT_InterruptManager,w
  3964  0013  0020               	movlb	0	; select bank0
  3965  0014  00FF               	movwf	127
  3966  0015  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  3967  0016  0009               	retfie
  3968  0017                     __end_of_INTERRUPT_InterruptManager:	
  3969                           
  3970                           	psect	text22
  3971  0472                     __ptext22:	
  3972 ;; *************** function _TMR0_ISR *****************
  3973 ;; Defined at:
  3974 ;;		line 108 in file "mcc_generated_files/tmr0.c"
  3975 ;; Parameters:    Size  Location     Type
  3976 ;;		None
  3977 ;; Auto vars:     Size  Location     Type
  3978 ;;		None
  3979 ;; Return value:  Size  Location     Type
  3980 ;;                  1    wreg      void 
  3981 ;; Registers used:
  3982 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3983 ;; Tracked objects:
  3984 ;;		On entry : 0/0
  3985 ;;		On exit  : 0/0
  3986 ;;		Unchanged: 0/0
  3987 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3988 ;;      Params:         0       0       0       0
  3989 ;;      Locals:         0       0       0       0
  3990 ;;      Temps:          0       0       0       0
  3991 ;;      Totals:         0       0       0       0
  3992 ;;Total ram usage:        0 bytes
  3993 ;; Hardware stack levels used:    1
  3994 ;; Hardware stack levels required when called:    2
  3995 ;; This function calls:
  3996 ;;		_TMR0_CallBack
  3997 ;; This function is called by:
  3998 ;;		_INTERRUPT_InterruptManager
  3999 ;; This function uses a non-reentrant model
  4000 ;;
  4001                           
  4002                           
  4003                           ;psect for function _TMR0_ISR
  4004  0472                     _TMR0_ISR:	
  4005                           
  4006                           ;tmr0.c: 112: INTCONbits.TMR0IF = 0;
  4007                           
  4008                           ;incstack = 0
  4009                           ; Regs used in _TMR0_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4010  0472  110B               	bcf	11,2	;volatile
  4011                           
  4012                           ;tmr0.c: 114: TMR0 = timer0ReloadVal;
  4013  0473  0020               	movlb	0	; select bank0
  4014  0474  086B               	movf	_timer0ReloadVal,w	;volatile
  4015  0475  0095               	movwf	21	;volatile
  4016                           
  4017                           ;tmr0.c: 118: TMR0_CallBack();
  4018  0476  240B               	fcall	_TMR0_CallBack
  4019  0477  0008               	return
  4020  0478                     __end_of_TMR0_ISR:	
  4021                           
  4022                           	psect	text23
  4023  040B                     __ptext23:	
  4024 ;; *************** function _TMR0_CallBack *****************
  4025 ;; Defined at:
  4026 ;;		line 123 in file "mcc_generated_files/tmr0.c"
  4027 ;; Parameters:    Size  Location     Type
  4028 ;;		None
  4029 ;; Auto vars:     Size  Location     Type
  4030 ;;		None
  4031 ;; Return value:  Size  Location     Type
  4032 ;;                  1    wreg      void 
  4033 ;; Registers used:
  4034 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4035 ;; Tracked objects:
  4036 ;;		On entry : 0/0
  4037 ;;		On exit  : 0/0
  4038 ;;		Unchanged: 0/0
  4039 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4040 ;;      Params:         0       0       0       0
  4041 ;;      Locals:         0       0       0       0
  4042 ;;      Temps:          0       0       0       0
  4043 ;;      Totals:         0       0       0       0
  4044 ;;Total ram usage:        0 bytes
  4045 ;; Hardware stack levels used:    1
  4046 ;; Hardware stack levels required when called:    1
  4047 ;; This function calls:
  4048 ;;		Absolute function
  4049 ;;		_TMR0_Callback
  4050 ;; This function is called by:
  4051 ;;		_TMR0_ISR
  4052 ;; This function uses a non-reentrant model
  4053 ;;
  4054                           
  4055                           
  4056                           ;psect for function _TMR0_CallBack
  4057  040B                     _TMR0_CallBack:	
  4058                           
  4059                           ;tmr0.c: 127: if(TMR0_InterruptHandler)
  4060                           
  4061                           ;incstack = 0
  4062                           ; Regs used in _TMR0_CallBack: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4063  040B  0020               	movlb	0	; select bank0
  4064  040C  0865               	movf	_TMR0_InterruptHandler,w
  4065  040D  0466               	iorwf	_TMR0_InterruptHandler+1,w
  4066  040E  1903               	btfsc	3,2
  4067  040F  0008               	return
  4068                           
  4069                           ;tmr0.c: 128: {
  4070                           ;tmr0.c: 129: TMR0_InterruptHandler();
  4071  0410  0866               	movf	_TMR0_InterruptHandler+1,w
  4072  0411  008A               	movwf	10
  4073  0412  0865               	movf	_TMR0_InterruptHandler,w
  4074  0413  000A               	callw
  4075  0414  3184               	pagesel	$
  4076  0415  0008               	return
  4077  0416                     __end_of_TMR0_CallBack:	
  4078                           
  4079                           	psect	text24
  4080  0276                     __ptext24:	
  4081 ;; *************** function _TMR0_Callback *****************
  4082 ;; Defined at:
  4083 ;;		line 208 in file "main.c"
  4084 ;; Parameters:    Size  Location     Type
  4085 ;;		None
  4086 ;; Auto vars:     Size  Location     Type
  4087 ;;  i               1    2[COMMON] unsigned char 
  4088 ;; Return value:  Size  Location     Type
  4089 ;;                  1    wreg      void 
  4090 ;; Registers used:
  4091 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  4092 ;; Tracked objects:
  4093 ;;		On entry : 0/0
  4094 ;;		On exit  : 0/0
  4095 ;;		Unchanged: 0/0
  4096 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4097 ;;      Params:         0       0       0       0
  4098 ;;      Locals:         1       0       0       0
  4099 ;;      Temps:          2       0       0       0
  4100 ;;      Totals:         3       0       0       0
  4101 ;;Total ram usage:        3 bytes
  4102 ;; Hardware stack levels used:    1
  4103 ;; This function calls:
  4104 ;;		Nothing
  4105 ;; This function is called by:
  4106 ;;		_main
  4107 ;;		_TMR0_CallBack
  4108 ;; This function uses a non-reentrant model
  4109 ;;
  4110                           
  4111                           
  4112                           ;psect for function _TMR0_Callback
  4113  0276                     _TMR0_Callback:	
  4114                           
  4115                           ;main.c: 210: uint8_t i;
  4116                           ;main.c: 213: TRISA = 0xCC;
  4117                           
  4118                           ;incstack = 0
  4119                           ; Regs used in _TMR0_Callback: [wreg+fsr1l+fsr1h+status,2+status,0]
  4120  0276  30CC               	movlw	204
  4121  0277  0021               	movlb	1	; select bank1
  4122  0278  008C               	movwf	12	;volatile
  4123                           
  4124                           ;main.c: 214: PORTA = 0x00;
  4125  0279  0020               	movlb	0	; select bank0
  4126  027A  018C               	clrf	12	;volatile
  4127                           
  4128                           ;main.c: 217: i = (uint8_t)(1 << LEDState);
  4129  027B  3001               	movlw	1
  4130  027C  00F0               	movwf	??_TMR0_Callback
  4131  027D  0A40               	incf	_LEDState,w
  4132  027E  2A80               	goto	u80_24
  4133  027F                     u80_25:	
  4134  027F  35F0               	lslf	??_TMR0_Callback,f
  4135  0280                     u80_24:	
  4136  0280  0B89               	decfsz	9,f
  4137  0281  2A7F               	goto	u80_25
  4138  0282  0870               	movf	??_TMR0_Callback,w
  4139  0283  00F1               	movwf	??_TMR0_Callback+1
  4140  0284  0871               	movf	??_TMR0_Callback+1,w
  4141  0285  00F2               	movwf	TMR0_Callback@i
  4142                           
  4143                           ;main.c: 220: if (i & LEDOns)
  4144  0286  0872               	movf	TMR0_Callback@i,w
  4145  0287  053F               	andwf	_LEDOns,w	;volatile
  4146  0288  1903               	btfsc	3,2
  4147  0289  2A98               	goto	i1l1214
  4148                           
  4149                           ;main.c: 221: {
  4150                           ;main.c: 223: TRISA = TRISTable[LEDState];
  4151  028A  0840               	movf	_LEDState,w
  4152  028B  3E49               	addlw	(low (_TRISTable| 0))& (0+255)
  4153  028C  0086               	movwf	6
  4154  028D  0187               	clrf	7
  4155  028E  0801               	movf	1,w
  4156  028F  0021               	movlb	1	; select bank1
  4157  0290  008C               	movwf	12	;volatile
  4158                           
  4159                           ;main.c: 224: PORTA = PORTTable[LEDState];
  4160  0291  0020               	movlb	0	; select bank0
  4161  0292  0840               	movf	_LEDState,w
  4162  0293  3E41               	addlw	(low (_PORTTable| 0))& (0+255)
  4163  0294  0086               	movwf	6
  4164  0295  0187               	clrf	7
  4165  0296  0801               	movf	1,w
  4166  0297  008C               	movwf	12	;volatile
  4167  0298                     i1l1214:	
  4168                           
  4169                           ;main.c: 225: }
  4170                           ;main.c: 228: LEDState++;
  4171  0298  3001               	movlw	1
  4172  0299  00F0               	movwf	??_TMR0_Callback
  4173  029A  0870               	movf	??_TMR0_Callback,w
  4174  029B  07C0               	addwf	_LEDState,f
  4175                           
  4176                           ;main.c: 229: if (LEDState == 8)
  4177  029C  3008               	movlw	8
  4178  029D  0640               	xorwf	_LEDState,w
  4179  029E  1D03               	btfss	3,2
  4180  029F  0008               	return
  4181                           
  4182                           ;main.c: 230: {
  4183                           ;main.c: 235: WakeTimer++;
  4184  02A0  3001               	movlw	1
  4185  02A1  07B8               	addwf	_WakeTimer,f	;volatile
  4186  02A2  3000               	movlw	0
  4187  02A3  3DB9               	addwfc	_WakeTimer+1,f	;volatile
  4188  02A4  3000               	movlw	0
  4189  02A5  3DBA               	addwfc	_WakeTimer+2,f	;volatile
  4190  02A6  3000               	movlw	0
  4191  02A7  3DBB               	addwfc	_WakeTimer+3,f	;volatile
  4192                           
  4193                           ;main.c: 238: for (i=0; i < 8; i++)
  4194  02A8  01F2               	clrf	TMR0_Callback@i
  4195  02A9  3008               	movlw	8
  4196  02AA  0272               	subwf	TMR0_Callback@i,w
  4197  02AB  1803               	btfsc	3,0
  4198  02AC  2AC7               	goto	i1l1234
  4199  02AD                     i1l1226:	
  4200                           
  4201                           ;main.c: 239: {
  4202                           ;main.c: 240: if (PatternDelay[i])
  4203  02AD  3572               	lslf	TMR0_Callback@i,w
  4204  02AE  3E20               	addlw	(low (_PatternDelay| 0))& (0+255)
  4205  02AF  0086               	movwf	6
  4206  02B0  0187               	clrf	7
  4207  02B1  0016               	moviw fsr1++
  4208  02B2  0401               	iorwf	1,w
  4209  02B3  1903               	btfsc	3,2
  4210  02B4  2ABF               	goto	i1l1230
  4211                           
  4212                           ;main.c: 241: {
  4213                           ;main.c: 242: PatternDelay[i]--;
  4214  02B5  3572               	lslf	TMR0_Callback@i,w
  4215  02B6  3E20               	addlw	(low (_PatternDelay| 0))& (0+255)
  4216  02B7  0086               	movwf	6
  4217  02B8  0187               	clrf	7
  4218  02B9  3001               	movlw	1
  4219  02BA  0281               	subwf	1,f
  4220  02BB  3141               	addfsr 1,1
  4221  02BC  3000               	movlw	0
  4222  02BD  3B81               	subwfb	1,f
  4223  02BE  317F               	addfsr 1,-1
  4224  02BF                     i1l1230:	
  4225  02BF  3001               	movlw	1
  4226  02C0  00F0               	movwf	??_TMR0_Callback
  4227  02C1  0870               	movf	??_TMR0_Callback,w
  4228  02C2  07F2               	addwf	TMR0_Callback@i,f
  4229  02C3  3008               	movlw	8
  4230  02C4  0272               	subwf	TMR0_Callback@i,w
  4231  02C5  1C03               	skipc
  4232  02C6  2AAD               	goto	i1l1226
  4233  02C7                     i1l1234:	
  4234                           
  4235                           ;main.c: 243: }
  4236                           ;main.c: 244: }
  4237                           ;main.c: 246: LEDState = 0;
  4238  02C7  0020               	movlb	0	; select bank0
  4239  02C8  01C0               	clrf	_LEDState
  4240                           
  4241                           ;main.c: 249: if (LeftDebounceTimer)
  4242  02C9  0879               	movf	_LeftDebounceTimer,w	;volatile
  4243  02CA  1903               	btfsc	3,2
  4244  02CB  2ACE               	goto	i1l186
  4245                           
  4246                           ;main.c: 250: {
  4247                           ;main.c: 251: LeftDebounceTimer--;
  4248  02CC  3001               	movlw	1
  4249  02CD  02F9               	subwf	_LeftDebounceTimer,f	;volatile
  4250  02CE                     i1l186:	
  4251                           
  4252                           ;main.c: 252: }
  4253                           ;main.c: 254: if (RightDebounceTimer)
  4254  02CE  0878               	movf	_RightDebounceTimer,w	;volatile
  4255  02CF  1903               	btfsc	3,2
  4256  02D0  2AD3               	goto	i1l187
  4257                           
  4258                           ;main.c: 255: {
  4259                           ;main.c: 256: RightDebounceTimer--;
  4260  02D1  3001               	movlw	1
  4261  02D2  02F8               	subwf	_RightDebounceTimer,f	;volatile
  4262  02D3                     i1l187:	
  4263                           
  4264                           ;main.c: 257: }
  4265                           ;main.c: 259: if (ShutdownDelayTimer)
  4266  02D3  083E               	movf	_ShutdownDelayTimer,w	;volatile
  4267  02D4  1903               	btfsc	3,2
  4268  02D5  0008               	return
  4269                           
  4270                           ;main.c: 260: {
  4271                           ;main.c: 261: ShutdownDelayTimer--;
  4272  02D6  3001               	movlw	1
  4273  02D7  02BE               	subwf	_ShutdownDelayTimer,f	;volatile
  4274  02D8  0008               	return
  4275  02D9                     __end_of_TMR0_Callback:	
  4276                           
  4277                           	psect	text25
  4278  0416                     __ptext25:	
  4279 ;; *************** function _PIN_MANAGER_IOC *****************
  4280 ;; Defined at:
  4281 ;;		line 110 in file "mcc_generated_files/pin_manager.c"
  4282 ;; Parameters:    Size  Location     Type
  4283 ;;		None
  4284 ;; Auto vars:     Size  Location     Type
  4285 ;;		None
  4286 ;; Return value:  Size  Location     Type
  4287 ;;                  1    wreg      void 
  4288 ;; Registers used:
  4289 ;;		wreg, status,2, status,0, pclath, cstack
  4290 ;; Tracked objects:
  4291 ;;		On entry : 0/0
  4292 ;;		On exit  : 0/0
  4293 ;;		Unchanged: 0/0
  4294 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4295 ;;      Params:         0       0       0       0
  4296 ;;      Locals:         0       0       0       0
  4297 ;;      Temps:          0       0       0       0
  4298 ;;      Totals:         0       0       0       0
  4299 ;;Total ram usage:        0 bytes
  4300 ;; Hardware stack levels used:    1
  4301 ;; Hardware stack levels required when called:    2
  4302 ;; This function calls:
  4303 ;;		_IOCAF2_ISR
  4304 ;;		_IOCAF3_ISR
  4305 ;; This function is called by:
  4306 ;;		_INTERRUPT_InterruptManager
  4307 ;; This function uses a non-reentrant model
  4308 ;;
  4309                           
  4310                           
  4311                           ;psect for function _PIN_MANAGER_IOC
  4312  0416                     _PIN_MANAGER_IOC:	
  4313                           
  4314                           ;pin_manager.c: 113: if(IOCAFbits.IOCAF2 == 1)
  4315                           
  4316                           ;incstack = 0
  4317                           ; Regs used in _PIN_MANAGER_IOC: [wreg+status,2+status,0+pclath+cstack]
  4318  0416  0027               	movlb	7	; select bank7
  4319  0417  1D13               	btfss	19,2	;volatile
  4320  0418  2C1A               	goto	i1l1374
  4321                           
  4322                           ;pin_manager.c: 114: {
  4323                           ;pin_manager.c: 115: IOCAF2_ISR();
  4324  0419  23DE               	fcall	_IOCAF2_ISR
  4325  041A                     i1l1374:	
  4326                           
  4327                           ;pin_manager.c: 116: }
  4328                           ;pin_manager.c: 119: if(IOCAFbits.IOCAF3 == 1)
  4329  041A  0027               	movlb	7	; select bank7
  4330  041B  1D93               	btfss	19,3	;volatile
  4331  041C  0008               	return
  4332                           
  4333                           ;pin_manager.c: 120: {
  4334                           ;pin_manager.c: 121: IOCAF3_ISR();
  4335  041D  23D1               	fcall	_IOCAF3_ISR
  4336  041E  0008               	return
  4337  041F                     __end_of_PIN_MANAGER_IOC:	
  4338                           
  4339                           	psect	text26
  4340  03D1                     __ptext26:	
  4341 ;; *************** function _IOCAF3_ISR *****************
  4342 ;; Defined at:
  4343 ;;		line 160 in file "mcc_generated_files/pin_manager.c"
  4344 ;; Parameters:    Size  Location     Type
  4345 ;;		None
  4346 ;; Auto vars:     Size  Location     Type
  4347 ;;		None
  4348 ;; Return value:  Size  Location     Type
  4349 ;;                  1    wreg      void 
  4350 ;; Registers used:
  4351 ;;		wreg, status,2, status,0, pclath, cstack
  4352 ;; Tracked objects:
  4353 ;;		On entry : 0/0
  4354 ;;		On exit  : 0/0
  4355 ;;		Unchanged: 0/0
  4356 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4357 ;;      Params:         0       0       0       0
  4358 ;;      Locals:         0       0       0       0
  4359 ;;      Temps:          0       0       0       0
  4360 ;;      Totals:         0       0       0       0
  4361 ;;Total ram usage:        0 bytes
  4362 ;; Hardware stack levels used:    1
  4363 ;; Hardware stack levels required when called:    1
  4364 ;; This function calls:
  4365 ;;		Absolute function
  4366 ;;		_IOCAF3_DefaultInterruptHandler
  4367 ;; This function is called by:
  4368 ;;		_PIN_MANAGER_IOC
  4369 ;; This function uses a non-reentrant model
  4370 ;;
  4371                           
  4372                           
  4373                           ;psect for function _IOCAF3_ISR
  4374  03D1                     _IOCAF3_ISR:	
  4375                           
  4376                           ;pin_manager.c: 165: if(IOCAF3_InterruptHandler)
  4377                           
  4378                           ;incstack = 0
  4379                           ; Regs used in _IOCAF3_ISR: [wreg+status,2+status,0+pclath+cstack]
  4380  03D1  0020               	movlb	0	; select bank0
  4381  03D2  0867               	movf	_IOCAF3_InterruptHandler,w
  4382  03D3  0468               	iorwf	_IOCAF3_InterruptHandler+1,w
  4383  03D4  1903               	btfsc	3,2
  4384  03D5  2BDB               	goto	i1l1286
  4385                           
  4386                           ;pin_manager.c: 166: {
  4387                           ;pin_manager.c: 167: IOCAF3_InterruptHandler();
  4388  03D6  0868               	movf	_IOCAF3_InterruptHandler+1,w
  4389  03D7  008A               	movwf	10
  4390  03D8  0867               	movf	_IOCAF3_InterruptHandler,w
  4391  03D9  000A               	callw
  4392  03DA  3183               	pagesel	$
  4393  03DB                     i1l1286:	
  4394                           
  4395                           ;pin_manager.c: 168: }
  4396                           ;pin_manager.c: 169: IOCAFbits.IOCAF3 = 0;
  4397  03DB  0027               	movlb	7	; select bank7
  4398  03DC  1193               	bcf	19,3	;volatile
  4399  03DD  0008               	return
  4400  03DE                     __end_of_IOCAF3_ISR:	
  4401                           
  4402                           	psect	text27
  4403  0484                     __ptext27:	
  4404 ;; *************** function _IOCAF3_DefaultInterruptHandler *****************
  4405 ;; Defined at:
  4406 ;;		line 182 in file "mcc_generated_files/pin_manager.c"
  4407 ;; Parameters:    Size  Location     Type
  4408 ;;		None
  4409 ;; Auto vars:     Size  Location     Type
  4410 ;;		None
  4411 ;; Return value:  Size  Location     Type
  4412 ;;                  1    wreg      void 
  4413 ;; Registers used:
  4414 ;;		None
  4415 ;; Tracked objects:
  4416 ;;		On entry : 0/0
  4417 ;;		On exit  : 0/0
  4418 ;;		Unchanged: 0/0
  4419 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4420 ;;      Params:         0       0       0       0
  4421 ;;      Locals:         0       0       0       0
  4422 ;;      Temps:          0       0       0       0
  4423 ;;      Totals:         0       0       0       0
  4424 ;;Total ram usage:        0 bytes
  4425 ;; Hardware stack levels used:    1
  4426 ;; This function calls:
  4427 ;;		Nothing
  4428 ;; This function is called by:
  4429 ;;		_PIN_MANAGER_Initialize
  4430 ;;		_IOCAF3_ISR
  4431 ;; This function uses a non-reentrant model
  4432 ;;
  4433                           
  4434                           
  4435                           ;psect for function _IOCAF3_DefaultInterruptHandler
  4436  0484                     _IOCAF3_DefaultInterruptHandler:	
  4437                           
  4438                           ;incstack = 0
  4439                           ; Regs used in _IOCAF3_DefaultInterruptHandler: []
  4440  0484  0008               	return
  4441  0485                     __end_of_IOCAF3_DefaultInterruptHandler:	
  4442                           
  4443                           	psect	text28
  4444  03DE                     __ptext28:	
  4445 ;; *************** function _IOCAF2_ISR *****************
  4446 ;; Defined at:
  4447 ;;		line 130 in file "mcc_generated_files/pin_manager.c"
  4448 ;; Parameters:    Size  Location     Type
  4449 ;;		None
  4450 ;; Auto vars:     Size  Location     Type
  4451 ;;		None
  4452 ;; Return value:  Size  Location     Type
  4453 ;;                  1    wreg      void 
  4454 ;; Registers used:
  4455 ;;		wreg, status,2, status,0, pclath, cstack
  4456 ;; Tracked objects:
  4457 ;;		On entry : 0/0
  4458 ;;		On exit  : 0/0
  4459 ;;		Unchanged: 0/0
  4460 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4461 ;;      Params:         0       0       0       0
  4462 ;;      Locals:         0       0       0       0
  4463 ;;      Temps:          0       0       0       0
  4464 ;;      Totals:         0       0       0       0
  4465 ;;Total ram usage:        0 bytes
  4466 ;; Hardware stack levels used:    1
  4467 ;; Hardware stack levels required when called:    1
  4468 ;; This function calls:
  4469 ;;		Absolute function
  4470 ;;		_IOCAF2_DefaultInterruptHandler
  4471 ;; This function is called by:
  4472 ;;		_PIN_MANAGER_IOC
  4473 ;; This function uses a non-reentrant model
  4474 ;;
  4475                           
  4476                           
  4477                           ;psect for function _IOCAF2_ISR
  4478  03DE                     _IOCAF2_ISR:	
  4479                           
  4480                           ;pin_manager.c: 135: if(IOCAF2_InterruptHandler)
  4481                           
  4482                           ;incstack = 0
  4483                           ; Regs used in _IOCAF2_ISR: [wreg+status,2+status,0+pclath+cstack]
  4484  03DE  0020               	movlb	0	; select bank0
  4485  03DF  0869               	movf	_IOCAF2_InterruptHandler,w
  4486  03E0  046A               	iorwf	_IOCAF2_InterruptHandler+1,w
  4487  03E1  1903               	btfsc	3,2
  4488  03E2  2BE8               	goto	i1l1280
  4489                           
  4490                           ;pin_manager.c: 136: {
  4491                           ;pin_manager.c: 137: IOCAF2_InterruptHandler();
  4492  03E3  086A               	movf	_IOCAF2_InterruptHandler+1,w
  4493  03E4  008A               	movwf	10
  4494  03E5  0869               	movf	_IOCAF2_InterruptHandler,w
  4495  03E6  000A               	callw
  4496  03E7  3183               	pagesel	$
  4497  03E8                     i1l1280:	
  4498                           
  4499                           ;pin_manager.c: 138: }
  4500                           ;pin_manager.c: 139: IOCAFbits.IOCAF2 = 0;
  4501  03E8  0027               	movlb	7	; select bank7
  4502  03E9  1113               	bcf	19,2	;volatile
  4503  03EA  0008               	return
  4504  03EB                     __end_of_IOCAF2_ISR:	
  4505                           
  4506                           	psect	text29
  4507  0485                     __ptext29:	
  4508 ;; *************** function _IOCAF2_DefaultInterruptHandler *****************
  4509 ;; Defined at:
  4510 ;;		line 152 in file "mcc_generated_files/pin_manager.c"
  4511 ;; Parameters:    Size  Location     Type
  4512 ;;		None
  4513 ;; Auto vars:     Size  Location     Type
  4514 ;;		None
  4515 ;; Return value:  Size  Location     Type
  4516 ;;                  1    wreg      void 
  4517 ;; Registers used:
  4518 ;;		None
  4519 ;; Tracked objects:
  4520 ;;		On entry : 0/0
  4521 ;;		On exit  : 0/0
  4522 ;;		Unchanged: 0/0
  4523 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4524 ;;      Params:         0       0       0       0
  4525 ;;      Locals:         0       0       0       0
  4526 ;;      Temps:          0       0       0       0
  4527 ;;      Totals:         0       0       0       0
  4528 ;;Total ram usage:        0 bytes
  4529 ;; Hardware stack levels used:    1
  4530 ;; This function calls:
  4531 ;;		Nothing
  4532 ;; This function is called by:
  4533 ;;		_PIN_MANAGER_Initialize
  4534 ;;		_IOCAF2_ISR
  4535 ;; This function uses a non-reentrant model
  4536 ;;
  4537                           
  4538                           
  4539                           ;psect for function _IOCAF2_DefaultInterruptHandler
  4540  0485                     _IOCAF2_DefaultInterruptHandler:	
  4541                           
  4542                           ;incstack = 0
  4543                           ; Regs used in _IOCAF2_DefaultInterruptHandler: []
  4544  0485  0008               	return
  4545  0486                     __end_of_IOCAF2_DefaultInterruptHandler:	
  4546  007E                     btemp	set	126	;btemp
  4547  007E                     int$flags	set	126
  4548  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        20
    BSS         37
    Persistent  7
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      10
    BANK0            80     16      76
    BANK1            80      0       0
    BANK2            80      0       0

Pointer List with Targets:

    TMR0_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR0_Callback(), 

    TMR0_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR0_Callback(), Absolute function(), 

    IOCAF3_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> IOCAF3_DefaultInterruptHandler(), 

    IOCAF3_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), IOCAF3_DefaultInterruptHandler(), 

    IOCAF2_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> IOCAF2_DefaultInterruptHandler(), 

    IOCAF2_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), IOCAF2_DefaultInterruptHandler(), 


Critical Paths under _main in COMMON

    _main->_CheckForButtonPushes
    _main->_TMR0_SetInterruptHandler
    _PIN_MANAGER_Initialize->_IOCAF2_SetInterruptHandler
    _PIN_MANAGER_Initialize->_IOCAF3_SetInterruptHandler
    _RunRightFlash->_SetLEDOff
    _RunRightFlash->_SetLEDOn
    _RunRightFlash->___wmul
    _RunLeftFlash->_SetLEDOff
    _RunLeftFlash->_SetLEDOn
    _RunLeftFlash->___wmul
    ___lwdiv->___wmul

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _TMR0_CallBack->_TMR0_Callback

Critical Paths under _main in BANK0

    _main->_RunLeftFlash
    _main->_RunRightFlash
    _RunRightFlash->___lwdiv
    _RunLeftFlash->___lwdiv
    ___lwdiv->___wmul

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0    2960
                                             13 BANK0      3     3      0
               _CheckForButtonPushes
                       _RunLeftFlash
                      _RunRightFlash
                  _SYSTEM_Initialize
                      _SetAllLEDsOff
           _TMR0_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (1) _TMR0_SetInterruptHandler                             2     0      2      75
                                              4 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (1) _SetAllLEDsOff                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     150
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR0_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR0_Initialize                                      1     1      0       0
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0     150
         _IOCAF2_SetInterruptHandler
         _IOCAF3_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _IOCAF3_SetInterruptHandler                           2     0      2      75
                                              4 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (3) _IOCAF2_SetInterruptHandler                           2     0      2      75
                                              4 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _RunRightFlash                                        1     1      0    1286
                                             12 BANK0      1     1      0
                 _RightButtonPressed
                          _SetLEDOff
                           _SetLEDOn
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _RunLeftFlash                                         1     1      0    1286
                                             12 BANK0      1     1      0
                  _LeftButtonPressed
                          _SetLEDOff
                           _SetLEDOn
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     656
                                              4 COMMON     2     2      0
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     586
                                              4 BANK0      8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) _SetLEDOn                                             2     2      0      22
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (2) _SetLEDOff                                            2     2      0      22
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _CheckForButtonPushes                                 2     2      0      24
                                              4 COMMON     2     2      0
                  _LeftButtonPressed
               _LeftButtonPressedRaw
                 _RightButtonPressed
              _RightButtonPressedRaw
 ---------------------------------------------------------------------------------
 (2) _RightButtonPressedRaw                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _RightButtonPressed                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _LeftButtonPressedRaw                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _LeftButtonPressed                                    0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _INTERRUPT_InterruptManager                           1     1      0     113
                                              3 COMMON     1     1      0
                    _PIN_MANAGER_IOC
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (5) _TMR0_ISR                                             0     0      0     113
                      _TMR0_CallBack
 ---------------------------------------------------------------------------------
 (6) _TMR0_CallBack                                        0     0      0     113
                   Absolute function *
                      _TMR0_Callback *
 ---------------------------------------------------------------------------------
 (7) _TMR0_Callback                                        3     3      0     113
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (5) _PIN_MANAGER_IOC                                      0     0      0       0
                         _IOCAF2_ISR
                         _IOCAF3_ISR
 ---------------------------------------------------------------------------------
 (6) _IOCAF3_ISR                                           0     0      0       0
                   Absolute function *
     _IOCAF3_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (7) _IOCAF3_DefaultInterruptHandler                       0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _IOCAF2_ISR                                           0     0      0       0
                   Absolute function *
     _IOCAF2_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (7) _IOCAF2_DefaultInterruptHandler                       0     0      0       0
 ---------------------------------------------------------------------------------
 (7) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _CheckForButtonPushes
     _LeftButtonPressed
     _LeftButtonPressedRaw
     _RightButtonPressed
     _RightButtonPressedRaw
   _RunLeftFlash
     _LeftButtonPressed
     _SetLEDOff
     _SetLEDOn
     ___lwdiv
       ___wmul (ARG)
     ___wmul
   _RunRightFlash
     _RightButtonPressed
     _SetLEDOff
     _SetLEDOn
     ___lwdiv
       ___wmul (ARG)
     ___wmul
   _SYSTEM_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
       _IOCAF2_SetInterruptHandler
       _IOCAF3_SetInterruptHandler
     _TMR0_Initialize
     _WDT_Initialize
   _SetAllLEDsOff
   _TMR0_SetInterruptHandler

 _INTERRUPT_InterruptManager (ROOT)
   _PIN_MANAGER_IOC
     _IOCAF2_ISR
       Absolute function(Fake) *
       _IOCAF2_DefaultInterruptHandler *
     _IOCAF3_ISR
       Absolute function(Fake) *
       _IOCAF3_DefaultInterruptHandler *
   _TMR0_ISR
     _TMR0_CallBack
       Absolute function(Fake) *
       _TMR0_Callback *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      6       A       2       71.4%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      56       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     10      4C       6       95.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
DATA                 0      0      56      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Tue May 22 07:49:46 2018

                           ??_RunRightFlash 0061                                           pc 0002  
                               __CFG_CP$OFF 0000                         ___wmul@multiplicand 0057  
                           _timer0ReloadVal 006B                                         l318 039B  
                                       u920 0435                                         u940 043D  
                              __CFG_BORV$LO 0000                                         wreg 0009  
        __end_of_IOCAF2_SetInterruptHandler 0472                  _IOCAF2_SetInterruptHandler 046C  
                                      S1950 03EB                                        S1952 0400  
                              __CFG_LVP$OFF 0000                                        l1362 0360  
                                      l1354 0342                                        l1356 034E  
                                      l1534 01FF                                        l1366 0369  
                                      l1560 022F                                        l1544 0211  
                                      l1800 0137                                        l1570 0247  
                                      l1538 0205                                        l1810 0164  
                                      l1802 0140                                        l1730 004C  
                                      l1580 0258                                        l1556 0229  
                                      l1548 021D                                        l1708 0394  
                                      l1812 016D                                        l1804 0149  
                                      l1820 0178                                        l1740 0079  
                                      l1732 0055                                        l1724 0035  
                                      l1590 0269                                        l1566 023B  
                                      l1806 0152                                        l1822 0182  
                                      l1742 0082                                        l1734 005E  
                                      l1726 003A                                        l1902 0327  
                                      l1576 0253                                        l1816 0176  
                                      l1808 015B                                        l1744 008B  
                                      l1736 0067                                        l1728 0043  
                                      l1752 0096                                        l1586 0264  
                                      l1578 0256                                        l1850 01EE  
                                      l1834 01B0                                        l1738 0070  
                                      l1754 00A0                                        l1588 0267  
                                      l1836 01B2                                        l1780 0107  
                                      l1748 0094                                        l1908 0337  
                                      l1598 0274                                        l1846 01E0  
                                      l1782 010C                                        l1766 00CE  
                                      l1848 01E9                                        l1792 0117  
                                      l1768 00D0                                        l1880 02F5  
                                      l1864 02E3                                        l1794 011C  
                                      l1778 00FE                                        l1890 0305  
                                      l1796 0125                                        l1892 0310  
                                      l1884 02FD                                        l1876 02EC  
                                      l1798 012E                                        l1898 031F  
                                      u1015 0345                                        u1035 034F  
                                      u1045 0359                                        u1055 0361  
                                      _LATA 010C                                        u1605 039C  
                                      u1615 03A1                                        u1897 0315  
                     ?_CheckForButtonPushes 0070                                        _TMR0 0015  
                                      _WPUA 020C                                __CFG_WRT$OFF 0000  
                     ?_LeftButtonPressedRaw 0070                          _RightButtonPressed 042F  
                                      _main 02D9                                        fsr0h 0005  
                                      fsr1h 0007                                        indf0 0000  
                                      fsr0l 0004                                        indf1 0001  
                                      fsr1l 0006                                        btemp 007E  
                                      start 0017                         ?_RightButtonPressed 0070  
            __size_of_RightButtonPressedRaw 0007               __end_of_RightButtonPressedRaw 044D  
                   __end_of_TMR0_Initialize 03D1              __size_of_OSCILLATOR_Initialize 0007  
                       __size_of_IOCAF2_ISR 000D                         __size_of_IOCAF3_ISR 000D  
             __end_of_OSCILLATOR_Initialize 0446                                       ?_main 0070  
                             __CFG_WDTE$OFF 0000                             __end_of___lwdiv 036E  
                                     i1l100 000E                                       i1l104 0012  
                                     i1l186 02CE                                       i1l187 02D3  
                                     _PORTA 000C                                       u80_24 0280  
                                     u80_25 027F                                       _TRISA 008C  
         __size_of_TMR0_SetInterruptHandler 0006                   ?_TMR0_SetInterruptHandler 0074  
                      ??_RightButtonPressed 0074                            __end_of_TMR0_ISR 0478  
                   __end_of_PIN_MANAGER_IOC 041F                              _WDT_Initialize 047D  
                                     main@i 0064                              __CFG_BOREN$OFF 0000  
                                     pclath 000A                                       status 0003  
                                     wtemp0 007E                                 SetLEDOn@LED 0075  
                            __CFG_MCLRE$OFF 0000                             __initialization 0018  
                              __end_of_main 0339                            __end_of_SetLEDOn 0427  
               ?_INTERRUPT_InterruptManager 0070                                      ??_main 0062  
                            __CFG_PLLEN$OFF 0000                      __end_of_WDT_Initialize 0481  
                     main@APatternIsRunning 0063                      __size_of_SetAllLEDsOff 0003  
              ??_IOCAF3_SetInterruptHandler 0076                      ??_CheckForButtonPushes 0074  
                                    _APFCON 011D                                      _ANSELA 018C  
                                    _BORCON 0116                      ??_LeftButtonPressedRaw 0074  
                                    i1l1230 02BF                                      i1l1214 0298  
                                    i1l1234 02C7                                      i1l1226 02AD  
                                    i1l1280 03E8                                      _ODCONA 028C  
                                    i1l1286 03DB                                      i1l1374 041A  
                                    _LEDOns 003F                                      _OSCCON 0099  
   CheckForButtonPushes@LastLeftButtonState 003D                                      _WDTCON 0097  
                        __size_of_SetLEDOff 0008                              __CFG_PWRTE$OFF 0000  
                                    ___wmul 0392                              __CFG_STVREN$ON 0000  
                                 ??___lwdiv 005D                            ?_TMR0_Initialize 0070  
       __size_of_IOCAF3_SetInterruptHandler 0006                             ?_WDT_Initialize 0070  
                     __end_of_TMR0_CallBack 0416    TMR0_SetInterruptHandler@InterruptHandler 0074  
IOCAF3_SetInterruptHandler@InterruptHandler 0074  IOCAF2_SetInterruptHandler@InterruptHandler 0074  
                          ?_PIN_MANAGER_IOC 0070                       __end_of_TMR0_Callback 02D9  
                              ??_IOCAF2_ISR 0070                                ??_IOCAF3_ISR 0070  
                         _SYSTEM_Initialize 0478                     __end_of__initialization 002C  
                        ?_SYSTEM_Initialize 0070                                SetLEDOff@LED 0075  
                             _SetAllLEDsOff 0481                              __pcstackCOMMON 0070  
                              __pidataBANK0 03AE                         ??_SYSTEM_Initialize 0076  
                                 ?_TMR0_ISR 0070                          __end_of_IOCAF2_ISR 03EB  
                        __end_of_IOCAF3_ISR 03DE                           __end_of_SetLEDOff 042F  
                            _OPTION_REGbits 0095                 ?_IOCAF2_SetInterruptHandler 0074  
          ??_IOCAF2_DefaultInterruptHandler 0070             ?_IOCAF2_DefaultInterruptHandler 0070  
                 __end_of_SYSTEM_Initialize 047D                                  __pbssBANK0 0020  
                                 ?_SetLEDOn 0070                              ?_SetAllLEDsOff 0070  
                        _RightDebounceTimer 0078                                  __pmaintext 02D9  
          __end_of_TMR0_SetInterruptHandler 0466                                     ?___wmul 0055  
                                ??_TMR0_ISR 0073                                  __pintentry 0004  
                     __end_of_RunRightFlash 0111          __end_of_IOCAF3_SetInterruptHandler 046C  
                _IOCAF3_SetInterruptHandler 0466                                     _OSCTUNE 0098  
                        _ShutdownDelayTimer 003E                                  ??_SetLEDOn 0074  
                            TMR0_Callback@i 0072                               ?_RunLeftFlash 0070  
                           __size_of___wmul 001C                                     ___lwdiv 0339  
                     _RightButtonPressedRaw 0446                                     __ptext1 0460  
                                   __ptext2 0481                                     __ptext3 0478  
                                   __ptext4 047D                                     __ptext5 03C2  
                                   __ptext6 036E                                     __ptext7 0466  
                                   __ptext8 046C                                     __ptext9 043F  
                     _OSCILLATOR_Initialize 043F                    ??_PIN_MANAGER_Initialize 0076  
                                 _IOCAFbits 0393                                   _IOCANbits 0392  
                                 _IOCAPbits 0391                 __size_of_RightButtonPressed 0008  
                __size_of_SYSTEM_Initialize 0005                                     clrloop0 045B  
                      end_of_initialization 002C                                     init_ram 0454  
                                   initloop 0455                             ??_SetAllLEDsOff 0074  
                            ??_RunLeftFlash 0061    CheckForButtonPushes@LastRightButtonState 003C  
                          ??_WDT_Initialize 0074                    _TMR0_SetInterruptHandler 0460  
                                 _PORTAbits 000C                                   _PORTTable 0041  
                          __CFG_FOSC$INTOSC 0000                           _LeftButtonPressed 0437  
                                 _TRISTable 0049                          ?_LeftButtonPressed 0070  
             __size_of_CheckForButtonPushes 0083               __size_of_LeftButtonPressedRaw 0007  
                       ??_LeftButtonPressed 0074                      ?_RightButtonPressedRaw 0070  
                            __end_of___wmul 03AE                           __size_of_TMR0_ISR 0006  
                    ?_OSCILLATOR_Initialize 0070                   __end_of_LeftButtonPressed 043F  
                       start_initialization 0018                    __size_of_TMR0_Initialize 000F  
           __size_of_PIN_MANAGER_Initialize 0024                                   _SetLEDOff 0427  
                  __size_of_PIN_MANAGER_IOC 0009                                   _WakeTimer 0038  
                         __size_of_SetLEDOn 0008      __end_of_IOCAF2_DefaultInterruptHandler 0486  
   __size_of_IOCAF2_DefaultInterruptHandler 0001              _IOCAF2_DefaultInterruptHandler 0485  
                          __CFG_LPBOREN$OFF 0000                                    ??___wmul 0074  
                    __size_of_TMR0_CallBack 000B                                 __pdataBANK0 0041  
                    __size_of_TMR0_Callback 0063                             _LeftButtonState 0077  
                               __pbssCOMMON 0076                                   ___latbits 0000  
                             __pcstackBANK0 0055                 ?_IOCAF3_SetInterruptHandler 0074  
                      __end_of_RunLeftFlash 01F3                                  ?_SetLEDOff 0070  
          ??_IOCAF3_DefaultInterruptHandler 0070             ?_IOCAF3_DefaultInterruptHandler 0070  
                     _TMR0_InterruptHandler 0065                                   __pnvBANK0 0065  
                          ___lwdiv@dividend 005B                      _PIN_MANAGER_Initialize 036E  
                                  ?___lwdiv 0059                ??_INTERRUPT_InterruptManager 0073  
                                 __pswtext1 03EB                                   __pswtext2 0400  
                __size_of_LeftButtonPressed 0008                                _PatternDelay 0020  
                  _CheckForButtonPushes$429 0075                                _PatternState 0030  
                          ___lwdiv@quotient 005E                               _TMR0_CallBack 040B  
                             _TMR0_Callback 0276                      __size_of_RunRightFlash 00E2  
                         ??_TMR0_Initialize 0074                              ___wmul@product 0074  
                                  _LEDState 0040                                   clear_ram0 045A  
       __size_of_INTERRUPT_InterruptManager 0013                  ??_TMR0_SetInterruptHandler 0076  
                                  _TMR0_ISR 0472                           ??_PIN_MANAGER_IOC 0070  
                         ___wmul@multiplier 0055                  __end_of_RightButtonPressed 0437  
                          _RightButtonState 0076                                 ??_SetLEDOff 0074  
                            ?_TMR0_CallBack 0070                              ?_TMR0_Callback 0070  
                         _LeftDebounceTimer 0079                                    _SetLEDOn 041F  
                     __end_of_SetAllLEDsOff 0484                     ??_RightButtonPressedRaw 0074  
                   ??_OSCILLATOR_Initialize 0074                __end_of_CheckForButtonPushes 0276  
                             _RunRightFlash 002F                            __size_of___lwdiv 0035  
              __end_of_LeftButtonPressedRaw 0454                       __size_of_RunLeftFlash 00E2  
                   _IOCAF2_InterruptHandler 0069                             ___lwdiv@divisor 0059  
                           ___lwdiv@counter 0060                ??_IOCAF2_SetInterruptHandler 0076  
                                  __ptext10 002F                                    __ptext11 0111  
                                  __ptext20 0437                                    __ptext12 0392  
                                  __ptext13 0339                                    __ptext22 0472  
                                  __ptext14 041F                                    __ptext23 040B  
                                  __ptext15 0427                                    __ptext24 0276  
                                  __ptext16 01F3                                    __ptext25 0416  
                                  __ptext17 0446                                    __ptext26 03D1  
                                  __ptext18 042F                                    __ptext27 0484  
                                  __ptext19 044D                                    __ptext28 03DE  
                                  __ptext29 0485                                  _IOCAF2_ISR 03DE  
                                _IOCAF3_ISR 03D1                               __size_of_main 0060  
                    RunLeftFlash@left_delay 0051                                _RunLeftFlash 0111  
                                  int$flags 007E                              ?_RunRightFlash 0070  
        __end_of_INTERRUPT_InterruptManager 0017                  _INTERRUPT_InterruptManager 0004  
       __size_of_IOCAF2_SetInterruptHandler 0006                                  _INTCONbits 000B  
                           ??_TMR0_CallBack 0073                             ??_TMR0_Callback 0070  
                   __size_of_WDT_Initialize 0004                                    intlevel1 0000  
                   ?_PIN_MANAGER_Initialize 0070                           __CFG_CLKOUTEN$OFF 0000  
    __end_of_IOCAF3_DefaultInterruptHandler 0485     __size_of_IOCAF3_DefaultInterruptHandler 0001  
            _IOCAF3_DefaultInterruptHandler 0484                                  _OPTION_REG 0095  
                           _TMR0_Initialize 03C2                                 _VREGCONbits 0197  
                  RunRightFlash@right_delay 0053                                 ?_IOCAF2_ISR 0070  
                               ?_IOCAF3_ISR 0070              __end_of_PIN_MANAGER_Initialize 0392  
                      _CheckForButtonPushes 01F3                        _LeftButtonPressedRaw 044D  
                           _PIN_MANAGER_IOC 0416                     _IOCAF3_InterruptHandler 0067  
