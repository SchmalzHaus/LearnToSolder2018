

Microchip Technology PIC PRO Macro Assembler V1.45 build -152302408 
                                                                                               Mon May 21 21:11:03 2018

Microchip Technology Omniscient Code Generator v1.45 (PRO mode) build 201711160504
     1                           	processor	12F1572
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	inittext,global,class=CODE,delta=2
    11                           	psect	clrtext,global,class=CODE,delta=2
    12                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    15                           	psect	text1,local,class=CODE,merge=1,delta=2
    16                           	psect	text2,local,class=CODE,merge=1,delta=2
    17                           	psect	text3,local,class=CODE,merge=1,delta=2
    18                           	psect	text4,local,class=CODE,merge=1,delta=2
    19                           	psect	text5,local,class=CODE,merge=1,delta=2
    20                           	psect	text6,local,class=CODE,merge=1,delta=2
    21                           	psect	text7,local,class=CODE,merge=1,delta=2
    22                           	psect	text8,local,class=CODE,merge=1,delta=2
    23                           	psect	text9,local,class=CODE,merge=1,delta=2
    24                           	psect	text10,local,class=CODE,merge=1,delta=2
    25                           	psect	swtext1,local,class=CONST,delta=2
    26                           	psect	text11,local,class=CODE,merge=1,delta=2
    27                           	psect	swtext2,local,class=CONST,delta=2
    28                           	psect	text12,local,class=CODE,merge=1,delta=2,group=1
    29                           	psect	text13,local,class=CODE,merge=1,delta=2,group=1
    30                           	psect	text14,local,class=CODE,merge=1,delta=2
    31                           	psect	text15,local,class=CODE,merge=1,delta=2
    32                           	psect	text16,local,class=CODE,merge=1,delta=2
    33                           	psect	text17,local,class=CODE,merge=1,delta=2
    34                           	psect	text18,local,class=CODE,merge=1,delta=2
    35                           	psect	text19,local,class=CODE,merge=1,delta=2
    36                           	psect	text20,local,class=CODE,merge=1,delta=2
    37                           	psect	intentry,global,class=CODE,delta=2
    38                           	psect	text22,local,class=CODE,merge=1,delta=2
    39                           	psect	text23,local,class=CODE,merge=1,delta=2
    40                           	psect	text24,local,class=CODE,merge=1,delta=2
    41                           	psect	text25,local,class=CODE,merge=1,delta=2
    42                           	psect	text26,local,class=CODE,merge=1,delta=2
    43                           	psect	text27,local,class=CODE,merge=1,delta=2
    44                           	psect	text28,local,class=CODE,merge=1,delta=2
    45                           	psect	text29,local,class=CODE,merge=1,delta=2
    46                           	psect	pa_nodes0,global,class=CODE,delta=2
    47                           	dabs	1,0x7E,2
    48  0000                     
    49                           ; Version 1.45
    50                           ; Generated 16/11/2017 GMT
    51                           ; 
    52                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    53                           ; All rights reserved.
    54                           ; 
    55                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    56                           ; 
    57                           ; Redistribution and use in source and binary forms, with or without modification, are
    58                           ; permitted provided that the following conditions are met:
    59                           ; 
    60                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    61                           ;        conditions and the following disclaimer.
    62                           ; 
    63                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    64                           ;        of conditions and the following disclaimer in the documentation and/or other
    65                           ;        materials provided with the distribution.
    66                           ; 
    67                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    68                           ;        software without specific prior written permission.
    69                           ; 
    70                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    71                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    72                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    73                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    74                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    75                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    76                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    77                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    78                           ; 
    79                           ; 
    80                           ; Code-generator required, PIC12F1572 Definitions
    81                           ; 
    82                           ; SFR Addresses
    83  0000                     	;# 
    84  0001                     	;# 
    85  0002                     	;# 
    86  0003                     	;# 
    87  0004                     	;# 
    88  0005                     	;# 
    89  0006                     	;# 
    90  0007                     	;# 
    91  0008                     	;# 
    92  0009                     	;# 
    93  000A                     	;# 
    94  000B                     	;# 
    95  000C                     	;# 
    96  0011                     	;# 
    97  0012                     	;# 
    98  0013                     	;# 
    99  0015                     	;# 
   100  0016                     	;# 
   101  0016                     	;# 
   102  0017                     	;# 
   103  0018                     	;# 
   104  0019                     	;# 
   105  001A                     	;# 
   106  001B                     	;# 
   107  001C                     	;# 
   108  008C                     	;# 
   109  0091                     	;# 
   110  0092                     	;# 
   111  0093                     	;# 
   112  0095                     	;# 
   113  0096                     	;# 
   114  0097                     	;# 
   115  0098                     	;# 
   116  0099                     	;# 
   117  009A                     	;# 
   118  009B                     	;# 
   119  009B                     	;# 
   120  009C                     	;# 
   121  009D                     	;# 
   122  009E                     	;# 
   123  009F                     	;# 
   124  010C                     	;# 
   125  0111                     	;# 
   126  0112                     	;# 
   127  0115                     	;# 
   128  0116                     	;# 
   129  0117                     	;# 
   130  0118                     	;# 
   131  0119                     	;# 
   132  011D                     	;# 
   133  011D                     	;# 
   134  018C                     	;# 
   135  0191                     	;# 
   136  0191                     	;# 
   137  0192                     	;# 
   138  0193                     	;# 
   139  0193                     	;# 
   140  0194                     	;# 
   141  0195                     	;# 
   142  0196                     	;# 
   143  0197                     	;# 
   144  0199                     	;# 
   145  019A                     	;# 
   146  019B                     	;# 
   147  019B                     	;# 
   148  019C                     	;# 
   149  019D                     	;# 
   150  019E                     	;# 
   151  019F                     	;# 
   152  020C                     	;# 
   153  028C                     	;# 
   154  030C                     	;# 
   155  038C                     	;# 
   156  0391                     	;# 
   157  0392                     	;# 
   158  0393                     	;# 
   159  0691                     	;# 
   160  0692                     	;# 
   161  0693                     	;# 
   162  0694                     	;# 
   163  0695                     	;# 
   164  0D8E                     	;# 
   165  0D8F                     	;# 
   166  0D90                     	;# 
   167  0D91                     	;# 
   168  0D91                     	;# 
   169  0D92                     	;# 
   170  0D93                     	;# 
   171  0D93                     	;# 
   172  0D94                     	;# 
   173  0D95                     	;# 
   174  0D95                     	;# 
   175  0D96                     	;# 
   176  0D97                     	;# 
   177  0D97                     	;# 
   178  0D98                     	;# 
   179  0D99                     	;# 
   180  0D99                     	;# 
   181  0D9A                     	;# 
   182  0D9B                     	;# 
   183  0D9C                     	;# 
   184  0D9C                     	;# 
   185  0D9D                     	;# 
   186  0D9D                     	;# 
   187  0D9E                     	;# 
   188  0D9F                     	;# 
   189  0DA0                     	;# 
   190  0DA1                     	;# 
   191  0DA1                     	;# 
   192  0DA2                     	;# 
   193  0DA3                     	;# 
   194  0DA3                     	;# 
   195  0DA4                     	;# 
   196  0DA5                     	;# 
   197  0DA5                     	;# 
   198  0DA6                     	;# 
   199  0DA7                     	;# 
   200  0DA7                     	;# 
   201  0DA8                     	;# 
   202  0DA9                     	;# 
   203  0DA9                     	;# 
   204  0DAA                     	;# 
   205  0DAB                     	;# 
   206  0DAC                     	;# 
   207  0DAC                     	;# 
   208  0DAD                     	;# 
   209  0DAD                     	;# 
   210  0DAE                     	;# 
   211  0DAF                     	;# 
   212  0DB0                     	;# 
   213  0DB1                     	;# 
   214  0DB1                     	;# 
   215  0DB2                     	;# 
   216  0DB3                     	;# 
   217  0DB3                     	;# 
   218  0DB4                     	;# 
   219  0DB5                     	;# 
   220  0DB5                     	;# 
   221  0DB6                     	;# 
   222  0DB7                     	;# 
   223  0DB7                     	;# 
   224  0DB8                     	;# 
   225  0DB9                     	;# 
   226  0DB9                     	;# 
   227  0DBA                     	;# 
   228  0DBB                     	;# 
   229  0DBC                     	;# 
   230  0DBC                     	;# 
   231  0DBD                     	;# 
   232  0DBD                     	;# 
   233  0DBE                     	;# 
   234  0DBF                     	;# 
   235  0DC0                     	;# 
   236  0FE4                     	;# 
   237  0FE5                     	;# 
   238  0FE6                     	;# 
   239  0FE7                     	;# 
   240  0FE8                     	;# 
   241  0FE8                     	;# 
   242  0FE9                     	;# 
   243  0FEA                     	;# 
   244  0FEA                     	;# 
   245  0FEB                     	;# 
   246  0FED                     	;# 
   247  0FEE                     	;# 
   248  0FEE                     	;# 
   249  0FEF                     	;# 
   250  0000                     	;# 
   251  0001                     	;# 
   252  0002                     	;# 
   253  0003                     	;# 
   254  0004                     	;# 
   255  0005                     	;# 
   256  0006                     	;# 
   257  0007                     	;# 
   258  0008                     	;# 
   259  0009                     	;# 
   260  000A                     	;# 
   261  000B                     	;# 
   262  000C                     	;# 
   263  0011                     	;# 
   264  0012                     	;# 
   265  0013                     	;# 
   266  0015                     	;# 
   267  0016                     	;# 
   268  0016                     	;# 
   269  0017                     	;# 
   270  0018                     	;# 
   271  0019                     	;# 
   272  001A                     	;# 
   273  001B                     	;# 
   274  001C                     	;# 
   275  008C                     	;# 
   276  0091                     	;# 
   277  0092                     	;# 
   278  0093                     	;# 
   279  0095                     	;# 
   280  0096                     	;# 
   281  0097                     	;# 
   282  0098                     	;# 
   283  0099                     	;# 
   284  009A                     	;# 
   285  009B                     	;# 
   286  009B                     	;# 
   287  009C                     	;# 
   288  009D                     	;# 
   289  009E                     	;# 
   290  009F                     	;# 
   291  010C                     	;# 
   292  0111                     	;# 
   293  0112                     	;# 
   294  0115                     	;# 
   295  0116                     	;# 
   296  0117                     	;# 
   297  0118                     	;# 
   298  0119                     	;# 
   299  011D                     	;# 
   300  011D                     	;# 
   301  018C                     	;# 
   302  0191                     	;# 
   303  0191                     	;# 
   304  0192                     	;# 
   305  0193                     	;# 
   306  0193                     	;# 
   307  0194                     	;# 
   308  0195                     	;# 
   309  0196                     	;# 
   310  0197                     	;# 
   311  0199                     	;# 
   312  019A                     	;# 
   313  019B                     	;# 
   314  019B                     	;# 
   315  019C                     	;# 
   316  019D                     	;# 
   317  019E                     	;# 
   318  019F                     	;# 
   319  020C                     	;# 
   320  028C                     	;# 
   321  030C                     	;# 
   322  038C                     	;# 
   323  0391                     	;# 
   324  0392                     	;# 
   325  0393                     	;# 
   326  0691                     	;# 
   327  0692                     	;# 
   328  0693                     	;# 
   329  0694                     	;# 
   330  0695                     	;# 
   331  0D8E                     	;# 
   332  0D8F                     	;# 
   333  0D90                     	;# 
   334  0D91                     	;# 
   335  0D91                     	;# 
   336  0D92                     	;# 
   337  0D93                     	;# 
   338  0D93                     	;# 
   339  0D94                     	;# 
   340  0D95                     	;# 
   341  0D95                     	;# 
   342  0D96                     	;# 
   343  0D97                     	;# 
   344  0D97                     	;# 
   345  0D98                     	;# 
   346  0D99                     	;# 
   347  0D99                     	;# 
   348  0D9A                     	;# 
   349  0D9B                     	;# 
   350  0D9C                     	;# 
   351  0D9C                     	;# 
   352  0D9D                     	;# 
   353  0D9D                     	;# 
   354  0D9E                     	;# 
   355  0D9F                     	;# 
   356  0DA0                     	;# 
   357  0DA1                     	;# 
   358  0DA1                     	;# 
   359  0DA2                     	;# 
   360  0DA3                     	;# 
   361  0DA3                     	;# 
   362  0DA4                     	;# 
   363  0DA5                     	;# 
   364  0DA5                     	;# 
   365  0DA6                     	;# 
   366  0DA7                     	;# 
   367  0DA7                     	;# 
   368  0DA8                     	;# 
   369  0DA9                     	;# 
   370  0DA9                     	;# 
   371  0DAA                     	;# 
   372  0DAB                     	;# 
   373  0DAC                     	;# 
   374  0DAC                     	;# 
   375  0DAD                     	;# 
   376  0DAD                     	;# 
   377  0DAE                     	;# 
   378  0DAF                     	;# 
   379  0DB0                     	;# 
   380  0DB1                     	;# 
   381  0DB1                     	;# 
   382  0DB2                     	;# 
   383  0DB3                     	;# 
   384  0DB3                     	;# 
   385  0DB4                     	;# 
   386  0DB5                     	;# 
   387  0DB5                     	;# 
   388  0DB6                     	;# 
   389  0DB7                     	;# 
   390  0DB7                     	;# 
   391  0DB8                     	;# 
   392  0DB9                     	;# 
   393  0DB9                     	;# 
   394  0DBA                     	;# 
   395  0DBB                     	;# 
   396  0DBC                     	;# 
   397  0DBC                     	;# 
   398  0DBD                     	;# 
   399  0DBD                     	;# 
   400  0DBE                     	;# 
   401  0DBF                     	;# 
   402  0DC0                     	;# 
   403  0FE4                     	;# 
   404  0FE5                     	;# 
   405  0FE6                     	;# 
   406  0FE7                     	;# 
   407  0FE8                     	;# 
   408  0FE8                     	;# 
   409  0FE9                     	;# 
   410  0FEA                     	;# 
   411  0FEA                     	;# 
   412  0FEB                     	;# 
   413  0FED                     	;# 
   414  0FEE                     	;# 
   415  0FEE                     	;# 
   416  0FEF                     	;# 
   417  0000                     	;# 
   418  0001                     	;# 
   419  0002                     	;# 
   420  0003                     	;# 
   421  0004                     	;# 
   422  0005                     	;# 
   423  0006                     	;# 
   424  0007                     	;# 
   425  0008                     	;# 
   426  0009                     	;# 
   427  000A                     	;# 
   428  000B                     	;# 
   429  000C                     	;# 
   430  0011                     	;# 
   431  0012                     	;# 
   432  0013                     	;# 
   433  0015                     	;# 
   434  0016                     	;# 
   435  0016                     	;# 
   436  0017                     	;# 
   437  0018                     	;# 
   438  0019                     	;# 
   439  001A                     	;# 
   440  001B                     	;# 
   441  001C                     	;# 
   442  008C                     	;# 
   443  0091                     	;# 
   444  0092                     	;# 
   445  0093                     	;# 
   446  0095                     	;# 
   447  0096                     	;# 
   448  0097                     	;# 
   449  0098                     	;# 
   450  0099                     	;# 
   451  009A                     	;# 
   452  009B                     	;# 
   453  009B                     	;# 
   454  009C                     	;# 
   455  009D                     	;# 
   456  009E                     	;# 
   457  009F                     	;# 
   458  010C                     	;# 
   459  0111                     	;# 
   460  0112                     	;# 
   461  0115                     	;# 
   462  0116                     	;# 
   463  0117                     	;# 
   464  0118                     	;# 
   465  0119                     	;# 
   466  011D                     	;# 
   467  011D                     	;# 
   468  018C                     	;# 
   469  0191                     	;# 
   470  0191                     	;# 
   471  0192                     	;# 
   472  0193                     	;# 
   473  0193                     	;# 
   474  0194                     	;# 
   475  0195                     	;# 
   476  0196                     	;# 
   477  0197                     	;# 
   478  0199                     	;# 
   479  019A                     	;# 
   480  019B                     	;# 
   481  019B                     	;# 
   482  019C                     	;# 
   483  019D                     	;# 
   484  019E                     	;# 
   485  019F                     	;# 
   486  020C                     	;# 
   487  028C                     	;# 
   488  030C                     	;# 
   489  038C                     	;# 
   490  0391                     	;# 
   491  0392                     	;# 
   492  0393                     	;# 
   493  0691                     	;# 
   494  0692                     	;# 
   495  0693                     	;# 
   496  0694                     	;# 
   497  0695                     	;# 
   498  0D8E                     	;# 
   499  0D8F                     	;# 
   500  0D90                     	;# 
   501  0D91                     	;# 
   502  0D91                     	;# 
   503  0D92                     	;# 
   504  0D93                     	;# 
   505  0D93                     	;# 
   506  0D94                     	;# 
   507  0D95                     	;# 
   508  0D95                     	;# 
   509  0D96                     	;# 
   510  0D97                     	;# 
   511  0D97                     	;# 
   512  0D98                     	;# 
   513  0D99                     	;# 
   514  0D99                     	;# 
   515  0D9A                     	;# 
   516  0D9B                     	;# 
   517  0D9C                     	;# 
   518  0D9C                     	;# 
   519  0D9D                     	;# 
   520  0D9D                     	;# 
   521  0D9E                     	;# 
   522  0D9F                     	;# 
   523  0DA0                     	;# 
   524  0DA1                     	;# 
   525  0DA1                     	;# 
   526  0DA2                     	;# 
   527  0DA3                     	;# 
   528  0DA3                     	;# 
   529  0DA4                     	;# 
   530  0DA5                     	;# 
   531  0DA5                     	;# 
   532  0DA6                     	;# 
   533  0DA7                     	;# 
   534  0DA7                     	;# 
   535  0DA8                     	;# 
   536  0DA9                     	;# 
   537  0DA9                     	;# 
   538  0DAA                     	;# 
   539  0DAB                     	;# 
   540  0DAC                     	;# 
   541  0DAC                     	;# 
   542  0DAD                     	;# 
   543  0DAD                     	;# 
   544  0DAE                     	;# 
   545  0DAF                     	;# 
   546  0DB0                     	;# 
   547  0DB1                     	;# 
   548  0DB1                     	;# 
   549  0DB2                     	;# 
   550  0DB3                     	;# 
   551  0DB3                     	;# 
   552  0DB4                     	;# 
   553  0DB5                     	;# 
   554  0DB5                     	;# 
   555  0DB6                     	;# 
   556  0DB7                     	;# 
   557  0DB7                     	;# 
   558  0DB8                     	;# 
   559  0DB9                     	;# 
   560  0DB9                     	;# 
   561  0DBA                     	;# 
   562  0DBB                     	;# 
   563  0DBC                     	;# 
   564  0DBC                     	;# 
   565  0DBD                     	;# 
   566  0DBD                     	;# 
   567  0DBE                     	;# 
   568  0DBF                     	;# 
   569  0DC0                     	;# 
   570  0FE4                     	;# 
   571  0FE5                     	;# 
   572  0FE6                     	;# 
   573  0FE7                     	;# 
   574  0FE8                     	;# 
   575  0FE8                     	;# 
   576  0FE9                     	;# 
   577  0FEA                     	;# 
   578  0FEA                     	;# 
   579  0FEB                     	;# 
   580  0FED                     	;# 
   581  0FEE                     	;# 
   582  0FEE                     	;# 
   583  0FEF                     	;# 
   584  0000                     	;# 
   585  0001                     	;# 
   586  0002                     	;# 
   587  0003                     	;# 
   588  0004                     	;# 
   589  0005                     	;# 
   590  0006                     	;# 
   591  0007                     	;# 
   592  0008                     	;# 
   593  0009                     	;# 
   594  000A                     	;# 
   595  000B                     	;# 
   596  000C                     	;# 
   597  0011                     	;# 
   598  0012                     	;# 
   599  0013                     	;# 
   600  0015                     	;# 
   601  0016                     	;# 
   602  0016                     	;# 
   603  0017                     	;# 
   604  0018                     	;# 
   605  0019                     	;# 
   606  001A                     	;# 
   607  001B                     	;# 
   608  001C                     	;# 
   609  008C                     	;# 
   610  0091                     	;# 
   611  0092                     	;# 
   612  0093                     	;# 
   613  0095                     	;# 
   614  0096                     	;# 
   615  0097                     	;# 
   616  0098                     	;# 
   617  0099                     	;# 
   618  009A                     	;# 
   619  009B                     	;# 
   620  009B                     	;# 
   621  009C                     	;# 
   622  009D                     	;# 
   623  009E                     	;# 
   624  009F                     	;# 
   625  010C                     	;# 
   626  0111                     	;# 
   627  0112                     	;# 
   628  0115                     	;# 
   629  0116                     	;# 
   630  0117                     	;# 
   631  0118                     	;# 
   632  0119                     	;# 
   633  011D                     	;# 
   634  011D                     	;# 
   635  018C                     	;# 
   636  0191                     	;# 
   637  0191                     	;# 
   638  0192                     	;# 
   639  0193                     	;# 
   640  0193                     	;# 
   641  0194                     	;# 
   642  0195                     	;# 
   643  0196                     	;# 
   644  0197                     	;# 
   645  0199                     	;# 
   646  019A                     	;# 
   647  019B                     	;# 
   648  019B                     	;# 
   649  019C                     	;# 
   650  019D                     	;# 
   651  019E                     	;# 
   652  019F                     	;# 
   653  020C                     	;# 
   654  028C                     	;# 
   655  030C                     	;# 
   656  038C                     	;# 
   657  0391                     	;# 
   658  0392                     	;# 
   659  0393                     	;# 
   660  0691                     	;# 
   661  0692                     	;# 
   662  0693                     	;# 
   663  0694                     	;# 
   664  0695                     	;# 
   665  0D8E                     	;# 
   666  0D8F                     	;# 
   667  0D90                     	;# 
   668  0D91                     	;# 
   669  0D91                     	;# 
   670  0D92                     	;# 
   671  0D93                     	;# 
   672  0D93                     	;# 
   673  0D94                     	;# 
   674  0D95                     	;# 
   675  0D95                     	;# 
   676  0D96                     	;# 
   677  0D97                     	;# 
   678  0D97                     	;# 
   679  0D98                     	;# 
   680  0D99                     	;# 
   681  0D99                     	;# 
   682  0D9A                     	;# 
   683  0D9B                     	;# 
   684  0D9C                     	;# 
   685  0D9C                     	;# 
   686  0D9D                     	;# 
   687  0D9D                     	;# 
   688  0D9E                     	;# 
   689  0D9F                     	;# 
   690  0DA0                     	;# 
   691  0DA1                     	;# 
   692  0DA1                     	;# 
   693  0DA2                     	;# 
   694  0DA3                     	;# 
   695  0DA3                     	;# 
   696  0DA4                     	;# 
   697  0DA5                     	;# 
   698  0DA5                     	;# 
   699  0DA6                     	;# 
   700  0DA7                     	;# 
   701  0DA7                     	;# 
   702  0DA8                     	;# 
   703  0DA9                     	;# 
   704  0DA9                     	;# 
   705  0DAA                     	;# 
   706  0DAB                     	;# 
   707  0DAC                     	;# 
   708  0DAC                     	;# 
   709  0DAD                     	;# 
   710  0DAD                     	;# 
   711  0DAE                     	;# 
   712  0DAF                     	;# 
   713  0DB0                     	;# 
   714  0DB1                     	;# 
   715  0DB1                     	;# 
   716  0DB2                     	;# 
   717  0DB3                     	;# 
   718  0DB3                     	;# 
   719  0DB4                     	;# 
   720  0DB5                     	;# 
   721  0DB5                     	;# 
   722  0DB6                     	;# 
   723  0DB7                     	;# 
   724  0DB7                     	;# 
   725  0DB8                     	;# 
   726  0DB9                     	;# 
   727  0DB9                     	;# 
   728  0DBA                     	;# 
   729  0DBB                     	;# 
   730  0DBC                     	;# 
   731  0DBC                     	;# 
   732  0DBD                     	;# 
   733  0DBD                     	;# 
   734  0DBE                     	;# 
   735  0DBF                     	;# 
   736  0DC0                     	;# 
   737  0FE4                     	;# 
   738  0FE5                     	;# 
   739  0FE6                     	;# 
   740  0FE7                     	;# 
   741  0FE8                     	;# 
   742  0FE8                     	;# 
   743  0FE9                     	;# 
   744  0FEA                     	;# 
   745  0FEA                     	;# 
   746  0FEB                     	;# 
   747  0FED                     	;# 
   748  0FEE                     	;# 
   749  0FEE                     	;# 
   750  0FEF                     	;# 
   751  0000                     	;# 
   752  0001                     	;# 
   753  0002                     	;# 
   754  0003                     	;# 
   755  0004                     	;# 
   756  0005                     	;# 
   757  0006                     	;# 
   758  0007                     	;# 
   759  0008                     	;# 
   760  0009                     	;# 
   761  000A                     	;# 
   762  000B                     	;# 
   763  000C                     	;# 
   764  0011                     	;# 
   765  0012                     	;# 
   766  0013                     	;# 
   767  0015                     	;# 
   768  0016                     	;# 
   769  0016                     	;# 
   770  0017                     	;# 
   771  0018                     	;# 
   772  0019                     	;# 
   773  001A                     	;# 
   774  001B                     	;# 
   775  001C                     	;# 
   776  008C                     	;# 
   777  0091                     	;# 
   778  0092                     	;# 
   779  0093                     	;# 
   780  0095                     	;# 
   781  0096                     	;# 
   782  0097                     	;# 
   783  0098                     	;# 
   784  0099                     	;# 
   785  009A                     	;# 
   786  009B                     	;# 
   787  009B                     	;# 
   788  009C                     	;# 
   789  009D                     	;# 
   790  009E                     	;# 
   791  009F                     	;# 
   792  010C                     	;# 
   793  0111                     	;# 
   794  0112                     	;# 
   795  0115                     	;# 
   796  0116                     	;# 
   797  0117                     	;# 
   798  0118                     	;# 
   799  0119                     	;# 
   800  011D                     	;# 
   801  011D                     	;# 
   802  018C                     	;# 
   803  0191                     	;# 
   804  0191                     	;# 
   805  0192                     	;# 
   806  0193                     	;# 
   807  0193                     	;# 
   808  0194                     	;# 
   809  0195                     	;# 
   810  0196                     	;# 
   811  0197                     	;# 
   812  0199                     	;# 
   813  019A                     	;# 
   814  019B                     	;# 
   815  019B                     	;# 
   816  019C                     	;# 
   817  019D                     	;# 
   818  019E                     	;# 
   819  019F                     	;# 
   820  020C                     	;# 
   821  028C                     	;# 
   822  030C                     	;# 
   823  038C                     	;# 
   824  0391                     	;# 
   825  0392                     	;# 
   826  0393                     	;# 
   827  0691                     	;# 
   828  0692                     	;# 
   829  0693                     	;# 
   830  0694                     	;# 
   831  0695                     	;# 
   832  0D8E                     	;# 
   833  0D8F                     	;# 
   834  0D90                     	;# 
   835  0D91                     	;# 
   836  0D91                     	;# 
   837  0D92                     	;# 
   838  0D93                     	;# 
   839  0D93                     	;# 
   840  0D94                     	;# 
   841  0D95                     	;# 
   842  0D95                     	;# 
   843  0D96                     	;# 
   844  0D97                     	;# 
   845  0D97                     	;# 
   846  0D98                     	;# 
   847  0D99                     	;# 
   848  0D99                     	;# 
   849  0D9A                     	;# 
   850  0D9B                     	;# 
   851  0D9C                     	;# 
   852  0D9C                     	;# 
   853  0D9D                     	;# 
   854  0D9D                     	;# 
   855  0D9E                     	;# 
   856  0D9F                     	;# 
   857  0DA0                     	;# 
   858  0DA1                     	;# 
   859  0DA1                     	;# 
   860  0DA2                     	;# 
   861  0DA3                     	;# 
   862  0DA3                     	;# 
   863  0DA4                     	;# 
   864  0DA5                     	;# 
   865  0DA5                     	;# 
   866  0DA6                     	;# 
   867  0DA7                     	;# 
   868  0DA7                     	;# 
   869  0DA8                     	;# 
   870  0DA9                     	;# 
   871  0DA9                     	;# 
   872  0DAA                     	;# 
   873  0DAB                     	;# 
   874  0DAC                     	;# 
   875  0DAC                     	;# 
   876  0DAD                     	;# 
   877  0DAD                     	;# 
   878  0DAE                     	;# 
   879  0DAF                     	;# 
   880  0DB0                     	;# 
   881  0DB1                     	;# 
   882  0DB1                     	;# 
   883  0DB2                     	;# 
   884  0DB3                     	;# 
   885  0DB3                     	;# 
   886  0DB4                     	;# 
   887  0DB5                     	;# 
   888  0DB5                     	;# 
   889  0DB6                     	;# 
   890  0DB7                     	;# 
   891  0DB7                     	;# 
   892  0DB8                     	;# 
   893  0DB9                     	;# 
   894  0DB9                     	;# 
   895  0DBA                     	;# 
   896  0DBB                     	;# 
   897  0DBC                     	;# 
   898  0DBC                     	;# 
   899  0DBD                     	;# 
   900  0DBD                     	;# 
   901  0DBE                     	;# 
   902  0DBF                     	;# 
   903  0DC0                     	;# 
   904  0FE4                     	;# 
   905  0FE5                     	;# 
   906  0FE6                     	;# 
   907  0FE7                     	;# 
   908  0FE8                     	;# 
   909  0FE8                     	;# 
   910  0FE9                     	;# 
   911  0FEA                     	;# 
   912  0FEA                     	;# 
   913  0FEB                     	;# 
   914  0FED                     	;# 
   915  0FEE                     	;# 
   916  0FEE                     	;# 
   917  0FEF                     	;# 
   918                           
   919                           	psect	idataBANK0
   920  026E                     __pidataBANK0:	
   921                           
   922                           ;initializer for _PORTTable
   923  026E  3401               	retlw	1
   924  026F  3402               	retlw	2
   925  0270  3410               	retlw	16
   926  0271  3420               	retlw	32
   927  0272  3420               	retlw	32
   928  0273  3401               	retlw	1
   929  0274  3410               	retlw	16
   930  0275  3402               	retlw	2
   931                           
   932                           ;initializer for _TRISTable
   933  0276  34FC               	retlw	252
   934  0277  34FC               	retlw	252
   935  0278  34CF               	retlw	207
   936  0279  34CF               	retlw	207
   937  027A  34DE               	retlw	222
   938  027B  34DE               	retlw	222
   939  027C  34ED               	retlw	237
   940  027D  34ED               	retlw	237
   941                           
   942                           ;initializer for RunLeftFlash@left_delay
   943  027E  34FA               	retlw	250
   944  027F  3400               	retlw	0
   945                           
   946                           ;initializer for RunRightFlash@right_delay
   947  0280  34FA               	retlw	250
   948  0281  3400               	retlw	0
   949                           
   950                           	psect	nvBANK0
   951  0061                     __pnvBANK0:	
   952  0061                     _TMR0_InterruptHandler:	
   953  0061                     	ds	2
   954  0063                     _IOCAF3_InterruptHandler:	
   955  0063                     	ds	2
   956  0065                     _IOCAF2_InterruptHandler:	
   957  0065                     	ds	2
   958  0067                     _timer0ReloadVal:	
   959  0067                     	ds	1
   960  000C                     _PORTAbits	set	12
   961  000C                     _PORTA	set	12
   962  0015                     _TMR0	set	21
   963  000B                     _INTCONbits	set	11
   964  0095                     _OPTION_REG	set	149
   965  0097                     _WDTCON	set	151
   966  0098                     _OSCTUNE	set	152
   967  0099                     _OSCCON	set	153
   968  0095                     _OPTION_REGbits	set	149
   969  008C                     _TRISA	set	140
   970  0116                     _BORCON	set	278
   971  011D                     _APFCON	set	285
   972  010C                     _LATA	set	268
   973  0197                     _VREGCONbits	set	407
   974  018C                     _ANSELA	set	396
   975  020C                     _WPUA	set	524
   976  028C                     _ODCONA	set	652
   977  0391                     _IOCAPbits	set	913
   978  0392                     _IOCANbits	set	914
   979  0393                     _IOCAFbits	set	915
   980                           
   981                           ; #config settings
   982  0000                     
   983                           	psect	cinit
   984  0012                     start_initialization:	
   985  0012                     __initialization:	
   986                           
   987                           ; Initialize objects allocated to BANK0
   988  0012  306E               	movlw	low __pidataBANK0
   989  0013  0084               	movwf	4
   990  0014  3082               	movlw	(high __pidataBANK0)| (0+128)
   991  0015  0085               	movwf	5
   992  0016  3041               	movlw	low __pdataBANK0
   993  0017  0086               	movwf	6
   994  0018  3000               	movlw	high __pdataBANK0
   995  0019  0087               	movwf	7
   996  001A  3014               	movlw	20
   997  001B  22BF               	fcall	init_ram
   998  001C  3020               	movlw	low __pbssBANK0
   999                           
  1000                           ; Clear objects allocated to COMMON
  1001  001D  01F7               	clrf	__pbssCOMMON& (0+127)
  1002  001E  01F8               	clrf	(__pbssCOMMON+1)& (0+127)
  1003  001F  01F9               	clrf	(__pbssCOMMON+2)& (0+127)
  1004  0020  01FA               	clrf	(__pbssCOMMON+3)& (0+127)
  1005                           
  1006                           ; Clear objects allocated to BANK0
  1007  0021  0084               	movwf	4
  1008  0022  3000               	movlw	high __pbssBANK0
  1009  0023  0085               	movwf	5
  1010  0024  3021               	movlw	33
  1011  0025  22C5               	fcall	clear_ram0
  1012  0026                     end_of_initialization:	
  1013                           ;End of C runtime variable initialization code
  1014                           
  1015  0026                     __end_of__initialization:	
  1016  0026  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  1017  0027  0020               	movlb	0
  1018  0028  2974               	ljmp	_main	;jump to C main() function
  1019                           
  1020                           	psect	bssCOMMON
  1021  0077                     __pbssCOMMON:	
  1022  0077                     _RightButtonState:	
  1023  0077                     	ds	1
  1024  0078                     _LeftButtonState:	
  1025  0078                     	ds	1
  1026  0079                     _RightDebounceTimer:	
  1027  0079                     	ds	1
  1028  007A                     _LeftDebounceTimer:	
  1029  007A                     	ds	1
  1030                           
  1031                           	psect	bssBANK0
  1032  0020                     __pbssBANK0:	
  1033  0020                     _PatternDelay:	
  1034  0020                     	ds	16
  1035  0030                     _PatternState:	
  1036  0030                     	ds	8
  1037  0038                     _WakeTimer:	
  1038  0038                     	ds	4
  1039  003C                     CheckForButtonPushes@LastRightButtonState:	
  1040  003C                     	ds	1
  1041  003D                     CheckForButtonPushes@LastLeftButtonState:	
  1042  003D                     	ds	1
  1043  003E                     _ShutdownDelayTimer:	
  1044  003E                     	ds	1
  1045  003F                     _LEDOns:	
  1046  003F                     	ds	1
  1047  0040                     _LEDState:	
  1048  0040                     	ds	1
  1049                           
  1050                           	psect	dataBANK0
  1051  0041                     __pdataBANK0:	
  1052  0041                     _PORTTable:	
  1053  0041                     	ds	8
  1054  0049                     _TRISTable:	
  1055  0049                     	ds	8
  1056  0051                     RunLeftFlash@left_delay:	
  1057  0051                     	ds	2
  1058  0053                     RunRightFlash@right_delay:	
  1059  0053                     	ds	2
  1060                           
  1061                           	psect	inittext
  1062  02BF                     init_ram:	
  1063  02BF  00FE               	movwf	126
  1064  02C0                     initloop:	
  1065  02C0  0012               	moviw fsr0++
  1066  02C1  001E               	movwi fsr1++
  1067  02C2  0BFE               	decfsz	126,f
  1068  02C3  2AC0               	goto	initloop
  1069  02C4  3400               	retlw	0
  1070                           
  1071                           	psect	clrtext
  1072  02C5                     clear_ram0:	
  1073                           ;	Called with FSR0 containing the base address, and
  1074                           ;	WREG with the size to clear
  1075                           
  1076  02C5  0064               	clrwdt	;clear the watchdog before getting into this loop
  1077  02C6                     clrloop0:	
  1078  02C6  0180               	clrf	0	;clear RAM location pointed to by FSR
  1079  02C7  3101               	addfsr 0,1
  1080  02C8  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  1081  02C9  2AC6               	goto	clrloop0	;have we reached the end yet?
  1082  02CA  3400               	retlw	0	;all done for this memory range, return
  1083                           
  1084                           	psect	cstackCOMMON
  1085  0070                     __pcstackCOMMON:	
  1086  0070                     ?_IOCAF2_DefaultInterruptHandler:	
  1087  0070                     ??_IOCAF2_DefaultInterruptHandler:	
  1088                           ; 1 bytes @ 0x0
  1089                           
  1090  0070                     ?_IOCAF3_DefaultInterruptHandler:	
  1091                           ; 1 bytes @ 0x0
  1092                           
  1093  0070                     ??_IOCAF3_DefaultInterruptHandler:	
  1094                           ; 1 bytes @ 0x0
  1095                           
  1096  0070                     ?_IOCAF2_ISR:	
  1097                           ; 1 bytes @ 0x0
  1098                           
  1099  0070                     ??_IOCAF2_ISR:	
  1100                           ; 1 bytes @ 0x0
  1101                           
  1102  0070                     ?_IOCAF3_ISR:	
  1103                           ; 1 bytes @ 0x0
  1104                           
  1105  0070                     ??_IOCAF3_ISR:	
  1106                           ; 1 bytes @ 0x0
  1107                           
  1108  0070                     ?_OSCILLATOR_Initialize:	
  1109                           ; 1 bytes @ 0x0
  1110                           
  1111  0070                     ?_WDT_Initialize:	
  1112                           ; 1 bytes @ 0x0
  1113                           
  1114  0070                     ?_TMR0_Initialize:	
  1115                           ; 1 bytes @ 0x0
  1116                           
  1117  0070                     ?_TMR0_ISR:	
  1118                           ; 1 bytes @ 0x0
  1119                           
  1120  0070                     ?_TMR0_CallBack:	
  1121                           ; 1 bytes @ 0x0
  1122                           
  1123  0070                     ?_PIN_MANAGER_Initialize:	
  1124                           ; 1 bytes @ 0x0
  1125                           
  1126  0070                     ?_PIN_MANAGER_IOC:	
  1127                           ; 1 bytes @ 0x0
  1128                           
  1129  0070                     ??_PIN_MANAGER_IOC:	
  1130                           ; 1 bytes @ 0x0
  1131                           
  1132  0070                     ?_SYSTEM_Initialize:	
  1133                           ; 1 bytes @ 0x0
  1134                           
  1135  0070                     ?_INTERRUPT_InterruptManager:	
  1136                           ; 1 bytes @ 0x0
  1137                           
  1138  0070                     ?_SetLEDOn:	
  1139                           ; 1 bytes @ 0x0
  1140                           
  1141  0070                     ?_SetLEDOff:	
  1142                           ; 1 bytes @ 0x0
  1143                           
  1144  0070                     ?_SetAllLEDsOff:	
  1145                           ; 1 bytes @ 0x0
  1146                           
  1147  0070                     ?_TMR0_Callback:	
  1148                           ; 1 bytes @ 0x0
  1149                           
  1150  0070                     ??_TMR0_Callback:	
  1151                           ; 1 bytes @ 0x0
  1152                           
  1153  0070                     ?_RightButtonPressedRaw:	
  1154                           ; 1 bytes @ 0x0
  1155                           
  1156  0070                     ?_LeftButtonPressedRaw:	
  1157                           ; 1 bytes @ 0x0
  1158                           
  1159  0070                     ?_RightButtonPressed:	
  1160                           ; 1 bytes @ 0x0
  1161                           
  1162  0070                     ?_LeftButtonPressed:	
  1163                           ; 1 bytes @ 0x0
  1164                           
  1165  0070                     ?_RunRightFlash:	
  1166                           ; 1 bytes @ 0x0
  1167                           
  1168  0070                     ?_RunLeftFlash:	
  1169                           ; 1 bytes @ 0x0
  1170                           
  1171  0070                     ?_CheckForButtonPushes:	
  1172                           ; 1 bytes @ 0x0
  1173                           
  1174  0070                     ?_main:	
  1175                           ; 1 bytes @ 0x0
  1176                           
  1177                           
  1178                           ; 1 bytes @ 0x0
  1179  0070                     	ds	2
  1180  0072                     TMR0_Callback@i:	
  1181                           
  1182                           ; 1 bytes @ 0x2
  1183  0072                     	ds	1
  1184  0073                     ?_IOCAF2_SetInterruptHandler:	
  1185  0073                     ?_IOCAF3_SetInterruptHandler:	
  1186                           ; 1 bytes @ 0x3
  1187                           
  1188  0073                     ??_OSCILLATOR_Initialize:	
  1189                           ; 1 bytes @ 0x3
  1190                           
  1191  0073                     ??_WDT_Initialize:	
  1192                           ; 1 bytes @ 0x3
  1193                           
  1194  0073                     ??_TMR0_Initialize:	
  1195                           ; 1 bytes @ 0x3
  1196                           
  1197  0073                     ??_TMR0_ISR:	
  1198                           ; 1 bytes @ 0x3
  1199                           
  1200  0073                     ??_TMR0_CallBack:	
  1201                           ; 1 bytes @ 0x3
  1202                           
  1203  0073                     ??_INTERRUPT_InterruptManager:	
  1204                           ; 1 bytes @ 0x3
  1205                           
  1206  0073                     ?_TMR0_SetInterruptHandler:	
  1207                           ; 1 bytes @ 0x3
  1208                           
  1209  0073                     ??_SetLEDOn:	
  1210                           ; 1 bytes @ 0x3
  1211                           
  1212  0073                     ??_SetLEDOff:	
  1213                           ; 1 bytes @ 0x3
  1214                           
  1215  0073                     ??_SetAllLEDsOff:	
  1216                           ; 1 bytes @ 0x3
  1217                           
  1218  0073                     ??_RightButtonPressedRaw:	
  1219                           ; 1 bytes @ 0x3
  1220                           
  1221  0073                     ??_LeftButtonPressedRaw:	
  1222                           ; 1 bytes @ 0x3
  1223                           
  1224  0073                     ??_RightButtonPressed:	
  1225                           ; 1 bytes @ 0x3
  1226                           
  1227  0073                     ??_LeftButtonPressed:	
  1228                           ; 1 bytes @ 0x3
  1229                           
  1230  0073                     ??_CheckForButtonPushes:	
  1231                           ; 1 bytes @ 0x3
  1232                           
  1233  0073                     ?___wmul:	
  1234                           ; 1 bytes @ 0x3
  1235                           
  1236  0073                     SetLEDOn@LED:	
  1237                           ; 2 bytes @ 0x3
  1238                           
  1239  0073                     SetLEDOff@LED:	
  1240                           ; 1 bytes @ 0x3
  1241                           
  1242  0073                     _CheckForButtonPushes$433:	
  1243                           ; 1 bytes @ 0x3
  1244                           
  1245  0073                     IOCAF2_SetInterruptHandler@InterruptHandler:	
  1246                           ; 1 bytes @ 0x3
  1247                           
  1248  0073                     IOCAF3_SetInterruptHandler@InterruptHandler:	
  1249                           ; 2 bytes @ 0x3
  1250                           
  1251  0073                     TMR0_SetInterruptHandler@InterruptHandler:	
  1252                           ; 2 bytes @ 0x3
  1253                           
  1254  0073                     ___wmul@multiplier:	
  1255                           ; 2 bytes @ 0x3
  1256                           
  1257                           
  1258                           ; 2 bytes @ 0x3
  1259  0073                     	ds	2
  1260  0075                     ??_IOCAF2_SetInterruptHandler:	
  1261  0075                     ??_IOCAF3_SetInterruptHandler:	
  1262                           ; 1 bytes @ 0x5
  1263                           
  1264  0075                     ??_PIN_MANAGER_Initialize:	
  1265                           ; 1 bytes @ 0x5
  1266                           
  1267  0075                     ??_SYSTEM_Initialize:	
  1268                           ; 1 bytes @ 0x5
  1269                           
  1270  0075                     ??_TMR0_SetInterruptHandler:	
  1271                           ; 1 bytes @ 0x5
  1272                           
  1273  0075                     ___wmul@multiplicand:	
  1274                           ; 1 bytes @ 0x5
  1275                           
  1276                           
  1277                           ; 2 bytes @ 0x5
  1278  0075                     	ds	2
  1279  0077                     ??_RunRightFlash:	
  1280  0077                     ??_RunLeftFlash:	
  1281                           ; 1 bytes @ 0x7
  1282                           
  1283  0077                     ??___wmul:	
  1284                           ; 1 bytes @ 0x7
  1285                           
  1286  0077                     ??___lwdiv:	
  1287                           ; 1 bytes @ 0x7
  1288                           
  1289                           
  1290                           	psect	cstackBANK0
  1291  0055                     __pcstackBANK0:	
  1292                           ; 1 bytes @ 0x7
  1293                           
  1294  0055                     ___wmul@product:	
  1295                           
  1296                           ; 2 bytes @ 0x0
  1297  0055                     	ds	2
  1298  0057                     ?___lwdiv:	
  1299  0057                     ___lwdiv@divisor:	
  1300                           ; 2 bytes @ 0x2
  1301                           
  1302                           
  1303                           ; 2 bytes @ 0x2
  1304  0057                     	ds	2
  1305  0059                     ___lwdiv@dividend:	
  1306                           
  1307                           ; 2 bytes @ 0x4
  1308  0059                     	ds	2
  1309  005B                     ___lwdiv@quotient:	
  1310                           
  1311                           ; 2 bytes @ 0x6
  1312  005B                     	ds	2
  1313  005D                     ___lwdiv@counter:	
  1314                           
  1315                           ; 1 bytes @ 0x8
  1316  005D                     	ds	1
  1317  005E                     ??_main:	
  1318                           
  1319                           ; 1 bytes @ 0x9
  1320  005E                     	ds	1
  1321  005F                     main@APatternIsRunning:	
  1322                           
  1323                           ; 1 bytes @ 0xA
  1324  005F                     	ds	1
  1325  0060                     main@i:	
  1326                           
  1327                           ; 1 bytes @ 0xB
  1328  0060                     	ds	1
  1329                           
  1330                           	psect	maintext
  1331  0174                     __pmaintext:	
  1332 ;;
  1333 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  1334 ;;
  1335 ;; *************** function _main *****************
  1336 ;; Defined at:
  1337 ;;		line 541 in file "main.c"
  1338 ;; Parameters:    Size  Location     Type
  1339 ;;		None
  1340 ;; Auto vars:     Size  Location     Type
  1341 ;;  i               1   11[BANK0 ] unsigned char 
  1342 ;;  APatternIsRu    1   10[BANK0 ] unsigned char 
  1343 ;; Return value:  Size  Location     Type
  1344 ;;                  1    wreg      void 
  1345 ;; Registers used:
  1346 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1347 ;; Tracked objects:
  1348 ;;		On entry : B1F/0
  1349 ;;		On exit  : 1F/0
  1350 ;;		Unchanged: 0/0
  1351 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1352 ;;      Params:         0       0       0       0
  1353 ;;      Locals:         0       2       0       0
  1354 ;;      Temps:          0       1       0       0
  1355 ;;      Totals:         0       3       0       0
  1356 ;;Total ram usage:        3 bytes
  1357 ;; Hardware stack levels required when called:    7
  1358 ;; This function calls:
  1359 ;;		_CheckForButtonPushes
  1360 ;;		_RunLeftFlash
  1361 ;;		_RunRightFlash
  1362 ;;		_SYSTEM_Initialize
  1363 ;;		_SetAllLEDsOff
  1364 ;;		_TMR0_SetInterruptHandler
  1365 ;; This function is called by:
  1366 ;;		Startup code after reset
  1367 ;; This function uses a non-reentrant model
  1368 ;;
  1369                           
  1370                           
  1371                           ;psect for function _main
  1372  0174                     _main:	
  1373                           
  1374                           ;main.c: 544: SYSTEM_Initialize();
  1375                           
  1376                           ;incstack = 0
  1377                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1378  0174  2302               	fcall	_SYSTEM_Initialize
  1379                           
  1380                           ;main.c: 546: TMR0_SetInterruptHandler(TMR0_Callback);
  1381  0175  30C4               	movlw	low _TMR0_Callback
  1382  0176  00F3               	movwf	TMR0_SetInterruptHandler@InterruptHandler
  1383  0177  3001               	movlw	high _TMR0_Callback
  1384  0178  00F4               	movwf	TMR0_SetInterruptHandler@InterruptHandler+1
  1385  0179  22E9               	fcall	_TMR0_SetInterruptHandler
  1386                           
  1387                           ;main.c: 552: (INTCONbits.GIE = 1);
  1388  017A  178B               	bsf	11,7	;volatile
  1389                           
  1390                           ;main.c: 555: (INTCONbits.PEIE = 1);
  1391  017B  170B               	bsf	11,6	;volatile
  1392  017C                     l1720:	
  1393                           
  1394                           ;main.c: 567: {
  1395                           ;main.c: 568: RunRightFlash();
  1396  017C  210A               	fcall	_RunRightFlash
  1397                           
  1398                           ;main.c: 569: RunLeftFlash();
  1399  017D  2029               	fcall	_RunLeftFlash
  1400                           
  1401                           ;main.c: 571: APatternIsRunning = 0;
  1402  017E  01DF               	clrf	main@APatternIsRunning
  1403                           
  1404                           ;main.c: 572: for (i=0; i < 8; i++)
  1405  017F  01E0               	clrf	main@i
  1406  0180                     l1732:	
  1407                           
  1408                           ;main.c: 573: {
  1409                           ;main.c: 574: if (PatternState[i] != 0)
  1410  0180  0860               	movf	main@i,w
  1411  0181  3E30               	addlw	(low (_PatternState| 0))& (0+255)
  1412  0182  0086               	movwf	6
  1413  0183  0187               	clrf	7
  1414  0184  0801               	movf	1,w
  1415  0185  1903               	btfsc	3,2
  1416  0186  2989               	goto	l1736
  1417                           
  1418                           ;main.c: 575: {
  1419                           ;main.c: 576: APatternIsRunning = 1;
  1420  0187  01DF               	clrf	main@APatternIsRunning
  1421  0188  0ADF               	incf	main@APatternIsRunning,f
  1422  0189                     l1736:	
  1423  0189  3008               	movlw	8
  1424  018A  0AE0               	incf	main@i,f
  1425  018B  0260               	subwf	main@i,w
  1426  018C  1C03               	skipc
  1427  018D  2980               	goto	l1732
  1428                           
  1429                           ;main.c: 577: }
  1430                           ;main.c: 578: }
  1431                           ;main.c: 579: if ((!APatternIsRunning && RightDebounceTimer == 0 && LeftDebounceTimer ==
      +                           0) || (WakeTimer > (1UL * 60UL * 1000UL)))
  1432  018E  085F               	movf	main@APatternIsRunning,w
  1433  018F  1D03               	btfss	3,2
  1434  0190  2996               	goto	l1746
  1435  0191  0879               	movf	_RightDebounceTimer,w	;volatile
  1436  0192  1903               	btfsc	3,2
  1437  0193  087A               	movf	_LeftDebounceTimer,w	;volatile
  1438  0194  1903               	btfsc	3,2
  1439  0195  29A2               	goto	l1748
  1440  0196                     l1746:	
  1441  0196  083B               	movf	_WakeTimer+3,w	;volatile
  1442  0197  1D03               	btfss	3,2
  1443  0198  29A2               	goto	l1748
  1444  0199  083A               	movf	_WakeTimer+2,w	;volatile
  1445  019A  1D03               	btfss	3,2
  1446  019B  29A2               	goto	l1748
  1447  019C  3061               	movlw	97
  1448  019D  0238               	subwf	_WakeTimer,w	;volatile
  1449  019E  30EA               	movlw	234
  1450  019F  3B39               	subwfb	_WakeTimer+1,w	;volatile
  1451  01A0  1C03               	btfss	3,0
  1452  01A1  29C2               	goto	l1762
  1453  01A2                     l1748:	
  1454                           
  1455                           ;main.c: 580: {
  1456                           ;main.c: 581: SetAllLEDsOff();
  1457  01A2  2311               	fcall	_SetAllLEDsOff
  1458                           
  1459                           ;main.c: 583: _delay((unsigned long)((5)*(16000000/4000.0)));
  1460  01A3  301A               	movlw	26
  1461  01A4  0020               	movlb	0	; select bank0
  1462  01A5  00DE               	movwf	??_main
  1463  01A6  30F8               	movlw	248
  1464  01A7                     u1547:	
  1465  01A7  0B89               	decfsz	9,f
  1466  01A8  29A7               	goto	u1547
  1467  01A9  0BDE               	decfsz	??_main,f
  1468  01AA  29A7               	goto	u1547
  1469  01AB  0000               	nop
  1470                           
  1471                           ;main.c: 585: ShutdownDelayTimer = 100;
  1472  01AC  3064               	movlw	100
  1473  01AD  0020               	movlb	0	; select bank0
  1474  01AE  00BE               	movwf	_ShutdownDelayTimer	;volatile
  1475  01AF  29B4               	goto	l1754
  1476  01B0                     l1756:	
  1477  01B0  209D               	fcall	_CheckForButtonPushes
  1478  01B1  3A00               	xorlw	0
  1479  01B2  1D03               	btfss	3,2
  1480  01B3  29B7               	goto	l1758
  1481  01B4                     l1754:	
  1482                           ;main.c: 587: while (ShutdownDelayTimer && !CheckForButtonPushes())
  1483                           
  1484  01B4  083E               	movf	_ShutdownDelayTimer,w	;volatile
  1485  01B5  1D03               	btfss	3,2
  1486  01B6  29B0               	goto	l1756
  1487  01B7                     l1758:	
  1488                           
  1489                           ;main.c: 589: }
  1490                           ;main.c: 591: if (ShutdownDelayTimer == 0)
  1491  01B7  083E               	movf	_ShutdownDelayTimer,w	;volatile
  1492  01B8  1D03               	btfss	3,2
  1493  01B9  29C2               	goto	l1762
  1494                           
  1495                           ;main.c: 592: {
  1496                           ;main.c: 594: VREGCONbits.VREGPM = 1;
  1497  01BA  0023               	movlb	3	; select bank3
  1498  01BB  1497               	bsf	23,1	;volatile
  1499  01BC  0063               	sleep	;# 
  1500                           
  1501                           ;main.c: 599: WakeTimer = 0;
  1502  01BD  0020               	movlb	0	; select bank0
  1503  01BE  01B8               	clrf	_WakeTimer	;volatile
  1504  01BF  01B9               	clrf	_WakeTimer+1	;volatile
  1505  01C0  01BA               	clrf	_WakeTimer+2	;volatile
  1506  01C1  01BB               	clrf	_WakeTimer+3	;volatile
  1507  01C2                     l1762:	
  1508                           
  1509                           ;main.c: 600: }
  1510                           ;main.c: 601: }
  1511                           ;main.c: 603: CheckForButtonPushes();
  1512  01C2  209D               	fcall	_CheckForButtonPushes
  1513  01C3  297C               	goto	l1720
  1514  01C4                     __end_of_main:	
  1515                           
  1516                           	psect	text1
  1517  02E9                     __ptext1:	
  1518 ;; *************** function _TMR0_SetInterruptHandler *****************
  1519 ;; Defined at:
  1520 ;;		line 133 in file "mcc_generated_files/tmr0.c"
  1521 ;; Parameters:    Size  Location     Type
  1522 ;;  InterruptHan    2    3[COMMON] PTR FTN()void 
  1523 ;;		 -> TMR0_Callback(1), 
  1524 ;; Auto vars:     Size  Location     Type
  1525 ;;		None
  1526 ;; Return value:  Size  Location     Type
  1527 ;;                  1    wreg      void 
  1528 ;; Registers used:
  1529 ;;		wreg
  1530 ;; Tracked objects:
  1531 ;;		On entry : B1F/0
  1532 ;;		On exit  : B1F/0
  1533 ;;		Unchanged: B00/0
  1534 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1535 ;;      Params:         2       0       0       0
  1536 ;;      Locals:         0       0       0       0
  1537 ;;      Temps:          0       0       0       0
  1538 ;;      Totals:         2       0       0       0
  1539 ;;Total ram usage:        2 bytes
  1540 ;; Hardware stack levels used:    1
  1541 ;; Hardware stack levels required when called:    4
  1542 ;; This function calls:
  1543 ;;		Nothing
  1544 ;; This function is called by:
  1545 ;;		_main
  1546 ;; This function uses a non-reentrant model
  1547 ;;
  1548                           
  1549                           
  1550                           ;psect for function _TMR0_SetInterruptHandler
  1551  02E9                     _TMR0_SetInterruptHandler:	
  1552                           
  1553                           ;tmr0.c: 134: TMR0_InterruptHandler = InterruptHandler;
  1554                           
  1555                           ;incstack = 0
  1556                           ; Regs used in _TMR0_SetInterruptHandler: [wreg]
  1557  02E9  0874               	movf	TMR0_SetInterruptHandler@InterruptHandler+1,w
  1558  02EA  00E2               	movwf	_TMR0_InterruptHandler+1
  1559  02EB  0873               	movf	TMR0_SetInterruptHandler@InterruptHandler,w
  1560  02EC  00E1               	movwf	_TMR0_InterruptHandler
  1561  02ED  0008               	return
  1562  02EE                     __end_of_TMR0_SetInterruptHandler:	
  1563                           
  1564                           	psect	text2
  1565  0311                     __ptext2:	
  1566 ;; *************** function _SetAllLEDsOff *****************
  1567 ;; Defined at:
  1568 ;;		line 199 in file "main.c"
  1569 ;; Parameters:    Size  Location     Type
  1570 ;;		None
  1571 ;; Auto vars:     Size  Location     Type
  1572 ;;		None
  1573 ;; Return value:  Size  Location     Type
  1574 ;;                  1    wreg      void 
  1575 ;; Registers used:
  1576 ;;		status,2
  1577 ;; Tracked objects:
  1578 ;;		On entry : 1F/0
  1579 ;;		On exit  : 1F/0
  1580 ;;		Unchanged: 0/0
  1581 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1582 ;;      Params:         0       0       0       0
  1583 ;;      Locals:         0       0       0       0
  1584 ;;      Temps:          0       0       0       0
  1585 ;;      Totals:         0       0       0       0
  1586 ;;Total ram usage:        0 bytes
  1587 ;; Hardware stack levels used:    1
  1588 ;; Hardware stack levels required when called:    4
  1589 ;; This function calls:
  1590 ;;		Nothing
  1591 ;; This function is called by:
  1592 ;;		_main
  1593 ;; This function uses a non-reentrant model
  1594 ;;
  1595                           
  1596                           
  1597                           ;psect for function _SetAllLEDsOff
  1598  0311                     _SetAllLEDsOff:	
  1599                           
  1600                           ;main.c: 201: LEDOns = 0;
  1601                           
  1602                           ;incstack = 0
  1603                           ; Regs used in _SetAllLEDsOff: [status,2]
  1604  0311  01BF               	clrf	_LEDOns	;volatile
  1605  0312  0008               	return
  1606  0313                     __end_of_SetAllLEDsOff:	
  1607                           
  1608                           	psect	text3
  1609  0302                     __ptext3:	
  1610 ;; *************** function _SYSTEM_Initialize *****************
  1611 ;; Defined at:
  1612 ;;		line 68 in file "mcc_generated_files/mcc.c"
  1613 ;; Parameters:    Size  Location     Type
  1614 ;;		None
  1615 ;; Auto vars:     Size  Location     Type
  1616 ;;		None
  1617 ;; Return value:  Size  Location     Type
  1618 ;;                  1    wreg      void 
  1619 ;; Registers used:
  1620 ;;		wreg, status,2, status,0, pclath, cstack
  1621 ;; Tracked objects:
  1622 ;;		On entry : B1F/0
  1623 ;;		On exit  : B1F/0
  1624 ;;		Unchanged: B00/0
  1625 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1626 ;;      Params:         0       0       0       0
  1627 ;;      Locals:         0       0       0       0
  1628 ;;      Temps:          0       0       0       0
  1629 ;;      Totals:         0       0       0       0
  1630 ;;Total ram usage:        0 bytes
  1631 ;; Hardware stack levels used:    1
  1632 ;; Hardware stack levels required when called:    6
  1633 ;; This function calls:
  1634 ;;		_OSCILLATOR_Initialize
  1635 ;;		_PIN_MANAGER_Initialize
  1636 ;;		_TMR0_Initialize
  1637 ;;		_WDT_Initialize
  1638 ;; This function is called by:
  1639 ;;		_main
  1640 ;; This function uses a non-reentrant model
  1641 ;;
  1642                           
  1643                           
  1644                           ;psect for function _SYSTEM_Initialize
  1645  0302                     _SYSTEM_Initialize:	
  1646                           
  1647                           ;mcc.c: 71: PIN_MANAGER_Initialize();
  1648                           
  1649                           ;incstack = 0
  1650                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  1651  0302  2235               	fcall	_PIN_MANAGER_Initialize
  1652                           
  1653                           ;mcc.c: 72: OSCILLATOR_Initialize();
  1654  0303  22B1               	fcall	_OSCILLATOR_Initialize
  1655                           
  1656                           ;mcc.c: 73: WDT_Initialize();
  1657  0304  2306               	fcall	_WDT_Initialize
  1658                           
  1659                           ;mcc.c: 74: TMR0_Initialize();
  1660  0305  2A9C               	ljmp	l1254
  1661  0306                     __end_of_SYSTEM_Initialize:	
  1662                           
  1663                           	psect	text4
  1664  0306                     __ptext4:	
  1665 ;; *************** function _WDT_Initialize *****************
  1666 ;; Defined at:
  1667 ;;		line 87 in file "mcc_generated_files/mcc.c"
  1668 ;; Parameters:    Size  Location     Type
  1669 ;;		None
  1670 ;; Auto vars:     Size  Location     Type
  1671 ;;		None
  1672 ;; Return value:  Size  Location     Type
  1673 ;;                  1    wreg      void 
  1674 ;; Registers used:
  1675 ;;		wreg
  1676 ;; Tracked objects:
  1677 ;;		On entry : B1F/2
  1678 ;;		On exit  : B1F/1
  1679 ;;		Unchanged: B00/0
  1680 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1681 ;;      Params:         0       0       0       0
  1682 ;;      Locals:         0       0       0       0
  1683 ;;      Temps:          0       0       0       0
  1684 ;;      Totals:         0       0       0       0
  1685 ;;Total ram usage:        0 bytes
  1686 ;; Hardware stack levels used:    1
  1687 ;; Hardware stack levels required when called:    4
  1688 ;; This function calls:
  1689 ;;		Nothing
  1690 ;; This function is called by:
  1691 ;;		_SYSTEM_Initialize
  1692 ;; This function uses a non-reentrant model
  1693 ;;
  1694                           
  1695                           
  1696                           ;psect for function _WDT_Initialize
  1697  0306                     _WDT_Initialize:	
  1698                           
  1699                           ;mcc.c: 90: WDTCON = 0x16;
  1700                           
  1701                           ;incstack = 0
  1702                           ; Regs used in _WDT_Initialize: [wreg]
  1703  0306  3016               	movlw	22
  1704  0307  0021               	movlb	1	; select bank1
  1705  0308  0097               	movwf	23	;volatile
  1706  0309  0008               	return
  1707  030A                     __end_of_WDT_Initialize:	
  1708                           
  1709                           	psect	text5
  1710  029C                     __ptext5:	
  1711 ;; *************** function _TMR0_Initialize *****************
  1712 ;; Defined at:
  1713 ;;		line 65 in file "mcc_generated_files/tmr0.c"
  1714 ;; Parameters:    Size  Location     Type
  1715 ;;		None
  1716 ;; Auto vars:     Size  Location     Type
  1717 ;;		None
  1718 ;; Return value:  Size  Location     Type
  1719 ;;                  1    wreg      void 
  1720 ;; Registers used:
  1721 ;;		wreg, status,2
  1722 ;; Tracked objects:
  1723 ;;		On entry : B1F/1
  1724 ;;		On exit  : B1F/0
  1725 ;;		Unchanged: B00/0
  1726 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1727 ;;      Params:         0       0       0       0
  1728 ;;      Locals:         0       0       0       0
  1729 ;;      Temps:          0       0       0       0
  1730 ;;      Totals:         0       0       0       0
  1731 ;;Total ram usage:        0 bytes
  1732 ;; Hardware stack levels used:    1
  1733 ;; Hardware stack levels required when called:    4
  1734 ;; This function calls:
  1735 ;;		Nothing
  1736 ;; This function is called by:
  1737 ;;		_SYSTEM_Initialize
  1738 ;; This function uses a non-reentrant model
  1739 ;;
  1740                           
  1741                           
  1742                           ;psect for function _TMR0_Initialize
  1743  029C                     _TMR0_Initialize:	
  1744  029C                     l1254:	
  1745                           ;incstack = 0
  1746                           ; Regs used in _TMR0_Initialize: [wreg+status,2]
  1747                           
  1748                           
  1749                           ;tmr0.c: 70: OPTION_REG = (uint8_t)((OPTION_REG & 0xC0) | 0xD1 & 0x3F);
  1750  029C  0815               	movf	21,w	;volatile
  1751  029D  39C0               	andlw	192
  1752  029E  3811               	iorlw	17
  1753  029F  0095               	movwf	21	;volatile
  1754                           
  1755                           ;tmr0.c: 73: TMR0 = 0x87;
  1756  02A0  3087               	movlw	135
  1757  02A1  0020               	movlb	0	; select bank0
  1758  02A2  0095               	movwf	21	;volatile
  1759                           
  1760                           ;tmr0.c: 76: timer0ReloadVal= 0x87;
  1761  02A3  00E7               	movwf	_timer0ReloadVal	;volatile
  1762                           
  1763                           ;tmr0.c: 79: INTCONbits.TMR0IF = 0;
  1764  02A4  110B               	bcf	11,2	;volatile
  1765                           
  1766                           ;tmr0.c: 82: INTCONbits.TMR0IE = 1;
  1767  02A5  168B               	bsf	11,5	;volatile
  1768  02A6  0008               	return
  1769  02A7                     __end_of_TMR0_Initialize:	
  1770                           
  1771                           	psect	text6
  1772  0235                     __ptext6:	
  1773 ;; *************** function _PIN_MANAGER_Initialize *****************
  1774 ;; Defined at:
  1775 ;;		line 55 in file "mcc_generated_files/pin_manager.c"
  1776 ;; Parameters:    Size  Location     Type
  1777 ;;		None
  1778 ;; Auto vars:     Size  Location     Type
  1779 ;;		None
  1780 ;; Return value:  Size  Location     Type
  1781 ;;                  1    wreg      void 
  1782 ;; Registers used:
  1783 ;;		wreg, status,2, status,0, pclath, cstack
  1784 ;; Tracked objects:
  1785 ;;		On entry : B1F/0
  1786 ;;		On exit  : B1F/0
  1787 ;;		Unchanged: B00/0
  1788 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1789 ;;      Params:         0       0       0       0
  1790 ;;      Locals:         0       0       0       0
  1791 ;;      Temps:          0       0       0       0
  1792 ;;      Totals:         0       0       0       0
  1793 ;;Total ram usage:        0 bytes
  1794 ;; Hardware stack levels used:    1
  1795 ;; Hardware stack levels required when called:    5
  1796 ;; This function calls:
  1797 ;;		_IOCAF2_SetInterruptHandler
  1798 ;;		_IOCAF3_SetInterruptHandler
  1799 ;; This function is called by:
  1800 ;;		_SYSTEM_Initialize
  1801 ;; This function uses a non-reentrant model
  1802 ;;
  1803                           
  1804                           
  1805                           ;psect for function _PIN_MANAGER_Initialize
  1806  0235                     _PIN_MANAGER_Initialize:	
  1807                           
  1808                           ;pin_manager.c: 60: LATA = 0x00;
  1809                           
  1810                           ;incstack = 0
  1811                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2+status,0+pclath+cstack]
  1812  0235  0022               	movlb	2	; select bank2
  1813  0236  018C               	clrf	12	;volatile
  1814                           
  1815                           ;pin_manager.c: 65: TRISA = 0x3F;
  1816  0237  303F               	movlw	63
  1817  0238  0021               	movlb	1	; select bank1
  1818  0239  008C               	movwf	12	;volatile
  1819                           
  1820                           ;pin_manager.c: 70: ANSELA = 0x13;
  1821  023A  3013               	movlw	19
  1822  023B  0023               	movlb	3	; select bank3
  1823  023C  008C               	movwf	12	;volatile
  1824                           
  1825                           ;pin_manager.c: 75: WPUA = 0x0C;
  1826  023D  300C               	movlw	12
  1827  023E  0024               	movlb	4	; select bank4
  1828  023F  008C               	movwf	12	;volatile
  1829                           
  1830                           ;pin_manager.c: 76: OPTION_REGbits.nWPUEN = 0;
  1831  0240  0021               	movlb	1	; select bank1
  1832  0241  1395               	bcf	21,7	;volatile
  1833                           
  1834                           ;pin_manager.c: 81: ODCONA = 0x00;
  1835  0242  0025               	movlb	5	; select bank5
  1836  0243  018C               	clrf	12	;volatile
  1837                           
  1838                           ;pin_manager.c: 86: APFCON = 0x00;
  1839  0244  0022               	movlb	2	; select bank2
  1840  0245  019D               	clrf	29	;volatile
  1841                           
  1842                           ;pin_manager.c: 92: IOCAFbits.IOCAF2 = 0;
  1843  0246  0027               	movlb	7	; select bank7
  1844  0247  1113               	bcf	19,2	;volatile
  1845                           
  1846                           ;pin_manager.c: 93: IOCAFbits.IOCAF3 = 0;
  1847  0248  1193               	bcf	19,3	;volatile
  1848                           
  1849                           ;pin_manager.c: 95: IOCANbits.IOCAN2 = 1;
  1850  0249  1512               	bsf	18,2	;volatile
  1851                           
  1852                           ;pin_manager.c: 96: IOCANbits.IOCAN3 = 1;
  1853  024A  1592               	bsf	18,3	;volatile
  1854                           
  1855                           ;pin_manager.c: 98: IOCAPbits.IOCAP2 = 1;
  1856  024B  1511               	bsf	17,2	;volatile
  1857                           
  1858                           ;pin_manager.c: 99: IOCAPbits.IOCAP3 = 1;
  1859  024C  1591               	bsf	17,3	;volatile
  1860                           
  1861                           ;pin_manager.c: 102: IOCAF2_SetInterruptHandler(IOCAF2_DefaultInterruptHandler);
  1862  024D  3014               	movlw	low _IOCAF2_DefaultInterruptHandler
  1863  024E  00F3               	movwf	IOCAF2_SetInterruptHandler@InterruptHandler
  1864  024F  3003               	movlw	high _IOCAF2_DefaultInterruptHandler
  1865  0250  00F4               	movwf	IOCAF2_SetInterruptHandler@InterruptHandler+1
  1866  0251  22CB               	fcall	_IOCAF2_SetInterruptHandler
  1867                           
  1868                           ;pin_manager.c: 103: IOCAF3_SetInterruptHandler(IOCAF3_DefaultInterruptHandler);
  1869  0252  3013               	movlw	low _IOCAF3_DefaultInterruptHandler
  1870  0253  00F3               	movwf	IOCAF3_SetInterruptHandler@InterruptHandler
  1871  0254  3003               	movlw	high _IOCAF3_DefaultInterruptHandler
  1872  0255  00F4               	movwf	IOCAF3_SetInterruptHandler@InterruptHandler+1
  1873  0256  22EE               	fcall	_IOCAF3_SetInterruptHandler
  1874                           
  1875                           ;pin_manager.c: 106: INTCONbits.IOCIE = 1;
  1876  0257  158B               	bsf	11,3	;volatile
  1877  0258  0008               	return
  1878  0259                     __end_of_PIN_MANAGER_Initialize:	
  1879                           
  1880                           	psect	text7
  1881  02EE                     __ptext7:	
  1882 ;; *************** function _IOCAF3_SetInterruptHandler *****************
  1883 ;; Defined at:
  1884 ;;		line 175 in file "mcc_generated_files/pin_manager.c"
  1885 ;; Parameters:    Size  Location     Type
  1886 ;;  InterruptHan    2    3[COMMON] PTR FTN()void 
  1887 ;;		 -> IOCAF3_DefaultInterruptHandler(1), 
  1888 ;; Auto vars:     Size  Location     Type
  1889 ;;		None
  1890 ;; Return value:  Size  Location     Type
  1891 ;;                  1    wreg      void 
  1892 ;; Registers used:
  1893 ;;		wreg
  1894 ;; Tracked objects:
  1895 ;;		On entry : B1F/0
  1896 ;;		On exit  : B1F/0
  1897 ;;		Unchanged: B00/0
  1898 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1899 ;;      Params:         2       0       0       0
  1900 ;;      Locals:         0       0       0       0
  1901 ;;      Temps:          0       0       0       0
  1902 ;;      Totals:         2       0       0       0
  1903 ;;Total ram usage:        2 bytes
  1904 ;; Hardware stack levels used:    1
  1905 ;; Hardware stack levels required when called:    4
  1906 ;; This function calls:
  1907 ;;		Nothing
  1908 ;; This function is called by:
  1909 ;;		_PIN_MANAGER_Initialize
  1910 ;; This function uses a non-reentrant model
  1911 ;;
  1912                           
  1913                           
  1914                           ;psect for function _IOCAF3_SetInterruptHandler
  1915  02EE                     _IOCAF3_SetInterruptHandler:	
  1916                           
  1917                           ;pin_manager.c: 176: IOCAF3_InterruptHandler = InterruptHandler;
  1918                           
  1919                           ;incstack = 0
  1920                           ; Regs used in _IOCAF3_SetInterruptHandler: [wreg]
  1921  02EE  0874               	movf	IOCAF3_SetInterruptHandler@InterruptHandler+1,w
  1922  02EF  00E4               	movwf	_IOCAF3_InterruptHandler+1
  1923  02F0  0873               	movf	IOCAF3_SetInterruptHandler@InterruptHandler,w
  1924  02F1  00E3               	movwf	_IOCAF3_InterruptHandler
  1925  02F2  0008               	return
  1926  02F3                     __end_of_IOCAF3_SetInterruptHandler:	
  1927                           
  1928                           	psect	text8
  1929  02CB                     __ptext8:	
  1930 ;; *************** function _IOCAF2_SetInterruptHandler *****************
  1931 ;; Defined at:
  1932 ;;		line 145 in file "mcc_generated_files/pin_manager.c"
  1933 ;; Parameters:    Size  Location     Type
  1934 ;;  InterruptHan    2    3[COMMON] PTR FTN()void 
  1935 ;;		 -> IOCAF2_DefaultInterruptHandler(1), 
  1936 ;; Auto vars:     Size  Location     Type
  1937 ;;		None
  1938 ;; Return value:  Size  Location     Type
  1939 ;;                  1    wreg      void 
  1940 ;; Registers used:
  1941 ;;		wreg
  1942 ;; Tracked objects:
  1943 ;;		On entry : B1F/7
  1944 ;;		On exit  : B1F/0
  1945 ;;		Unchanged: B00/0
  1946 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1947 ;;      Params:         2       0       0       0
  1948 ;;      Locals:         0       0       0       0
  1949 ;;      Temps:          0       0       0       0
  1950 ;;      Totals:         2       0       0       0
  1951 ;;Total ram usage:        2 bytes
  1952 ;; Hardware stack levels used:    1
  1953 ;; Hardware stack levels required when called:    4
  1954 ;; This function calls:
  1955 ;;		Nothing
  1956 ;; This function is called by:
  1957 ;;		_PIN_MANAGER_Initialize
  1958 ;; This function uses a non-reentrant model
  1959 ;;
  1960                           
  1961                           
  1962                           ;psect for function _IOCAF2_SetInterruptHandler
  1963  02CB                     _IOCAF2_SetInterruptHandler:	
  1964                           
  1965                           ;pin_manager.c: 146: IOCAF2_InterruptHandler = InterruptHandler;
  1966                           
  1967                           ;incstack = 0
  1968                           ; Regs used in _IOCAF2_SetInterruptHandler: [wreg]
  1969  02CB  0874               	movf	IOCAF2_SetInterruptHandler@InterruptHandler+1,w
  1970  02CC  0020               	movlb	0	; select bank0
  1971  02CD  00E6               	movwf	_IOCAF2_InterruptHandler+1
  1972  02CE  0873               	movf	IOCAF2_SetInterruptHandler@InterruptHandler,w
  1973  02CF  00E5               	movwf	_IOCAF2_InterruptHandler
  1974  02D0  0008               	return
  1975  02D1                     __end_of_IOCAF2_SetInterruptHandler:	
  1976                           
  1977                           	psect	text9
  1978  02B1                     __ptext9:	
  1979 ;; *************** function _OSCILLATOR_Initialize *****************
  1980 ;; Defined at:
  1981 ;;		line 77 in file "mcc_generated_files/mcc.c"
  1982 ;; Parameters:    Size  Location     Type
  1983 ;;		None
  1984 ;; Auto vars:     Size  Location     Type
  1985 ;;		None
  1986 ;; Return value:  Size  Location     Type
  1987 ;;                  1    wreg      void 
  1988 ;; Registers used:
  1989 ;;		wreg, status,2
  1990 ;; Tracked objects:
  1991 ;;		On entry : B1F/0
  1992 ;;		On exit  : B1F/2
  1993 ;;		Unchanged: B00/0
  1994 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1995 ;;      Params:         0       0       0       0
  1996 ;;      Locals:         0       0       0       0
  1997 ;;      Temps:          0       0       0       0
  1998 ;;      Totals:         0       0       0       0
  1999 ;;Total ram usage:        0 bytes
  2000 ;; Hardware stack levels used:    1
  2001 ;; Hardware stack levels required when called:    4
  2002 ;; This function calls:
  2003 ;;		Nothing
  2004 ;; This function is called by:
  2005 ;;		_SYSTEM_Initialize
  2006 ;; This function uses a non-reentrant model
  2007 ;;
  2008                           
  2009                           
  2010                           ;psect for function _OSCILLATOR_Initialize
  2011  02B1                     _OSCILLATOR_Initialize:	
  2012                           
  2013                           ;mcc.c: 80: OSCCON = 0x78;
  2014                           
  2015                           ;incstack = 0
  2016                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  2017  02B1  3078               	movlw	120
  2018  02B2  0021               	movlb	1	; select bank1
  2019  02B3  0099               	movwf	25	;volatile
  2020                           
  2021                           ;mcc.c: 82: OSCTUNE = 0x00;
  2022  02B4  0198               	clrf	24	;volatile
  2023                           
  2024                           ;mcc.c: 84: BORCON = 0x00;
  2025  02B5  0022               	movlb	2	; select bank2
  2026  02B6  0196               	clrf	22	;volatile
  2027  02B7  0008               	return
  2028  02B8                     __end_of_OSCILLATOR_Initialize:	
  2029                           
  2030                           	psect	text10
  2031  010A                     __ptext10:	
  2032 ;; *************** function _RunRightFlash *****************
  2033 ;; Defined at:
  2034 ;;		line 290 in file "main.c"
  2035 ;; Parameters:    Size  Location     Type
  2036 ;;		None
  2037 ;; Auto vars:     Size  Location     Type
  2038 ;;		None
  2039 ;; Return value:  Size  Location     Type
  2040 ;;                  1    wreg      void 
  2041 ;; Registers used:
  2042 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2043 ;; Tracked objects:
  2044 ;;		On entry : 1F/0
  2045 ;;		On exit  : 1F/0
  2046 ;;		Unchanged: 0/0
  2047 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2048 ;;      Params:         0       0       0       0
  2049 ;;      Locals:         0       0       0       0
  2050 ;;      Temps:          0       0       0       0
  2051 ;;      Totals:         0       0       0       0
  2052 ;;Total ram usage:        0 bytes
  2053 ;; Hardware stack levels used:    1
  2054 ;; Hardware stack levels required when called:    5
  2055 ;; This function calls:
  2056 ;;		_RightButtonPressed
  2057 ;;		_SetLEDOff
  2058 ;;		_SetLEDOn
  2059 ;;		___lwdiv
  2060 ;;		___wmul
  2061 ;; This function is called by:
  2062 ;;		_main
  2063 ;; This function uses a non-reentrant model
  2064 ;;
  2065                           
  2066                           
  2067                           ;psect for function _RunRightFlash
  2068  010A                     _RunRightFlash:	
  2069                           
  2070                           ;main.c: 292: static uint16_t right_delay = 250;
  2071                           ;main.c: 294: if (PatternDelay[0] == 0)
  2072                           
  2073                           ;incstack = 0
  2074                           ; Regs used in _RunRightFlash: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2075  010A  0820               	movf	_PatternDelay,w	;volatile
  2076  010B  0421               	iorwf	_PatternDelay+1,w	;volatile
  2077  010C  1D03               	btfss	3,2
  2078  010D  0008               	return
  2079  010E  2941               	goto	l1650
  2080  010F                     l1632:	
  2081                           
  2082                           ;main.c: 300: right_delay = 250;
  2083  010F  30FA               	movlw	250
  2084  0110  00D3               	movwf	RunRightFlash@right_delay
  2085  0111  01D4               	clrf	RunRightFlash@right_delay+1
  2086                           
  2087                           ;main.c: 301: break;
  2088  0112  294B               	goto	l1652
  2089  0113                     l1634:	
  2090                           
  2091                           ;main.c: 304: SetLEDOn(0x01);
  2092  0113  3001               	movlw	1
  2093  0114  230E               	fcall	_SetLEDOn
  2094                           
  2095                           ;main.c: 305: SetLEDOff(0x02);
  2096  0115  3002               	movlw	2
  2097  0116  230A               	fcall	_SetLEDOff
  2098                           
  2099                           ;main.c: 306: SetLEDOff(0x04);
  2100  0117  3004               	movlw	4
  2101  0118  230A               	fcall	_SetLEDOff
  2102                           
  2103                           ;main.c: 307: SetLEDOff(0x08);
  2104  0119  3008               	movlw	8
  2105  011A  230A               	fcall	_SetLEDOff
  2106                           
  2107                           ;main.c: 308: break;
  2108  011B  294B               	goto	l1652
  2109  011C                     l1636:	
  2110                           
  2111                           ;main.c: 311: SetLEDOff(0x01);
  2112  011C  3001               	movlw	1
  2113  011D  230A               	fcall	_SetLEDOff
  2114                           
  2115                           ;main.c: 312: SetLEDOn(0x02);
  2116  011E  3002               	movlw	2
  2117  011F  230E               	fcall	_SetLEDOn
  2118                           
  2119                           ;main.c: 313: SetLEDOff(0x04);
  2120  0120  3004               	movlw	4
  2121  0121  230A               	fcall	_SetLEDOff
  2122                           
  2123                           ;main.c: 314: SetLEDOff(0x08);
  2124  0122  3008               	movlw	8
  2125  0123  230A               	fcall	_SetLEDOff
  2126                           
  2127                           ;main.c: 315: break;
  2128  0124  294B               	goto	l1652
  2129  0125                     l1638:	
  2130                           
  2131                           ;main.c: 318: SetLEDOff(0x01);
  2132  0125  3001               	movlw	1
  2133  0126  230A               	fcall	_SetLEDOff
  2134                           
  2135                           ;main.c: 319: SetLEDOff(0x02);
  2136  0127  3002               	movlw	2
  2137  0128  230A               	fcall	_SetLEDOff
  2138                           
  2139                           ;main.c: 320: SetLEDOn(0x04);
  2140  0129  3004               	movlw	4
  2141  012A  230E               	fcall	_SetLEDOn
  2142                           
  2143                           ;main.c: 321: SetLEDOff(0x08);
  2144  012B  3008               	movlw	8
  2145  012C  230A               	fcall	_SetLEDOff
  2146                           
  2147                           ;main.c: 322: break;
  2148  012D  294B               	goto	l1652
  2149  012E                     l1640:	
  2150                           
  2151                           ;main.c: 325: SetLEDOff(0x01);
  2152  012E  3001               	movlw	1
  2153  012F  230A               	fcall	_SetLEDOff
  2154                           
  2155                           ;main.c: 326: SetLEDOff(0x02);
  2156  0130  3002               	movlw	2
  2157  0131  230A               	fcall	_SetLEDOff
  2158                           
  2159                           ;main.c: 327: SetLEDOff(0x04);
  2160  0132  3004               	movlw	4
  2161  0133  230A               	fcall	_SetLEDOff
  2162                           
  2163                           ;main.c: 328: SetLEDOn(0x08);
  2164  0134  3008               	movlw	8
  2165  0135  230E               	fcall	_SetLEDOn
  2166                           
  2167                           ;main.c: 329: break;
  2168  0136  294B               	goto	l1652
  2169  0137                     l1642:	
  2170                           
  2171                           ;main.c: 332: SetLEDOff(0x01);
  2172  0137  3001               	movlw	1
  2173  0138  230A               	fcall	_SetLEDOff
  2174                           
  2175                           ;main.c: 333: SetLEDOff(0x02);
  2176  0139  3002               	movlw	2
  2177  013A  230A               	fcall	_SetLEDOff
  2178                           
  2179                           ;main.c: 334: SetLEDOff(0x04);
  2180  013B  3004               	movlw	4
  2181  013C  230A               	fcall	_SetLEDOff
  2182                           
  2183                           ;main.c: 335: SetLEDOff(0x08);
  2184  013D  3008               	movlw	8
  2185  013E  230A               	fcall	_SetLEDOff
  2186  013F                     l1646:	
  2187                           ;main.c: 337: break;
  2188                           
  2189                           ;main.c: 336: PatternState[0] = 0;
  2190                           
  2191                           
  2192                           ;main.c: 340: PatternState[0] = 0;
  2193  013F  01B0               	clrf	_PatternState	;volatile
  2194                           
  2195                           ;main.c: 341: break;
  2196  0140  294B               	goto	l1652
  2197  0141                     l1650:	
  2198  0141  0830               	movf	_PatternState,w	;volatile
  2199                           
  2200                           ; Switch size 1, requested type "space"
  2201                           ; Number of cases is 6, Range of values is 0 to 5
  2202                           ; switch strategies available:
  2203                           ; Name         Instructions Cycles
  2204                           ; direct_byte           18     6 (fixed)
  2205                           ; simple_byte           19    10 (average)
  2206                           ; jumptable            260     6 (fixed)
  2207                           ;	Chosen strategy is direct_byte
  2208  0142  0084               	movwf	4
  2209  0143  3006               	movlw	6
  2210  0144  0204               	subwf	4,w
  2211  0145  1803               	skipnc
  2212  0146  293F               	goto	l1646
  2213  0147  3182               	movlp	high S1804
  2214  0148  30D1               	movlw	low S1804
  2215  0149  0704               	addwf	4,w
  2216  014A  0082               	movwf	2
  2217  014B                     l1652:	
  2218                           
  2219                           ;main.c: 345: if (PatternState[0] != 0)
  2220  014B  0830               	movf	_PatternState,w	;volatile
  2221  014C  1903               	btfsc	3,2
  2222  014D  0008               	return
  2223                           
  2224                           ;main.c: 346: {
  2225                           ;main.c: 347: if ((PatternState[0] == 4) && RightButtonPressed())
  2226  014E  3004               	movlw	4
  2227  014F  0630               	xorwf	_PatternState,w	;volatile
  2228  0150  1D03               	btfss	3,2
  2229  0151  296E               	goto	l1662
  2230  0152  22F3               	fcall	_RightButtonPressed
  2231  0153  3A00               	xorlw	0
  2232  0154  1903               	skipnz
  2233  0155  296E               	goto	l1662
  2234                           
  2235                           ;main.c: 348: {
  2236                           ;main.c: 349: PatternState[0] = 1;
  2237  0156  3001               	movlw	1
  2238  0157  00B0               	movwf	_PatternState	;volatile
  2239                           
  2240                           ;main.c: 350: if (right_delay > 5)
  2241  0158  3000               	movlw	0
  2242  0159  0254               	subwf	RunRightFlash@right_delay+1,w
  2243  015A  3006               	movlw	6
  2244  015B  1903               	skipnz
  2245  015C  0253               	subwf	RunRightFlash@right_delay,w
  2246  015D  1C03               	skipc
  2247  015E  296F               	goto	l1664
  2248                           
  2249                           ;main.c: 351: {
  2250                           ;main.c: 352: right_delay = ((right_delay * 90)/100);
  2251  015F  3064               	movlw	100
  2252  0160  00D7               	movwf	___lwdiv@divisor
  2253  0161  01D8               	clrf	___lwdiv@divisor+1
  2254  0162  0854               	movf	RunRightFlash@right_delay+1,w
  2255  0163  00F4               	movwf	___wmul@multiplier+1
  2256  0164  0853               	movf	RunRightFlash@right_delay,w
  2257  0165  2098               	fcall	PL4	;call to abstracted procedure
  2258  0166  2259               	fcall	___wmul
  2259  0167  2093               	fcall	PL2	;call to abstracted procedure
  2260  0168  2210               	fcall	___lwdiv
  2261  0169  0858               	movf	?___lwdiv+1,w
  2262  016A  00D4               	movwf	RunRightFlash@right_delay+1
  2263  016B  0857               	movf	?___lwdiv,w
  2264  016C  00D3               	movwf	RunRightFlash@right_delay
  2265  016D  296F               	goto	l1664
  2266  016E                     l1662:	
  2267                           
  2268                           ;main.c: 355: else
  2269                           ;main.c: 356: {
  2270                           ;main.c: 357: PatternState[0]++;
  2271  016E  0AB0               	incf	_PatternState,f	;volatile
  2272  016F                     l1664:	
  2273                           
  2274                           ;main.c: 358: }
  2275                           ;main.c: 359: PatternDelay[0] = right_delay;
  2276  016F  0854               	movf	RunRightFlash@right_delay+1,w
  2277  0170  00A1               	movwf	_PatternDelay+1	;volatile
  2278  0171  0853               	movf	RunRightFlash@right_delay,w
  2279  0172  00A0               	movwf	_PatternDelay	;volatile
  2280  0173  0008               	return
  2281  0174                     __end_of_RunRightFlash:	
  2282                           
  2283                           	psect	swtext1
  2284  02D1                     __pswtext1:	
  2285  02D1                     S1804:	
  2286  02D1  290F               	ljmp	l1632
  2287  02D2  2913               	ljmp	l1634
  2288  02D3  291C               	ljmp	l1636
  2289  02D4  2925               	ljmp	l1638
  2290  02D5  292E               	ljmp	l1640
  2291  02D6  2937               	ljmp	l1642
  2292                           
  2293                           	psect	text11
  2294  0029                     __ptext11:	
  2295 ;; *************** function _RunLeftFlash *****************
  2296 ;; Defined at:
  2297 ;;		line 364 in file "main.c"
  2298 ;; Parameters:    Size  Location     Type
  2299 ;;		None
  2300 ;; Auto vars:     Size  Location     Type
  2301 ;;		None
  2302 ;; Return value:  Size  Location     Type
  2303 ;;                  1    wreg      void 
  2304 ;; Registers used:
  2305 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2306 ;; Tracked objects:
  2307 ;;		On entry : 1F/0
  2308 ;;		On exit  : 1F/0
  2309 ;;		Unchanged: 0/0
  2310 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2311 ;;      Params:         0       0       0       0
  2312 ;;      Locals:         0       0       0       0
  2313 ;;      Temps:          0       0       0       0
  2314 ;;      Totals:         0       0       0       0
  2315 ;;Total ram usage:        0 bytes
  2316 ;; Hardware stack levels used:    1
  2317 ;; Hardware stack levels required when called:    5
  2318 ;; This function calls:
  2319 ;;		_LeftButtonPressed
  2320 ;;		_SetLEDOff
  2321 ;;		_SetLEDOn
  2322 ;;		___lwdiv
  2323 ;;		___wmul
  2324 ;; This function is called by:
  2325 ;;		_main
  2326 ;; This function uses a non-reentrant model
  2327 ;;
  2328                           
  2329                           
  2330                           ;psect for function _RunLeftFlash
  2331  0029                     _RunLeftFlash:	
  2332                           
  2333                           ;main.c: 366: static uint16_t left_delay = 250;
  2334                           ;main.c: 368: if (PatternDelay[1] == 0)
  2335                           
  2336                           ;incstack = 0
  2337                           ; Regs used in _RunLeftFlash: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2338  0029  0822               	movf	_PatternDelay+2,w	;volatile
  2339  002A  0423               	iorwf	_PatternDelay+3,w	;volatile
  2340  002B  1D03               	btfss	3,2
  2341  002C  0008               	return
  2342  002D  2860               	goto	l1692
  2343  002E                     l1674:	
  2344                           
  2345                           ;main.c: 374: left_delay = 250;
  2346  002E  30FA               	movlw	250
  2347  002F  00D1               	movwf	RunLeftFlash@left_delay
  2348  0030  01D2               	clrf	RunLeftFlash@left_delay+1
  2349                           
  2350                           ;main.c: 375: break;
  2351  0031  286A               	goto	l1694
  2352  0032                     l1676:	
  2353                           
  2354                           ;main.c: 378: SetLEDOn(0x80);
  2355  0032  3080               	movlw	128
  2356  0033  230E               	fcall	_SetLEDOn
  2357                           
  2358                           ;main.c: 379: SetLEDOff(0x40);
  2359  0034  3040               	movlw	64
  2360  0035  230A               	fcall	_SetLEDOff
  2361                           
  2362                           ;main.c: 380: SetLEDOff(0x20);
  2363  0036  3020               	movlw	32
  2364  0037  230A               	fcall	_SetLEDOff
  2365                           
  2366                           ;main.c: 381: SetLEDOff(0x10);
  2367  0038  3010               	movlw	16
  2368  0039  230A               	fcall	_SetLEDOff
  2369                           
  2370                           ;main.c: 382: break;
  2371  003A  286A               	goto	l1694
  2372  003B                     l1678:	
  2373                           
  2374                           ;main.c: 385: SetLEDOff(0x80);
  2375  003B  3080               	movlw	128
  2376  003C  230A               	fcall	_SetLEDOff
  2377                           
  2378                           ;main.c: 386: SetLEDOn(0x40);
  2379  003D  3040               	movlw	64
  2380  003E  230E               	fcall	_SetLEDOn
  2381                           
  2382                           ;main.c: 387: SetLEDOff(0x20);
  2383  003F  3020               	movlw	32
  2384  0040  230A               	fcall	_SetLEDOff
  2385                           
  2386                           ;main.c: 388: SetLEDOff(0x10);
  2387  0041  3010               	movlw	16
  2388  0042  230A               	fcall	_SetLEDOff
  2389                           
  2390                           ;main.c: 389: break;
  2391  0043  286A               	goto	l1694
  2392  0044                     l1680:	
  2393                           
  2394                           ;main.c: 392: SetLEDOff(0x80);
  2395  0044  3080               	movlw	128
  2396  0045  230A               	fcall	_SetLEDOff
  2397                           
  2398                           ;main.c: 393: SetLEDOff(0x40);
  2399  0046  3040               	movlw	64
  2400  0047  230A               	fcall	_SetLEDOff
  2401                           
  2402                           ;main.c: 394: SetLEDOn(0x20);
  2403  0048  3020               	movlw	32
  2404  0049  230E               	fcall	_SetLEDOn
  2405                           
  2406                           ;main.c: 395: SetLEDOff(0x10);
  2407  004A  3010               	movlw	16
  2408  004B  230A               	fcall	_SetLEDOff
  2409                           
  2410                           ;main.c: 396: break;
  2411  004C  286A               	goto	l1694
  2412  004D                     l1682:	
  2413                           
  2414                           ;main.c: 399: SetLEDOff(0x80);
  2415  004D  3080               	movlw	128
  2416  004E  230A               	fcall	_SetLEDOff
  2417                           
  2418                           ;main.c: 400: SetLEDOff(0x40);
  2419  004F  3040               	movlw	64
  2420  0050  230A               	fcall	_SetLEDOff
  2421                           
  2422                           ;main.c: 401: SetLEDOff(0x20);
  2423  0051  3020               	movlw	32
  2424  0052  230A               	fcall	_SetLEDOff
  2425                           
  2426                           ;main.c: 402: SetLEDOn(0x10);
  2427  0053  3010               	movlw	16
  2428  0054  230E               	fcall	_SetLEDOn
  2429                           
  2430                           ;main.c: 403: break;
  2431  0055  286A               	goto	l1694
  2432  0056                     l1684:	
  2433                           
  2434                           ;main.c: 406: SetLEDOff(0x80);
  2435  0056  3080               	movlw	128
  2436  0057  230A               	fcall	_SetLEDOff
  2437                           
  2438                           ;main.c: 407: SetLEDOff(0x40);
  2439  0058  3040               	movlw	64
  2440  0059  230A               	fcall	_SetLEDOff
  2441                           
  2442                           ;main.c: 408: SetLEDOff(0x20);
  2443  005A  3020               	movlw	32
  2444  005B  230A               	fcall	_SetLEDOff
  2445                           
  2446                           ;main.c: 409: SetLEDOff(0x10);
  2447  005C  3010               	movlw	16
  2448  005D  230A               	fcall	_SetLEDOff
  2449  005E                     l1686:	
  2450                           
  2451                           ;main.c: 410: PatternState[1] = 0;
  2452  005E  01B1               	clrf	_PatternState+1	;volatile
  2453                           
  2454                           ;main.c: 411: break;
  2455  005F  286A               	goto	l1694
  2456  0060                     l1692:	
  2457  0060  0831               	movf	_PatternState+1,w	;volatile
  2458                           
  2459                           ; Switch size 1, requested type "space"
  2460                           ; Number of cases is 6, Range of values is 0 to 5
  2461                           ; switch strategies available:
  2462                           ; Name         Instructions Cycles
  2463                           ; direct_byte           18     6 (fixed)
  2464                           ; simple_byte           19    10 (average)
  2465                           ; jumptable            260     6 (fixed)
  2466                           ;	Chosen strategy is direct_byte
  2467  0061  0084               	movwf	4
  2468  0062  3006               	movlw	6
  2469  0063  0204               	subwf	4,w
  2470  0064  1803               	skipnc
  2471  0065  285E               	goto	l1686
  2472  0066  3182               	movlp	high S1806
  2473  0067  30D7               	movlw	low S1806
  2474  0068  0704               	addwf	4,w
  2475  0069  0082               	movwf	2
  2476  006A                     l1694:	
  2477                           
  2478                           ;main.c: 419: if (PatternState[1] != 0)
  2479  006A  0831               	movf	_PatternState+1,w	;volatile
  2480  006B  1903               	btfsc	3,2
  2481  006C  0008               	return
  2482                           
  2483                           ;main.c: 420: {
  2484                           ;main.c: 421: if ((PatternState[1] == 4) && LeftButtonPressed())
  2485  006D  3004               	movlw	4
  2486  006E  0631               	xorwf	_PatternState+1,w	;volatile
  2487  006F  1D03               	btfss	3,2
  2488  0070  288D               	goto	l1704
  2489  0071  22F8               	fcall	_LeftButtonPressed
  2490  0072  3A00               	xorlw	0
  2491  0073  1903               	skipnz
  2492  0074  288D               	goto	l1704
  2493                           
  2494                           ;main.c: 422: {
  2495                           ;main.c: 423: PatternState[1] = 1;
  2496  0075  3001               	movlw	1
  2497  0076  00B1               	movwf	_PatternState+1	;volatile
  2498                           
  2499                           ;main.c: 424: if (left_delay > 5)
  2500  0077  3000               	movlw	0
  2501  0078  0252               	subwf	RunLeftFlash@left_delay+1,w
  2502  0079  3006               	movlw	6
  2503  007A  1903               	skipnz
  2504  007B  0251               	subwf	RunLeftFlash@left_delay,w
  2505  007C  1C03               	skipc
  2506  007D  288E               	goto	l1706
  2507                           
  2508                           ;main.c: 425: {
  2509                           ;main.c: 426: left_delay = (left_delay * 90)/100;
  2510  007E  3064               	movlw	100
  2511  007F  00D7               	movwf	___lwdiv@divisor
  2512  0080  01D8               	clrf	___lwdiv@divisor+1
  2513  0081  0852               	movf	RunLeftFlash@left_delay+1,w
  2514  0082  00F4               	movwf	___wmul@multiplier+1
  2515  0083  0851               	movf	RunLeftFlash@left_delay,w
  2516  0084  2098               	fcall	PL4	;call to abstracted procedure
  2517  0085  2259               	fcall	___wmul
  2518  0086  2093               	fcall	PL2	;call to abstracted procedure
  2519  0087  2210               	fcall	___lwdiv
  2520  0088  0858               	movf	?___lwdiv+1,w
  2521  0089  00D2               	movwf	RunLeftFlash@left_delay+1
  2522  008A  0857               	movf	?___lwdiv,w
  2523  008B  00D1               	movwf	RunLeftFlash@left_delay
  2524  008C  288E               	goto	l1706
  2525  008D                     l1704:	
  2526                           
  2527                           ;main.c: 429: else
  2528                           ;main.c: 430: {
  2529                           ;main.c: 431: PatternState[1]++;
  2530  008D  0AB1               	incf	_PatternState+1,f	;volatile
  2531  008E                     l1706:	
  2532                           
  2533                           ;main.c: 432: }
  2534                           ;main.c: 433: PatternDelay[1] = left_delay;
  2535  008E  0852               	movf	RunLeftFlash@left_delay+1,w
  2536  008F  00A3               	movwf	_PatternDelay+3	;volatile
  2537  0090  0851               	movf	RunLeftFlash@left_delay,w
  2538  0091  00A2               	movwf	_PatternDelay+2	;volatile
  2539  0092  0008               	return
  2540  0093                     __end_of_RunLeftFlash:	
  2541  0093                     PL2:	
  2542  0093  0874               	movf	?___wmul+1,w
  2543  0094  00DA               	movwf	___lwdiv@dividend+1
  2544  0095  0873               	movf	?___wmul,w
  2545  0096  00D9               	movwf	___lwdiv@dividend
  2546  0097  0008               	return
  2547  0098                     __end_ofPL2:	
  2548  0098                     PL4:	
  2549  0098  00F3               	movwf	___wmul@multiplier
  2550  0099  305A               	movlw	90
  2551  009A  00F5               	movwf	___wmul@multiplicand
  2552  009B  01F6               	clrf	___wmul@multiplicand+1
  2553  009C  0008               	return
  2554  009D                     __end_ofPL4:	
  2555                           
  2556                           	psect	swtext2
  2557  02D7                     __pswtext2:	
  2558  02D7                     S1806:	
  2559  02D7  282E               	ljmp	l1674
  2560  02D8  2832               	ljmp	l1676
  2561  02D9  283B               	ljmp	l1678
  2562  02DA  2844               	ljmp	l1680
  2563  02DB  284D               	ljmp	l1682
  2564  02DC  2856               	ljmp	l1684
  2565                           
  2566                           	psect	text12
  2567  0259                     __ptext12:	
  2568 ;; *************** function ___wmul *****************
  2569 ;; Defined at:
  2570 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
  2571 ;; Parameters:    Size  Location     Type
  2572 ;;  multiplier      2    3[COMMON] unsigned int 
  2573 ;;  multiplicand    2    5[COMMON] unsigned int 
  2574 ;; Auto vars:     Size  Location     Type
  2575 ;;  product         2    0[BANK0 ] unsigned int 
  2576 ;; Return value:  Size  Location     Type
  2577 ;;                  2    3[COMMON] unsigned int 
  2578 ;; Registers used:
  2579 ;;		wreg, status,2, status,0
  2580 ;; Tracked objects:
  2581 ;;		On entry : 1F/0
  2582 ;;		On exit  : 1F/0
  2583 ;;		Unchanged: 0/0
  2584 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2585 ;;      Params:         4       0       0       0
  2586 ;;      Locals:         0       2       0       0
  2587 ;;      Temps:          0       0       0       0
  2588 ;;      Totals:         4       2       0       0
  2589 ;;Total ram usage:        6 bytes
  2590 ;; Hardware stack levels used:    1
  2591 ;; Hardware stack levels required when called:    4
  2592 ;; This function calls:
  2593 ;;		Nothing
  2594 ;; This function is called by:
  2595 ;;		_RunRightFlash
  2596 ;;		_RunLeftFlash
  2597 ;; This function uses a non-reentrant model
  2598 ;;
  2599                           
  2600                           
  2601                           ;psect for function ___wmul
  2602  0259                     ___wmul:	
  2603                           
  2604                           ;incstack = 0
  2605                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  2606  0259  01D5               	clrf	___wmul@product
  2607  025A  01D6               	clrf	___wmul@product+1
  2608  025B                     l1614:	
  2609  025B  1C73               	btfss	___wmul@multiplier,0
  2610  025C  2A61               	goto	l1618
  2611  025D  0875               	movf	___wmul@multiplicand,w
  2612  025E  07D5               	addwf	___wmul@product,f
  2613  025F  0876               	movf	___wmul@multiplicand+1,w
  2614  0260  3DD6               	addwfc	___wmul@product+1,f
  2615  0261                     l1618:	
  2616  0261  35F5               	lslf	___wmul@multiplicand,f
  2617  0262  0DF6               	rlf	___wmul@multiplicand+1,f
  2618  0263  36F4               	lsrf	___wmul@multiplier+1,f
  2619  0264  0CF3               	rrf	___wmul@multiplier,f
  2620  0265  0873               	movf	___wmul@multiplier,w
  2621  0266  0474               	iorwf	___wmul@multiplier+1,w
  2622  0267  1D03               	btfss	3,2
  2623  0268  2A5B               	goto	l1614
  2624  0269  0856               	movf	___wmul@product+1,w
  2625  026A  00F4               	movwf	?___wmul+1
  2626  026B  0855               	movf	___wmul@product,w
  2627  026C  00F3               	movwf	?___wmul
  2628  026D  0008               	return
  2629  026E                     __end_of___wmul:	
  2630                           
  2631                           	psect	text13
  2632  0210                     __ptext13:	
  2633 ;; *************** function ___lwdiv *****************
  2634 ;; Defined at:
  2635 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwdiv.c"
  2636 ;; Parameters:    Size  Location     Type
  2637 ;;  divisor         2    2[BANK0 ] unsigned int 
  2638 ;;  dividend        2    4[BANK0 ] unsigned int 
  2639 ;; Auto vars:     Size  Location     Type
  2640 ;;  quotient        2    6[BANK0 ] unsigned int 
  2641 ;;  counter         1    8[BANK0 ] unsigned char 
  2642 ;; Return value:  Size  Location     Type
  2643 ;;                  2    2[BANK0 ] unsigned int 
  2644 ;; Registers used:
  2645 ;;		wreg, status,2, status,0
  2646 ;; Tracked objects:
  2647 ;;		On entry : 1F/0
  2648 ;;		On exit  : 1F/0
  2649 ;;		Unchanged: 0/0
  2650 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2651 ;;      Params:         0       4       0       0
  2652 ;;      Locals:         0       3       0       0
  2653 ;;      Temps:          0       0       0       0
  2654 ;;      Totals:         0       7       0       0
  2655 ;;Total ram usage:        7 bytes
  2656 ;; Hardware stack levels used:    1
  2657 ;; Hardware stack levels required when called:    4
  2658 ;; This function calls:
  2659 ;;		Nothing
  2660 ;; This function is called by:
  2661 ;;		_RunRightFlash
  2662 ;;		_RunLeftFlash
  2663 ;; This function uses a non-reentrant model
  2664 ;;
  2665                           
  2666                           
  2667                           ;psect for function ___lwdiv
  2668  0210                     ___lwdiv:	
  2669                           
  2670                           ;incstack = 0
  2671                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  2672  0210  01DB               	clrf	___lwdiv@quotient
  2673  0211  01DC               	clrf	___lwdiv@quotient+1
  2674  0212  0857               	movf	___lwdiv@divisor,w
  2675  0213  0458               	iorwf	___lwdiv@divisor+1,w
  2676  0214  1903               	btfsc	3,2
  2677  0215  2A30               	goto	l1326
  2678  0216  01DD               	clrf	___lwdiv@counter
  2679  0217                     L1:	
  2680  0217  0ADD               	incf	___lwdiv@counter,f
  2681  0218  1BD8               	btfsc	___lwdiv@divisor+1,7
  2682  0219  2A1D               	goto	l1314
  2683  021A  35D7               	lslf	___lwdiv@divisor,f
  2684  021B  0DD8               	rlf	___lwdiv@divisor+1,f
  2685  021C  2A17               	goto	L1
  2686  021D                     l1314:	
  2687  021D  35DB               	lslf	___lwdiv@quotient,f
  2688  021E  0DDC               	rlf	___lwdiv@quotient+1,f
  2689  021F  0858               	movf	___lwdiv@divisor+1,w
  2690  0220  025A               	subwf	___lwdiv@dividend+1,w
  2691  0221  1D03               	skipz
  2692  0222  2A25               	goto	u865
  2693  0223  0857               	movf	___lwdiv@divisor,w
  2694  0224  0259               	subwf	___lwdiv@dividend,w
  2695  0225                     u865:	
  2696  0225  1C03               	skipc
  2697  0226  2A2C               	goto	l1322
  2698  0227  0857               	movf	___lwdiv@divisor,w
  2699  0228  02D9               	subwf	___lwdiv@dividend,f
  2700  0229  0858               	movf	___lwdiv@divisor+1,w
  2701  022A  3BDA               	subwfb	___lwdiv@dividend+1,f
  2702  022B  145B               	bsf	___lwdiv@quotient,0
  2703  022C                     l1322:	
  2704  022C  36D8               	lsrf	___lwdiv@divisor+1,f
  2705  022D  0CD7               	rrf	___lwdiv@divisor,f
  2706  022E  0BDD               	decfsz	___lwdiv@counter,f
  2707  022F  2A1D               	goto	l1314
  2708  0230                     l1326:	
  2709  0230  085C               	movf	___lwdiv@quotient+1,w
  2710  0231  00D8               	movwf	?___lwdiv+1
  2711  0232  085B               	movf	___lwdiv@quotient,w
  2712  0233  00D7               	movwf	?___lwdiv
  2713  0234  0008               	return
  2714  0235                     __end_of___lwdiv:	
  2715                           
  2716                           	psect	text14
  2717  030E                     __ptext14:	
  2718 ;; *************** function _SetLEDOn *****************
  2719 ;; Defined at:
  2720 ;;		line 189 in file "main.c"
  2721 ;; Parameters:    Size  Location     Type
  2722 ;;  LED             1    wreg     unsigned char 
  2723 ;; Auto vars:     Size  Location     Type
  2724 ;;  LED             1    3[COMMON] unsigned char 
  2725 ;; Return value:  Size  Location     Type
  2726 ;;                  1    wreg      void 
  2727 ;; Registers used:
  2728 ;;		wreg, status,2, status,0
  2729 ;; Tracked objects:
  2730 ;;		On entry : 1F/0
  2731 ;;		On exit  : 1F/0
  2732 ;;		Unchanged: 0/0
  2733 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2734 ;;      Params:         0       0       0       0
  2735 ;;      Locals:         1       0       0       0
  2736 ;;      Temps:          0       0       0       0
  2737 ;;      Totals:         1       0       0       0
  2738 ;;Total ram usage:        1 bytes
  2739 ;; Hardware stack levels used:    1
  2740 ;; Hardware stack levels required when called:    4
  2741 ;; This function calls:
  2742 ;;		Nothing
  2743 ;; This function is called by:
  2744 ;;		_RunRightFlash
  2745 ;;		_RunLeftFlash
  2746 ;; This function uses a non-reentrant model
  2747 ;;
  2748                           
  2749                           
  2750                           ;psect for function _SetLEDOn
  2751  030E                     _SetLEDOn:	
  2752                           
  2753                           ;incstack = 0
  2754                           ; Regs used in _SetLEDOn: [wreg+status,2+status,0]
  2755                           ;SetLEDOn@LED stored from wreg
  2756  030E  00F3               	movwf	SetLEDOn@LED
  2757                           
  2758                           ;main.c: 191: LEDOns = (uint8_t)(LEDOns | LED);
  2759  030F  04BF               	iorwf	_LEDOns,f	;volatile
  2760  0310  0008               	return
  2761  0311                     __end_of_SetLEDOn:	
  2762                           
  2763                           	psect	text15
  2764  030A                     __ptext15:	
  2765 ;; *************** function _SetLEDOff *****************
  2766 ;; Defined at:
  2767 ;;		line 194 in file "main.c"
  2768 ;; Parameters:    Size  Location     Type
  2769 ;;  LED             1    wreg     unsigned char 
  2770 ;; Auto vars:     Size  Location     Type
  2771 ;;  LED             1    3[COMMON] unsigned char 
  2772 ;; Return value:  Size  Location     Type
  2773 ;;                  1    wreg      void 
  2774 ;; Registers used:
  2775 ;;		wreg, status,2, status,0
  2776 ;; Tracked objects:
  2777 ;;		On entry : 1F/0
  2778 ;;		On exit  : 1F/0
  2779 ;;		Unchanged: 0/0
  2780 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2781 ;;      Params:         0       0       0       0
  2782 ;;      Locals:         1       0       0       0
  2783 ;;      Temps:          0       0       0       0
  2784 ;;      Totals:         1       0       0       0
  2785 ;;Total ram usage:        1 bytes
  2786 ;; Hardware stack levels used:    1
  2787 ;; Hardware stack levels required when called:    4
  2788 ;; This function calls:
  2789 ;;		Nothing
  2790 ;; This function is called by:
  2791 ;;		_RunRightFlash
  2792 ;;		_RunLeftFlash
  2793 ;; This function uses a non-reentrant model
  2794 ;;
  2795                           
  2796                           
  2797                           ;psect for function _SetLEDOff
  2798  030A                     _SetLEDOff:	
  2799                           
  2800                           ;incstack = 0
  2801                           ; Regs used in _SetLEDOff: [wreg+status,2+status,0]
  2802                           ;SetLEDOff@LED stored from wreg
  2803  030A  00F3               	movwf	SetLEDOff@LED
  2804                           
  2805                           ;main.c: 196: LEDOns = (uint8_t)(LEDOns & ~LED);
  2806  030B  0973               	comf	SetLEDOff@LED,w
  2807  030C  05BF               	andwf	_LEDOns,f	;volatile
  2808  030D  0008               	return
  2809  030E                     __end_of_SetLEDOff:	
  2810                           
  2811                           	psect	text16
  2812  009D                     __ptext16:	
  2813 ;; *************** function _CheckForButtonPushes *****************
  2814 ;; Defined at:
  2815 ;;		line 439 in file "main.c"
  2816 ;; Parameters:    Size  Location     Type
  2817 ;;		None
  2818 ;; Auto vars:     Size  Location     Type
  2819 ;;		None
  2820 ;; Return value:  Size  Location     Type
  2821 ;;                  1    wreg      unsigned char 
  2822 ;; Registers used:
  2823 ;;		wreg, status,2, status,0, pclath, cstack
  2824 ;; Tracked objects:
  2825 ;;		On entry : 1F/0
  2826 ;;		On exit  : 1F/0
  2827 ;;		Unchanged: 0/0
  2828 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2829 ;;      Params:         0       0       0       0
  2830 ;;      Locals:         1       0       0       0
  2831 ;;      Temps:          0       0       0       0
  2832 ;;      Totals:         1       0       0       0
  2833 ;;Total ram usage:        1 bytes
  2834 ;; Hardware stack levels used:    1
  2835 ;; Hardware stack levels required when called:    5
  2836 ;; This function calls:
  2837 ;;		_LeftButtonPressed
  2838 ;;		_LeftButtonPressedRaw
  2839 ;;		_RightButtonPressed
  2840 ;;		_RightButtonPressedRaw
  2841 ;; This function is called by:
  2842 ;;		_main
  2843 ;; This function uses a non-reentrant model
  2844 ;;
  2845                           
  2846                           
  2847                           ;psect for function _CheckForButtonPushes
  2848  009D                     _CheckForButtonPushes:	
  2849                           
  2850                           ;main.c: 441: static bool LastLeftButtonState = 0;
  2851                           ;main.c: 442: static bool LastRightButtonState = 0;
  2852                           ;main.c: 445: if (LeftButtonPressedRaw())
  2853                           
  2854                           ;incstack = 0
  2855                           ; Regs used in _CheckForButtonPushes: [wreg+status,2+status,0+pclath+cstack]
  2856  009D  22E3               	fcall	_LeftButtonPressedRaw
  2857  009E  3A00               	xorlw	0
  2858  009F  1903               	skipnz
  2859  00A0  28AE               	goto	l1446
  2860                           
  2861                           ;main.c: 446: {
  2862                           ;main.c: 447: if (LeftButtonState == BUTTON_STATE_PRESSED_TIMING)
  2863  00A1  0B78               	decfsz	_LeftButtonState,w	;volatile
  2864  00A2  28A8               	goto	l1442
  2865                           
  2866                           ;main.c: 448: {
  2867                           ;main.c: 449: if (LeftDebounceTimer == 0)
  2868  00A3  087A               	movf	_LeftDebounceTimer,w	;volatile
  2869  00A4  1D03               	btfss	3,2
  2870  00A5  28C0               	goto	l1456
  2871                           
  2872                           ;main.c: 450: {
  2873                           ;main.c: 451: LeftButtonState = BUTTON_STATE_PRESSED;
  2874  00A6  3002               	movlw	2
  2875  00A7  28B6               	goto	L2
  2876  00A8                     l1442:	
  2877                           
  2878                           ;main.c: 454: else if (LeftButtonState != BUTTON_STATE_PRESSED)
  2879  00A8  3002               	movlw	2
  2880  00A9  0678               	xorwf	_LeftButtonState,w	;volatile
  2881  00AA  1903               	btfsc	3,2
  2882  00AB  28C0               	goto	l1456
  2883                           
  2884                           ;main.c: 455: {
  2885                           ;main.c: 456: LeftButtonState = BUTTON_STATE_PRESSED_TIMING;
  2886  00AC  3001               	movlw	1
  2887  00AD  28BD               	goto	L3
  2888  00AE                     l1446:	
  2889                           ;main.c: 457: LeftDebounceTimer = 50;
  2890                           
  2891                           
  2892                           ;main.c: 460: else
  2893                           ;main.c: 461: {
  2894                           ;main.c: 462: if (LeftButtonState == BUTTON_STATE_RELEASED_TIMING)
  2895  00AE  3003               	movlw	3
  2896  00AF  0678               	xorwf	_LeftButtonState,w	;volatile
  2897  00B0  1D03               	btfss	3,2
  2898  00B1  28B8               	goto	l1452
  2899                           
  2900                           ;main.c: 463: {
  2901                           ;main.c: 464: if (LeftDebounceTimer == 0)
  2902  00B2  087A               	movf	_LeftDebounceTimer,w	;volatile
  2903  00B3  1D03               	btfss	3,2
  2904  00B4  28C0               	goto	l1456
  2905                           
  2906                           ;main.c: 465: {
  2907                           ;main.c: 466: LeftButtonState = BUTTON_STATE_RELEASED;
  2908  00B5  3004               	movlw	4
  2909  00B6                     L2:	
  2910  00B6  00F8               	movwf	_LeftButtonState	;volatile
  2911  00B7  28C0               	goto	l1456
  2912  00B8                     l1452:	
  2913                           
  2914                           ;main.c: 469: else if (LeftButtonState != BUTTON_STATE_RELEASED)
  2915  00B8  3004               	movlw	4
  2916  00B9  0678               	xorwf	_LeftButtonState,w	;volatile
  2917  00BA  1903               	btfsc	3,2
  2918  00BB  28C0               	goto	l1456
  2919                           
  2920                           ;main.c: 470: {
  2921                           ;main.c: 471: LeftButtonState = BUTTON_STATE_RELEASED_TIMING;
  2922  00BC  3003               	movlw	3
  2923  00BD                     L3:	
  2924  00BD  00F8               	movwf	_LeftButtonState	;volatile
  2925                           
  2926                           ;main.c: 472: LeftDebounceTimer = 50;
  2927  00BE  3032               	movlw	50
  2928  00BF  00FA               	movwf	_LeftDebounceTimer	;volatile
  2929  00C0                     l1456:	
  2930                           
  2931                           ;main.c: 473: }
  2932                           ;main.c: 474: }
  2933                           ;main.c: 477: if (RightButtonPressedRaw())
  2934  00C0  22DD               	fcall	_RightButtonPressedRaw
  2935  00C1  3A00               	xorlw	0
  2936  00C2  1903               	skipnz
  2937  00C3  28D1               	goto	l1468
  2938                           
  2939                           ;main.c: 478: {
  2940                           ;main.c: 479: if (RightButtonState == BUTTON_STATE_PRESSED_TIMING)
  2941  00C4  0B77               	decfsz	_RightButtonState,w	;volatile
  2942  00C5  28CB               	goto	l1464
  2943                           
  2944                           ;main.c: 480: {
  2945                           ;main.c: 481: if (RightDebounceTimer == 0)
  2946  00C6  0879               	movf	_RightDebounceTimer,w	;volatile
  2947  00C7  1D03               	btfss	3,2
  2948  00C8  28E3               	goto	l1478
  2949                           
  2950                           ;main.c: 482: {
  2951                           ;main.c: 483: RightButtonState = BUTTON_STATE_PRESSED;
  2952  00C9  3002               	movlw	2
  2953  00CA  28D9               	goto	L4
  2954  00CB                     l1464:	
  2955                           
  2956                           ;main.c: 486: else if (RightButtonState != BUTTON_STATE_PRESSED)
  2957  00CB  3002               	movlw	2
  2958  00CC  0677               	xorwf	_RightButtonState,w	;volatile
  2959  00CD  1903               	btfsc	3,2
  2960  00CE  28E3               	goto	l1478
  2961                           
  2962                           ;main.c: 487: {
  2963                           ;main.c: 488: RightButtonState = BUTTON_STATE_PRESSED_TIMING;
  2964  00CF  3001               	movlw	1
  2965  00D0  28E0               	goto	L5
  2966  00D1                     l1468:	
  2967                           ;main.c: 489: RightDebounceTimer = 50;
  2968                           
  2969                           
  2970                           ;main.c: 492: else
  2971                           ;main.c: 493: {
  2972                           ;main.c: 494: if (RightButtonState == BUTTON_STATE_RELEASED_TIMING)
  2973  00D1  3003               	movlw	3
  2974  00D2  0677               	xorwf	_RightButtonState,w	;volatile
  2975  00D3  1D03               	btfss	3,2
  2976  00D4  28DB               	goto	l1474
  2977                           
  2978                           ;main.c: 495: {
  2979                           ;main.c: 496: if (RightDebounceTimer == 0)
  2980  00D5  0879               	movf	_RightDebounceTimer,w	;volatile
  2981  00D6  1D03               	btfss	3,2
  2982  00D7  28E3               	goto	l1478
  2983                           
  2984                           ;main.c: 497: {
  2985                           ;main.c: 498: RightButtonState = BUTTON_STATE_RELEASED;
  2986  00D8  3004               	movlw	4
  2987  00D9                     L4:	
  2988  00D9  00F7               	movwf	_RightButtonState	;volatile
  2989  00DA  28E3               	goto	l1478
  2990  00DB                     l1474:	
  2991                           
  2992                           ;main.c: 501: else if (RightButtonState != BUTTON_STATE_RELEASED)
  2993  00DB  3004               	movlw	4
  2994  00DC  0677               	xorwf	_RightButtonState,w	;volatile
  2995  00DD  1903               	btfsc	3,2
  2996  00DE  28E3               	goto	l1478
  2997                           
  2998                           ;main.c: 502: {
  2999                           ;main.c: 503: RightButtonState = BUTTON_STATE_RELEASED_TIMING;
  3000  00DF  3003               	movlw	3
  3001  00E0                     L5:	
  3002  00E0  00F7               	movwf	_RightButtonState	;volatile
  3003                           
  3004                           ;main.c: 504: RightDebounceTimer = 50;
  3005  00E1  3032               	movlw	50
  3006  00E2  00F9               	movwf	_RightDebounceTimer	;volatile
  3007  00E3                     l1478:	
  3008                           
  3009                           ;main.c: 505: }
  3010                           ;main.c: 506: }
  3011                           ;main.c: 508: if (LeftButtonPressed())
  3012  00E3  22F8               	fcall	_LeftButtonPressed
  3013  00E4  3A00               	xorlw	0
  3014  00E5  1903               	skipnz
  3015  00E6  28EF               	goto	l1486
  3016                           
  3017                           ;main.c: 509: {
  3018                           ;main.c: 510: if (LastLeftButtonState == 0)
  3019  00E7  083D               	movf	CheckForButtonPushes@LastLeftButtonState,w
  3020  00E8  1D03               	btfss	3,2
  3021  00E9  28EC               	goto	l1484
  3022                           
  3023                           ;main.c: 511: {
  3024                           ;main.c: 512: PatternState[1] = 1;
  3025  00EA  3001               	movlw	1
  3026  00EB  00B1               	movwf	_PatternState+1	;volatile
  3027  00EC                     l1484:	
  3028                           
  3029                           ;main.c: 513: }
  3030                           ;main.c: 514: LastLeftButtonState = 1;
  3031  00EC  01BD               	clrf	CheckForButtonPushes@LastLeftButtonState
  3032  00ED  0ABD               	incf	CheckForButtonPushes@LastLeftButtonState,f
  3033                           
  3034                           ;main.c: 515: }
  3035  00EE  28F0               	goto	l1488
  3036  00EF                     l1486:	
  3037                           
  3038                           ;main.c: 516: else
  3039                           ;main.c: 517: {
  3040                           ;main.c: 518: LastLeftButtonState = 0;
  3041  00EF  01BD               	clrf	CheckForButtonPushes@LastLeftButtonState
  3042  00F0                     l1488:	
  3043                           
  3044                           ;main.c: 519: }
  3045                           ;main.c: 522: if (RightButtonPressed())
  3046  00F0  22F3               	fcall	_RightButtonPressed
  3047  00F1  3A00               	xorlw	0
  3048  00F2  1903               	skipnz
  3049  00F3  28FC               	goto	l1496
  3050                           
  3051                           ;main.c: 523: {
  3052                           ;main.c: 524: if (LastRightButtonState == 0)
  3053  00F4  083C               	movf	CheckForButtonPushes@LastRightButtonState,w
  3054  00F5  1D03               	btfss	3,2
  3055  00F6  28F9               	goto	l1494
  3056                           
  3057                           ;main.c: 525: {
  3058                           ;main.c: 526: PatternState[0] = 1;
  3059  00F7  3001               	movlw	1
  3060  00F8  00B0               	movwf	_PatternState	;volatile
  3061  00F9                     l1494:	
  3062                           
  3063                           ;main.c: 527: }
  3064                           ;main.c: 528: LastRightButtonState = 1;
  3065  00F9  01BC               	clrf	CheckForButtonPushes@LastRightButtonState
  3066  00FA  0ABC               	incf	CheckForButtonPushes@LastRightButtonState,f
  3067                           
  3068                           ;main.c: 529: }
  3069  00FB  28FD               	goto	l1498
  3070  00FC                     l1496:	
  3071                           
  3072                           ;main.c: 530: else
  3073                           ;main.c: 531: {
  3074                           ;main.c: 532: LastRightButtonState = 0;
  3075  00FC  01BC               	clrf	CheckForButtonPushes@LastRightButtonState
  3076  00FD                     l1498:	
  3077                           
  3078                           ;main.c: 533: }
  3079                           ;main.c: 535: return ((bool)(LeftButtonPressedRaw() || RightButtonPressedRaw()));
  3080  00FD  01F3               	clrf	_CheckForButtonPushes$433
  3081  00FE  0AF3               	incf	_CheckForButtonPushes$433,f
  3082  00FF  22E3               	fcall	_LeftButtonPressedRaw
  3083  0100  3A00               	xorlw	0
  3084  0101  1D03               	skipz
  3085  0102  2908               	goto	l1506
  3086  0103  22DD               	fcall	_RightButtonPressedRaw
  3087  0104  3A00               	xorlw	0
  3088  0105  1D03               	skipz
  3089  0106  2908               	goto	l1506
  3090  0107  01F3               	clrf	_CheckForButtonPushes$433
  3091  0108                     l1506:	
  3092  0108  0873               	movf	_CheckForButtonPushes$433,w
  3093  0109  0008               	return
  3094  010A                     __end_of_CheckForButtonPushes:	
  3095                           
  3096                           	psect	text17
  3097  02DD                     __ptext17:	
  3098 ;; *************** function _RightButtonPressedRaw *****************
  3099 ;; Defined at:
  3100 ;;		line 267 in file "main.c"
  3101 ;; Parameters:    Size  Location     Type
  3102 ;;		None
  3103 ;; Auto vars:     Size  Location     Type
  3104 ;;		None
  3105 ;; Return value:  Size  Location     Type
  3106 ;;                  1    wreg      unsigned char 
  3107 ;; Registers used:
  3108 ;;		wreg, status,0
  3109 ;; Tracked objects:
  3110 ;;		On entry : 1F/0
  3111 ;;		On exit  : 1F/0
  3112 ;;		Unchanged: 0/0
  3113 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3114 ;;      Params:         0       0       0       0
  3115 ;;      Locals:         0       0       0       0
  3116 ;;      Temps:          0       0       0       0
  3117 ;;      Totals:         0       0       0       0
  3118 ;;Total ram usage:        0 bytes
  3119 ;; Hardware stack levels used:    1
  3120 ;; Hardware stack levels required when called:    4
  3121 ;; This function calls:
  3122 ;;		Nothing
  3123 ;; This function is called by:
  3124 ;;		_CheckForButtonPushes
  3125 ;; This function uses a non-reentrant model
  3126 ;;
  3127                           
  3128                           
  3129                           ;psect for function _RightButtonPressedRaw
  3130  02DD                     _RightButtonPressedRaw:	
  3131                           
  3132                           ;main.c: 269: return (uint8_t)(PORTAbits.RA3 == 0);
  3133                           
  3134                           ;incstack = 0
  3135                           ; Regs used in _RightButtonPressedRaw: [wreg+status,0]
  3136  02DD  1003               	clrc
  3137  02DE  1D8C               	btfss	12,3	;volatile
  3138  02DF  1403               	setc
  3139  02E0  3000               	movlw	0
  3140  02E1  3D09               	addwfc	9,w
  3141  02E2  0008               	return
  3142  02E3                     __end_of_RightButtonPressedRaw:	
  3143                           
  3144                           	psect	text18
  3145  02F3                     __ptext18:	
  3146 ;; *************** function _RightButtonPressed *****************
  3147 ;; Defined at:
  3148 ;;		line 279 in file "main.c"
  3149 ;; Parameters:    Size  Location     Type
  3150 ;;		None
  3151 ;; Auto vars:     Size  Location     Type
  3152 ;;		None
  3153 ;; Return value:  Size  Location     Type
  3154 ;;                  1    wreg      unsigned char 
  3155 ;; Registers used:
  3156 ;;		wreg, status,2, status,0
  3157 ;; Tracked objects:
  3158 ;;		On entry : 1F/0
  3159 ;;		On exit  : 1F/0
  3160 ;;		Unchanged: 1F/0
  3161 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3162 ;;      Params:         0       0       0       0
  3163 ;;      Locals:         0       0       0       0
  3164 ;;      Temps:          0       0       0       0
  3165 ;;      Totals:         0       0       0       0
  3166 ;;Total ram usage:        0 bytes
  3167 ;; Hardware stack levels used:    1
  3168 ;; Hardware stack levels required when called:    4
  3169 ;; This function calls:
  3170 ;;		Nothing
  3171 ;; This function is called by:
  3172 ;;		_RunRightFlash
  3173 ;;		_CheckForButtonPushes
  3174 ;; This function uses a non-reentrant model
  3175 ;;
  3176                           
  3177                           
  3178                           ;psect for function _RightButtonPressed
  3179  02F3                     _RightButtonPressed:	
  3180                           
  3181                           ;main.c: 281: return (RightButtonState == BUTTON_STATE_PRESSED);
  3182                           
  3183                           ;incstack = 0
  3184                           ; Regs used in _RightButtonPressed: [wreg+status,2+status,0]
  3185  02F3  3002               	movlw	2
  3186  02F4  0677               	xorwf	_RightButtonState,w	;volatile
  3187  02F5  1903               	btfsc	3,2
  3188  02F6  3401               	retlw	1
  3189  02F7  3400               	retlw	0
  3190  02F8                     __end_of_RightButtonPressed:	
  3191                           
  3192                           	psect	text19
  3193  02E3                     __ptext19:	
  3194 ;; *************** function _LeftButtonPressedRaw *****************
  3195 ;; Defined at:
  3196 ;;		line 273 in file "main.c"
  3197 ;; Parameters:    Size  Location     Type
  3198 ;;		None
  3199 ;; Auto vars:     Size  Location     Type
  3200 ;;		None
  3201 ;; Return value:  Size  Location     Type
  3202 ;;                  1    wreg      unsigned char 
  3203 ;; Registers used:
  3204 ;;		wreg, status,0
  3205 ;; Tracked objects:
  3206 ;;		On entry : 1F/0
  3207 ;;		On exit  : 1F/0
  3208 ;;		Unchanged: 0/0
  3209 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3210 ;;      Params:         0       0       0       0
  3211 ;;      Locals:         0       0       0       0
  3212 ;;      Temps:          0       0       0       0
  3213 ;;      Totals:         0       0       0       0
  3214 ;;Total ram usage:        0 bytes
  3215 ;; Hardware stack levels used:    1
  3216 ;; Hardware stack levels required when called:    4
  3217 ;; This function calls:
  3218 ;;		Nothing
  3219 ;; This function is called by:
  3220 ;;		_CheckForButtonPushes
  3221 ;; This function uses a non-reentrant model
  3222 ;;
  3223                           
  3224                           
  3225                           ;psect for function _LeftButtonPressedRaw
  3226  02E3                     _LeftButtonPressedRaw:	
  3227                           
  3228                           ;main.c: 275: return (uint8_t)(PORTAbits.RA2 == 0);
  3229                           
  3230                           ;incstack = 0
  3231                           ; Regs used in _LeftButtonPressedRaw: [wreg+status,0]
  3232  02E3  1003               	clrc
  3233  02E4  1D0C               	btfss	12,2	;volatile
  3234  02E5  1403               	setc
  3235  02E6  3000               	movlw	0
  3236  02E7  3D09               	addwfc	9,w
  3237  02E8  0008               	return
  3238  02E9                     __end_of_LeftButtonPressedRaw:	
  3239                           
  3240                           	psect	text20
  3241  02F8                     __ptext20:	
  3242 ;; *************** function _LeftButtonPressed *****************
  3243 ;; Defined at:
  3244 ;;		line 285 in file "main.c"
  3245 ;; Parameters:    Size  Location     Type
  3246 ;;		None
  3247 ;; Auto vars:     Size  Location     Type
  3248 ;;		None
  3249 ;; Return value:  Size  Location     Type
  3250 ;;                  1    wreg      unsigned char 
  3251 ;; Registers used:
  3252 ;;		wreg, status,2, status,0
  3253 ;; Tracked objects:
  3254 ;;		On entry : 1F/0
  3255 ;;		On exit  : 1F/0
  3256 ;;		Unchanged: 1F/0
  3257 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3258 ;;      Params:         0       0       0       0
  3259 ;;      Locals:         0       0       0       0
  3260 ;;      Temps:          0       0       0       0
  3261 ;;      Totals:         0       0       0       0
  3262 ;;Total ram usage:        0 bytes
  3263 ;; Hardware stack levels used:    1
  3264 ;; Hardware stack levels required when called:    4
  3265 ;; This function calls:
  3266 ;;		Nothing
  3267 ;; This function is called by:
  3268 ;;		_RunLeftFlash
  3269 ;;		_CheckForButtonPushes
  3270 ;; This function uses a non-reentrant model
  3271 ;;
  3272                           
  3273                           
  3274                           ;psect for function _LeftButtonPressed
  3275  02F8                     _LeftButtonPressed:	
  3276                           
  3277                           ;main.c: 287: return (LeftButtonState == BUTTON_STATE_PRESSED);
  3278                           
  3279                           ;incstack = 0
  3280                           ; Regs used in _LeftButtonPressed: [wreg+status,2+status,0]
  3281  02F8  3002               	movlw	2
  3282  02F9  0678               	xorwf	_LeftButtonState,w	;volatile
  3283  02FA  1903               	btfsc	3,2
  3284  02FB  3401               	retlw	1
  3285  02FC  3400               	retlw	0
  3286  02FD                     __end_of_LeftButtonPressed:	
  3287                           
  3288                           	psect	intentry
  3289  0004                     __pintentry:	
  3290 ;; *************** function _INTERRUPT_InterruptManager *****************
  3291 ;; Defined at:
  3292 ;;		line 51 in file "mcc_generated_files/interrupt_manager.c"
  3293 ;; Parameters:    Size  Location     Type
  3294 ;;		None
  3295 ;; Auto vars:     Size  Location     Type
  3296 ;;		None
  3297 ;; Return value:  Size  Location     Type
  3298 ;;                  1    wreg      void 
  3299 ;; Registers used:
  3300 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3301 ;; Tracked objects:
  3302 ;;		On entry : 0/0
  3303 ;;		On exit  : 0/0
  3304 ;;		Unchanged: 0/0
  3305 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3306 ;;      Params:         0       0       0       0
  3307 ;;      Locals:         0       0       0       0
  3308 ;;      Temps:          0       0       0       0
  3309 ;;      Totals:         0       0       0       0
  3310 ;;Total ram usage:        0 bytes
  3311 ;; Hardware stack levels used:    1
  3312 ;; Hardware stack levels required when called:    3
  3313 ;; This function calls:
  3314 ;;		_PIN_MANAGER_IOC
  3315 ;;		_TMR0_ISR
  3316 ;; This function is called by:
  3317 ;;		Interrupt level 1
  3318 ;; This function uses a non-reentrant model
  3319 ;;
  3320                           
  3321  0004                     _INTERRUPT_InterruptManager:	
  3322                           
  3323                           ;incstack = 0
  3324  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  3325                           
  3326                           ; Regs used in _INTERRUPT_InterruptManager: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  3327  0005  3180               	pagesel	$
  3328                           
  3329                           ;interrupt_manager.c: 54: if(INTCONbits.TMR0IE == 1 && INTCONbits.TMR0IF == 1)
  3330  0006  1A8B               	btfsc	11,5	;volatile
  3331  0007  1D0B               	btfss	11,2	;volatile
  3332  0008  280B               	goto	i1l102
  3333                           
  3334                           ;interrupt_manager.c: 55: {
  3335                           ;interrupt_manager.c: 56: TMR0_ISR();
  3336  0009  22FD               	fcall	_TMR0_ISR
  3337                           
  3338                           ;interrupt_manager.c: 57: }
  3339  000A  280F               	goto	i1l106
  3340  000B                     i1l102:	
  3341                           
  3342                           ;interrupt_manager.c: 58: else if(INTCONbits.IOCIE == 1 && INTCONbits.IOCIF == 1)
  3343  000B  198B               	btfsc	11,3	;volatile
  3344  000C  1C0B               	btfss	11,0	;volatile
  3345  000D  280F               	goto	i1l106
  3346                           
  3347                           ;interrupt_manager.c: 59: {
  3348                           ;interrupt_manager.c: 60: PIN_MANAGER_IOC();
  3349  000E  22B8               	fcall	_PIN_MANAGER_IOC
  3350  000F                     i1l106:	
  3351                           ;interrupt_manager.c: 61: }
  3352                           
  3353  000F  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  3354  0010  0009               	retfie
  3355  0011                     __end_of_INTERRUPT_InterruptManager:	
  3356                           
  3357                           	psect	text22
  3358  02FD                     __ptext22:	
  3359 ;; *************** function _TMR0_ISR *****************
  3360 ;; Defined at:
  3361 ;;		line 108 in file "mcc_generated_files/tmr0.c"
  3362 ;; Parameters:    Size  Location     Type
  3363 ;;		None
  3364 ;; Auto vars:     Size  Location     Type
  3365 ;;		None
  3366 ;; Return value:  Size  Location     Type
  3367 ;;                  1    wreg      void 
  3368 ;; Registers used:
  3369 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3370 ;; Tracked objects:
  3371 ;;		On entry : 0/0
  3372 ;;		On exit  : 0/0
  3373 ;;		Unchanged: 0/0
  3374 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3375 ;;      Params:         0       0       0       0
  3376 ;;      Locals:         0       0       0       0
  3377 ;;      Temps:          0       0       0       0
  3378 ;;      Totals:         0       0       0       0
  3379 ;;Total ram usage:        0 bytes
  3380 ;; Hardware stack levels used:    1
  3381 ;; Hardware stack levels required when called:    2
  3382 ;; This function calls:
  3383 ;;		_TMR0_CallBack
  3384 ;; This function is called by:
  3385 ;;		_INTERRUPT_InterruptManager
  3386 ;; This function uses a non-reentrant model
  3387 ;;
  3388                           
  3389                           
  3390                           ;psect for function _TMR0_ISR
  3391  02FD                     _TMR0_ISR:	
  3392                           
  3393                           ;tmr0.c: 112: INTCONbits.TMR0IF = 0;
  3394                           
  3395                           ;incstack = 0
  3396                           ; Regs used in _TMR0_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3397  02FD  110B               	bcf	11,2	;volatile
  3398                           
  3399                           ;tmr0.c: 114: TMR0 = timer0ReloadVal;
  3400  02FE  0020               	movlb	0	; select bank0
  3401  02FF  0867               	movf	_timer0ReloadVal,w	;volatile
  3402  0300  0095               	movwf	21	;volatile
  3403                           
  3404                           ;tmr0.c: 118: TMR0_CallBack();
  3405  0301  2AA7               	ljmp	i1l1264
  3406  0302                     __end_of_TMR0_ISR:	
  3407                           
  3408                           	psect	text23
  3409  02A7                     __ptext23:	
  3410 ;; *************** function _TMR0_CallBack *****************
  3411 ;; Defined at:
  3412 ;;		line 123 in file "mcc_generated_files/tmr0.c"
  3413 ;; Parameters:    Size  Location     Type
  3414 ;;		None
  3415 ;; Auto vars:     Size  Location     Type
  3416 ;;		None
  3417 ;; Return value:  Size  Location     Type
  3418 ;;                  1    wreg      void 
  3419 ;; Registers used:
  3420 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3421 ;; Tracked objects:
  3422 ;;		On entry : 1F/0
  3423 ;;		On exit  : 0/0
  3424 ;;		Unchanged: 0/0
  3425 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3426 ;;      Params:         0       0       0       0
  3427 ;;      Locals:         0       0       0       0
  3428 ;;      Temps:          0       0       0       0
  3429 ;;      Totals:         0       0       0       0
  3430 ;;Total ram usage:        0 bytes
  3431 ;; Hardware stack levels used:    1
  3432 ;; Hardware stack levels required when called:    1
  3433 ;; This function calls:
  3434 ;;		Absolute function
  3435 ;;		_TMR0_Callback
  3436 ;; This function is called by:
  3437 ;;		_TMR0_ISR
  3438 ;; This function uses a non-reentrant model
  3439 ;;
  3440                           
  3441                           
  3442                           ;psect for function _TMR0_CallBack
  3443  02A7                     _TMR0_CallBack:	
  3444  02A7                     i1l1264:	
  3445                           ;incstack = 0
  3446                           ; Regs used in _TMR0_CallBack: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3447                           
  3448                           
  3449                           ;tmr0.c: 127: if(TMR0_InterruptHandler)
  3450  02A7  0861               	movf	_TMR0_InterruptHandler,w
  3451  02A8  0462               	iorwf	_TMR0_InterruptHandler+1,w
  3452  02A9  1903               	btfsc	3,2
  3453  02AA  0008               	return
  3454                           
  3455                           ;tmr0.c: 128: {
  3456                           ;tmr0.c: 129: TMR0_InterruptHandler();
  3457  02AB  0862               	movf	_TMR0_InterruptHandler+1,w
  3458  02AC  008A               	movwf	10
  3459  02AD  0861               	movf	_TMR0_InterruptHandler,w
  3460  02AE  000A               	callw
  3461  02AF  3182               	pagesel	$
  3462  02B0  0008               	return
  3463  02B1                     __end_of_TMR0_CallBack:	
  3464                           
  3465                           	psect	text24
  3466  01C4                     __ptext24:	
  3467 ;; *************** function _TMR0_Callback *****************
  3468 ;; Defined at:
  3469 ;;		line 208 in file "main.c"
  3470 ;; Parameters:    Size  Location     Type
  3471 ;;		None
  3472 ;; Auto vars:     Size  Location     Type
  3473 ;;  i               1    2[COMMON] unsigned char 
  3474 ;; Return value:  Size  Location     Type
  3475 ;;                  1    wreg      void 
  3476 ;; Registers used:
  3477 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  3478 ;; Tracked objects:
  3479 ;;		On entry : 1F/0
  3480 ;;		On exit  : 1F/0
  3481 ;;		Unchanged: 0/0
  3482 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3483 ;;      Params:         0       0       0       0
  3484 ;;      Locals:         1       0       0       0
  3485 ;;      Temps:          2       0       0       0
  3486 ;;      Totals:         3       0       0       0
  3487 ;;Total ram usage:        3 bytes
  3488 ;; Hardware stack levels used:    1
  3489 ;; This function calls:
  3490 ;;		Nothing
  3491 ;; This function is called by:
  3492 ;;		_main
  3493 ;;		_TMR0_CallBack
  3494 ;; This function uses a non-reentrant model
  3495 ;;
  3496                           
  3497                           
  3498                           ;psect for function _TMR0_Callback
  3499  01C4                     _TMR0_Callback:	
  3500                           
  3501                           ;main.c: 210: uint8_t i;
  3502                           ;main.c: 213: TRISA = 0xCC;
  3503                           
  3504                           ;incstack = 0
  3505                           ; Regs used in _TMR0_Callback: [wreg+fsr1l+fsr1h+status,2+status,0]
  3506  01C4  30CC               	movlw	204
  3507  01C5  0021               	movlb	1	; select bank1
  3508  01C6  008C               	movwf	12	;volatile
  3509                           
  3510                           ;main.c: 214: PORTA = 0x00;
  3511  01C7  0020               	movlb	0	; select bank0
  3512  01C8  018C               	clrf	12	;volatile
  3513                           
  3514                           ;main.c: 217: i = (uint8_t)(1 << LEDState);
  3515  01C9  3001               	movlw	1
  3516  01CA  00F0               	movwf	??_TMR0_Callback
  3517  01CB  0A40               	incf	_LEDState,w
  3518  01CC  29CE               	goto	u67_24
  3519  01CD                     u67_25:	
  3520  01CD  35F0               	lslf	??_TMR0_Callback,f
  3521  01CE                     u67_24:	
  3522  01CE  0B89               	decfsz	9,f
  3523  01CF  29CD               	goto	u67_25
  3524  01D0  0870               	movf	??_TMR0_Callback,w
  3525  01D1  00F2               	movwf	TMR0_Callback@i
  3526                           
  3527                           ;main.c: 220: if (i & LEDOns)
  3528  01D2  053F               	andwf	_LEDOns,w	;volatile
  3529  01D3  1903               	btfsc	3,2
  3530  01D4  29E2               	goto	i1l1168
  3531                           
  3532                           ;main.c: 221: {
  3533                           ;main.c: 223: TRISA = TRISTable[LEDState];
  3534  01D5  0840               	movf	_LEDState,w
  3535  01D6  3E49               	addlw	(low (_TRISTable| 0))& (0+255)
  3536  01D7  0086               	movwf	6
  3537  01D8  0187               	clrf	7
  3538  01D9  0801               	movf	1,w
  3539  01DA  0021               	movlb	1	; select bank1
  3540  01DB  008C               	movwf	12	;volatile
  3541                           
  3542                           ;main.c: 224: PORTA = PORTTable[LEDState];
  3543  01DC  0020               	movlb	0	; select bank0
  3544  01DD  0840               	movf	_LEDState,w
  3545  01DE  3E41               	addlw	(low (_PORTTable| 0))& (0+255)
  3546  01DF  0086               	movwf	6
  3547  01E0  0801               	movf	1,w
  3548  01E1  008C               	movwf	12	;volatile
  3549  01E2                     i1l1168:	
  3550  01E2  3008               	movlw	8
  3551                           
  3552                           ;main.c: 225: }
  3553                           ;main.c: 228: LEDState++;
  3554  01E3  0AC0               	incf	_LEDState,f
  3555                           
  3556                           ;main.c: 229: if (LEDState == 8)
  3557  01E4  0640               	xorwf	_LEDState,w
  3558  01E5  1D03               	btfss	3,2
  3559  01E6  0008               	return
  3560                           
  3561                           ;main.c: 230: {
  3562                           ;main.c: 235: WakeTimer++;
  3563  01E7  3001               	movlw	1
  3564  01E8  07B8               	addwf	_WakeTimer,f	;volatile
  3565  01E9  3000               	movlw	0
  3566  01EA  3DB9               	addwfc	_WakeTimer+1,f	;volatile
  3567  01EB  3DBA               	addwfc	_WakeTimer+2,f	;volatile
  3568  01EC  3DBB               	addwfc	_WakeTimer+3,f	;volatile
  3569                           
  3570                           ;main.c: 238: for (i=0; i < 8; i++)
  3571  01ED  01F2               	clrf	TMR0_Callback@i
  3572  01EE                     i1l1180:	
  3573                           
  3574                           ;main.c: 239: {
  3575                           ;main.c: 240: if (PatternDelay[i])
  3576  01EE  3572               	lslf	TMR0_Callback@i,w
  3577  01EF  3E20               	addlw	(low (_PatternDelay| 0))& (0+255)
  3578  01F0  0086               	movwf	6
  3579  01F1  0187               	clrf	7
  3580  01F2  0016               	moviw fsr1++
  3581  01F3  0401               	iorwf	1,w
  3582  01F4  1903               	btfsc	3,2
  3583  01F5  2A00               	goto	i1l1184
  3584                           
  3585                           ;main.c: 241: {
  3586                           ;main.c: 242: PatternDelay[i]--;
  3587  01F6  3572               	lslf	TMR0_Callback@i,w
  3588  01F7  3E20               	addlw	(low (_PatternDelay| 0))& (0+255)
  3589  01F8  0086               	movwf	6
  3590  01F9  3001               	movlw	1
  3591  01FA  0187               	clrf	7
  3592  01FB  0281               	subwf	1,f
  3593  01FC  3000               	movlw	0
  3594  01FD  3141               	addfsr 1,1
  3595  01FE  3B81               	subwfb	1,f
  3596  01FF  317F               	addfsr 1,-1
  3597  0200                     i1l1184:	
  3598  0200  3008               	movlw	8
  3599  0201  0AF2               	incf	TMR0_Callback@i,f
  3600  0202  0272               	subwf	TMR0_Callback@i,w
  3601  0203  1C03               	skipc
  3602  0204  29EE               	goto	i1l1180
  3603                           
  3604                           ;main.c: 243: }
  3605                           ;main.c: 244: }
  3606                           ;main.c: 246: LEDState = 0;
  3607  0205  01C0               	clrf	_LEDState
  3608                           
  3609                           ;main.c: 249: if (LeftDebounceTimer)
  3610  0206  087A               	movf	_LeftDebounceTimer,w	;volatile
  3611  0207  1D03               	btfss	3,2
  3612                           
  3613                           ;main.c: 250: {
  3614                           ;main.c: 251: LeftDebounceTimer--;
  3615  0208  03FA               	decf	_LeftDebounceTimer,f	;volatile
  3616                           
  3617                           ;main.c: 252: }
  3618                           ;main.c: 254: if (RightDebounceTimer)
  3619  0209  0879               	movf	_RightDebounceTimer,w	;volatile
  3620  020A  1D03               	btfss	3,2
  3621                           
  3622                           ;main.c: 255: {
  3623                           ;main.c: 256: RightDebounceTimer--;
  3624  020B  03F9               	decf	_RightDebounceTimer,f	;volatile
  3625                           
  3626                           ;main.c: 257: }
  3627                           ;main.c: 259: if (ShutdownDelayTimer)
  3628  020C  083E               	movf	_ShutdownDelayTimer,w	;volatile
  3629  020D  1D03               	btfss	3,2
  3630                           
  3631                           ;main.c: 260: {
  3632                           ;main.c: 261: ShutdownDelayTimer--;
  3633  020E  03BE               	decf	_ShutdownDelayTimer,f	;volatile
  3634  020F  0008               	return
  3635  0210                     __end_of_TMR0_Callback:	
  3636                           
  3637                           	psect	text25
  3638  02B8                     __ptext25:	
  3639 ;; *************** function _PIN_MANAGER_IOC *****************
  3640 ;; Defined at:
  3641 ;;		line 110 in file "mcc_generated_files/pin_manager.c"
  3642 ;; Parameters:    Size  Location     Type
  3643 ;;		None
  3644 ;; Auto vars:     Size  Location     Type
  3645 ;;		None
  3646 ;; Return value:  Size  Location     Type
  3647 ;;                  1    wreg      void 
  3648 ;; Registers used:
  3649 ;;		wreg, status,2, status,0, pclath, cstack
  3650 ;; Tracked objects:
  3651 ;;		On entry : 0/0
  3652 ;;		On exit  : 1F/7
  3653 ;;		Unchanged: 0/0
  3654 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3655 ;;      Params:         0       0       0       0
  3656 ;;      Locals:         0       0       0       0
  3657 ;;      Temps:          0       0       0       0
  3658 ;;      Totals:         0       0       0       0
  3659 ;;Total ram usage:        0 bytes
  3660 ;; Hardware stack levels used:    1
  3661 ;; Hardware stack levels required when called:    2
  3662 ;; This function calls:
  3663 ;;		_IOCAF2_ISR
  3664 ;;		_IOCAF3_ISR
  3665 ;; This function is called by:
  3666 ;;		_INTERRUPT_InterruptManager
  3667 ;; This function uses a non-reentrant model
  3668 ;;
  3669                           
  3670                           
  3671                           ;psect for function _PIN_MANAGER_IOC
  3672  02B8                     _PIN_MANAGER_IOC:	
  3673                           
  3674                           ;pin_manager.c: 113: if(IOCAFbits.IOCAF2 == 1)
  3675                           
  3676                           ;incstack = 0
  3677                           ; Regs used in _PIN_MANAGER_IOC: [wreg+status,2+status,0+pclath+cstack]
  3678  02B8  0027               	movlb	7	; select bank7
  3679  02B9  1D13               	btfss	19,2	;volatile
  3680  02BA  2ABC               	goto	i1l1334
  3681                           
  3682                           ;pin_manager.c: 114: {
  3683                           ;pin_manager.c: 115: IOCAF2_ISR();
  3684  02BB  228F               	fcall	_IOCAF2_ISR
  3685  02BC                     i1l1334:	
  3686                           
  3687                           ;pin_manager.c: 116: }
  3688                           ;pin_manager.c: 119: if(IOCAFbits.IOCAF3 == 1)
  3689  02BC  1D93               	btfss	19,3	;volatile
  3690  02BD  0008               	return
  3691                           
  3692                           ;pin_manager.c: 120: {
  3693                           ;pin_manager.c: 121: IOCAF3_ISR();
  3694  02BE  2A82               	ljmp	i1l1240
  3695  02BF                     __end_of_PIN_MANAGER_IOC:	
  3696                           
  3697                           	psect	text26
  3698  0282                     __ptext26:	
  3699 ;; *************** function _IOCAF3_ISR *****************
  3700 ;; Defined at:
  3701 ;;		line 160 in file "mcc_generated_files/pin_manager.c"
  3702 ;; Parameters:    Size  Location     Type
  3703 ;;		None
  3704 ;; Auto vars:     Size  Location     Type
  3705 ;;		None
  3706 ;; Return value:  Size  Location     Type
  3707 ;;                  1    wreg      void 
  3708 ;; Registers used:
  3709 ;;		wreg, status,2, status,0, pclath, cstack
  3710 ;; Tracked objects:
  3711 ;;		On entry : 1F/7
  3712 ;;		On exit  : 1F/7
  3713 ;;		Unchanged: 0/0
  3714 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3715 ;;      Params:         0       0       0       0
  3716 ;;      Locals:         0       0       0       0
  3717 ;;      Temps:          0       0       0       0
  3718 ;;      Totals:         0       0       0       0
  3719 ;;Total ram usage:        0 bytes
  3720 ;; Hardware stack levels used:    1
  3721 ;; Hardware stack levels required when called:    1
  3722 ;; This function calls:
  3723 ;;		Absolute function
  3724 ;;		_IOCAF3_DefaultInterruptHandler
  3725 ;; This function is called by:
  3726 ;;		_PIN_MANAGER_IOC
  3727 ;; This function uses a non-reentrant model
  3728 ;;
  3729                           
  3730                           
  3731                           ;psect for function _IOCAF3_ISR
  3732  0282                     _IOCAF3_ISR:	
  3733  0282                     i1l1240:	
  3734                           ;incstack = 0
  3735                           ; Regs used in _IOCAF3_ISR: [wreg+status,2+status,0+pclath+cstack]
  3736                           
  3737                           
  3738                           ;pin_manager.c: 165: if(IOCAF3_InterruptHandler)
  3739  0282  0020               	movlb	0	; select bank0
  3740  0283  0863               	movf	_IOCAF3_InterruptHandler,w
  3741  0284  0464               	iorwf	_IOCAF3_InterruptHandler+1,w
  3742  0285  1903               	btfsc	3,2
  3743  0286  2A8C               	goto	i1l1244
  3744                           
  3745                           ;pin_manager.c: 166: {
  3746                           ;pin_manager.c: 167: IOCAF3_InterruptHandler();
  3747  0287  0864               	movf	_IOCAF3_InterruptHandler+1,w
  3748  0288  008A               	movwf	10
  3749  0289  0863               	movf	_IOCAF3_InterruptHandler,w
  3750  028A  000A               	callw
  3751  028B  3182               	pagesel	$
  3752  028C                     i1l1244:	
  3753                           
  3754                           ;pin_manager.c: 168: }
  3755                           ;pin_manager.c: 169: IOCAFbits.IOCAF3 = 0;
  3756  028C  0027               	movlb	7	; select bank7
  3757  028D  1193               	bcf	19,3	;volatile
  3758  028E  0008               	return
  3759  028F                     __end_of_IOCAF3_ISR:	
  3760                           
  3761                           	psect	text27
  3762  0313                     __ptext27:	
  3763 ;; *************** function _IOCAF3_DefaultInterruptHandler *****************
  3764 ;; Defined at:
  3765 ;;		line 182 in file "mcc_generated_files/pin_manager.c"
  3766 ;; Parameters:    Size  Location     Type
  3767 ;;		None
  3768 ;; Auto vars:     Size  Location     Type
  3769 ;;		None
  3770 ;; Return value:  Size  Location     Type
  3771 ;;                  1    wreg      void 
  3772 ;; Registers used:
  3773 ;;		None
  3774 ;; Tracked objects:
  3775 ;;		On entry : 1F/0
  3776 ;;		On exit  : 1F/0
  3777 ;;		Unchanged: 1F/0
  3778 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3779 ;;      Params:         0       0       0       0
  3780 ;;      Locals:         0       0       0       0
  3781 ;;      Temps:          0       0       0       0
  3782 ;;      Totals:         0       0       0       0
  3783 ;;Total ram usage:        0 bytes
  3784 ;; Hardware stack levels used:    1
  3785 ;; This function calls:
  3786 ;;		Nothing
  3787 ;; This function is called by:
  3788 ;;		_PIN_MANAGER_Initialize
  3789 ;;		_IOCAF3_ISR
  3790 ;; This function uses a non-reentrant model
  3791 ;;
  3792                           
  3793                           
  3794                           ;psect for function _IOCAF3_DefaultInterruptHandler
  3795  0313                     _IOCAF3_DefaultInterruptHandler:	
  3796                           
  3797                           ;incstack = 0
  3798                           ; Regs used in _IOCAF3_DefaultInterruptHandler: []
  3799  0313  0008               	return
  3800  0314                     __end_of_IOCAF3_DefaultInterruptHandler:	
  3801                           
  3802                           	psect	text28
  3803  028F                     __ptext28:	
  3804 ;; *************** function _IOCAF2_ISR *****************
  3805 ;; Defined at:
  3806 ;;		line 130 in file "mcc_generated_files/pin_manager.c"
  3807 ;; Parameters:    Size  Location     Type
  3808 ;;		None
  3809 ;; Auto vars:     Size  Location     Type
  3810 ;;		None
  3811 ;; Return value:  Size  Location     Type
  3812 ;;                  1    wreg      void 
  3813 ;; Registers used:
  3814 ;;		wreg, status,2, status,0, pclath, cstack
  3815 ;; Tracked objects:
  3816 ;;		On entry : 1F/7
  3817 ;;		On exit  : 1F/7
  3818 ;;		Unchanged: 0/0
  3819 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3820 ;;      Params:         0       0       0       0
  3821 ;;      Locals:         0       0       0       0
  3822 ;;      Temps:          0       0       0       0
  3823 ;;      Totals:         0       0       0       0
  3824 ;;Total ram usage:        0 bytes
  3825 ;; Hardware stack levels used:    1
  3826 ;; Hardware stack levels required when called:    1
  3827 ;; This function calls:
  3828 ;;		Absolute function
  3829 ;;		_IOCAF2_DefaultInterruptHandler
  3830 ;; This function is called by:
  3831 ;;		_PIN_MANAGER_IOC
  3832 ;; This function uses a non-reentrant model
  3833 ;;
  3834                           
  3835                           
  3836                           ;psect for function _IOCAF2_ISR
  3837  028F                     _IOCAF2_ISR:	
  3838                           
  3839                           ;pin_manager.c: 135: if(IOCAF2_InterruptHandler)
  3840                           
  3841                           ;incstack = 0
  3842                           ; Regs used in _IOCAF2_ISR: [wreg+status,2+status,0+pclath+cstack]
  3843  028F  0020               	movlb	0	; select bank0
  3844  0290  0865               	movf	_IOCAF2_InterruptHandler,w
  3845  0291  0466               	iorwf	_IOCAF2_InterruptHandler+1,w
  3846  0292  1903               	btfsc	3,2
  3847  0293  2A99               	goto	i1l1238
  3848                           
  3849                           ;pin_manager.c: 136: {
  3850                           ;pin_manager.c: 137: IOCAF2_InterruptHandler();
  3851  0294  0866               	movf	_IOCAF2_InterruptHandler+1,w
  3852  0295  008A               	movwf	10
  3853  0296  0865               	movf	_IOCAF2_InterruptHandler,w
  3854  0297  000A               	callw
  3855  0298  3182               	pagesel	$
  3856  0299                     i1l1238:	
  3857                           
  3858                           ;pin_manager.c: 138: }
  3859                           ;pin_manager.c: 139: IOCAFbits.IOCAF2 = 0;
  3860  0299  0027               	movlb	7	; select bank7
  3861  029A  1113               	bcf	19,2	;volatile
  3862  029B  0008               	return
  3863  029C                     __end_of_IOCAF2_ISR:	
  3864                           
  3865                           	psect	text29
  3866  0314                     __ptext29:	
  3867 ;; *************** function _IOCAF2_DefaultInterruptHandler *****************
  3868 ;; Defined at:
  3869 ;;		line 152 in file "mcc_generated_files/pin_manager.c"
  3870 ;; Parameters:    Size  Location     Type
  3871 ;;		None
  3872 ;; Auto vars:     Size  Location     Type
  3873 ;;		None
  3874 ;; Return value:  Size  Location     Type
  3875 ;;                  1    wreg      void 
  3876 ;; Registers used:
  3877 ;;		None
  3878 ;; Tracked objects:
  3879 ;;		On entry : 1F/0
  3880 ;;		On exit  : 1F/0
  3881 ;;		Unchanged: 1F/0
  3882 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3883 ;;      Params:         0       0       0       0
  3884 ;;      Locals:         0       0       0       0
  3885 ;;      Temps:          0       0       0       0
  3886 ;;      Totals:         0       0       0       0
  3887 ;;Total ram usage:        0 bytes
  3888 ;; Hardware stack levels used:    1
  3889 ;; This function calls:
  3890 ;;		Nothing
  3891 ;; This function is called by:
  3892 ;;		_PIN_MANAGER_Initialize
  3893 ;;		_IOCAF2_ISR
  3894 ;; This function uses a non-reentrant model
  3895 ;;
  3896                           
  3897                           
  3898                           ;psect for function _IOCAF2_DefaultInterruptHandler
  3899  0314                     _IOCAF2_DefaultInterruptHandler:	
  3900                           
  3901                           ;incstack = 0
  3902                           ; Regs used in _IOCAF2_DefaultInterruptHandler: []
  3903  0314  0008               	return
  3904  0315                     __end_of_IOCAF2_DefaultInterruptHandler:	
  3905  007E                     btemp	set	126	;btemp
  3906  007E                     int$flags	set	126
  3907  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        20
    BSS         37
    Persistent  7
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      7      11
    BANK0            80     12      72
    BANK1            80      0       0
    BANK2            80      0       0

Pointer List with Targets:

    TMR0_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR0_Callback(), 

    TMR0_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR0_Callback(), Absolute function(), 

    IOCAF3_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> IOCAF3_DefaultInterruptHandler(), 

    IOCAF3_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), IOCAF3_DefaultInterruptHandler(), 

    IOCAF2_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> IOCAF2_DefaultInterruptHandler(), 

    IOCAF2_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), IOCAF2_DefaultInterruptHandler(), 


Critical Paths under _main in COMMON

    _PIN_MANAGER_Initialize->_IOCAF2_SetInterruptHandler
    _PIN_MANAGER_Initialize->_IOCAF3_SetInterruptHandler
    _RunRightFlash->___wmul
    _RunLeftFlash->___wmul
    ___lwdiv->___wmul

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _TMR0_CallBack->_TMR0_Callback

Critical Paths under _main in BANK0

    _RunRightFlash->___lwdiv
    _RunLeftFlash->___lwdiv
    ___lwdiv->___wmul

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0    2016
                                              9 BANK0      3     3      0
               _CheckForButtonPushes
                       _RunLeftFlash
                      _RunRightFlash
                  _SYSTEM_Initialize
                      _SetAllLEDsOff
           _TMR0_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (1) _TMR0_SetInterruptHandler                             2     0      2      75
                                              3 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (1) _SetAllLEDsOff                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     150
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR0_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR0_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0     150
         _IOCAF2_SetInterruptHandler
         _IOCAF3_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _IOCAF3_SetInterruptHandler                           2     0      2      75
                                              3 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (3) _IOCAF2_SetInterruptHandler                           2     0      2      75
                                              3 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _RunRightFlash                                        0     0      0     814
                 _RightButtonPressed
                          _SetLEDOff
                           _SetLEDOn
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _RunLeftFlash                                         0     0      0     814
                  _LeftButtonPressed
                          _SetLEDOff
                           _SetLEDOn
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     396
                                              3 COMMON     4     0      4
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     374
                                              2 BANK0      7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) _SetLEDOn                                             1     1      0      22
                                              3 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _SetLEDOff                                            1     1      0      22
                                              3 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _CheckForButtonPushes                                 1     1      0      24
                                              3 COMMON     1     1      0
                  _LeftButtonPressed
               _LeftButtonPressedRaw
                 _RightButtonPressed
              _RightButtonPressedRaw
 ---------------------------------------------------------------------------------
 (2) _RightButtonPressedRaw                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _RightButtonPressed                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _LeftButtonPressedRaw                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _LeftButtonPressed                                    0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _INTERRUPT_InterruptManager                           0     0      0     113
                    _PIN_MANAGER_IOC
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (5) _TMR0_ISR                                             0     0      0     113
                      _TMR0_CallBack
 ---------------------------------------------------------------------------------
 (6) _TMR0_CallBack                                        0     0      0     113
                   Absolute function *
                      _TMR0_Callback *
 ---------------------------------------------------------------------------------
 (7) _TMR0_Callback                                        3     3      0     113
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (5) _PIN_MANAGER_IOC                                      0     0      0       0
                         _IOCAF2_ISR
                         _IOCAF3_ISR
 ---------------------------------------------------------------------------------
 (6) _IOCAF3_ISR                                           0     0      0       0
                   Absolute function *
     _IOCAF3_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (7) _IOCAF3_DefaultInterruptHandler                       0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _IOCAF2_ISR                                           0     0      0       0
                   Absolute function *
     _IOCAF2_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (7) _IOCAF2_DefaultInterruptHandler                       0     0      0       0
 ---------------------------------------------------------------------------------
 (7) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _CheckForButtonPushes
     _LeftButtonPressed
     _LeftButtonPressedRaw
     _RightButtonPressed
     _RightButtonPressedRaw
   _RunLeftFlash
     _LeftButtonPressed
     _SetLEDOff
     _SetLEDOn
     ___lwdiv
       ___wmul (ARG)
     ___wmul
   _RunRightFlash
     _RightButtonPressed
     _SetLEDOff
     _SetLEDOn
     ___lwdiv
       ___wmul (ARG)
     ___wmul
   _SYSTEM_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
       _IOCAF2_SetInterruptHandler
       _IOCAF3_SetInterruptHandler
     _TMR0_Initialize
     _WDT_Initialize
   _SetAllLEDsOff
   _TMR0_SetInterruptHandler

 _INTERRUPT_InterruptManager (ROOT)
   _PIN_MANAGER_IOC
     _IOCAF2_ISR
       Absolute function(Fake) *
       _IOCAF2_DefaultInterruptHandler *
     _IOCAF3_ISR
       Absolute function(Fake) *
       _IOCAF3_DefaultInterruptHandler *
   _TMR0_ISR
     _TMR0_CallBack
       Absolute function(Fake) *
       _TMR0_Callback *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      7       B       2       78.6%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      53       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50      C      48       6       90.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
DATA                 0      0      53      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Mon May 21 21:11:03 2018

                           ??_RunRightFlash 0077                                           pc 0002  
                               __CFG_CP$OFF 0000                                          PL2 0093  
                                        PL4 0098                         ___wmul@multiplicand 0075  
                           _timer0ReloadVal 0067                                         u865 0225  
                              __CFG_BORV$LO 0000                                         wreg 0009  
        __end_of_IOCAF2_SetInterruptHandler 02D1                  _IOCAF2_SetInterruptHandler 02CB  
                                      S1804 02D1                                        S1806 02D7  
                              __CFG_LVP$OFF 0000                                        l1322 022C  
                                      l1314 021D                                        l1326 0230  
                                      l1254 029C                                        l1506 0108  
                                      l1442 00A8                                        l1452 00B8  
                                      l1446 00AE                                        l1614 025B  
                                      l1464 00CB                                        l1456 00C0  
                                      l1704 008D                                        l1640 012E  
                                      l1632 010F                                        l1720 017C  
                                      l1474 00DB                                        l1618 0261  
                                      l1706 008E                                        l1642 0137  
                                      l1634 0113                                        l1650 0141  
                                      l1484 00EC                                        l1468 00D1  
                                      l1636 011C                                        l1652 014B  
                                      l1732 0180                                        l1494 00F9  
                                      l1486 00EF                                        l1478 00E3  
                                      l1662 016E                                        l1646 013F  
                                      l1638 0125                                        l1496 00FC  
                                      l1488 00F0                                        l1680 0044  
                                      l1664 016F                                        l1736 0189  
                                      l1498 00FD                                        l1682 004D  
                                      l1674 002E                                        l1754 01B4  
                                      l1762 01C2                                        l1746 0196  
                                      l1684 0056                                        l1676 0032  
                                      l1692 0060                                        l1756 01B0  
                                      l1748 01A2                                        l1686 005E  
                                      l1678 003B                                        l1694 006A  
                                      l1758 01B7                                        _LATA 010C  
                                      u1547 01A7                       ?_CheckForButtonPushes 0070  
                                      _TMR0 0015                                        _WPUA 020C  
                              __CFG_WRT$OFF 0000                       ?_LeftButtonPressedRaw 0070  
                        _RightButtonPressed 02F3                                        _main 0174  
                                      fsr0h 0005                                        fsr1h 0007  
                                      indf0 0000                                        fsr0l 0004  
                                      indf1 0001                                        fsr1l 0006  
                                      btemp 007E                                        start 0011  
                       ?_RightButtonPressed 0070              __size_of_RightButtonPressedRaw 0006  
             __end_of_RightButtonPressedRaw 02E3                     __end_of_TMR0_Initialize 02A7  
            __size_of_OSCILLATOR_Initialize 0007                         __size_of_IOCAF2_ISR 000D  
                       __size_of_IOCAF3_ISR 000D               __end_of_OSCILLATOR_Initialize 02B8  
                                     ?_main 0070                               __CFG_WDTE$OFF 0000  
                           __end_of___lwdiv 0235                                       i1l102 000B  
                                     i1l106 000F                                       _PORTA 000C  
                                     _TRISA 008C                                       u67_24 01CE  
                                     u67_25 01CD           __size_of_TMR0_SetInterruptHandler 0005  
                 ?_TMR0_SetInterruptHandler 0073                        ??_RightButtonPressed 0073  
                          __end_of_TMR0_ISR 0302                     __end_of_PIN_MANAGER_IOC 02BF  
                            _WDT_Initialize 0306                                       main@i 0060  
                            __CFG_BOREN$OFF 0000                                       pclath 000A  
                                     status 0003                                       wtemp0 007E  
                               SetLEDOn@LED 0073                              __CFG_MCLRE$OFF 0000  
                           __initialization 0012                                __end_of_main 01C4  
                          __end_of_SetLEDOn 0311                 ?_INTERRUPT_InterruptManager 0070  
                                    ??_main 005E                              __CFG_PLLEN$OFF 0000  
                    __end_of_WDT_Initialize 030A                       main@APatternIsRunning 005F  
                    __size_of_SetAllLEDsOff 0002                ??_IOCAF3_SetInterruptHandler 0075  
                    ??_CheckForButtonPushes 0073                                      _APFCON 011D  
                                    _ANSELA 018C                                      _BORCON 0116  
                    ??_LeftButtonPressedRaw 0073                                      i1l1240 0282  
                                    i1l1244 028C                                      i1l1180 01EE  
                                    i1l1238 0299                                      i1l1334 02BC  
                                    i1l1184 0200                                      i1l1168 01E2  
                                    i1l1264 02A7                                      _ODCONA 028C  
                                    _LEDOns 003F                                      _OSCCON 0099  
   CheckForButtonPushes@LastLeftButtonState 003D                                      _WDTCON 0097  
                        __size_of_SetLEDOff 0004                              __CFG_PWRTE$OFF 0000  
                                    ___wmul 0259                              __CFG_STVREN$ON 0000  
                                 ??___lwdiv 0077                            ?_TMR0_Initialize 0070  
       __size_of_IOCAF3_SetInterruptHandler 0005                             ?_WDT_Initialize 0070  
                     __end_of_TMR0_CallBack 02B1    TMR0_SetInterruptHandler@InterruptHandler 0073  
IOCAF3_SetInterruptHandler@InterruptHandler 0073  IOCAF2_SetInterruptHandler@InterruptHandler 0073  
                          ?_PIN_MANAGER_IOC 0070                       __end_of_TMR0_Callback 0210  
                              ??_IOCAF2_ISR 0070                                ??_IOCAF3_ISR 0070  
                         _SYSTEM_Initialize 0302                     __end_of__initialization 0026  
                        ?_SYSTEM_Initialize 0070                                SetLEDOff@LED 0073  
                             _SetAllLEDsOff 0311                              __pcstackCOMMON 0070  
                              __pidataBANK0 026E                         ??_SYSTEM_Initialize 0075  
                                 ?_TMR0_ISR 0070                                  __end_ofPL2 0098  
                                __end_ofPL4 009D                          __end_of_IOCAF2_ISR 029C  
                        __end_of_IOCAF3_ISR 028F                           __end_of_SetLEDOff 030E  
                            _OPTION_REGbits 0095                 ?_IOCAF2_SetInterruptHandler 0073  
          ??_IOCAF2_DefaultInterruptHandler 0070             ?_IOCAF2_DefaultInterruptHandler 0070  
                 __end_of_SYSTEM_Initialize 0306                                  __pbssBANK0 0020  
                                 ?_SetLEDOn 0070                              ?_SetAllLEDsOff 0070  
                        _RightDebounceTimer 0079                                  __pmaintext 0174  
          __end_of_TMR0_SetInterruptHandler 02EE                                     ?___wmul 0073  
                                ??_TMR0_ISR 0073                                  __pintentry 0004  
                     __end_of_RunRightFlash 0174          __end_of_IOCAF3_SetInterruptHandler 02F3  
                _IOCAF3_SetInterruptHandler 02EE                                     _OSCTUNE 0098  
                        _ShutdownDelayTimer 003E                                  ??_SetLEDOn 0073  
                            TMR0_Callback@i 0072                               ?_RunLeftFlash 0070  
                           __size_of___wmul 0015                                     ___lwdiv 0210  
                     _RightButtonPressedRaw 02DD                                     __ptext1 02E9  
                                   __ptext2 0311                                     __ptext3 0302  
                                   __ptext4 0306                                     __ptext5 029C  
                                   __ptext6 0235                                     __ptext7 02EE  
                                   __ptext8 02CB                                     __ptext9 02B1  
                     _OSCILLATOR_Initialize 02B1                    ??_PIN_MANAGER_Initialize 0075  
                                 _IOCAFbits 0393                                   _IOCANbits 0392  
                                 _IOCAPbits 0391                 __size_of_RightButtonPressed 0005  
                __size_of_SYSTEM_Initialize 0004                                     clrloop0 02C6  
                      end_of_initialization 0026                                     init_ram 02BF  
                                   initloop 02C0                             ??_SetAllLEDsOff 0073  
                            ??_RunLeftFlash 0077    CheckForButtonPushes@LastRightButtonState 003C  
                          ??_WDT_Initialize 0073                    _TMR0_SetInterruptHandler 02E9  
                                 _PORTAbits 000C                                   _PORTTable 0041  
                          __CFG_FOSC$INTOSC 0000                           _LeftButtonPressed 02F8  
                                 _TRISTable 0049                          ?_LeftButtonPressed 0070  
             __size_of_CheckForButtonPushes 006D               __size_of_LeftButtonPressedRaw 0006  
                       ??_LeftButtonPressed 0073                      ?_RightButtonPressedRaw 0070  
                            __end_of___wmul 026E                           __size_of_TMR0_ISR 0005  
                    ?_OSCILLATOR_Initialize 0070                   __end_of_LeftButtonPressed 02FD  
                       start_initialization 0012                    __size_of_TMR0_Initialize 000B  
           __size_of_PIN_MANAGER_Initialize 0024                                   _SetLEDOff 030A  
                  __size_of_PIN_MANAGER_IOC 0007                                   _WakeTimer 0038  
                         __size_of_SetLEDOn 0003      __end_of_IOCAF2_DefaultInterruptHandler 0315  
   __size_of_IOCAF2_DefaultInterruptHandler 0001              _IOCAF2_DefaultInterruptHandler 0314  
                          __CFG_LPBOREN$OFF 0000                                    ??___wmul 0077  
                    __size_of_TMR0_CallBack 000A                                 __pdataBANK0 0041  
                    __size_of_TMR0_Callback 004C                             _LeftButtonState 0078  
                               __pbssCOMMON 0077                                   ___latbits 0000  
                             __pcstackBANK0 0055                 ?_IOCAF3_SetInterruptHandler 0073  
                      __end_of_RunLeftFlash 0093                                  ?_SetLEDOff 0070  
          ??_IOCAF3_DefaultInterruptHandler 0070             ?_IOCAF3_DefaultInterruptHandler 0070  
                     _TMR0_InterruptHandler 0061                                   __pnvBANK0 0061  
                          ___lwdiv@dividend 0059                      _PIN_MANAGER_Initialize 0235  
                                  ?___lwdiv 0057                ??_INTERRUPT_InterruptManager 0073  
                                 __pswtext1 02D1                                   __pswtext2 02D7  
                __size_of_LeftButtonPressed 0005                                _PatternDelay 0020  
                  _CheckForButtonPushes$433 0073                                _PatternState 0030  
                          ___lwdiv@quotient 005B                               _TMR0_CallBack 02A7  
                             _TMR0_Callback 01C4                      __size_of_RunRightFlash 006A  
                         ??_TMR0_Initialize 0073                              ___wmul@product 0055  
                                  _LEDState 0040                                   clear_ram0 02C5  
       __size_of_INTERRUPT_InterruptManager 000D                  ??_TMR0_SetInterruptHandler 0075  
                                  _TMR0_ISR 02FD                           ??_PIN_MANAGER_IOC 0070  
                         ___wmul@multiplier 0073                  __end_of_RightButtonPressed 02F8  
                          _RightButtonState 0077                                 ??_SetLEDOff 0073  
                            ?_TMR0_CallBack 0070                              ?_TMR0_Callback 0070  
                         _LeftDebounceTimer 007A                                    _SetLEDOn 030E  
                     __end_of_SetAllLEDsOff 0313                     ??_RightButtonPressedRaw 0073  
                   ??_OSCILLATOR_Initialize 0073                __end_of_CheckForButtonPushes 010A  
                             _RunRightFlash 010A                            __size_of___lwdiv 0025  
              __end_of_LeftButtonPressedRaw 02E9                       __size_of_RunLeftFlash 006A  
                   _IOCAF2_InterruptHandler 0065                             ___lwdiv@divisor 0057  
                           ___lwdiv@counter 005D                ??_IOCAF2_SetInterruptHandler 0075  
                                  __ptext10 010A                                    __ptext11 0029  
                                  __ptext20 02F8                                    __ptext12 0259  
                                  __ptext13 0210                                    __ptext22 02FD  
                                  __ptext14 030E                                    __ptext23 02A7  
                                  __ptext15 030A                                    __ptext24 01C4  
                                  __ptext16 009D                                    __ptext25 02B8  
                                  __ptext17 02DD                                    __ptext26 0282  
                                  __ptext18 02F3                                    __ptext27 0313  
                                  __ptext19 02E3                                    __ptext28 028F  
                                  __ptext29 0314                                  _IOCAF2_ISR 028F  
                                _IOCAF3_ISR 0282                               __size_of_main 0050  
                    RunLeftFlash@left_delay 0051                                _RunLeftFlash 0029  
                                  int$flags 007E                              ?_RunRightFlash 0070  
        __end_of_INTERRUPT_InterruptManager 0011                  _INTERRUPT_InterruptManager 0004  
       __size_of_IOCAF2_SetInterruptHandler 0006                                  _INTCONbits 000B  
                           ??_TMR0_CallBack 0073                             ??_TMR0_Callback 0070  
                   __size_of_WDT_Initialize 0004                                    intlevel1 0000  
                   ?_PIN_MANAGER_Initialize 0070                           __CFG_CLKOUTEN$OFF 0000  
    __end_of_IOCAF3_DefaultInterruptHandler 0314     __size_of_IOCAF3_DefaultInterruptHandler 0001  
            _IOCAF3_DefaultInterruptHandler 0313                                  _OPTION_REG 0095  
                           _TMR0_Initialize 029C                                 _VREGCONbits 0197  
                  RunRightFlash@right_delay 0053                                 ?_IOCAF2_ISR 0070  
                               ?_IOCAF3_ISR 0070              __end_of_PIN_MANAGER_Initialize 0259  
                      _CheckForButtonPushes 009D                        _LeftButtonPressedRaw 02E3  
                           _PIN_MANAGER_IOC 02B8                     _IOCAF3_InterruptHandler 0063  
