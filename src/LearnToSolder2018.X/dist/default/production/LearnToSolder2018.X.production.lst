

Microchip Technology PIC PRO Macro Assembler V1.45 build -152302408 
                                                                                               Tue May 22 19:18:56 2018

Microchip Technology Omniscient Code Generator v1.45 (PRO mode) build 201711160504
     1                           	processor	12F1572
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK1,global,class=CODE,delta=2
     6                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	clrtext,global,class=CODE,delta=2
    13                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    14                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    16                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    17                           	psect	text1,local,class=CODE,merge=1,delta=2
    18                           	psect	text2,local,class=CODE,merge=1,delta=2
    19                           	psect	text3,local,class=CODE,merge=1,delta=2
    20                           	psect	text4,local,class=CODE,merge=1,delta=2
    21                           	psect	text5,local,class=CODE,merge=1,delta=2
    22                           	psect	text6,local,class=CODE,merge=1,delta=2
    23                           	psect	text7,local,class=CODE,merge=1,delta=2
    24                           	psect	text8,local,class=CODE,merge=1,delta=2
    25                           	psect	text9,local,class=CODE,merge=1,delta=2
    26                           	psect	text10,local,class=CODE,merge=1,delta=2
    27                           	psect	swtext1,local,class=CONST,delta=2
    28                           	psect	text11,local,class=CODE,merge=1,delta=2
    29                           	psect	swtext2,local,class=CONST,delta=2
    30                           	psect	text12,local,class=CODE,merge=1,delta=2,group=1
    31                           	psect	text13,local,class=CODE,merge=1,delta=2,group=1
    32                           	psect	text14,local,class=CODE,merge=1,delta=2
    33                           	psect	swtext3,local,class=CONST,delta=2
    34                           	psect	text15,local,class=CODE,merge=1,delta=2
    35                           	psect	text16,local,class=CODE,merge=1,delta=2
    36                           	psect	text17,local,class=CODE,merge=1,delta=2
    37                           	psect	text18,local,class=CODE,merge=1,delta=2
    38                           	psect	text19,local,class=CODE,merge=1,delta=2
    39                           	psect	text20,local,class=CODE,merge=1,delta=2
    40                           	psect	text21,local,class=CODE,merge=1,delta=2
    41                           	psect	intentry,global,class=CODE,delta=2
    42                           	psect	text23,local,class=CODE,merge=1,delta=2
    43                           	psect	text24,local,class=CODE,merge=1,delta=2
    44                           	psect	text25,local,class=CODE,merge=1,delta=2
    45                           	psect	text26,local,class=CODE,merge=1,delta=2
    46                           	psect	text27,local,class=CODE,merge=1,delta=2
    47                           	psect	text28,local,class=CODE,merge=1,delta=2
    48                           	psect	text29,local,class=CODE,merge=1,delta=2
    49                           	psect	text30,local,class=CODE,merge=1,delta=2
    50                           	psect	pa_nodes0,global,class=CODE,delta=2
    51                           	dabs	1,0x7E,2
    52  0000                     
    53                           ; Version 1.45
    54                           ; Generated 16/11/2017 GMT
    55                           ; 
    56                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    57                           ; All rights reserved.
    58                           ; 
    59                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    60                           ; 
    61                           ; Redistribution and use in source and binary forms, with or without modification, are
    62                           ; permitted provided that the following conditions are met:
    63                           ; 
    64                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    65                           ;        conditions and the following disclaimer.
    66                           ; 
    67                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    68                           ;        of conditions and the following disclaimer in the documentation and/or other
    69                           ;        materials provided with the distribution.
    70                           ; 
    71                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    72                           ;        software without specific prior written permission.
    73                           ; 
    74                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    75                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    76                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    77                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    78                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    79                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    80                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    81                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    82                           ; 
    83                           ; 
    84                           ; Code-generator required, PIC12F1572 Definitions
    85                           ; 
    86                           ; SFR Addresses
    87  0000                     	;# 
    88  0001                     	;# 
    89  0002                     	;# 
    90  0003                     	;# 
    91  0004                     	;# 
    92  0005                     	;# 
    93  0006                     	;# 
    94  0007                     	;# 
    95  0008                     	;# 
    96  0009                     	;# 
    97  000A                     	;# 
    98  000B                     	;# 
    99  000C                     	;# 
   100  0011                     	;# 
   101  0012                     	;# 
   102  0013                     	;# 
   103  0015                     	;# 
   104  0016                     	;# 
   105  0016                     	;# 
   106  0017                     	;# 
   107  0018                     	;# 
   108  0019                     	;# 
   109  001A                     	;# 
   110  001B                     	;# 
   111  001C                     	;# 
   112  008C                     	;# 
   113  0091                     	;# 
   114  0092                     	;# 
   115  0093                     	;# 
   116  0095                     	;# 
   117  0096                     	;# 
   118  0097                     	;# 
   119  0098                     	;# 
   120  0099                     	;# 
   121  009A                     	;# 
   122  009B                     	;# 
   123  009B                     	;# 
   124  009C                     	;# 
   125  009D                     	;# 
   126  009E                     	;# 
   127  009F                     	;# 
   128  010C                     	;# 
   129  0111                     	;# 
   130  0112                     	;# 
   131  0115                     	;# 
   132  0116                     	;# 
   133  0117                     	;# 
   134  0118                     	;# 
   135  0119                     	;# 
   136  011D                     	;# 
   137  011D                     	;# 
   138  018C                     	;# 
   139  0191                     	;# 
   140  0191                     	;# 
   141  0192                     	;# 
   142  0193                     	;# 
   143  0193                     	;# 
   144  0194                     	;# 
   145  0195                     	;# 
   146  0196                     	;# 
   147  0197                     	;# 
   148  0199                     	;# 
   149  019A                     	;# 
   150  019B                     	;# 
   151  019B                     	;# 
   152  019C                     	;# 
   153  019D                     	;# 
   154  019E                     	;# 
   155  019F                     	;# 
   156  020C                     	;# 
   157  028C                     	;# 
   158  030C                     	;# 
   159  038C                     	;# 
   160  0391                     	;# 
   161  0392                     	;# 
   162  0393                     	;# 
   163  0691                     	;# 
   164  0692                     	;# 
   165  0693                     	;# 
   166  0694                     	;# 
   167  0695                     	;# 
   168  0D8E                     	;# 
   169  0D8F                     	;# 
   170  0D90                     	;# 
   171  0D91                     	;# 
   172  0D91                     	;# 
   173  0D92                     	;# 
   174  0D93                     	;# 
   175  0D93                     	;# 
   176  0D94                     	;# 
   177  0D95                     	;# 
   178  0D95                     	;# 
   179  0D96                     	;# 
   180  0D97                     	;# 
   181  0D97                     	;# 
   182  0D98                     	;# 
   183  0D99                     	;# 
   184  0D99                     	;# 
   185  0D9A                     	;# 
   186  0D9B                     	;# 
   187  0D9C                     	;# 
   188  0D9C                     	;# 
   189  0D9D                     	;# 
   190  0D9D                     	;# 
   191  0D9E                     	;# 
   192  0D9F                     	;# 
   193  0DA0                     	;# 
   194  0DA1                     	;# 
   195  0DA1                     	;# 
   196  0DA2                     	;# 
   197  0DA3                     	;# 
   198  0DA3                     	;# 
   199  0DA4                     	;# 
   200  0DA5                     	;# 
   201  0DA5                     	;# 
   202  0DA6                     	;# 
   203  0DA7                     	;# 
   204  0DA7                     	;# 
   205  0DA8                     	;# 
   206  0DA9                     	;# 
   207  0DA9                     	;# 
   208  0DAA                     	;# 
   209  0DAB                     	;# 
   210  0DAC                     	;# 
   211  0DAC                     	;# 
   212  0DAD                     	;# 
   213  0DAD                     	;# 
   214  0DAE                     	;# 
   215  0DAF                     	;# 
   216  0DB0                     	;# 
   217  0DB1                     	;# 
   218  0DB1                     	;# 
   219  0DB2                     	;# 
   220  0DB3                     	;# 
   221  0DB3                     	;# 
   222  0DB4                     	;# 
   223  0DB5                     	;# 
   224  0DB5                     	;# 
   225  0DB6                     	;# 
   226  0DB7                     	;# 
   227  0DB7                     	;# 
   228  0DB8                     	;# 
   229  0DB9                     	;# 
   230  0DB9                     	;# 
   231  0DBA                     	;# 
   232  0DBB                     	;# 
   233  0DBC                     	;# 
   234  0DBC                     	;# 
   235  0DBD                     	;# 
   236  0DBD                     	;# 
   237  0DBE                     	;# 
   238  0DBF                     	;# 
   239  0DC0                     	;# 
   240  0FE4                     	;# 
   241  0FE5                     	;# 
   242  0FE6                     	;# 
   243  0FE7                     	;# 
   244  0FE8                     	;# 
   245  0FE8                     	;# 
   246  0FE9                     	;# 
   247  0FEA                     	;# 
   248  0FEA                     	;# 
   249  0FEB                     	;# 
   250  0FED                     	;# 
   251  0FEE                     	;# 
   252  0FEE                     	;# 
   253  0FEF                     	;# 
   254  0000                     	;# 
   255  0001                     	;# 
   256  0002                     	;# 
   257  0003                     	;# 
   258  0004                     	;# 
   259  0005                     	;# 
   260  0006                     	;# 
   261  0007                     	;# 
   262  0008                     	;# 
   263  0009                     	;# 
   264  000A                     	;# 
   265  000B                     	;# 
   266  000C                     	;# 
   267  0011                     	;# 
   268  0012                     	;# 
   269  0013                     	;# 
   270  0015                     	;# 
   271  0016                     	;# 
   272  0016                     	;# 
   273  0017                     	;# 
   274  0018                     	;# 
   275  0019                     	;# 
   276  001A                     	;# 
   277  001B                     	;# 
   278  001C                     	;# 
   279  008C                     	;# 
   280  0091                     	;# 
   281  0092                     	;# 
   282  0093                     	;# 
   283  0095                     	;# 
   284  0096                     	;# 
   285  0097                     	;# 
   286  0098                     	;# 
   287  0099                     	;# 
   288  009A                     	;# 
   289  009B                     	;# 
   290  009B                     	;# 
   291  009C                     	;# 
   292  009D                     	;# 
   293  009E                     	;# 
   294  009F                     	;# 
   295  010C                     	;# 
   296  0111                     	;# 
   297  0112                     	;# 
   298  0115                     	;# 
   299  0116                     	;# 
   300  0117                     	;# 
   301  0118                     	;# 
   302  0119                     	;# 
   303  011D                     	;# 
   304  011D                     	;# 
   305  018C                     	;# 
   306  0191                     	;# 
   307  0191                     	;# 
   308  0192                     	;# 
   309  0193                     	;# 
   310  0193                     	;# 
   311  0194                     	;# 
   312  0195                     	;# 
   313  0196                     	;# 
   314  0197                     	;# 
   315  0199                     	;# 
   316  019A                     	;# 
   317  019B                     	;# 
   318  019B                     	;# 
   319  019C                     	;# 
   320  019D                     	;# 
   321  019E                     	;# 
   322  019F                     	;# 
   323  020C                     	;# 
   324  028C                     	;# 
   325  030C                     	;# 
   326  038C                     	;# 
   327  0391                     	;# 
   328  0392                     	;# 
   329  0393                     	;# 
   330  0691                     	;# 
   331  0692                     	;# 
   332  0693                     	;# 
   333  0694                     	;# 
   334  0695                     	;# 
   335  0D8E                     	;# 
   336  0D8F                     	;# 
   337  0D90                     	;# 
   338  0D91                     	;# 
   339  0D91                     	;# 
   340  0D92                     	;# 
   341  0D93                     	;# 
   342  0D93                     	;# 
   343  0D94                     	;# 
   344  0D95                     	;# 
   345  0D95                     	;# 
   346  0D96                     	;# 
   347  0D97                     	;# 
   348  0D97                     	;# 
   349  0D98                     	;# 
   350  0D99                     	;# 
   351  0D99                     	;# 
   352  0D9A                     	;# 
   353  0D9B                     	;# 
   354  0D9C                     	;# 
   355  0D9C                     	;# 
   356  0D9D                     	;# 
   357  0D9D                     	;# 
   358  0D9E                     	;# 
   359  0D9F                     	;# 
   360  0DA0                     	;# 
   361  0DA1                     	;# 
   362  0DA1                     	;# 
   363  0DA2                     	;# 
   364  0DA3                     	;# 
   365  0DA3                     	;# 
   366  0DA4                     	;# 
   367  0DA5                     	;# 
   368  0DA5                     	;# 
   369  0DA6                     	;# 
   370  0DA7                     	;# 
   371  0DA7                     	;# 
   372  0DA8                     	;# 
   373  0DA9                     	;# 
   374  0DA9                     	;# 
   375  0DAA                     	;# 
   376  0DAB                     	;# 
   377  0DAC                     	;# 
   378  0DAC                     	;# 
   379  0DAD                     	;# 
   380  0DAD                     	;# 
   381  0DAE                     	;# 
   382  0DAF                     	;# 
   383  0DB0                     	;# 
   384  0DB1                     	;# 
   385  0DB1                     	;# 
   386  0DB2                     	;# 
   387  0DB3                     	;# 
   388  0DB3                     	;# 
   389  0DB4                     	;# 
   390  0DB5                     	;# 
   391  0DB5                     	;# 
   392  0DB6                     	;# 
   393  0DB7                     	;# 
   394  0DB7                     	;# 
   395  0DB8                     	;# 
   396  0DB9                     	;# 
   397  0DB9                     	;# 
   398  0DBA                     	;# 
   399  0DBB                     	;# 
   400  0DBC                     	;# 
   401  0DBC                     	;# 
   402  0DBD                     	;# 
   403  0DBD                     	;# 
   404  0DBE                     	;# 
   405  0DBF                     	;# 
   406  0DC0                     	;# 
   407  0FE4                     	;# 
   408  0FE5                     	;# 
   409  0FE6                     	;# 
   410  0FE7                     	;# 
   411  0FE8                     	;# 
   412  0FE8                     	;# 
   413  0FE9                     	;# 
   414  0FEA                     	;# 
   415  0FEA                     	;# 
   416  0FEB                     	;# 
   417  0FED                     	;# 
   418  0FEE                     	;# 
   419  0FEE                     	;# 
   420  0FEF                     	;# 
   421  0000                     	;# 
   422  0001                     	;# 
   423  0002                     	;# 
   424  0003                     	;# 
   425  0004                     	;# 
   426  0005                     	;# 
   427  0006                     	;# 
   428  0007                     	;# 
   429  0008                     	;# 
   430  0009                     	;# 
   431  000A                     	;# 
   432  000B                     	;# 
   433  000C                     	;# 
   434  0011                     	;# 
   435  0012                     	;# 
   436  0013                     	;# 
   437  0015                     	;# 
   438  0016                     	;# 
   439  0016                     	;# 
   440  0017                     	;# 
   441  0018                     	;# 
   442  0019                     	;# 
   443  001A                     	;# 
   444  001B                     	;# 
   445  001C                     	;# 
   446  008C                     	;# 
   447  0091                     	;# 
   448  0092                     	;# 
   449  0093                     	;# 
   450  0095                     	;# 
   451  0096                     	;# 
   452  0097                     	;# 
   453  0098                     	;# 
   454  0099                     	;# 
   455  009A                     	;# 
   456  009B                     	;# 
   457  009B                     	;# 
   458  009C                     	;# 
   459  009D                     	;# 
   460  009E                     	;# 
   461  009F                     	;# 
   462  010C                     	;# 
   463  0111                     	;# 
   464  0112                     	;# 
   465  0115                     	;# 
   466  0116                     	;# 
   467  0117                     	;# 
   468  0118                     	;# 
   469  0119                     	;# 
   470  011D                     	;# 
   471  011D                     	;# 
   472  018C                     	;# 
   473  0191                     	;# 
   474  0191                     	;# 
   475  0192                     	;# 
   476  0193                     	;# 
   477  0193                     	;# 
   478  0194                     	;# 
   479  0195                     	;# 
   480  0196                     	;# 
   481  0197                     	;# 
   482  0199                     	;# 
   483  019A                     	;# 
   484  019B                     	;# 
   485  019B                     	;# 
   486  019C                     	;# 
   487  019D                     	;# 
   488  019E                     	;# 
   489  019F                     	;# 
   490  020C                     	;# 
   491  028C                     	;# 
   492  030C                     	;# 
   493  038C                     	;# 
   494  0391                     	;# 
   495  0392                     	;# 
   496  0393                     	;# 
   497  0691                     	;# 
   498  0692                     	;# 
   499  0693                     	;# 
   500  0694                     	;# 
   501  0695                     	;# 
   502  0D8E                     	;# 
   503  0D8F                     	;# 
   504  0D90                     	;# 
   505  0D91                     	;# 
   506  0D91                     	;# 
   507  0D92                     	;# 
   508  0D93                     	;# 
   509  0D93                     	;# 
   510  0D94                     	;# 
   511  0D95                     	;# 
   512  0D95                     	;# 
   513  0D96                     	;# 
   514  0D97                     	;# 
   515  0D97                     	;# 
   516  0D98                     	;# 
   517  0D99                     	;# 
   518  0D99                     	;# 
   519  0D9A                     	;# 
   520  0D9B                     	;# 
   521  0D9C                     	;# 
   522  0D9C                     	;# 
   523  0D9D                     	;# 
   524  0D9D                     	;# 
   525  0D9E                     	;# 
   526  0D9F                     	;# 
   527  0DA0                     	;# 
   528  0DA1                     	;# 
   529  0DA1                     	;# 
   530  0DA2                     	;# 
   531  0DA3                     	;# 
   532  0DA3                     	;# 
   533  0DA4                     	;# 
   534  0DA5                     	;# 
   535  0DA5                     	;# 
   536  0DA6                     	;# 
   537  0DA7                     	;# 
   538  0DA7                     	;# 
   539  0DA8                     	;# 
   540  0DA9                     	;# 
   541  0DA9                     	;# 
   542  0DAA                     	;# 
   543  0DAB                     	;# 
   544  0DAC                     	;# 
   545  0DAC                     	;# 
   546  0DAD                     	;# 
   547  0DAD                     	;# 
   548  0DAE                     	;# 
   549  0DAF                     	;# 
   550  0DB0                     	;# 
   551  0DB1                     	;# 
   552  0DB1                     	;# 
   553  0DB2                     	;# 
   554  0DB3                     	;# 
   555  0DB3                     	;# 
   556  0DB4                     	;# 
   557  0DB5                     	;# 
   558  0DB5                     	;# 
   559  0DB6                     	;# 
   560  0DB7                     	;# 
   561  0DB7                     	;# 
   562  0DB8                     	;# 
   563  0DB9                     	;# 
   564  0DB9                     	;# 
   565  0DBA                     	;# 
   566  0DBB                     	;# 
   567  0DBC                     	;# 
   568  0DBC                     	;# 
   569  0DBD                     	;# 
   570  0DBD                     	;# 
   571  0DBE                     	;# 
   572  0DBF                     	;# 
   573  0DC0                     	;# 
   574  0FE4                     	;# 
   575  0FE5                     	;# 
   576  0FE6                     	;# 
   577  0FE7                     	;# 
   578  0FE8                     	;# 
   579  0FE8                     	;# 
   580  0FE9                     	;# 
   581  0FEA                     	;# 
   582  0FEA                     	;# 
   583  0FEB                     	;# 
   584  0FED                     	;# 
   585  0FEE                     	;# 
   586  0FEE                     	;# 
   587  0FEF                     	;# 
   588  0000                     	;# 
   589  0001                     	;# 
   590  0002                     	;# 
   591  0003                     	;# 
   592  0004                     	;# 
   593  0005                     	;# 
   594  0006                     	;# 
   595  0007                     	;# 
   596  0008                     	;# 
   597  0009                     	;# 
   598  000A                     	;# 
   599  000B                     	;# 
   600  000C                     	;# 
   601  0011                     	;# 
   602  0012                     	;# 
   603  0013                     	;# 
   604  0015                     	;# 
   605  0016                     	;# 
   606  0016                     	;# 
   607  0017                     	;# 
   608  0018                     	;# 
   609  0019                     	;# 
   610  001A                     	;# 
   611  001B                     	;# 
   612  001C                     	;# 
   613  008C                     	;# 
   614  0091                     	;# 
   615  0092                     	;# 
   616  0093                     	;# 
   617  0095                     	;# 
   618  0096                     	;# 
   619  0097                     	;# 
   620  0098                     	;# 
   621  0099                     	;# 
   622  009A                     	;# 
   623  009B                     	;# 
   624  009B                     	;# 
   625  009C                     	;# 
   626  009D                     	;# 
   627  009E                     	;# 
   628  009F                     	;# 
   629  010C                     	;# 
   630  0111                     	;# 
   631  0112                     	;# 
   632  0115                     	;# 
   633  0116                     	;# 
   634  0117                     	;# 
   635  0118                     	;# 
   636  0119                     	;# 
   637  011D                     	;# 
   638  011D                     	;# 
   639  018C                     	;# 
   640  0191                     	;# 
   641  0191                     	;# 
   642  0192                     	;# 
   643  0193                     	;# 
   644  0193                     	;# 
   645  0194                     	;# 
   646  0195                     	;# 
   647  0196                     	;# 
   648  0197                     	;# 
   649  0199                     	;# 
   650  019A                     	;# 
   651  019B                     	;# 
   652  019B                     	;# 
   653  019C                     	;# 
   654  019D                     	;# 
   655  019E                     	;# 
   656  019F                     	;# 
   657  020C                     	;# 
   658  028C                     	;# 
   659  030C                     	;# 
   660  038C                     	;# 
   661  0391                     	;# 
   662  0392                     	;# 
   663  0393                     	;# 
   664  0691                     	;# 
   665  0692                     	;# 
   666  0693                     	;# 
   667  0694                     	;# 
   668  0695                     	;# 
   669  0D8E                     	;# 
   670  0D8F                     	;# 
   671  0D90                     	;# 
   672  0D91                     	;# 
   673  0D91                     	;# 
   674  0D92                     	;# 
   675  0D93                     	;# 
   676  0D93                     	;# 
   677  0D94                     	;# 
   678  0D95                     	;# 
   679  0D95                     	;# 
   680  0D96                     	;# 
   681  0D97                     	;# 
   682  0D97                     	;# 
   683  0D98                     	;# 
   684  0D99                     	;# 
   685  0D99                     	;# 
   686  0D9A                     	;# 
   687  0D9B                     	;# 
   688  0D9C                     	;# 
   689  0D9C                     	;# 
   690  0D9D                     	;# 
   691  0D9D                     	;# 
   692  0D9E                     	;# 
   693  0D9F                     	;# 
   694  0DA0                     	;# 
   695  0DA1                     	;# 
   696  0DA1                     	;# 
   697  0DA2                     	;# 
   698  0DA3                     	;# 
   699  0DA3                     	;# 
   700  0DA4                     	;# 
   701  0DA5                     	;# 
   702  0DA5                     	;# 
   703  0DA6                     	;# 
   704  0DA7                     	;# 
   705  0DA7                     	;# 
   706  0DA8                     	;# 
   707  0DA9                     	;# 
   708  0DA9                     	;# 
   709  0DAA                     	;# 
   710  0DAB                     	;# 
   711  0DAC                     	;# 
   712  0DAC                     	;# 
   713  0DAD                     	;# 
   714  0DAD                     	;# 
   715  0DAE                     	;# 
   716  0DAF                     	;# 
   717  0DB0                     	;# 
   718  0DB1                     	;# 
   719  0DB1                     	;# 
   720  0DB2                     	;# 
   721  0DB3                     	;# 
   722  0DB3                     	;# 
   723  0DB4                     	;# 
   724  0DB5                     	;# 
   725  0DB5                     	;# 
   726  0DB6                     	;# 
   727  0DB7                     	;# 
   728  0DB7                     	;# 
   729  0DB8                     	;# 
   730  0DB9                     	;# 
   731  0DB9                     	;# 
   732  0DBA                     	;# 
   733  0DBB                     	;# 
   734  0DBC                     	;# 
   735  0DBC                     	;# 
   736  0DBD                     	;# 
   737  0DBD                     	;# 
   738  0DBE                     	;# 
   739  0DBF                     	;# 
   740  0DC0                     	;# 
   741  0FE4                     	;# 
   742  0FE5                     	;# 
   743  0FE6                     	;# 
   744  0FE7                     	;# 
   745  0FE8                     	;# 
   746  0FE8                     	;# 
   747  0FE9                     	;# 
   748  0FEA                     	;# 
   749  0FEA                     	;# 
   750  0FEB                     	;# 
   751  0FED                     	;# 
   752  0FEE                     	;# 
   753  0FEE                     	;# 
   754  0FEF                     	;# 
   755  0000                     	;# 
   756  0001                     	;# 
   757  0002                     	;# 
   758  0003                     	;# 
   759  0004                     	;# 
   760  0005                     	;# 
   761  0006                     	;# 
   762  0007                     	;# 
   763  0008                     	;# 
   764  0009                     	;# 
   765  000A                     	;# 
   766  000B                     	;# 
   767  000C                     	;# 
   768  0011                     	;# 
   769  0012                     	;# 
   770  0013                     	;# 
   771  0015                     	;# 
   772  0016                     	;# 
   773  0016                     	;# 
   774  0017                     	;# 
   775  0018                     	;# 
   776  0019                     	;# 
   777  001A                     	;# 
   778  001B                     	;# 
   779  001C                     	;# 
   780  008C                     	;# 
   781  0091                     	;# 
   782  0092                     	;# 
   783  0093                     	;# 
   784  0095                     	;# 
   785  0096                     	;# 
   786  0097                     	;# 
   787  0098                     	;# 
   788  0099                     	;# 
   789  009A                     	;# 
   790  009B                     	;# 
   791  009B                     	;# 
   792  009C                     	;# 
   793  009D                     	;# 
   794  009E                     	;# 
   795  009F                     	;# 
   796  010C                     	;# 
   797  0111                     	;# 
   798  0112                     	;# 
   799  0115                     	;# 
   800  0116                     	;# 
   801  0117                     	;# 
   802  0118                     	;# 
   803  0119                     	;# 
   804  011D                     	;# 
   805  011D                     	;# 
   806  018C                     	;# 
   807  0191                     	;# 
   808  0191                     	;# 
   809  0192                     	;# 
   810  0193                     	;# 
   811  0193                     	;# 
   812  0194                     	;# 
   813  0195                     	;# 
   814  0196                     	;# 
   815  0197                     	;# 
   816  0199                     	;# 
   817  019A                     	;# 
   818  019B                     	;# 
   819  019B                     	;# 
   820  019C                     	;# 
   821  019D                     	;# 
   822  019E                     	;# 
   823  019F                     	;# 
   824  020C                     	;# 
   825  028C                     	;# 
   826  030C                     	;# 
   827  038C                     	;# 
   828  0391                     	;# 
   829  0392                     	;# 
   830  0393                     	;# 
   831  0691                     	;# 
   832  0692                     	;# 
   833  0693                     	;# 
   834  0694                     	;# 
   835  0695                     	;# 
   836  0D8E                     	;# 
   837  0D8F                     	;# 
   838  0D90                     	;# 
   839  0D91                     	;# 
   840  0D91                     	;# 
   841  0D92                     	;# 
   842  0D93                     	;# 
   843  0D93                     	;# 
   844  0D94                     	;# 
   845  0D95                     	;# 
   846  0D95                     	;# 
   847  0D96                     	;# 
   848  0D97                     	;# 
   849  0D97                     	;# 
   850  0D98                     	;# 
   851  0D99                     	;# 
   852  0D99                     	;# 
   853  0D9A                     	;# 
   854  0D9B                     	;# 
   855  0D9C                     	;# 
   856  0D9C                     	;# 
   857  0D9D                     	;# 
   858  0D9D                     	;# 
   859  0D9E                     	;# 
   860  0D9F                     	;# 
   861  0DA0                     	;# 
   862  0DA1                     	;# 
   863  0DA1                     	;# 
   864  0DA2                     	;# 
   865  0DA3                     	;# 
   866  0DA3                     	;# 
   867  0DA4                     	;# 
   868  0DA5                     	;# 
   869  0DA5                     	;# 
   870  0DA6                     	;# 
   871  0DA7                     	;# 
   872  0DA7                     	;# 
   873  0DA8                     	;# 
   874  0DA9                     	;# 
   875  0DA9                     	;# 
   876  0DAA                     	;# 
   877  0DAB                     	;# 
   878  0DAC                     	;# 
   879  0DAC                     	;# 
   880  0DAD                     	;# 
   881  0DAD                     	;# 
   882  0DAE                     	;# 
   883  0DAF                     	;# 
   884  0DB0                     	;# 
   885  0DB1                     	;# 
   886  0DB1                     	;# 
   887  0DB2                     	;# 
   888  0DB3                     	;# 
   889  0DB3                     	;# 
   890  0DB4                     	;# 
   891  0DB5                     	;# 
   892  0DB5                     	;# 
   893  0DB6                     	;# 
   894  0DB7                     	;# 
   895  0DB7                     	;# 
   896  0DB8                     	;# 
   897  0DB9                     	;# 
   898  0DB9                     	;# 
   899  0DBA                     	;# 
   900  0DBB                     	;# 
   901  0DBC                     	;# 
   902  0DBC                     	;# 
   903  0DBD                     	;# 
   904  0DBD                     	;# 
   905  0DBE                     	;# 
   906  0DBF                     	;# 
   907  0DC0                     	;# 
   908  0FE4                     	;# 
   909  0FE5                     	;# 
   910  0FE6                     	;# 
   911  0FE7                     	;# 
   912  0FE8                     	;# 
   913  0FE8                     	;# 
   914  0FE9                     	;# 
   915  0FEA                     	;# 
   916  0FEA                     	;# 
   917  0FEB                     	;# 
   918  0FED                     	;# 
   919  0FEE                     	;# 
   920  0FEE                     	;# 
   921  0FEF                     	;# 
   922                           
   923                           	psect	idataBANK0
   924  0000                     __pidataBANK0:	
   925                           
   926                           	psect	idataBANK1
   927  0000                     __pidataBANK1:	
   928                           
   929                           	psect	nvBANK0
   930  0069                     __pnvBANK0:	
   931  0069                     _TMR0_InterruptHandler:	
   932  0069                     	ds	2
   933  006B                     _IOCAF3_InterruptHandler:	
   934  006B                     	ds	2
   935  006D                     _IOCAF2_InterruptHandler:	
   936  006D                     	ds	2
   937  006F                     _timer0ReloadVal:	
   938  006F                     	ds	1
   939  000C                     _PORTAbits	set	12
   940  000C                     _PORTA	set	12
   941  0015                     _TMR0	set	21
   942  000B                     _INTCONbits	set	11
   943  0095                     _OPTION_REG	set	149
   944  0097                     _WDTCON	set	151
   945  0098                     _OSCTUNE	set	152
   946  0099                     _OSCCON	set	153
   947  0095                     _OPTION_REGbits	set	149
   948  008C                     _TRISA	set	140
   949  0116                     _BORCON	set	278
   950  011D                     _APFCON	set	285
   951  010C                     _LATA	set	268
   952  0197                     _VREGCONbits	set	407
   953  018C                     _ANSELA	set	396
   954  020C                     _WPUA	set	524
   955  028C                     _ODCONA	set	652
   956  0391                     _IOCAPbits	set	913
   957  0392                     _IOCANbits	set	914
   958  0393                     _IOCAFbits	set	915
   959                           
   960                           ; #config settings
   961  0000                     
   962                           	psect	cinit
   963  0012                     start_initialization:	
   964  0012                     __initialization:	
   965                           
   966                           ;initializer for _TRISTable
   967  0012  30FC               	movlw	252
   968  0013  00D2               	movwf	__pdataBANK0& (0+127)
   969  0014  00D3               	movwf	(__pdataBANK0+1)& (0+127)
   970  0015  30CF               	movlw	207
   971  0016  00D4               	movwf	(__pdataBANK0+2)& (0+127)
   972  0017  00D5               	movwf	(__pdataBANK0+3)& (0+127)
   973  0018  30DE               	movlw	222
   974  0019  00D6               	movwf	(__pdataBANK0+4)& (0+127)
   975  001A  00D7               	movwf	(__pdataBANK0+5)& (0+127)
   976  001B  30ED               	movlw	237
   977  001C  00D8               	movwf	(__pdataBANK0+6)& (0+127)
   978  001D  00D9               	movwf	(__pdataBANK0+7)& (0+127)
   979                           
   980                           ;initializer for RunLeftFlash@left_delay
   981  001E  30FA               	movlw	250
   982  001F  00DA               	movwf	(__pdataBANK0+8)& (0+127)
   983  0020  01DB               	clrf	(__pdataBANK0+9)& (0+127)
   984                           
   985                           ;initializer for RunRightFlash@right_delay
   986  0021  00DC               	movwf	(__pdataBANK0+10)& (0+127)
   987  0022  3001               	movlw	1
   988  0023  01DD               	clrf	(__pdataBANK0+11)& (0+127)
   989                           
   990                           ;initializer for RunGame@num_leds_lit
   991  0024  00DE               	movwf	(__pdataBANK0+12)& (0+127)
   992                           
   993                           ; Initialize objects allocated to BANK1
   994  0025  0021               	movlb	1	; select bank1
   995                           
   996                           ;initializer for _PORTTable
   997  0026  00A0               	movwf	__pdataBANK1& (0+127)
   998  0027  3002               	movlw	2
   999  0028  00A1               	movwf	(__pdataBANK1+1)& (0+127)
  1000  0029  3010               	movlw	16
  1001  002A  00A2               	movwf	(__pdataBANK1+2)& (0+127)
  1002  002B  3020               	movlw	32
  1003  002C  00A3               	movwf	(__pdataBANK1+3)& (0+127)
  1004  002D  00A4               	movwf	(__pdataBANK1+4)& (0+127)
  1005  002E  3001               	movlw	1
  1006  002F  00A5               	movwf	(__pdataBANK1+5)& (0+127)
  1007  0030  3010               	movlw	16
  1008  0031  00A6               	movwf	(__pdataBANK1+6)& (0+127)
  1009  0032  3002               	movlw	2
  1010  0033  00A7               	movwf	(__pdataBANK1+7)& (0+127)
  1011  0034  3020               	movlw	low __pbssBANK0
  1012                           
  1013                           ; Clear objects allocated to COMMON
  1014  0035  01F7               	clrf	__pbssCOMMON& (0+127)
  1015  0036  01F8               	clrf	(__pbssCOMMON+1)& (0+127)
  1016  0037  01F9               	clrf	(__pbssCOMMON+2)& (0+127)
  1017  0038  01FA               	clrf	(__pbssCOMMON+3)& (0+127)
  1018                           
  1019                           ; Clear objects allocated to BANK0
  1020  0039  0084               	movwf	4
  1021  003A  3000               	movlw	high __pbssBANK0
  1022  003B  0085               	movwf	5
  1023  003C  3032               	movlw	50
  1024  003D  2545               	fcall	clear_ram0
  1025  003E                     end_of_initialization:	
  1026                           ;End of C runtime variable initialization code
  1027                           
  1028  003E                     __end_of__initialization:	
  1029  003E  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  1030  003F  0020               	movlb	0
  1031  0040  2BED               	ljmp	_main	;jump to C main() function
  1032                           
  1033                           	psect	bssCOMMON
  1034  0077                     __pbssCOMMON:	
  1035  0077                     _RightButtonState:	
  1036  0077                     	ds	1
  1037  0078                     _LeftButtonState:	
  1038  0078                     	ds	1
  1039  0079                     _RightDebounceTimer:	
  1040  0079                     	ds	1
  1041  007A                     _LeftDebounceTimer:	
  1042  007A                     	ds	1
  1043                           
  1044                           	psect	bssBANK0
  1045  0020                     __pbssBANK0:	
  1046  0020                     _PatternDelay:	
  1047  0020                     	ds	16
  1048  0030                     _PatternState:	
  1049  0030                     	ds	8
  1050  0038                     RunGame@next_decrement_time:	
  1051  0038                     	ds	4
  1052  003C                     RunGame@last_button_press_time:	
  1053  003C                     	ds	4
  1054  0040                     _LastLeftButtonPressTime:	
  1055  0040                     	ds	4
  1056  0044                     _LastRightButtonPressTime:	
  1057  0044                     	ds	4
  1058  0048                     _WakeTimer:	
  1059  0048                     	ds	4
  1060  004C                     CheckForButtonPushes@LeftButtonQuickPressCount:	
  1061  004C                     	ds	1
  1062  004D                     CheckForButtonPushes@LastRightButtonState:	
  1063  004D                     	ds	1
  1064  004E                     CheckForButtonPushes@LastLeftButtonState:	
  1065  004E                     	ds	1
  1066  004F                     _ShutdownDelayTimer:	
  1067  004F                     	ds	1
  1068  0050                     _LEDOns:	
  1069  0050                     	ds	1
  1070  0051                     _LEDState:	
  1071  0051                     	ds	1
  1072                           
  1073                           	psect	dataBANK0
  1074  0052                     __pdataBANK0:	
  1075  0052                     _TRISTable:	
  1076  0052                     	ds	8
  1077  005A                     RunLeftFlash@left_delay:	
  1078  005A                     	ds	2
  1079  005C                     RunRightFlash@right_delay:	
  1080  005C                     	ds	2
  1081  005E                     RunGame@num_leds_lit:	
  1082  005E                     	ds	1
  1083                           
  1084                           	psect	dataBANK1
  1085  00A0                     __pdataBANK1:	
  1086  00A0                     _PORTTable:	
  1087  00A0                     	ds	8
  1088                           
  1089                           	psect	clrtext
  1090  0545                     clear_ram0:	
  1091                           ;	Called with FSR0 containing the base address, and
  1092                           ;	WREG with the size to clear
  1093                           
  1094  0545  0064               	clrwdt	;clear the watchdog before getting into this loop
  1095  0546                     clrloop0:	
  1096  0546  0180               	clrf	0	;clear RAM location pointed to by FSR
  1097  0547  3101               	addfsr 0,1
  1098  0548  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  1099  0549  2D46               	goto	clrloop0	;have we reached the end yet?
  1100  054A  3400               	retlw	0	;all done for this memory range, return
  1101                           
  1102                           	psect	cstackBANK1
  1103  00A8                     __pcstackBANK1:	
  1104  00A8                     main@APatternIsRunning:	
  1105                           
  1106                           ; 1 bytes @ 0x0
  1107  00A8                     	ds	1
  1108  00A9                     main@i:	
  1109                           
  1110                           ; 1 bytes @ 0x1
  1111  00A9                     	ds	1
  1112                           
  1113                           	psect	cstackCOMMON
  1114  0070                     __pcstackCOMMON:	
  1115  0070                     ?_IOCAF2_DefaultInterruptHandler:	
  1116  0070                     ??_IOCAF2_DefaultInterruptHandler:	
  1117                           ; 1 bytes @ 0x0
  1118                           
  1119  0070                     ?_IOCAF3_DefaultInterruptHandler:	
  1120                           ; 1 bytes @ 0x0
  1121                           
  1122  0070                     ??_IOCAF3_DefaultInterruptHandler:	
  1123                           ; 1 bytes @ 0x0
  1124                           
  1125  0070                     ?_IOCAF2_ISR:	
  1126                           ; 1 bytes @ 0x0
  1127                           
  1128  0070                     ??_IOCAF2_ISR:	
  1129                           ; 1 bytes @ 0x0
  1130                           
  1131  0070                     ?_IOCAF3_ISR:	
  1132                           ; 1 bytes @ 0x0
  1133                           
  1134  0070                     ??_IOCAF3_ISR:	
  1135                           ; 1 bytes @ 0x0
  1136                           
  1137  0070                     ?_OSCILLATOR_Initialize:	
  1138                           ; 1 bytes @ 0x0
  1139                           
  1140  0070                     ?_WDT_Initialize:	
  1141                           ; 1 bytes @ 0x0
  1142                           
  1143  0070                     ?_TMR0_Initialize:	
  1144                           ; 1 bytes @ 0x0
  1145                           
  1146  0070                     ?_TMR0_ISR:	
  1147                           ; 1 bytes @ 0x0
  1148                           
  1149  0070                     ?_TMR0_CallBack:	
  1150                           ; 1 bytes @ 0x0
  1151                           
  1152  0070                     ?_PIN_MANAGER_Initialize:	
  1153                           ; 1 bytes @ 0x0
  1154                           
  1155  0070                     ?_PIN_MANAGER_IOC:	
  1156                           ; 1 bytes @ 0x0
  1157                           
  1158  0070                     ??_PIN_MANAGER_IOC:	
  1159                           ; 1 bytes @ 0x0
  1160                           
  1161  0070                     ?_SYSTEM_Initialize:	
  1162                           ; 1 bytes @ 0x0
  1163                           
  1164  0070                     ?_INTERRUPT_InterruptManager:	
  1165                           ; 1 bytes @ 0x0
  1166                           
  1167  0070                     ?_SetLEDOn:	
  1168                           ; 1 bytes @ 0x0
  1169                           
  1170  0070                     ?_SetLEDOff:	
  1171                           ; 1 bytes @ 0x0
  1172                           
  1173  0070                     ?_SetAllLEDsOff:	
  1174                           ; 1 bytes @ 0x0
  1175                           
  1176  0070                     ?_TMR0_Callback:	
  1177                           ; 1 bytes @ 0x0
  1178                           
  1179  0070                     ??_TMR0_Callback:	
  1180                           ; 1 bytes @ 0x0
  1181                           
  1182  0070                     ?_RightButtonPressedRaw:	
  1183                           ; 1 bytes @ 0x0
  1184                           
  1185  0070                     ?_LeftButtonPressedRaw:	
  1186                           ; 1 bytes @ 0x0
  1187                           
  1188  0070                     ?_RightButtonPressed:	
  1189                           ; 1 bytes @ 0x0
  1190                           
  1191  0070                     ?_LeftButtonPressed:	
  1192                           ; 1 bytes @ 0x0
  1193                           
  1194  0070                     ?_RunRightFlash:	
  1195                           ; 1 bytes @ 0x0
  1196                           
  1197  0070                     ?_RunLeftFlash:	
  1198                           ; 1 bytes @ 0x0
  1199                           
  1200  0070                     ?_RunGame:	
  1201                           ; 1 bytes @ 0x0
  1202                           
  1203  0070                     ?_CheckForButtonPushes:	
  1204                           ; 1 bytes @ 0x0
  1205                           
  1206  0070                     ?_main:	
  1207                           ; 1 bytes @ 0x0
  1208                           
  1209                           
  1210                           ; 1 bytes @ 0x0
  1211  0070                     	ds	2
  1212  0072                     TMR0_Callback@i:	
  1213                           
  1214                           ; 1 bytes @ 0x2
  1215  0072                     	ds	1
  1216  0073                     ?_IOCAF2_SetInterruptHandler:	
  1217  0073                     ?_IOCAF3_SetInterruptHandler:	
  1218                           ; 1 bytes @ 0x3
  1219                           
  1220  0073                     ??_OSCILLATOR_Initialize:	
  1221                           ; 1 bytes @ 0x3
  1222                           
  1223  0073                     ??_WDT_Initialize:	
  1224                           ; 1 bytes @ 0x3
  1225                           
  1226  0073                     ??_TMR0_Initialize:	
  1227                           ; 1 bytes @ 0x3
  1228                           
  1229  0073                     ??_TMR0_ISR:	
  1230                           ; 1 bytes @ 0x3
  1231                           
  1232  0073                     ??_TMR0_CallBack:	
  1233                           ; 1 bytes @ 0x3
  1234                           
  1235  0073                     ??_INTERRUPT_InterruptManager:	
  1236                           ; 1 bytes @ 0x3
  1237                           
  1238  0073                     ?_TMR0_SetInterruptHandler:	
  1239                           ; 1 bytes @ 0x3
  1240                           
  1241  0073                     ??_SetLEDOn:	
  1242                           ; 1 bytes @ 0x3
  1243                           
  1244  0073                     ??_SetLEDOff:	
  1245                           ; 1 bytes @ 0x3
  1246                           
  1247  0073                     ??_SetAllLEDsOff:	
  1248                           ; 1 bytes @ 0x3
  1249                           
  1250  0073                     ??_RightButtonPressedRaw:	
  1251                           ; 1 bytes @ 0x3
  1252                           
  1253  0073                     ??_LeftButtonPressedRaw:	
  1254                           ; 1 bytes @ 0x3
  1255                           
  1256  0073                     ??_RightButtonPressed:	
  1257                           ; 1 bytes @ 0x3
  1258                           
  1259  0073                     ??_LeftButtonPressed:	
  1260                           ; 1 bytes @ 0x3
  1261                           
  1262  0073                     ??_CheckForButtonPushes:	
  1263                           ; 1 bytes @ 0x3
  1264                           
  1265  0073                     ?___wmul:	
  1266                           ; 1 bytes @ 0x3
  1267                           
  1268  0073                     SetLEDOn@LED:	
  1269                           ; 2 bytes @ 0x3
  1270                           
  1271  0073                     SetLEDOff@LED:	
  1272                           ; 1 bytes @ 0x3
  1273                           
  1274  0073                     IOCAF2_SetInterruptHandler@InterruptHandler:	
  1275                           ; 1 bytes @ 0x3
  1276                           
  1277  0073                     IOCAF3_SetInterruptHandler@InterruptHandler:	
  1278                           ; 2 bytes @ 0x3
  1279                           
  1280  0073                     TMR0_SetInterruptHandler@InterruptHandler:	
  1281                           ; 2 bytes @ 0x3
  1282                           
  1283  0073                     ___wmul@multiplier:	
  1284                           ; 2 bytes @ 0x3
  1285                           
  1286                           
  1287                           ; 2 bytes @ 0x3
  1288  0073                     	ds	2
  1289  0075                     ??_IOCAF2_SetInterruptHandler:	
  1290  0075                     ??_IOCAF3_SetInterruptHandler:	
  1291                           ; 1 bytes @ 0x5
  1292                           
  1293  0075                     ??_PIN_MANAGER_Initialize:	
  1294                           ; 1 bytes @ 0x5
  1295                           
  1296  0075                     ??_SYSTEM_Initialize:	
  1297                           ; 1 bytes @ 0x5
  1298                           
  1299  0075                     ??_TMR0_SetInterruptHandler:	
  1300                           ; 1 bytes @ 0x5
  1301                           
  1302  0075                     ___wmul@multiplicand:	
  1303                           ; 1 bytes @ 0x5
  1304                           
  1305                           
  1306                           ; 2 bytes @ 0x5
  1307  0075                     	ds	2
  1308  0077                     ??_RunRightFlash:	
  1309  0077                     ??_RunLeftFlash:	
  1310                           ; 1 bytes @ 0x7
  1311                           
  1312  0077                     ??___wmul:	
  1313                           ; 1 bytes @ 0x7
  1314                           
  1315  0077                     ??___lwdiv:	
  1316                           ; 1 bytes @ 0x7
  1317                           
  1318                           
  1319                           	psect	cstackBANK0
  1320  005F                     __pcstackBANK0:	
  1321                           ; 1 bytes @ 0x7
  1322                           
  1323  005F                     ??_RunGame:	
  1324  005F                     _CheckForButtonPushes$440:	
  1325                           ; 1 bytes @ 0x0
  1326                           
  1327  005F                     ___wmul@product:	
  1328                           ; 1 bytes @ 0x0
  1329                           
  1330                           
  1331                           ; 2 bytes @ 0x0
  1332  005F                     	ds	2
  1333  0061                     ?___lwdiv:	
  1334  0061                     ___lwdiv@divisor:	
  1335                           ; 2 bytes @ 0x2
  1336                           
  1337                           
  1338                           ; 2 bytes @ 0x2
  1339  0061                     	ds	2
  1340  0063                     ___lwdiv@dividend:	
  1341                           
  1342                           ; 2 bytes @ 0x4
  1343  0063                     	ds	2
  1344  0065                     ___lwdiv@counter:	
  1345                           
  1346                           ; 1 bytes @ 0x6
  1347  0065                     	ds	1
  1348  0066                     ___lwdiv@quotient:	
  1349                           
  1350                           ; 2 bytes @ 0x7
  1351  0066                     	ds	2
  1352  0068                     ??_main:	
  1353                           
  1354                           ; 1 bytes @ 0x9
  1355  0068                     	ds	1
  1356                           
  1357                           	psect	maintext
  1358  03ED                     __pmaintext:	
  1359 ;;
  1360 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  1361 ;;
  1362 ;; *************** function _main *****************
  1363 ;; Defined at:
  1364 ;;		line 879 in file "main.c"
  1365 ;; Parameters:    Size  Location     Type
  1366 ;;		None
  1367 ;; Auto vars:     Size  Location     Type
  1368 ;;  i               1    1[BANK1 ] unsigned char 
  1369 ;;  APatternIsRu    1    0[BANK1 ] unsigned char 
  1370 ;; Return value:  Size  Location     Type
  1371 ;;                  1    wreg      void 
  1372 ;; Registers used:
  1373 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1374 ;; Tracked objects:
  1375 ;;		On entry : B1F/0
  1376 ;;		On exit  : 1F/0
  1377 ;;		Unchanged: 0/0
  1378 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1379 ;;      Params:         0       0       0       0
  1380 ;;      Locals:         0       0       2       0
  1381 ;;      Temps:          0       1       0       0
  1382 ;;      Totals:         0       1       2       0
  1383 ;;Total ram usage:        3 bytes
  1384 ;; Hardware stack levels required when called:    7
  1385 ;; This function calls:
  1386 ;;		_CheckForButtonPushes
  1387 ;;		_RunGame
  1388 ;;		_RunLeftFlash
  1389 ;;		_RunRightFlash
  1390 ;;		_SYSTEM_Initialize
  1391 ;;		_SetAllLEDsOff
  1392 ;;		_TMR0_SetInterruptHandler
  1393 ;; This function is called by:
  1394 ;;		Startup code after reset
  1395 ;; This function uses a non-reentrant model
  1396 ;;
  1397                           
  1398                           
  1399                           ;psect for function _main
  1400  03ED                     _main:	
  1401                           
  1402                           ;main.c: 882: SYSTEM_Initialize();
  1403                           
  1404                           ;incstack = 0
  1405                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1406  03ED  257B               	fcall	_SYSTEM_Initialize
  1407                           
  1408                           ;main.c: 884: TMR0_SetInterruptHandler(TMR0_Callback);
  1409  03EE  303F               	movlw	low _TMR0_Callback
  1410  03EF  00F3               	movwf	TMR0_SetInterruptHandler@InterruptHandler
  1411  03F0  3004               	movlw	high _TMR0_Callback
  1412  03F1  00F4               	movwf	TMR0_SetInterruptHandler@InterruptHandler+1
  1413  03F2  255D               	fcall	_TMR0_SetInterruptHandler
  1414                           
  1415                           ;main.c: 890: (INTCONbits.GIE = 1);
  1416  03F3  178B               	bsf	11,7	;volatile
  1417                           
  1418                           ;main.c: 893: (INTCONbits.PEIE = 1);
  1419  03F4  170B               	bsf	11,6	;volatile
  1420  03F5                     l2488:	
  1421                           
  1422                           ;main.c: 905: {
  1423                           ;main.c: 906: RunRightFlash();
  1424  03F5  228A               	fcall	_RunRightFlash
  1425                           
  1426                           ;main.c: 907: RunLeftFlash();
  1427  03F6  21C3               	fcall	_RunLeftFlash
  1428                           
  1429                           ;main.c: 908: RunGame();
  1430  03F7  2041               	fcall	_RunGame
  1431                           
  1432                           ;main.c: 910: APatternIsRunning = 0;
  1433  03F8  0021               	movlb	1	; select bank1
  1434  03F9  01A8               	clrf	main@APatternIsRunning^(0+128)
  1435                           
  1436                           ;main.c: 911: for (i=0; i < 8; i++)
  1437  03FA  01A9               	clrf	main@i^(0+128)
  1438  03FB                     l2502:	
  1439                           
  1440                           ;main.c: 912: {
  1441                           ;main.c: 913: if (PatternState[i] != 0)
  1442  03FB  0829               	movf	main@i^(0+128),w
  1443  03FC  3E30               	addlw	(low (_PatternState| 0))& (0+255)
  1444  03FD  0086               	movwf	6
  1445  03FE  0187               	clrf	7
  1446  03FF  0801               	movf	1,w
  1447  0400  1903               	btfsc	3,2
  1448  0401  2C04               	goto	l2506
  1449                           
  1450                           ;main.c: 914: {
  1451                           ;main.c: 915: APatternIsRunning = 1;
  1452  0402  01A8               	clrf	main@APatternIsRunning^(0+128)
  1453  0403  0AA8               	incf	main@APatternIsRunning^(0+128),f
  1454  0404                     l2506:	
  1455  0404  3008               	movlw	8
  1456  0405  0AA9               	incf	main@i^(0+128),f
  1457  0406  0229               	subwf	main@i^(0+128),w
  1458  0407  1C03               	skipc
  1459  0408  2BFB               	goto	l2502
  1460                           
  1461                           ;main.c: 916: }
  1462                           ;main.c: 917: }
  1463                           ;main.c: 918: if ((!APatternIsRunning && RightDebounceTimer == 0 && LeftDebounceTimer ==
      +                           0) || (WakeTimer > (5UL * 60UL * 1000UL)))
  1464  0409  0828               	movf	main@APatternIsRunning^(0+128),w
  1465  040A  1D03               	btfss	3,2
  1466  040B  2C11               	goto	l2516
  1467  040C  0879               	movf	_RightDebounceTimer,w	;volatile
  1468  040D  1903               	btfsc	3,2
  1469  040E  087A               	movf	_LeftDebounceTimer,w	;volatile
  1470  040F  1903               	btfsc	3,2
  1471  0410  2C1D               	goto	l2518
  1472  0411                     l2516:	
  1473  0411  0020               	movlb	0	; select bank0
  1474  0412  084B               	movf	_WakeTimer+3,w	;volatile
  1475  0413  1D03               	btfss	3,2
  1476  0414  2C1D               	goto	l2518
  1477  0415  30E1               	movlw	225
  1478  0416  0248               	subwf	_WakeTimer,w	;volatile
  1479  0417  3093               	movlw	147
  1480  0418  3B49               	subwfb	_WakeTimer+1,w	;volatile
  1481  0419  3004               	movlw	4
  1482  041A  3B4A               	subwfb	_WakeTimer+2,w	;volatile
  1483  041B  1C03               	btfss	3,0
  1484  041C  2C3D               	goto	l2532
  1485  041D                     l2518:	
  1486                           
  1487                           ;main.c: 919: {
  1488                           ;main.c: 920: SetAllLEDsOff();
  1489  041D  2587               	fcall	_SetAllLEDsOff
  1490                           
  1491                           ;main.c: 922: _delay((unsigned long)((5)*(16000000/4000.0)));
  1492  041E  301A               	movlw	26
  1493  041F  0020               	movlb	0	; select bank0
  1494  0420  00E8               	movwf	??_main
  1495  0421  30F8               	movlw	248
  1496  0422                     u2307:	
  1497  0422  0B89               	decfsz	9,f
  1498  0423  2C22               	goto	u2307
  1499  0424  0BE8               	decfsz	??_main,f
  1500  0425  2C22               	goto	u2307
  1501  0426  0000               	nop
  1502                           
  1503                           ;main.c: 924: ShutdownDelayTimer = 100;
  1504  0427  3064               	movlw	100
  1505  0428  0020               	movlb	0	; select bank0
  1506  0429  00CF               	movwf	_ShutdownDelayTimer	;volatile
  1507  042A  2C2F               	goto	l2524
  1508  042B                     l2526:	
  1509  042B  234C               	fcall	_CheckForButtonPushes
  1510  042C  3A00               	xorlw	0
  1511  042D  1D03               	btfss	3,2
  1512  042E  2C32               	goto	l2528
  1513  042F                     l2524:	
  1514                           ;main.c: 926: while (ShutdownDelayTimer && !CheckForButtonPushes())
  1515                           
  1516  042F  084F               	movf	_ShutdownDelayTimer,w	;volatile
  1517  0430  1D03               	btfss	3,2
  1518  0431  2C2B               	goto	l2526
  1519  0432                     l2528:	
  1520                           
  1521                           ;main.c: 928: }
  1522                           ;main.c: 930: if (ShutdownDelayTimer == 0)
  1523  0432  084F               	movf	_ShutdownDelayTimer,w	;volatile
  1524  0433  1D03               	btfss	3,2
  1525  0434  2C3D               	goto	l2532
  1526                           
  1527                           ;main.c: 931: {
  1528                           ;main.c: 933: VREGCONbits.VREGPM = 1;
  1529  0435  0023               	movlb	3	; select bank3
  1530  0436  1497               	bsf	23,1	;volatile
  1531  0437  0063               	sleep	;# 
  1532                           
  1533                           ;main.c: 938: WakeTimer = 0;
  1534  0438  0020               	movlb	0	; select bank0
  1535  0439  01C8               	clrf	_WakeTimer	;volatile
  1536  043A  01C9               	clrf	_WakeTimer+1	;volatile
  1537  043B  01CA               	clrf	_WakeTimer+2	;volatile
  1538  043C  01CB               	clrf	_WakeTimer+3	;volatile
  1539  043D                     l2532:	
  1540                           
  1541                           ;main.c: 939: }
  1542                           ;main.c: 940: }
  1543                           ;main.c: 942: CheckForButtonPushes();
  1544  043D  234C               	fcall	_CheckForButtonPushes
  1545  043E  2BF5               	goto	l2488
  1546  043F                     __end_of_main:	
  1547                           
  1548                           	psect	text1
  1549  055D                     __ptext1:	
  1550 ;; *************** function _TMR0_SetInterruptHandler *****************
  1551 ;; Defined at:
  1552 ;;		line 133 in file "mcc_generated_files/tmr0.c"
  1553 ;; Parameters:    Size  Location     Type
  1554 ;;  InterruptHan    2    3[COMMON] PTR FTN()void 
  1555 ;;		 -> TMR0_Callback(1), 
  1556 ;; Auto vars:     Size  Location     Type
  1557 ;;		None
  1558 ;; Return value:  Size  Location     Type
  1559 ;;                  1    wreg      void 
  1560 ;; Registers used:
  1561 ;;		wreg
  1562 ;; Tracked objects:
  1563 ;;		On entry : B1F/0
  1564 ;;		On exit  : B1F/0
  1565 ;;		Unchanged: B00/0
  1566 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1567 ;;      Params:         2       0       0       0
  1568 ;;      Locals:         0       0       0       0
  1569 ;;      Temps:          0       0       0       0
  1570 ;;      Totals:         2       0       0       0
  1571 ;;Total ram usage:        2 bytes
  1572 ;; Hardware stack levels used:    1
  1573 ;; Hardware stack levels required when called:    4
  1574 ;; This function calls:
  1575 ;;		Nothing
  1576 ;; This function is called by:
  1577 ;;		_main
  1578 ;; This function uses a non-reentrant model
  1579 ;;
  1580                           
  1581                           
  1582                           ;psect for function _TMR0_SetInterruptHandler
  1583  055D                     _TMR0_SetInterruptHandler:	
  1584                           
  1585                           ;tmr0.c: 134: TMR0_InterruptHandler = InterruptHandler;
  1586                           
  1587                           ;incstack = 0
  1588                           ; Regs used in _TMR0_SetInterruptHandler: [wreg]
  1589  055D  0874               	movf	TMR0_SetInterruptHandler@InterruptHandler+1,w
  1590  055E  00EA               	movwf	_TMR0_InterruptHandler+1
  1591  055F  0873               	movf	TMR0_SetInterruptHandler@InterruptHandler,w
  1592  0560  00E9               	movwf	_TMR0_InterruptHandler
  1593  0561  0008               	return
  1594  0562                     __end_of_TMR0_SetInterruptHandler:	
  1595                           
  1596                           	psect	text2
  1597  0587                     __ptext2:	
  1598 ;; *************** function _SetAllLEDsOff *****************
  1599 ;; Defined at:
  1600 ;;		line 212 in file "main.c"
  1601 ;; Parameters:    Size  Location     Type
  1602 ;;		None
  1603 ;; Auto vars:     Size  Location     Type
  1604 ;;		None
  1605 ;; Return value:  Size  Location     Type
  1606 ;;                  1    wreg      void 
  1607 ;; Registers used:
  1608 ;;		status,2
  1609 ;; Tracked objects:
  1610 ;;		On entry : 1E/1
  1611 ;;		On exit  : 1F/0
  1612 ;;		Unchanged: 0/0
  1613 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1614 ;;      Params:         0       0       0       0
  1615 ;;      Locals:         0       0       0       0
  1616 ;;      Temps:          0       0       0       0
  1617 ;;      Totals:         0       0       0       0
  1618 ;;Total ram usage:        0 bytes
  1619 ;; Hardware stack levels used:    1
  1620 ;; Hardware stack levels required when called:    4
  1621 ;; This function calls:
  1622 ;;		Nothing
  1623 ;; This function is called by:
  1624 ;;		_main
  1625 ;; This function uses a non-reentrant model
  1626 ;;
  1627                           
  1628                           
  1629                           ;psect for function _SetAllLEDsOff
  1630  0587                     _SetAllLEDsOff:	
  1631                           
  1632                           ;main.c: 214: LEDOns = 0;
  1633                           
  1634                           ;incstack = 0
  1635                           ; Regs used in _SetAllLEDsOff: [status,2]
  1636  0587  0020               	movlb	0	; select bank0
  1637  0588  01D0               	clrf	_LEDOns	;volatile
  1638  0589  0008               	return
  1639  058A                     __end_of_SetAllLEDsOff:	
  1640                           
  1641                           	psect	text3
  1642  057B                     __ptext3:	
  1643 ;; *************** function _SYSTEM_Initialize *****************
  1644 ;; Defined at:
  1645 ;;		line 68 in file "mcc_generated_files/mcc.c"
  1646 ;; Parameters:    Size  Location     Type
  1647 ;;		None
  1648 ;; Auto vars:     Size  Location     Type
  1649 ;;		None
  1650 ;; Return value:  Size  Location     Type
  1651 ;;                  1    wreg      void 
  1652 ;; Registers used:
  1653 ;;		wreg, status,2, status,0, pclath, cstack
  1654 ;; Tracked objects:
  1655 ;;		On entry : B1F/0
  1656 ;;		On exit  : B1F/0
  1657 ;;		Unchanged: B00/0
  1658 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1659 ;;      Params:         0       0       0       0
  1660 ;;      Locals:         0       0       0       0
  1661 ;;      Temps:          0       0       0       0
  1662 ;;      Totals:         0       0       0       0
  1663 ;;Total ram usage:        0 bytes
  1664 ;; Hardware stack levels used:    1
  1665 ;; Hardware stack levels required when called:    6
  1666 ;; This function calls:
  1667 ;;		_OSCILLATOR_Initialize
  1668 ;;		_PIN_MANAGER_Initialize
  1669 ;;		_TMR0_Initialize
  1670 ;;		_WDT_Initialize
  1671 ;; This function is called by:
  1672 ;;		_main
  1673 ;; This function uses a non-reentrant model
  1674 ;;
  1675                           
  1676                           
  1677                           ;psect for function _SYSTEM_Initialize
  1678  057B                     _SYSTEM_Initialize:	
  1679                           
  1680                           ;mcc.c: 71: PIN_MANAGER_Initialize();
  1681                           
  1682                           ;incstack = 0
  1683                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  1684  057B  24B0               	fcall	_PIN_MANAGER_Initialize
  1685                           
  1686                           ;mcc.c: 72: OSCILLATOR_Initialize();
  1687  057C  2537               	fcall	_OSCILLATOR_Initialize
  1688                           
  1689                           ;mcc.c: 73: WDT_Initialize();
  1690  057D  257F               	fcall	_WDT_Initialize
  1691                           
  1692                           ;mcc.c: 74: TMR0_Initialize();
  1693  057E  2D03               	ljmp	l2082
  1694  057F                     __end_of_SYSTEM_Initialize:	
  1695                           
  1696                           	psect	text4
  1697  057F                     __ptext4:	
  1698 ;; *************** function _WDT_Initialize *****************
  1699 ;; Defined at:
  1700 ;;		line 87 in file "mcc_generated_files/mcc.c"
  1701 ;; Parameters:    Size  Location     Type
  1702 ;;		None
  1703 ;; Auto vars:     Size  Location     Type
  1704 ;;		None
  1705 ;; Return value:  Size  Location     Type
  1706 ;;                  1    wreg      void 
  1707 ;; Registers used:
  1708 ;;		wreg
  1709 ;; Tracked objects:
  1710 ;;		On entry : B1F/2
  1711 ;;		On exit  : B1F/1
  1712 ;;		Unchanged: B00/0
  1713 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1714 ;;      Params:         0       0       0       0
  1715 ;;      Locals:         0       0       0       0
  1716 ;;      Temps:          0       0       0       0
  1717 ;;      Totals:         0       0       0       0
  1718 ;;Total ram usage:        0 bytes
  1719 ;; Hardware stack levels used:    1
  1720 ;; Hardware stack levels required when called:    4
  1721 ;; This function calls:
  1722 ;;		Nothing
  1723 ;; This function is called by:
  1724 ;;		_SYSTEM_Initialize
  1725 ;; This function uses a non-reentrant model
  1726 ;;
  1727                           
  1728                           
  1729                           ;psect for function _WDT_Initialize
  1730  057F                     _WDT_Initialize:	
  1731                           
  1732                           ;mcc.c: 90: WDTCON = 0x16;
  1733                           
  1734                           ;incstack = 0
  1735                           ; Regs used in _WDT_Initialize: [wreg]
  1736  057F  3016               	movlw	22
  1737  0580  0021               	movlb	1	; select bank1
  1738  0581  0097               	movwf	23	;volatile
  1739  0582  0008               	return
  1740  0583                     __end_of_WDT_Initialize:	
  1741                           
  1742                           	psect	text5
  1743  0503                     __ptext5:	
  1744 ;; *************** function _TMR0_Initialize *****************
  1745 ;; Defined at:
  1746 ;;		line 65 in file "mcc_generated_files/tmr0.c"
  1747 ;; Parameters:    Size  Location     Type
  1748 ;;		None
  1749 ;; Auto vars:     Size  Location     Type
  1750 ;;		None
  1751 ;; Return value:  Size  Location     Type
  1752 ;;                  1    wreg      void 
  1753 ;; Registers used:
  1754 ;;		wreg, status,2
  1755 ;; Tracked objects:
  1756 ;;		On entry : B1F/1
  1757 ;;		On exit  : B1F/0
  1758 ;;		Unchanged: B00/0
  1759 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1760 ;;      Params:         0       0       0       0
  1761 ;;      Locals:         0       0       0       0
  1762 ;;      Temps:          0       0       0       0
  1763 ;;      Totals:         0       0       0       0
  1764 ;;Total ram usage:        0 bytes
  1765 ;; Hardware stack levels used:    1
  1766 ;; Hardware stack levels required when called:    4
  1767 ;; This function calls:
  1768 ;;		Nothing
  1769 ;; This function is called by:
  1770 ;;		_SYSTEM_Initialize
  1771 ;; This function uses a non-reentrant model
  1772 ;;
  1773                           
  1774                           
  1775                           ;psect for function _TMR0_Initialize
  1776  0503                     _TMR0_Initialize:	
  1777  0503                     l2082:	
  1778                           ;incstack = 0
  1779                           ; Regs used in _TMR0_Initialize: [wreg+status,2]
  1780                           
  1781                           
  1782                           ;tmr0.c: 70: OPTION_REG = (uint8_t)((OPTION_REG & 0xC0) | 0xD1 & 0x3F);
  1783  0503  0815               	movf	21,w	;volatile
  1784  0504  39C0               	andlw	192
  1785  0505  3811               	iorlw	17
  1786  0506  0095               	movwf	21	;volatile
  1787                           
  1788                           ;tmr0.c: 73: TMR0 = 0x87;
  1789  0507  3087               	movlw	135
  1790  0508  0020               	movlb	0	; select bank0
  1791  0509  0095               	movwf	21	;volatile
  1792                           
  1793                           ;tmr0.c: 76: timer0ReloadVal= 0x87;
  1794  050A  00EF               	movwf	_timer0ReloadVal	;volatile
  1795                           
  1796                           ;tmr0.c: 79: INTCONbits.TMR0IF = 0;
  1797  050B  110B               	bcf	11,2	;volatile
  1798                           
  1799                           ;tmr0.c: 82: INTCONbits.TMR0IE = 1;
  1800  050C  168B               	bsf	11,5	;volatile
  1801  050D  0008               	return
  1802  050E                     __end_of_TMR0_Initialize:	
  1803                           
  1804                           	psect	text6
  1805  04B0                     __ptext6:	
  1806 ;; *************** function _PIN_MANAGER_Initialize *****************
  1807 ;; Defined at:
  1808 ;;		line 55 in file "mcc_generated_files/pin_manager.c"
  1809 ;; Parameters:    Size  Location     Type
  1810 ;;		None
  1811 ;; Auto vars:     Size  Location     Type
  1812 ;;		None
  1813 ;; Return value:  Size  Location     Type
  1814 ;;                  1    wreg      void 
  1815 ;; Registers used:
  1816 ;;		wreg, status,2, status,0, pclath, cstack
  1817 ;; Tracked objects:
  1818 ;;		On entry : B1F/0
  1819 ;;		On exit  : B1F/0
  1820 ;;		Unchanged: B00/0
  1821 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1822 ;;      Params:         0       0       0       0
  1823 ;;      Locals:         0       0       0       0
  1824 ;;      Temps:          0       0       0       0
  1825 ;;      Totals:         0       0       0       0
  1826 ;;Total ram usage:        0 bytes
  1827 ;; Hardware stack levels used:    1
  1828 ;; Hardware stack levels required when called:    5
  1829 ;; This function calls:
  1830 ;;		_IOCAF2_SetInterruptHandler
  1831 ;;		_IOCAF3_SetInterruptHandler
  1832 ;; This function is called by:
  1833 ;;		_SYSTEM_Initialize
  1834 ;; This function uses a non-reentrant model
  1835 ;;
  1836                           
  1837                           
  1838                           ;psect for function _PIN_MANAGER_Initialize
  1839  04B0                     _PIN_MANAGER_Initialize:	
  1840                           
  1841                           ;pin_manager.c: 60: LATA = 0x00;
  1842                           
  1843                           ;incstack = 0
  1844                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2+status,0+pclath+cstack]
  1845  04B0  0022               	movlb	2	; select bank2
  1846  04B1  018C               	clrf	12	;volatile
  1847                           
  1848                           ;pin_manager.c: 65: TRISA = 0x3F;
  1849  04B2  303F               	movlw	63
  1850  04B3  0021               	movlb	1	; select bank1
  1851  04B4  008C               	movwf	12	;volatile
  1852                           
  1853                           ;pin_manager.c: 70: ANSELA = 0x13;
  1854  04B5  3013               	movlw	19
  1855  04B6  0023               	movlb	3	; select bank3
  1856  04B7  008C               	movwf	12	;volatile
  1857                           
  1858                           ;pin_manager.c: 75: WPUA = 0x0C;
  1859  04B8  300C               	movlw	12
  1860  04B9  0024               	movlb	4	; select bank4
  1861  04BA  008C               	movwf	12	;volatile
  1862                           
  1863                           ;pin_manager.c: 76: OPTION_REGbits.nWPUEN = 0;
  1864  04BB  0021               	movlb	1	; select bank1
  1865  04BC  1395               	bcf	21,7	;volatile
  1866                           
  1867                           ;pin_manager.c: 81: ODCONA = 0x00;
  1868  04BD  0025               	movlb	5	; select bank5
  1869  04BE  018C               	clrf	12	;volatile
  1870                           
  1871                           ;pin_manager.c: 86: APFCON = 0x00;
  1872  04BF  0022               	movlb	2	; select bank2
  1873  04C0  019D               	clrf	29	;volatile
  1874                           
  1875                           ;pin_manager.c: 92: IOCAFbits.IOCAF2 = 0;
  1876  04C1  0027               	movlb	7	; select bank7
  1877  04C2  1113               	bcf	19,2	;volatile
  1878                           
  1879                           ;pin_manager.c: 93: IOCAFbits.IOCAF3 = 0;
  1880  04C3  1193               	bcf	19,3	;volatile
  1881                           
  1882                           ;pin_manager.c: 95: IOCANbits.IOCAN2 = 1;
  1883  04C4  1512               	bsf	18,2	;volatile
  1884                           
  1885                           ;pin_manager.c: 96: IOCANbits.IOCAN3 = 1;
  1886  04C5  1592               	bsf	18,3	;volatile
  1887                           
  1888                           ;pin_manager.c: 98: IOCAPbits.IOCAP2 = 1;
  1889  04C6  1511               	bsf	17,2	;volatile
  1890                           
  1891                           ;pin_manager.c: 99: IOCAPbits.IOCAP3 = 1;
  1892  04C7  1591               	bsf	17,3	;volatile
  1893                           
  1894                           ;pin_manager.c: 102: IOCAF2_SetInterruptHandler(IOCAF2_DefaultInterruptHandler);
  1895  04C8  308B               	movlw	low _IOCAF2_DefaultInterruptHandler
  1896  04C9  00F3               	movwf	IOCAF2_SetInterruptHandler@InterruptHandler
  1897  04CA  3005               	movlw	high _IOCAF2_DefaultInterruptHandler
  1898  04CB  00F4               	movwf	IOCAF2_SetInterruptHandler@InterruptHandler+1
  1899  04CC  254B               	fcall	_IOCAF2_SetInterruptHandler
  1900                           
  1901                           ;pin_manager.c: 103: IOCAF3_SetInterruptHandler(IOCAF3_DefaultInterruptHandler);
  1902  04CD  308A               	movlw	low _IOCAF3_DefaultInterruptHandler
  1903  04CE  00F3               	movwf	IOCAF3_SetInterruptHandler@InterruptHandler
  1904  04CF  3005               	movlw	high _IOCAF3_DefaultInterruptHandler
  1905  04D0  00F4               	movwf	IOCAF3_SetInterruptHandler@InterruptHandler+1
  1906  04D1  2562               	fcall	_IOCAF3_SetInterruptHandler
  1907                           
  1908                           ;pin_manager.c: 106: INTCONbits.IOCIE = 1;
  1909  04D2  158B               	bsf	11,3	;volatile
  1910  04D3  0008               	return
  1911  04D4                     __end_of_PIN_MANAGER_Initialize:	
  1912                           
  1913                           	psect	text7
  1914  0562                     __ptext7:	
  1915 ;; *************** function _IOCAF3_SetInterruptHandler *****************
  1916 ;; Defined at:
  1917 ;;		line 175 in file "mcc_generated_files/pin_manager.c"
  1918 ;; Parameters:    Size  Location     Type
  1919 ;;  InterruptHan    2    3[COMMON] PTR FTN()void 
  1920 ;;		 -> IOCAF3_DefaultInterruptHandler(1), 
  1921 ;; Auto vars:     Size  Location     Type
  1922 ;;		None
  1923 ;; Return value:  Size  Location     Type
  1924 ;;                  1    wreg      void 
  1925 ;; Registers used:
  1926 ;;		wreg
  1927 ;; Tracked objects:
  1928 ;;		On entry : B1F/0
  1929 ;;		On exit  : B1F/0
  1930 ;;		Unchanged: B00/0
  1931 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1932 ;;      Params:         2       0       0       0
  1933 ;;      Locals:         0       0       0       0
  1934 ;;      Temps:          0       0       0       0
  1935 ;;      Totals:         2       0       0       0
  1936 ;;Total ram usage:        2 bytes
  1937 ;; Hardware stack levels used:    1
  1938 ;; Hardware stack levels required when called:    4
  1939 ;; This function calls:
  1940 ;;		Nothing
  1941 ;; This function is called by:
  1942 ;;		_PIN_MANAGER_Initialize
  1943 ;; This function uses a non-reentrant model
  1944 ;;
  1945                           
  1946                           
  1947                           ;psect for function _IOCAF3_SetInterruptHandler
  1948  0562                     _IOCAF3_SetInterruptHandler:	
  1949                           
  1950                           ;pin_manager.c: 176: IOCAF3_InterruptHandler = InterruptHandler;
  1951                           
  1952                           ;incstack = 0
  1953                           ; Regs used in _IOCAF3_SetInterruptHandler: [wreg]
  1954  0562  0874               	movf	IOCAF3_SetInterruptHandler@InterruptHandler+1,w
  1955  0563  00EC               	movwf	_IOCAF3_InterruptHandler+1
  1956  0564  0873               	movf	IOCAF3_SetInterruptHandler@InterruptHandler,w
  1957  0565  00EB               	movwf	_IOCAF3_InterruptHandler
  1958  0566  0008               	return
  1959  0567                     __end_of_IOCAF3_SetInterruptHandler:	
  1960                           
  1961                           	psect	text8
  1962  054B                     __ptext8:	
  1963 ;; *************** function _IOCAF2_SetInterruptHandler *****************
  1964 ;; Defined at:
  1965 ;;		line 145 in file "mcc_generated_files/pin_manager.c"
  1966 ;; Parameters:    Size  Location     Type
  1967 ;;  InterruptHan    2    3[COMMON] PTR FTN()void 
  1968 ;;		 -> IOCAF2_DefaultInterruptHandler(1), 
  1969 ;; Auto vars:     Size  Location     Type
  1970 ;;		None
  1971 ;; Return value:  Size  Location     Type
  1972 ;;                  1    wreg      void 
  1973 ;; Registers used:
  1974 ;;		wreg
  1975 ;; Tracked objects:
  1976 ;;		On entry : B1F/7
  1977 ;;		On exit  : B1F/0
  1978 ;;		Unchanged: B00/0
  1979 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1980 ;;      Params:         2       0       0       0
  1981 ;;      Locals:         0       0       0       0
  1982 ;;      Temps:          0       0       0       0
  1983 ;;      Totals:         2       0       0       0
  1984 ;;Total ram usage:        2 bytes
  1985 ;; Hardware stack levels used:    1
  1986 ;; Hardware stack levels required when called:    4
  1987 ;; This function calls:
  1988 ;;		Nothing
  1989 ;; This function is called by:
  1990 ;;		_PIN_MANAGER_Initialize
  1991 ;; This function uses a non-reentrant model
  1992 ;;
  1993                           
  1994                           
  1995                           ;psect for function _IOCAF2_SetInterruptHandler
  1996  054B                     _IOCAF2_SetInterruptHandler:	
  1997                           
  1998                           ;pin_manager.c: 146: IOCAF2_InterruptHandler = InterruptHandler;
  1999                           
  2000                           ;incstack = 0
  2001                           ; Regs used in _IOCAF2_SetInterruptHandler: [wreg]
  2002  054B  0874               	movf	IOCAF2_SetInterruptHandler@InterruptHandler+1,w
  2003  054C  0020               	movlb	0	; select bank0
  2004  054D  00EE               	movwf	_IOCAF2_InterruptHandler+1
  2005  054E  0873               	movf	IOCAF2_SetInterruptHandler@InterruptHandler,w
  2006  054F  00ED               	movwf	_IOCAF2_InterruptHandler
  2007  0550  0008               	return
  2008  0551                     __end_of_IOCAF2_SetInterruptHandler:	
  2009                           
  2010                           	psect	text9
  2011  0537                     __ptext9:	
  2012 ;; *************** function _OSCILLATOR_Initialize *****************
  2013 ;; Defined at:
  2014 ;;		line 77 in file "mcc_generated_files/mcc.c"
  2015 ;; Parameters:    Size  Location     Type
  2016 ;;		None
  2017 ;; Auto vars:     Size  Location     Type
  2018 ;;		None
  2019 ;; Return value:  Size  Location     Type
  2020 ;;                  1    wreg      void 
  2021 ;; Registers used:
  2022 ;;		wreg, status,2
  2023 ;; Tracked objects:
  2024 ;;		On entry : B1F/0
  2025 ;;		On exit  : B1F/2
  2026 ;;		Unchanged: B00/0
  2027 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2028 ;;      Params:         0       0       0       0
  2029 ;;      Locals:         0       0       0       0
  2030 ;;      Temps:          0       0       0       0
  2031 ;;      Totals:         0       0       0       0
  2032 ;;Total ram usage:        0 bytes
  2033 ;; Hardware stack levels used:    1
  2034 ;; Hardware stack levels required when called:    4
  2035 ;; This function calls:
  2036 ;;		Nothing
  2037 ;; This function is called by:
  2038 ;;		_SYSTEM_Initialize
  2039 ;; This function uses a non-reentrant model
  2040 ;;
  2041                           
  2042                           
  2043                           ;psect for function _OSCILLATOR_Initialize
  2044  0537                     _OSCILLATOR_Initialize:	
  2045                           
  2046                           ;mcc.c: 80: OSCCON = 0x78;
  2047                           
  2048                           ;incstack = 0
  2049                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  2050  0537  3078               	movlw	120
  2051  0538  0021               	movlb	1	; select bank1
  2052  0539  0099               	movwf	25	;volatile
  2053                           
  2054                           ;mcc.c: 82: OSCTUNE = 0x00;
  2055  053A  0198               	clrf	24	;volatile
  2056                           
  2057                           ;mcc.c: 84: BORCON = 0x00;
  2058  053B  0022               	movlb	2	; select bank2
  2059  053C  0196               	clrf	22	;volatile
  2060  053D  0008               	return
  2061  053E                     __end_of_OSCILLATOR_Initialize:	
  2062                           
  2063                           	psect	text10
  2064  028A                     __ptext10:	
  2065 ;; *************** function _RunRightFlash *****************
  2066 ;; Defined at:
  2067 ;;		line 303 in file "main.c"
  2068 ;; Parameters:    Size  Location     Type
  2069 ;;		None
  2070 ;; Auto vars:     Size  Location     Type
  2071 ;;		None
  2072 ;; Return value:  Size  Location     Type
  2073 ;;                  1    wreg      void 
  2074 ;; Registers used:
  2075 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2076 ;; Tracked objects:
  2077 ;;		On entry : 1F/0
  2078 ;;		On exit  : 1F/0
  2079 ;;		Unchanged: 0/0
  2080 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2081 ;;      Params:         0       0       0       0
  2082 ;;      Locals:         0       0       0       0
  2083 ;;      Temps:          0       0       0       0
  2084 ;;      Totals:         0       0       0       0
  2085 ;;Total ram usage:        0 bytes
  2086 ;; Hardware stack levels used:    1
  2087 ;; Hardware stack levels required when called:    5
  2088 ;; This function calls:
  2089 ;;		_RightButtonPressed
  2090 ;;		_SetLEDOff
  2091 ;;		_SetLEDOn
  2092 ;;		___lwdiv
  2093 ;;		___wmul
  2094 ;; This function is called by:
  2095 ;;		_main
  2096 ;; This function uses a non-reentrant model
  2097 ;;
  2098                           
  2099                           
  2100                           ;psect for function _RunRightFlash
  2101  028A                     _RunRightFlash:	
  2102                           
  2103                           ;main.c: 305: static uint16_t right_delay = 250;
  2104                           ;main.c: 307: if (PatternDelay[0] == 0)
  2105                           
  2106                           ;incstack = 0
  2107                           ; Regs used in _RunRightFlash: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2108  028A  0820               	movf	_PatternDelay,w	;volatile
  2109  028B  0421               	iorwf	_PatternDelay+1,w	;volatile
  2110  028C  1D03               	btfss	3,2
  2111  028D  0008               	return
  2112  028E  2AEE               	goto	l2192
  2113  028F                     l2164:	
  2114                           
  2115                           ;main.c: 313: right_delay = 250;
  2116  028F  30FA               	movlw	250
  2117  0290  00DC               	movwf	RunRightFlash@right_delay
  2118  0291  01DD               	clrf	RunRightFlash@right_delay+1
  2119                           
  2120                           ;main.c: 314: break;
  2121  0292  2AF8               	goto	l2194
  2122  0293                     l2166:	
  2123                           
  2124                           ;main.c: 317: SetLEDOn(0x01);
  2125  0293  3001               	movlw	1
  2126  0294  2583               	fcall	_SetLEDOn
  2127                           
  2128                           ;main.c: 318: SetLEDOff(0x02);
  2129  0295  3002               	movlw	2
  2130  0296  2567               	fcall	_SetLEDOff
  2131                           
  2132                           ;main.c: 319: SetLEDOff(0x04);
  2133  0297  3004               	movlw	4
  2134  0298  2567               	fcall	_SetLEDOff
  2135                           
  2136                           ;main.c: 320: SetLEDOff(0x08);
  2137  0299  3008               	movlw	8
  2138  029A  2567               	fcall	_SetLEDOff
  2139                           
  2140                           ;main.c: 321: break;
  2141  029B  2AF8               	goto	l2194
  2142  029C                     l2168:	
  2143                           
  2144                           ;main.c: 324: SetLEDOff(0x01);
  2145  029C  3001               	movlw	1
  2146  029D  2567               	fcall	_SetLEDOff
  2147                           
  2148                           ;main.c: 325: SetLEDOn(0x02);
  2149  029E  3002               	movlw	2
  2150  029F  2583               	fcall	_SetLEDOn
  2151                           
  2152                           ;main.c: 326: SetLEDOff(0x04);
  2153  02A0  3004               	movlw	4
  2154  02A1  2567               	fcall	_SetLEDOff
  2155                           
  2156                           ;main.c: 327: SetLEDOff(0x08);
  2157  02A2  3008               	movlw	8
  2158  02A3  2567               	fcall	_SetLEDOff
  2159                           
  2160                           ;main.c: 328: break;
  2161  02A4  2AF8               	goto	l2194
  2162  02A5                     l2170:	
  2163                           
  2164                           ;main.c: 331: SetLEDOff(0x01);
  2165  02A5  3001               	movlw	1
  2166  02A6  2567               	fcall	_SetLEDOff
  2167                           
  2168                           ;main.c: 332: SetLEDOff(0x02);
  2169  02A7  3002               	movlw	2
  2170  02A8  2567               	fcall	_SetLEDOff
  2171                           
  2172                           ;main.c: 333: SetLEDOn(0x04);
  2173  02A9  3004               	movlw	4
  2174  02AA  2583               	fcall	_SetLEDOn
  2175                           
  2176                           ;main.c: 334: SetLEDOff(0x08);
  2177  02AB  3008               	movlw	8
  2178  02AC  2567               	fcall	_SetLEDOff
  2179                           
  2180                           ;main.c: 335: break;
  2181  02AD  2AF8               	goto	l2194
  2182  02AE                     l2172:	
  2183                           
  2184                           ;main.c: 338: SetLEDOff(0x01);
  2185  02AE  3001               	movlw	1
  2186  02AF  2567               	fcall	_SetLEDOff
  2187                           
  2188                           ;main.c: 339: SetLEDOff(0x02);
  2189  02B0  3002               	movlw	2
  2190  02B1  2567               	fcall	_SetLEDOff
  2191                           
  2192                           ;main.c: 340: SetLEDOff(0x04);
  2193  02B2  3004               	movlw	4
  2194  02B3  2567               	fcall	_SetLEDOff
  2195                           
  2196                           ;main.c: 341: SetLEDOn(0x08);
  2197  02B4  3008               	movlw	8
  2198  02B5  2583               	fcall	_SetLEDOn
  2199                           
  2200                           ;main.c: 342: break;
  2201  02B6  2AF8               	goto	l2194
  2202  02B7                     l2174:	
  2203                           
  2204                           ;main.c: 345: SetLEDOff(0x01);
  2205  02B7  3001               	movlw	1
  2206  02B8  2567               	fcall	_SetLEDOff
  2207                           
  2208                           ;main.c: 346: SetLEDOff(0x02);
  2209  02B9  3002               	movlw	2
  2210  02BA  2567               	fcall	_SetLEDOff
  2211                           
  2212                           ;main.c: 347: SetLEDOn(0x04);
  2213  02BB  3004               	movlw	4
  2214  02BC  2583               	fcall	_SetLEDOn
  2215                           
  2216                           ;main.c: 348: SetLEDOff(0x08);
  2217  02BD  3008               	movlw	8
  2218  02BE  2567               	fcall	_SetLEDOff
  2219                           
  2220                           ;main.c: 349: break;
  2221  02BF  2AF8               	goto	l2194
  2222  02C0                     l2176:	
  2223                           
  2224                           ;main.c: 352: SetLEDOff(0x01);
  2225  02C0  3001               	movlw	1
  2226  02C1  2567               	fcall	_SetLEDOff
  2227                           
  2228                           ;main.c: 353: SetLEDOn(0x02);
  2229  02C2  3002               	movlw	2
  2230  02C3  2583               	fcall	_SetLEDOn
  2231                           
  2232                           ;main.c: 354: SetLEDOff(0x04);
  2233  02C4  3004               	movlw	4
  2234  02C5  2567               	fcall	_SetLEDOff
  2235                           
  2236                           ;main.c: 355: SetLEDOff(0x08);
  2237  02C6  3008               	movlw	8
  2238  02C7  2567               	fcall	_SetLEDOff
  2239                           
  2240                           ;main.c: 356: break;
  2241  02C8  2AF8               	goto	l2194
  2242  02C9                     l2178:	
  2243                           
  2244                           ;main.c: 359: SetLEDOn(0x01);
  2245  02C9  3001               	movlw	1
  2246  02CA  2583               	fcall	_SetLEDOn
  2247                           
  2248                           ;main.c: 360: SetLEDOff(0x02);
  2249  02CB  3002               	movlw	2
  2250  02CC  2567               	fcall	_SetLEDOff
  2251                           
  2252                           ;main.c: 361: SetLEDOff(0x04);
  2253  02CD  3004               	movlw	4
  2254  02CE  2567               	fcall	_SetLEDOff
  2255                           
  2256                           ;main.c: 362: SetLEDOff(0x08);
  2257  02CF  3008               	movlw	8
  2258  02D0  2567               	fcall	_SetLEDOff
  2259                           
  2260                           ;main.c: 363: break;
  2261  02D1  2AF8               	goto	l2194
  2262  02D2                     l2180:	
  2263                           
  2264                           ;main.c: 366: SetLEDOn(0x01);
  2265  02D2  3001               	movlw	1
  2266  02D3  2583               	fcall	_SetLEDOn
  2267                           
  2268                           ;main.c: 367: SetLEDOn(0x02);
  2269  02D4  3002               	movlw	2
  2270  02D5  2583               	fcall	_SetLEDOn
  2271                           
  2272                           ;main.c: 368: SetLEDOn(0x04);
  2273  02D6  3004               	movlw	4
  2274  02D7  2583               	fcall	_SetLEDOn
  2275                           
  2276                           ;main.c: 369: SetLEDOn(0x08);
  2277  02D8  3008               	movlw	8
  2278  02D9  2583               	fcall	_SetLEDOn
  2279                           
  2280                           ;main.c: 370: break;
  2281  02DA  2AF8               	goto	l2194
  2282  02DB                     l2182:	
  2283                           
  2284                           ;main.c: 373: SetLEDOff(0x01);
  2285  02DB  3001               	movlw	1
  2286  02DC  2567               	fcall	_SetLEDOff
  2287                           
  2288                           ;main.c: 374: SetLEDOff(0x02);
  2289  02DD  3002               	movlw	2
  2290  02DE  2567               	fcall	_SetLEDOff
  2291                           
  2292                           ;main.c: 375: SetLEDOff(0x04);
  2293  02DF  3004               	movlw	4
  2294  02E0  2567               	fcall	_SetLEDOff
  2295                           
  2296                           ;main.c: 376: SetLEDOff(0x08);
  2297  02E1  3008               	movlw	8
  2298  02E2  2567               	fcall	_SetLEDOff
  2299                           
  2300                           ;main.c: 377: break;
  2301  02E3  2AF8               	goto	l2194
  2302  02E4                     l2184:	
  2303                           
  2304                           ;main.c: 380: SetLEDOff(0x01);
  2305  02E4  3001               	movlw	1
  2306  02E5  2567               	fcall	_SetLEDOff
  2307                           
  2308                           ;main.c: 381: SetLEDOff(0x02);
  2309  02E6  3002               	movlw	2
  2310  02E7  2567               	fcall	_SetLEDOff
  2311                           
  2312                           ;main.c: 382: SetLEDOff(0x04);
  2313  02E8  3004               	movlw	4
  2314  02E9  2567               	fcall	_SetLEDOff
  2315                           
  2316                           ;main.c: 383: SetLEDOff(0x08);
  2317  02EA  3008               	movlw	8
  2318  02EB  2567               	fcall	_SetLEDOff
  2319  02EC                     l2188:	
  2320                           ;main.c: 385: break;
  2321                           
  2322                           ;main.c: 384: PatternState[0] = 0;
  2323                           
  2324                           
  2325                           ;main.c: 388: PatternState[0] = 0;
  2326  02EC  01B0               	clrf	_PatternState	;volatile
  2327                           
  2328                           ;main.c: 389: break;
  2329  02ED  2AF8               	goto	l2194
  2330  02EE                     l2192:	
  2331  02EE  0830               	movf	_PatternState,w	;volatile
  2332                           
  2333                           ; Switch size 1, requested type "space"
  2334                           ; Number of cases is 11, Range of values is 0 to 10
  2335                           ; switch strategies available:
  2336                           ; Name         Instructions Cycles
  2337                           ; direct_byte           28     6 (fixed)
  2338                           ; simple_byte           34    18 (average)
  2339                           ; jumptable            260     6 (fixed)
  2340                           ;	Chosen strategy is direct_byte
  2341  02EF  0084               	movwf	4
  2342  02F0  300B               	movlw	11
  2343  02F1  0204               	subwf	4,w
  2344  02F2  1803               	skipnc
  2345  02F3  2AEC               	goto	l2188
  2346  02F4  3185               	movlp	high S2594
  2347  02F5  300E               	movlw	low S2594
  2348  02F6  0704               	addwf	4,w
  2349  02F7  0082               	movwf	2
  2350  02F8                     l2194:	
  2351                           
  2352                           ;main.c: 393: if (PatternState[0] != 0)
  2353  02F8  0830               	movf	_PatternState,w	;volatile
  2354  02F9  1903               	btfsc	3,2
  2355  02FA  0008               	return
  2356                           
  2357                           ;main.c: 394: {
  2358                           ;main.c: 396: if (PatternState[0] == 7)
  2359  02FB  3007               	movlw	7
  2360  02FC  0630               	xorwf	_PatternState,w	;volatile
  2361  02FD  1D03               	btfss	3,2
  2362  02FE  2B1B               	goto	l2210
  2363                           
  2364                           ;main.c: 397: {
  2365                           ;main.c: 399: if (RightButtonPressed())
  2366  02FF  256C               	fcall	_RightButtonPressed
  2367  0300  3A00               	xorlw	0
  2368  0301  1903               	skipnz
  2369  0302  2B19               	goto	l2208
  2370                           
  2371                           ;main.c: 400: {
  2372                           ;main.c: 402: if (right_delay > 3)
  2373  0303  3000               	movlw	0
  2374  0304  025D               	subwf	RunRightFlash@right_delay+1,w
  2375  0305  3004               	movlw	4
  2376  0306  1903               	skipnz
  2377  0307  025C               	subwf	RunRightFlash@right_delay,w
  2378  0308  1C03               	skipc
  2379  0309  2B17               	goto	l2206
  2380                           
  2381                           ;main.c: 403: {
  2382                           ;main.c: 406: right_delay = ((right_delay * 80)/100);
  2383  030A  2344               	fcall	PL4	;call to abstracted procedure
  2384  030B  3050               	movlw	80
  2385  030C  00F5               	movwf	___wmul@multiplicand
  2386  030D  01F6               	clrf	___wmul@multiplicand+1
  2387  030E  24D4               	fcall	___wmul
  2388  030F  2285               	fcall	PL6	;call to abstracted procedure
  2389  0310  248B               	fcall	___lwdiv
  2390  0311  0862               	movf	?___lwdiv+1,w
  2391  0312  00DD               	movwf	RunRightFlash@right_delay+1
  2392  0313  0861               	movf	?___lwdiv,w
  2393  0314  00DC               	movwf	RunRightFlash@right_delay
  2394                           
  2395                           ;main.c: 407: PatternState[0] = 2;
  2396  0315  3002               	movlw	2
  2397  0316  2B36               	goto	L3
  2398  0317                     l2206:	
  2399                           ;main.c: 408: }
  2400                           
  2401                           
  2402                           ;main.c: 409: else
  2403                           ;main.c: 410: {
  2404                           ;main.c: 413: PatternState[0] = 8;
  2405  0317  3008               	movlw	8
  2406  0318  2B39               	goto	L2
  2407  0319                     l2208:	
  2408                           ;main.c: 414: right_delay = 250;
  2409                           
  2410                           
  2411                           ;main.c: 417: else
  2412                           ;main.c: 418: {
  2413                           ;main.c: 420: PatternState[0] = 10;
  2414  0319  300A               	movlw	10
  2415  031A  2B36               	goto	L3
  2416  031B                     l2210:	
  2417                           
  2418                           ;main.c: 424: else if ((PatternState[0] == 9) && RightButtonPressed())
  2419  031B  3009               	movlw	9
  2420  031C  0630               	xorwf	_PatternState,w	;volatile
  2421  031D  1D03               	btfss	3,2
  2422  031E  2B3E               	goto	l2222
  2423  031F  256C               	fcall	_RightButtonPressed
  2424  0320  3A00               	xorlw	0
  2425  0321  1903               	skipnz
  2426  0322  2B3E               	goto	l2222
  2427                           
  2428                           ;main.c: 425: {
  2429                           ;main.c: 427: if (right_delay > 10)
  2430  0323  3000               	movlw	0
  2431  0324  025D               	subwf	RunRightFlash@right_delay+1,w
  2432  0325  300B               	movlw	11
  2433  0326  1903               	skipnz
  2434  0327  025C               	subwf	RunRightFlash@right_delay,w
  2435  0328  1C03               	skipc
  2436  0329  2B38               	goto	l2220
  2437                           
  2438                           ;main.c: 428: {
  2439                           ;main.c: 430: right_delay = ((right_delay * 95)/100);
  2440  032A  2344               	fcall	PL4	;call to abstracted procedure
  2441  032B  305F               	movlw	95
  2442  032C  00F5               	movwf	___wmul@multiplicand
  2443  032D  01F6               	clrf	___wmul@multiplicand+1
  2444  032E  24D4               	fcall	___wmul
  2445  032F  2285               	fcall	PL6	;call to abstracted procedure
  2446  0330  248B               	fcall	___lwdiv
  2447  0331  0862               	movf	?___lwdiv+1,w
  2448  0332  00DD               	movwf	RunRightFlash@right_delay+1
  2449  0333  0861               	movf	?___lwdiv,w
  2450  0334  00DC               	movwf	RunRightFlash@right_delay
  2451                           
  2452                           ;main.c: 431: PatternState[0] = 8;
  2453  0335  3008               	movlw	8
  2454  0336                     L3:	
  2455  0336  00B0               	movwf	_PatternState	;volatile
  2456                           
  2457                           ;main.c: 432: }
  2458  0337  2B3F               	goto	l2224
  2459  0338                     l2220:	
  2460                           
  2461                           ;main.c: 433: else
  2462                           ;main.c: 434: {
  2463                           ;main.c: 437: PatternState[0] = 1;
  2464  0338  3001               	movlw	1
  2465  0339                     L2:	
  2466  0339  00B0               	movwf	_PatternState	;volatile
  2467                           
  2468                           ;main.c: 438: right_delay = 250;
  2469  033A  30FA               	movlw	250
  2470  033B  00DC               	movwf	RunRightFlash@right_delay
  2471  033C  01DD               	clrf	RunRightFlash@right_delay+1
  2472  033D  2B3F               	goto	l2224
  2473  033E                     l2222:	
  2474                           
  2475                           ;main.c: 441: else
  2476                           ;main.c: 442: {
  2477                           ;main.c: 444: PatternState[0]++;
  2478  033E  0AB0               	incf	_PatternState,f	;volatile
  2479  033F                     l2224:	
  2480                           
  2481                           ;main.c: 445: }
  2482                           ;main.c: 446: PatternDelay[0] = right_delay;
  2483  033F  085D               	movf	RunRightFlash@right_delay+1,w
  2484  0340  00A1               	movwf	_PatternDelay+1	;volatile
  2485  0341  085C               	movf	RunRightFlash@right_delay,w
  2486  0342  00A0               	movwf	_PatternDelay	;volatile
  2487  0343  0008               	return
  2488  0344                     __end_of_RunRightFlash:	
  2489  0344                     PL4:	
  2490  0344  3064               	movlw	100
  2491  0345  00E1               	movwf	___lwdiv@divisor
  2492  0346  01E2               	clrf	___lwdiv@divisor+1
  2493  0347  085D               	movf	RunRightFlash@right_delay+1,w
  2494  0348  00F4               	movwf	___wmul@multiplier+1
  2495  0349  085C               	movf	RunRightFlash@right_delay,w
  2496  034A  00F3               	movwf	___wmul@multiplier
  2497  034B  0008               	return
  2498  034C                     __end_ofPL4:	
  2499                           
  2500                           	psect	swtext1
  2501  050E                     __pswtext1:	
  2502  050E                     S2594:	
  2503  050E  2A8F               	ljmp	l2164
  2504  050F  2A93               	ljmp	l2166
  2505  0510  2A9C               	ljmp	l2168
  2506  0511  2AA5               	ljmp	l2170
  2507  0512  2AAE               	ljmp	l2172
  2508  0513  2AB7               	ljmp	l2174
  2509  0514  2AC0               	ljmp	l2176
  2510  0515  2AC9               	ljmp	l2178
  2511  0516  2AD2               	ljmp	l2180
  2512  0517  2ADB               	ljmp	l2182
  2513  0518  2AE4               	ljmp	l2184
  2514                           
  2515                           	psect	text11
  2516  01C3                     __ptext11:	
  2517 ;; *************** function _RunLeftFlash *****************
  2518 ;; Defined at:
  2519 ;;		line 451 in file "main.c"
  2520 ;; Parameters:    Size  Location     Type
  2521 ;;		None
  2522 ;; Auto vars:     Size  Location     Type
  2523 ;;		None
  2524 ;; Return value:  Size  Location     Type
  2525 ;;                  1    wreg      void 
  2526 ;; Registers used:
  2527 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2528 ;; Tracked objects:
  2529 ;;		On entry : 1F/0
  2530 ;;		On exit  : 1F/0
  2531 ;;		Unchanged: 0/0
  2532 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2533 ;;      Params:         0       0       0       0
  2534 ;;      Locals:         0       0       0       0
  2535 ;;      Temps:          0       0       0       0
  2536 ;;      Totals:         0       0       0       0
  2537 ;;Total ram usage:        0 bytes
  2538 ;; Hardware stack levels used:    1
  2539 ;; Hardware stack levels required when called:    5
  2540 ;; This function calls:
  2541 ;;		_LeftButtonPressed
  2542 ;;		_SetLEDOff
  2543 ;;		_SetLEDOn
  2544 ;;		___lwdiv
  2545 ;;		___wmul
  2546 ;; This function is called by:
  2547 ;;		_main
  2548 ;; This function uses a non-reentrant model
  2549 ;;
  2550                           
  2551                           
  2552                           ;psect for function _RunLeftFlash
  2553  01C3                     _RunLeftFlash:	
  2554                           
  2555                           ;main.c: 453: static uint16_t left_delay = 250;
  2556                           ;main.c: 455: if (PatternDelay[1] == 0)
  2557                           
  2558                           ;incstack = 0
  2559                           ; Regs used in _RunLeftFlash: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2560  01C3  0822               	movf	_PatternDelay+2,w	;volatile
  2561  01C4  0423               	iorwf	_PatternDelay+3,w	;volatile
  2562  01C5  1D03               	btfss	3,2
  2563  01C6  0008               	return
  2564  01C7  2A27               	goto	l2262
  2565  01C8                     l2234:	
  2566                           
  2567                           ;main.c: 461: left_delay = 250;
  2568  01C8  30FA               	movlw	250
  2569  01C9  00DA               	movwf	RunLeftFlash@left_delay
  2570  01CA  01DB               	clrf	RunLeftFlash@left_delay+1
  2571                           
  2572                           ;main.c: 462: break;
  2573  01CB  2A31               	goto	l2264
  2574  01CC                     l2236:	
  2575                           
  2576                           ;main.c: 465: SetLEDOn(0x80);
  2577  01CC  3080               	movlw	128
  2578  01CD  2583               	fcall	_SetLEDOn
  2579                           
  2580                           ;main.c: 466: SetLEDOff(0x40);
  2581  01CE  3040               	movlw	64
  2582  01CF  2567               	fcall	_SetLEDOff
  2583                           
  2584                           ;main.c: 467: SetLEDOff(0x20);
  2585  01D0  3020               	movlw	32
  2586  01D1  2567               	fcall	_SetLEDOff
  2587                           
  2588                           ;main.c: 468: SetLEDOff(0x10);
  2589  01D2  3010               	movlw	16
  2590  01D3  2567               	fcall	_SetLEDOff
  2591                           
  2592                           ;main.c: 469: break;
  2593  01D4  2A31               	goto	l2264
  2594  01D5                     l2238:	
  2595                           
  2596                           ;main.c: 472: SetLEDOff(0x80);
  2597  01D5  3080               	movlw	128
  2598  01D6  2567               	fcall	_SetLEDOff
  2599                           
  2600                           ;main.c: 473: SetLEDOn(0x40);
  2601  01D7  3040               	movlw	64
  2602  01D8  2583               	fcall	_SetLEDOn
  2603                           
  2604                           ;main.c: 474: SetLEDOff(0x20);
  2605  01D9  3020               	movlw	32
  2606  01DA  2567               	fcall	_SetLEDOff
  2607                           
  2608                           ;main.c: 475: SetLEDOff(0x10);
  2609  01DB  3010               	movlw	16
  2610  01DC  2567               	fcall	_SetLEDOff
  2611                           
  2612                           ;main.c: 476: break;
  2613  01DD  2A31               	goto	l2264
  2614  01DE                     l2240:	
  2615                           
  2616                           ;main.c: 479: SetLEDOff(0x80);
  2617  01DE  3080               	movlw	128
  2618  01DF  2567               	fcall	_SetLEDOff
  2619                           
  2620                           ;main.c: 480: SetLEDOff(0x40);
  2621  01E0  3040               	movlw	64
  2622  01E1  2567               	fcall	_SetLEDOff
  2623                           
  2624                           ;main.c: 481: SetLEDOn(0x20);
  2625  01E2  3020               	movlw	32
  2626  01E3  2583               	fcall	_SetLEDOn
  2627                           
  2628                           ;main.c: 482: SetLEDOff(0x10);
  2629  01E4  3010               	movlw	16
  2630  01E5  2567               	fcall	_SetLEDOff
  2631                           
  2632                           ;main.c: 483: break;
  2633  01E6  2A31               	goto	l2264
  2634  01E7                     l2242:	
  2635                           
  2636                           ;main.c: 486: SetLEDOff(0x80);
  2637  01E7  3080               	movlw	128
  2638  01E8  2567               	fcall	_SetLEDOff
  2639                           
  2640                           ;main.c: 487: SetLEDOff(0x40);
  2641  01E9  3040               	movlw	64
  2642  01EA  2567               	fcall	_SetLEDOff
  2643                           
  2644                           ;main.c: 488: SetLEDOff(0x20);
  2645  01EB  3020               	movlw	32
  2646  01EC  2567               	fcall	_SetLEDOff
  2647                           
  2648                           ;main.c: 489: SetLEDOn(0x10);
  2649  01ED  3010               	movlw	16
  2650  01EE  2583               	fcall	_SetLEDOn
  2651                           
  2652                           ;main.c: 490: break;
  2653  01EF  2A31               	goto	l2264
  2654  01F0                     l2244:	
  2655                           
  2656                           ;main.c: 493: SetLEDOff(0x80);
  2657  01F0  3080               	movlw	128
  2658  01F1  2567               	fcall	_SetLEDOff
  2659                           
  2660                           ;main.c: 494: SetLEDOff(0x40);
  2661  01F2  3040               	movlw	64
  2662  01F3  2567               	fcall	_SetLEDOff
  2663                           
  2664                           ;main.c: 495: SetLEDOn(0x20);
  2665  01F4  3020               	movlw	32
  2666  01F5  2583               	fcall	_SetLEDOn
  2667                           
  2668                           ;main.c: 496: SetLEDOff(0x10);
  2669  01F6  3010               	movlw	16
  2670  01F7  2567               	fcall	_SetLEDOff
  2671                           
  2672                           ;main.c: 497: break;
  2673  01F8  2A31               	goto	l2264
  2674  01F9                     l2246:	
  2675                           
  2676                           ;main.c: 500: SetLEDOff(0x80);
  2677  01F9  3080               	movlw	128
  2678  01FA  2567               	fcall	_SetLEDOff
  2679                           
  2680                           ;main.c: 501: SetLEDOn(0x40);
  2681  01FB  3040               	movlw	64
  2682  01FC  2583               	fcall	_SetLEDOn
  2683                           
  2684                           ;main.c: 502: SetLEDOff(0x20);
  2685  01FD  3020               	movlw	32
  2686  01FE  2567               	fcall	_SetLEDOff
  2687                           
  2688                           ;main.c: 503: SetLEDOff(0x10);
  2689  01FF  3010               	movlw	16
  2690  0200  2567               	fcall	_SetLEDOff
  2691                           
  2692                           ;main.c: 504: break;
  2693  0201  2A31               	goto	l2264
  2694  0202                     l2248:	
  2695                           
  2696                           ;main.c: 507: SetLEDOn(0x80);
  2697  0202  3080               	movlw	128
  2698  0203  2583               	fcall	_SetLEDOn
  2699                           
  2700                           ;main.c: 508: SetLEDOff(0x40);
  2701  0204  3040               	movlw	64
  2702  0205  2567               	fcall	_SetLEDOff
  2703                           
  2704                           ;main.c: 509: SetLEDOff(0x20);
  2705  0206  3020               	movlw	32
  2706  0207  2567               	fcall	_SetLEDOff
  2707                           
  2708                           ;main.c: 510: SetLEDOff(0x10);
  2709  0208  3010               	movlw	16
  2710  0209  2567               	fcall	_SetLEDOff
  2711                           
  2712                           ;main.c: 511: break;
  2713  020A  2A31               	goto	l2264
  2714  020B                     l2250:	
  2715                           
  2716                           ;main.c: 514: SetLEDOn(0x80);
  2717  020B  3080               	movlw	128
  2718  020C  2583               	fcall	_SetLEDOn
  2719                           
  2720                           ;main.c: 515: SetLEDOn(0x40);
  2721  020D  3040               	movlw	64
  2722  020E  2583               	fcall	_SetLEDOn
  2723                           
  2724                           ;main.c: 516: SetLEDOn(0x20);
  2725  020F  3020               	movlw	32
  2726  0210  2583               	fcall	_SetLEDOn
  2727                           
  2728                           ;main.c: 517: SetLEDOn(0x10);
  2729  0211  3010               	movlw	16
  2730  0212  2583               	fcall	_SetLEDOn
  2731                           
  2732                           ;main.c: 518: break;
  2733  0213  2A31               	goto	l2264
  2734  0214                     l2252:	
  2735                           
  2736                           ;main.c: 521: SetLEDOff(0x80);
  2737  0214  3080               	movlw	128
  2738  0215  2567               	fcall	_SetLEDOff
  2739                           
  2740                           ;main.c: 522: SetLEDOff(0x40);
  2741  0216  3040               	movlw	64
  2742  0217  2567               	fcall	_SetLEDOff
  2743                           
  2744                           ;main.c: 523: SetLEDOff(0x20);
  2745  0218  3020               	movlw	32
  2746  0219  2567               	fcall	_SetLEDOff
  2747                           
  2748                           ;main.c: 524: SetLEDOff(0x10);
  2749  021A  3010               	movlw	16
  2750  021B  2567               	fcall	_SetLEDOff
  2751                           
  2752                           ;main.c: 525: break;
  2753  021C  2A31               	goto	l2264
  2754  021D                     l2254:	
  2755                           
  2756                           ;main.c: 528: SetLEDOff(0x80);
  2757  021D  3080               	movlw	128
  2758  021E  2567               	fcall	_SetLEDOff
  2759                           
  2760                           ;main.c: 529: SetLEDOff(0x40);
  2761  021F  3040               	movlw	64
  2762  0220  2567               	fcall	_SetLEDOff
  2763                           
  2764                           ;main.c: 530: SetLEDOff(0x20);
  2765  0221  3020               	movlw	32
  2766  0222  2567               	fcall	_SetLEDOff
  2767                           
  2768                           ;main.c: 531: SetLEDOff(0x10);
  2769  0223  3010               	movlw	16
  2770  0224  2567               	fcall	_SetLEDOff
  2771  0225                     l2256:	
  2772                           
  2773                           ;main.c: 532: PatternState[1] = 0;
  2774  0225  01B1               	clrf	_PatternState+1	;volatile
  2775                           
  2776                           ;main.c: 533: break;
  2777  0226  2A31               	goto	l2264
  2778  0227                     l2262:	
  2779  0227  0831               	movf	_PatternState+1,w	;volatile
  2780                           
  2781                           ; Switch size 1, requested type "space"
  2782                           ; Number of cases is 11, Range of values is 0 to 10
  2783                           ; switch strategies available:
  2784                           ; Name         Instructions Cycles
  2785                           ; direct_byte           28     6 (fixed)
  2786                           ; simple_byte           34    18 (average)
  2787                           ; jumptable            260     6 (fixed)
  2788                           ;	Chosen strategy is direct_byte
  2789  0228  0084               	movwf	4
  2790  0229  300B               	movlw	11
  2791  022A  0204               	subwf	4,w
  2792  022B  1803               	skipnc
  2793  022C  2A25               	goto	l2256
  2794  022D  3185               	movlp	high S2596
  2795  022E  3019               	movlw	low S2596
  2796  022F  0704               	addwf	4,w
  2797  0230  0082               	movwf	2
  2798  0231                     l2264:	
  2799                           
  2800                           ;main.c: 541: if (PatternState[1] != 0)
  2801  0231  0831               	movf	_PatternState+1,w	;volatile
  2802  0232  1903               	btfsc	3,2
  2803  0233  0008               	return
  2804                           
  2805                           ;main.c: 542: {
  2806                           ;main.c: 543: if (PatternState[1] == 7)
  2807  0234  3007               	movlw	7
  2808  0235  0631               	xorwf	_PatternState+1,w	;volatile
  2809  0236  1D03               	btfss	3,2
  2810  0237  2A54               	goto	l2280
  2811                           
  2812                           ;main.c: 544: {
  2813                           ;main.c: 545: if (LeftButtonPressed())
  2814  0238  2571               	fcall	_LeftButtonPressed
  2815  0239  3A00               	xorlw	0
  2816  023A  1903               	skipnz
  2817  023B  2A52               	goto	l2278
  2818                           
  2819                           ;main.c: 546: {
  2820                           ;main.c: 547: if (left_delay > 3)
  2821  023C  3000               	movlw	0
  2822  023D  025B               	subwf	RunLeftFlash@left_delay+1,w
  2823  023E  3004               	movlw	4
  2824  023F  1903               	skipnz
  2825  0240  025A               	subwf	RunLeftFlash@left_delay,w
  2826  0241  1C03               	skipc
  2827  0242  2A50               	goto	l2276
  2828                           
  2829                           ;main.c: 548: {
  2830                           ;main.c: 549: left_delay = ((left_delay * 80)/100);
  2831  0243  227D               	fcall	PL2	;call to abstracted procedure
  2832  0244  3050               	movlw	80
  2833  0245  00F5               	movwf	___wmul@multiplicand
  2834  0246  01F6               	clrf	___wmul@multiplicand+1
  2835  0247  24D4               	fcall	___wmul
  2836  0248  2285               	fcall	PL6	;call to abstracted procedure
  2837  0249  248B               	fcall	___lwdiv
  2838  024A  0862               	movf	?___lwdiv+1,w
  2839  024B  00DB               	movwf	RunLeftFlash@left_delay+1
  2840  024C  0861               	movf	?___lwdiv,w
  2841  024D  00DA               	movwf	RunLeftFlash@left_delay
  2842                           
  2843                           ;main.c: 550: PatternState[1] = 2;
  2844  024E  3002               	movlw	2
  2845  024F  2A6F               	goto	L6
  2846  0250                     l2276:	
  2847                           ;main.c: 551: }
  2848                           
  2849                           
  2850                           ;main.c: 552: else
  2851                           ;main.c: 553: {
  2852                           ;main.c: 554: PatternState[1] = 8;
  2853  0250  3008               	movlw	8
  2854  0251  2A72               	goto	L5
  2855  0252                     l2278:	
  2856                           ;main.c: 555: left_delay = 250;
  2857                           
  2858                           
  2859                           ;main.c: 558: else
  2860                           ;main.c: 559: {
  2861                           ;main.c: 560: PatternState[1] = 10;
  2862  0252  300A               	movlw	10
  2863  0253  2A6F               	goto	L6
  2864  0254                     l2280:	
  2865                           
  2866                           ;main.c: 563: else if ((PatternState[1] == 9) && LeftButtonPressed())
  2867  0254  3009               	movlw	9
  2868  0255  0631               	xorwf	_PatternState+1,w	;volatile
  2869  0256  1D03               	btfss	3,2
  2870  0257  2A77               	goto	l2292
  2871  0258  2571               	fcall	_LeftButtonPressed
  2872  0259  3A00               	xorlw	0
  2873  025A  1903               	skipnz
  2874  025B  2A77               	goto	l2292
  2875                           
  2876                           ;main.c: 564: {
  2877                           ;main.c: 565: if (left_delay > 10)
  2878  025C  3000               	movlw	0
  2879  025D  025B               	subwf	RunLeftFlash@left_delay+1,w
  2880  025E  300B               	movlw	11
  2881  025F  1903               	skipnz
  2882  0260  025A               	subwf	RunLeftFlash@left_delay,w
  2883  0261  1C03               	skipc
  2884  0262  2A71               	goto	l2290
  2885                           
  2886                           ;main.c: 566: {
  2887                           ;main.c: 567: left_delay = ((left_delay * 95)/100);
  2888  0263  227D               	fcall	PL2	;call to abstracted procedure
  2889  0264  305F               	movlw	95
  2890  0265  00F5               	movwf	___wmul@multiplicand
  2891  0266  01F6               	clrf	___wmul@multiplicand+1
  2892  0267  24D4               	fcall	___wmul
  2893  0268  2285               	fcall	PL6	;call to abstracted procedure
  2894  0269  248B               	fcall	___lwdiv
  2895  026A  0862               	movf	?___lwdiv+1,w
  2896  026B  00DB               	movwf	RunLeftFlash@left_delay+1
  2897  026C  0861               	movf	?___lwdiv,w
  2898  026D  00DA               	movwf	RunLeftFlash@left_delay
  2899                           
  2900                           ;main.c: 568: PatternState[1] = 8;
  2901  026E  3008               	movlw	8
  2902  026F                     L6:	
  2903  026F  00B1               	movwf	_PatternState+1	;volatile
  2904                           
  2905                           ;main.c: 569: }
  2906  0270  2A78               	goto	l2294
  2907  0271                     l2290:	
  2908                           
  2909                           ;main.c: 570: else
  2910                           ;main.c: 571: {
  2911                           ;main.c: 572: PatternState[1] = 1;
  2912  0271  3001               	movlw	1
  2913  0272                     L5:	
  2914  0272  00B1               	movwf	_PatternState+1	;volatile
  2915                           
  2916                           ;main.c: 573: left_delay = 250;
  2917  0273  30FA               	movlw	250
  2918  0274  00DA               	movwf	RunLeftFlash@left_delay
  2919  0275  01DB               	clrf	RunLeftFlash@left_delay+1
  2920  0276  2A78               	goto	l2294
  2921  0277                     l2292:	
  2922                           
  2923                           ;main.c: 576: else
  2924                           ;main.c: 577: {
  2925                           ;main.c: 578: PatternState[1]++;
  2926  0277  0AB1               	incf	_PatternState+1,f	;volatile
  2927  0278                     l2294:	
  2928                           
  2929                           ;main.c: 579: }
  2930                           ;main.c: 580: PatternDelay[1] = left_delay;
  2931  0278  085B               	movf	RunLeftFlash@left_delay+1,w
  2932  0279  00A3               	movwf	_PatternDelay+3	;volatile
  2933  027A  085A               	movf	RunLeftFlash@left_delay,w
  2934  027B  00A2               	movwf	_PatternDelay+2	;volatile
  2935  027C  0008               	return
  2936  027D                     __end_of_RunLeftFlash:	
  2937  027D                     PL2:	
  2938  027D  3064               	movlw	100
  2939  027E  00E1               	movwf	___lwdiv@divisor
  2940  027F  01E2               	clrf	___lwdiv@divisor+1
  2941  0280  085B               	movf	RunLeftFlash@left_delay+1,w
  2942  0281  00F4               	movwf	___wmul@multiplier+1
  2943  0282  085A               	movf	RunLeftFlash@left_delay,w
  2944  0283  00F3               	movwf	___wmul@multiplier
  2945  0284  0008               	return
  2946  0285                     __end_ofPL2:	
  2947  0285                     PL6:	
  2948  0285  0874               	movf	?___wmul+1,w
  2949  0286  00E4               	movwf	___lwdiv@dividend+1
  2950  0287  0873               	movf	?___wmul,w
  2951  0288  00E3               	movwf	___lwdiv@dividend
  2952  0289  0008               	return
  2953  028A                     __end_ofPL6:	
  2954                           
  2955                           	psect	swtext2
  2956  0519                     __pswtext2:	
  2957  0519                     S2596:	
  2958  0519  29C8               	ljmp	l2234
  2959  051A  29CC               	ljmp	l2236
  2960  051B  29D5               	ljmp	l2238
  2961  051C  29DE               	ljmp	l2240
  2962  051D  29E7               	ljmp	l2242
  2963  051E  29F0               	ljmp	l2244
  2964  051F  29F9               	ljmp	l2246
  2965  0520  2A02               	ljmp	l2248
  2966  0521  2A0B               	ljmp	l2250
  2967  0522  2A14               	ljmp	l2252
  2968  0523  2A1D               	ljmp	l2254
  2969                           
  2970                           	psect	text12
  2971  04D4                     __ptext12:	
  2972 ;; *************** function ___wmul *****************
  2973 ;; Defined at:
  2974 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
  2975 ;; Parameters:    Size  Location     Type
  2976 ;;  multiplier      2    3[COMMON] unsigned int 
  2977 ;;  multiplicand    2    5[COMMON] unsigned int 
  2978 ;; Auto vars:     Size  Location     Type
  2979 ;;  product         2    0[BANK0 ] unsigned int 
  2980 ;; Return value:  Size  Location     Type
  2981 ;;                  2    3[COMMON] unsigned int 
  2982 ;; Registers used:
  2983 ;;		wreg, status,2, status,0
  2984 ;; Tracked objects:
  2985 ;;		On entry : 1F/0
  2986 ;;		On exit  : 1F/0
  2987 ;;		Unchanged: 0/0
  2988 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2989 ;;      Params:         4       0       0       0
  2990 ;;      Locals:         0       2       0       0
  2991 ;;      Temps:          0       0       0       0
  2992 ;;      Totals:         4       2       0       0
  2993 ;;Total ram usage:        6 bytes
  2994 ;; Hardware stack levels used:    1
  2995 ;; Hardware stack levels required when called:    4
  2996 ;; This function calls:
  2997 ;;		Nothing
  2998 ;; This function is called by:
  2999 ;;		_RunRightFlash
  3000 ;;		_RunLeftFlash
  3001 ;; This function uses a non-reentrant model
  3002 ;;
  3003                           
  3004                           
  3005                           ;psect for function ___wmul
  3006  04D4                     ___wmul:	
  3007                           
  3008                           ;incstack = 0
  3009                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  3010  04D4  01DF               	clrf	___wmul@product
  3011  04D5  01E0               	clrf	___wmul@product+1
  3012  04D6                     l2114:	
  3013  04D6  1C73               	btfss	___wmul@multiplier,0
  3014  04D7  2CDC               	goto	l2118
  3015  04D8  0875               	movf	___wmul@multiplicand,w
  3016  04D9  07DF               	addwf	___wmul@product,f
  3017  04DA  0876               	movf	___wmul@multiplicand+1,w
  3018  04DB  3DE0               	addwfc	___wmul@product+1,f
  3019  04DC                     l2118:	
  3020  04DC  35F5               	lslf	___wmul@multiplicand,f
  3021  04DD  0DF6               	rlf	___wmul@multiplicand+1,f
  3022  04DE  36F4               	lsrf	___wmul@multiplier+1,f
  3023  04DF  0CF3               	rrf	___wmul@multiplier,f
  3024  04E0  0873               	movf	___wmul@multiplier,w
  3025  04E1  0474               	iorwf	___wmul@multiplier+1,w
  3026  04E2  1D03               	btfss	3,2
  3027  04E3  2CD6               	goto	l2114
  3028  04E4  0860               	movf	___wmul@product+1,w
  3029  04E5  00F4               	movwf	?___wmul+1
  3030  04E6  085F               	movf	___wmul@product,w
  3031  04E7  00F3               	movwf	?___wmul
  3032  04E8  0008               	return
  3033  04E9                     __end_of___wmul:	
  3034                           
  3035                           	psect	text13
  3036  048B                     __ptext13:	
  3037 ;; *************** function ___lwdiv *****************
  3038 ;; Defined at:
  3039 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwdiv.c"
  3040 ;; Parameters:    Size  Location     Type
  3041 ;;  divisor         2    2[BANK0 ] unsigned int 
  3042 ;;  dividend        2    4[BANK0 ] unsigned int 
  3043 ;; Auto vars:     Size  Location     Type
  3044 ;;  quotient        2    7[BANK0 ] unsigned int 
  3045 ;;  counter         1    6[BANK0 ] unsigned char 
  3046 ;; Return value:  Size  Location     Type
  3047 ;;                  2    2[BANK0 ] unsigned int 
  3048 ;; Registers used:
  3049 ;;		wreg, status,2, status,0
  3050 ;; Tracked objects:
  3051 ;;		On entry : 1F/0
  3052 ;;		On exit  : 1F/0
  3053 ;;		Unchanged: 0/0
  3054 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3055 ;;      Params:         0       4       0       0
  3056 ;;      Locals:         0       3       0       0
  3057 ;;      Temps:          0       0       0       0
  3058 ;;      Totals:         0       7       0       0
  3059 ;;Total ram usage:        7 bytes
  3060 ;; Hardware stack levels used:    1
  3061 ;; Hardware stack levels required when called:    4
  3062 ;; This function calls:
  3063 ;;		Nothing
  3064 ;; This function is called by:
  3065 ;;		_RunRightFlash
  3066 ;;		_RunLeftFlash
  3067 ;; This function uses a non-reentrant model
  3068 ;;
  3069                           
  3070                           
  3071                           ;psect for function ___lwdiv
  3072  048B                     ___lwdiv:	
  3073                           
  3074                           ;incstack = 0
  3075                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  3076  048B  01E6               	clrf	___lwdiv@quotient
  3077  048C  01E7               	clrf	___lwdiv@quotient+1
  3078  048D  0861               	movf	___lwdiv@divisor,w
  3079  048E  0462               	iorwf	___lwdiv@divisor+1,w
  3080  048F  1903               	btfsc	3,2
  3081  0490  2CAB               	goto	l2150
  3082  0491  01E5               	clrf	___lwdiv@counter
  3083  0492                     L7:	
  3084  0492  0AE5               	incf	___lwdiv@counter,f
  3085  0493  1BE2               	btfsc	___lwdiv@divisor+1,7
  3086  0494  2C98               	goto	l2138
  3087  0495  35E1               	lslf	___lwdiv@divisor,f
  3088  0496  0DE2               	rlf	___lwdiv@divisor+1,f
  3089  0497  2C92               	goto	L7
  3090  0498                     l2138:	
  3091  0498  35E6               	lslf	___lwdiv@quotient,f
  3092  0499  0DE7               	rlf	___lwdiv@quotient+1,f
  3093  049A  0862               	movf	___lwdiv@divisor+1,w
  3094  049B  0264               	subwf	___lwdiv@dividend+1,w
  3095  049C  1D03               	skipz
  3096  049D  2CA0               	goto	u1735
  3097  049E  0861               	movf	___lwdiv@divisor,w
  3098  049F  0263               	subwf	___lwdiv@dividend,w
  3099  04A0                     u1735:	
  3100  04A0  1C03               	skipc
  3101  04A1  2CA7               	goto	l2146
  3102  04A2  0861               	movf	___lwdiv@divisor,w
  3103  04A3  02E3               	subwf	___lwdiv@dividend,f
  3104  04A4  0862               	movf	___lwdiv@divisor+1,w
  3105  04A5  3BE4               	subwfb	___lwdiv@dividend+1,f
  3106  04A6  1466               	bsf	___lwdiv@quotient,0
  3107  04A7                     l2146:	
  3108  04A7  36E2               	lsrf	___lwdiv@divisor+1,f
  3109  04A8  0CE1               	rrf	___lwdiv@divisor,f
  3110  04A9  0BE5               	decfsz	___lwdiv@counter,f
  3111  04AA  2C98               	goto	l2138
  3112  04AB                     l2150:	
  3113  04AB  0867               	movf	___lwdiv@quotient+1,w
  3114  04AC  00E2               	movwf	?___lwdiv+1
  3115  04AD  0866               	movf	___lwdiv@quotient,w
  3116  04AE  00E1               	movwf	?___lwdiv
  3117  04AF  0008               	return
  3118  04B0                     __end_of___lwdiv:	
  3119                           
  3120                           	psect	text14
  3121  0041                     __ptext14:	
  3122 ;; *************** function _RunGame *****************
  3123 ;; Defined at:
  3124 ;;		line 585 in file "main.c"
  3125 ;; Parameters:    Size  Location     Type
  3126 ;;		None
  3127 ;; Auto vars:     Size  Location     Type
  3128 ;;		None
  3129 ;; Return value:  Size  Location     Type
  3130 ;;                  1    wreg      void 
  3131 ;; Registers used:
  3132 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3133 ;; Tracked objects:
  3134 ;;		On entry : 1F/0
  3135 ;;		On exit  : 1F/0
  3136 ;;		Unchanged: 0/0
  3137 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3138 ;;      Params:         0       0       0       0
  3139 ;;      Locals:         0       0       0       0
  3140 ;;      Temps:          0       4       0       0
  3141 ;;      Totals:         0       4       0       0
  3142 ;;Total ram usage:        4 bytes
  3143 ;; Hardware stack levels used:    1
  3144 ;; Hardware stack levels required when called:    5
  3145 ;; This function calls:
  3146 ;;		_SetLEDOff
  3147 ;;		_SetLEDOn
  3148 ;; This function is called by:
  3149 ;;		_main
  3150 ;; This function uses a non-reentrant model
  3151 ;;
  3152                           
  3153                           
  3154                           ;psect for function _RunGame
  3155  0041                     _RunGame:	
  3156                           
  3157                           ;main.c: 587: static uint8_t num_leds_lit = 1;
  3158                           ;main.c: 588: static uint32_t last_button_press_time = 0;
  3159                           ;main.c: 589: static uint32_t next_decrement_time = 0;
  3160                           ;main.c: 591: if (PatternDelay[2] == 0)
  3161                           
  3162                           ;incstack = 0
  3163                           ; Regs used in _RunGame: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3164  0041  0824               	movf	_PatternDelay+4,w	;volatile
  3165  0042  0425               	iorwf	_PatternDelay+5,w	;volatile
  3166  0043  1D03               	btfss	3,2
  3167  0044  0008               	return
  3168                           
  3169                           ;main.c: 592: {
  3170                           ;main.c: 593: if (PatternState[2])
  3171  0045  0832               	movf	_PatternState+2,w	;volatile
  3172  0046  1903               	btfsc	3,2
  3173  0047  0008               	return
  3174  0048  28D1               	goto	l2324
  3175  0049                     l2306:	
  3176                           
  3177                           ;main.c: 602: SetLEDOn(0x01);
  3178  0049  3001               	movlw	1
  3179  004A  2583               	fcall	_SetLEDOn
  3180                           
  3181                           ;main.c: 603: SetLEDOff(0x02);
  3182  004B  3002               	movlw	2
  3183  004C  2567               	fcall	_SetLEDOff
  3184                           
  3185                           ;main.c: 604: SetLEDOff(0x04);
  3186  004D  3004               	movlw	4
  3187  004E  2567               	fcall	_SetLEDOff
  3188                           
  3189                           ;main.c: 605: SetLEDOff(0x08);
  3190  004F  3008               	movlw	8
  3191  0050  2567               	fcall	_SetLEDOff
  3192                           
  3193                           ;main.c: 606: SetLEDOff(0x10);
  3194  0051  3010               	movlw	16
  3195  0052  2567               	fcall	_SetLEDOff
  3196                           
  3197                           ;main.c: 607: SetLEDOff(0x20);
  3198  0053  3020               	movlw	32
  3199  0054  2567               	fcall	_SetLEDOff
  3200                           
  3201                           ;main.c: 608: SetLEDOff(0x40);
  3202  0055  3040               	movlw	64
  3203  0056  2567               	fcall	_SetLEDOff
  3204                           
  3205                           ;main.c: 609: SetLEDOff(0x80);
  3206  0057  3080               	movlw	128
  3207  0058  2567               	fcall	_SetLEDOff
  3208                           
  3209                           ;main.c: 610: break;
  3210  0059  28DB               	goto	l2326
  3211  005A                     l2308:	
  3212                           
  3213                           ;main.c: 613: SetLEDOn(0x01);
  3214  005A  3001               	movlw	1
  3215  005B  2583               	fcall	_SetLEDOn
  3216                           
  3217                           ;main.c: 614: SetLEDOn(0x02);
  3218  005C  3002               	movlw	2
  3219  005D  2583               	fcall	_SetLEDOn
  3220                           
  3221                           ;main.c: 615: SetLEDOff(0x04);
  3222  005E  3004               	movlw	4
  3223  005F  2567               	fcall	_SetLEDOff
  3224                           
  3225                           ;main.c: 616: SetLEDOff(0x08);
  3226  0060  3008               	movlw	8
  3227  0061  2567               	fcall	_SetLEDOff
  3228                           
  3229                           ;main.c: 617: SetLEDOff(0x10);
  3230  0062  3010               	movlw	16
  3231  0063  2567               	fcall	_SetLEDOff
  3232                           
  3233                           ;main.c: 618: SetLEDOff(0x20);
  3234  0064  3020               	movlw	32
  3235  0065  2567               	fcall	_SetLEDOff
  3236                           
  3237                           ;main.c: 619: SetLEDOff(0x40);
  3238  0066  3040               	movlw	64
  3239  0067  2567               	fcall	_SetLEDOff
  3240                           
  3241                           ;main.c: 620: SetLEDOff(0x80);
  3242  0068  3080               	movlw	128
  3243  0069  2567               	fcall	_SetLEDOff
  3244                           
  3245                           ;main.c: 621: break;
  3246  006A  28DB               	goto	l2326
  3247  006B                     l2310:	
  3248                           
  3249                           ;main.c: 624: SetLEDOn(0x01);
  3250  006B  3001               	movlw	1
  3251  006C  2583               	fcall	_SetLEDOn
  3252                           
  3253                           ;main.c: 625: SetLEDOn(0x02);
  3254  006D  3002               	movlw	2
  3255  006E  2583               	fcall	_SetLEDOn
  3256                           
  3257                           ;main.c: 626: SetLEDOn(0x04);
  3258  006F  3004               	movlw	4
  3259  0070  2583               	fcall	_SetLEDOn
  3260                           
  3261                           ;main.c: 627: SetLEDOff(0x08);
  3262  0071  3008               	movlw	8
  3263  0072  2567               	fcall	_SetLEDOff
  3264                           
  3265                           ;main.c: 628: SetLEDOff(0x10);
  3266  0073  3010               	movlw	16
  3267  0074  2567               	fcall	_SetLEDOff
  3268                           
  3269                           ;main.c: 629: SetLEDOff(0x20);
  3270  0075  3020               	movlw	32
  3271  0076  2567               	fcall	_SetLEDOff
  3272                           
  3273                           ;main.c: 630: SetLEDOff(0x40);
  3274  0077  3040               	movlw	64
  3275  0078  2567               	fcall	_SetLEDOff
  3276                           
  3277                           ;main.c: 631: SetLEDOff(0x80);
  3278  0079  3080               	movlw	128
  3279  007A  2567               	fcall	_SetLEDOff
  3280                           
  3281                           ;main.c: 632: break;
  3282  007B  28DB               	goto	l2326
  3283  007C                     l2312:	
  3284                           
  3285                           ;main.c: 635: SetLEDOn(0x01);
  3286  007C  3001               	movlw	1
  3287  007D  2583               	fcall	_SetLEDOn
  3288                           
  3289                           ;main.c: 636: SetLEDOn(0x02);
  3290  007E  3002               	movlw	2
  3291  007F  2583               	fcall	_SetLEDOn
  3292                           
  3293                           ;main.c: 637: SetLEDOn(0x04);
  3294  0080  3004               	movlw	4
  3295  0081  2583               	fcall	_SetLEDOn
  3296                           
  3297                           ;main.c: 638: SetLEDOn(0x08);
  3298  0082  3008               	movlw	8
  3299  0083  2583               	fcall	_SetLEDOn
  3300                           
  3301                           ;main.c: 639: SetLEDOff(0x10);
  3302  0084  3010               	movlw	16
  3303  0085  2567               	fcall	_SetLEDOff
  3304                           
  3305                           ;main.c: 640: SetLEDOff(0x20);
  3306  0086  3020               	movlw	32
  3307  0087  2567               	fcall	_SetLEDOff
  3308                           
  3309                           ;main.c: 641: SetLEDOff(0x40);
  3310  0088  3040               	movlw	64
  3311  0089  2567               	fcall	_SetLEDOff
  3312                           
  3313                           ;main.c: 642: SetLEDOff(0x80);
  3314  008A  3080               	movlw	128
  3315  008B  2567               	fcall	_SetLEDOff
  3316                           
  3317                           ;main.c: 643: break;
  3318  008C  28DB               	goto	l2326
  3319  008D                     l2314:	
  3320                           
  3321                           ;main.c: 646: SetLEDOn(0x01);
  3322  008D  3001               	movlw	1
  3323  008E  2583               	fcall	_SetLEDOn
  3324                           
  3325                           ;main.c: 647: SetLEDOn(0x02);
  3326  008F  3002               	movlw	2
  3327  0090  2583               	fcall	_SetLEDOn
  3328                           
  3329                           ;main.c: 648: SetLEDOn(0x04);
  3330  0091  3004               	movlw	4
  3331  0092  2583               	fcall	_SetLEDOn
  3332                           
  3333                           ;main.c: 649: SetLEDOn(0x08);
  3334  0093  3008               	movlw	8
  3335  0094  2583               	fcall	_SetLEDOn
  3336                           
  3337                           ;main.c: 650: SetLEDOn(0x10);
  3338  0095  3010               	movlw	16
  3339  0096  2583               	fcall	_SetLEDOn
  3340                           
  3341                           ;main.c: 651: SetLEDOff(0x20);
  3342  0097  3020               	movlw	32
  3343  0098  2567               	fcall	_SetLEDOff
  3344                           
  3345                           ;main.c: 652: SetLEDOff(0x40);
  3346  0099  3040               	movlw	64
  3347  009A  2567               	fcall	_SetLEDOff
  3348                           
  3349                           ;main.c: 653: SetLEDOff(0x80);
  3350  009B  3080               	movlw	128
  3351  009C  2567               	fcall	_SetLEDOff
  3352                           
  3353                           ;main.c: 654: break;
  3354  009D  28DB               	goto	l2326
  3355  009E                     l2316:	
  3356                           
  3357                           ;main.c: 657: SetLEDOn(0x01);
  3358  009E  3001               	movlw	1
  3359  009F  2583               	fcall	_SetLEDOn
  3360                           
  3361                           ;main.c: 658: SetLEDOn(0x02);
  3362  00A0  3002               	movlw	2
  3363  00A1  2583               	fcall	_SetLEDOn
  3364                           
  3365                           ;main.c: 659: SetLEDOn(0x04);
  3366  00A2  3004               	movlw	4
  3367  00A3  2583               	fcall	_SetLEDOn
  3368                           
  3369                           ;main.c: 660: SetLEDOn(0x08);
  3370  00A4  3008               	movlw	8
  3371  00A5  2583               	fcall	_SetLEDOn
  3372                           
  3373                           ;main.c: 661: SetLEDOn(0x10);
  3374  00A6  3010               	movlw	16
  3375  00A7  2583               	fcall	_SetLEDOn
  3376                           
  3377                           ;main.c: 662: SetLEDOn(0x20);
  3378  00A8  3020               	movlw	32
  3379  00A9  2583               	fcall	_SetLEDOn
  3380                           
  3381                           ;main.c: 663: SetLEDOff(0x40);
  3382  00AA  3040               	movlw	64
  3383  00AB  2567               	fcall	_SetLEDOff
  3384                           
  3385                           ;main.c: 664: SetLEDOff(0x80);
  3386  00AC  3080               	movlw	128
  3387  00AD  2567               	fcall	_SetLEDOff
  3388                           
  3389                           ;main.c: 665: break;
  3390  00AE  28DB               	goto	l2326
  3391  00AF                     l2318:	
  3392                           
  3393                           ;main.c: 668: SetLEDOn(0x01);
  3394  00AF  3001               	movlw	1
  3395  00B0  2583               	fcall	_SetLEDOn
  3396                           
  3397                           ;main.c: 669: SetLEDOn(0x02);
  3398  00B1  3002               	movlw	2
  3399  00B2  2583               	fcall	_SetLEDOn
  3400                           
  3401                           ;main.c: 670: SetLEDOn(0x04);
  3402  00B3  3004               	movlw	4
  3403  00B4  2583               	fcall	_SetLEDOn
  3404                           
  3405                           ;main.c: 671: SetLEDOn(0x08);
  3406  00B5  3008               	movlw	8
  3407  00B6  2583               	fcall	_SetLEDOn
  3408                           
  3409                           ;main.c: 672: SetLEDOn(0x10);
  3410  00B7  3010               	movlw	16
  3411  00B8  2583               	fcall	_SetLEDOn
  3412                           
  3413                           ;main.c: 673: SetLEDOn(0x20);
  3414  00B9  3020               	movlw	32
  3415  00BA  2583               	fcall	_SetLEDOn
  3416                           
  3417                           ;main.c: 674: SetLEDOn(0x40);
  3418  00BB  3040               	movlw	64
  3419  00BC  2583               	fcall	_SetLEDOn
  3420                           
  3421                           ;main.c: 675: SetLEDOff(0x80);
  3422  00BD  3080               	movlw	128
  3423  00BE  2567               	fcall	_SetLEDOff
  3424                           
  3425                           ;main.c: 676: break;
  3426  00BF  28DB               	goto	l2326
  3427  00C0                     l2320:	
  3428                           
  3429                           ;main.c: 679: SetLEDOn(0x01);
  3430  00C0  3001               	movlw	1
  3431  00C1  2583               	fcall	_SetLEDOn
  3432                           
  3433                           ;main.c: 680: SetLEDOn(0x02);
  3434  00C2  3002               	movlw	2
  3435  00C3  2583               	fcall	_SetLEDOn
  3436                           
  3437                           ;main.c: 681: SetLEDOn(0x04);
  3438  00C4  3004               	movlw	4
  3439  00C5  2583               	fcall	_SetLEDOn
  3440                           
  3441                           ;main.c: 682: SetLEDOn(0x08);
  3442  00C6  3008               	movlw	8
  3443  00C7  2583               	fcall	_SetLEDOn
  3444                           
  3445                           ;main.c: 683: SetLEDOn(0x10);
  3446  00C8  3010               	movlw	16
  3447  00C9  2583               	fcall	_SetLEDOn
  3448                           
  3449                           ;main.c: 684: SetLEDOn(0x20);
  3450  00CA  3020               	movlw	32
  3451  00CB  2583               	fcall	_SetLEDOn
  3452                           
  3453                           ;main.c: 685: SetLEDOn(0x40);
  3454  00CC  3040               	movlw	64
  3455  00CD  2583               	fcall	_SetLEDOn
  3456                           
  3457                           ;main.c: 686: SetLEDOn(0x80);
  3458  00CE  3080               	movlw	128
  3459  00CF  2583               	fcall	_SetLEDOn
  3460                           
  3461                           ;main.c: 687: break;
  3462  00D0  28DB               	goto	l2326
  3463  00D1                     l2324:	
  3464  00D1  085E               	movf	RunGame@num_leds_lit,w
  3465                           
  3466                           ; Switch size 1, requested type "space"
  3467                           ; Number of cases is 9, Range of values is 0 to 8
  3468                           ; switch strategies available:
  3469                           ; Name         Instructions Cycles
  3470                           ; direct_byte           24     6 (fixed)
  3471                           ; simple_byte           28    15 (average)
  3472                           ; jumptable            260     6 (fixed)
  3473                           ;	Chosen strategy is direct_byte
  3474  00D2  0084               	movwf	4
  3475  00D3  3009               	movlw	9
  3476  00D4  0204               	subwf	4,w
  3477  00D5  1803               	skipnc
  3478  00D6  28DB               	goto	l2326
  3479  00D7  3185               	movlp	high S2598
  3480  00D8  302E               	movlw	low S2598
  3481  00D9  0704               	addwf	4,w
  3482  00DA  0082               	movwf	2
  3483  00DB                     l2326:	
  3484                           
  3485                           ;main.c: 694: if (last_button_press_time != LastRightButtonPressTime)
  3486  00DB  0847               	movf	_LastRightButtonPressTime+3,w	;volatile
  3487  00DC  063F               	xorwf	RunGame@last_button_press_time+3,w
  3488  00DD  1D03               	skipz
  3489  00DE  28E9               	goto	u1935
  3490  00DF  0846               	movf	_LastRightButtonPressTime+2,w	;volatile
  3491  00E0  063E               	xorwf	RunGame@last_button_press_time+2,w
  3492  00E1  1D03               	skipz
  3493  00E2  28E9               	goto	u1935
  3494  00E3  0845               	movf	_LastRightButtonPressTime+1,w	;volatile
  3495  00E4  063D               	xorwf	RunGame@last_button_press_time+1,w
  3496  00E5  1D03               	skipz
  3497  00E6  28E9               	goto	u1935
  3498  00E7  0844               	movf	_LastRightButtonPressTime,w	;volatile
  3499  00E8  063C               	xorwf	RunGame@last_button_press_time,w
  3500  00E9                     u1935:	
  3501  00E9  1903               	skipnz
  3502  00EA  29A3               	goto	l2378
  3503                           
  3504                           ;main.c: 695: {
  3505                           ;main.c: 696: if (LastRightButtonPressTime < (last_button_press_time + 150))
  3506  00EB  3096               	movlw	150
  3507  00EC  00DF               	movwf	??_RunGame
  3508  00ED  01E0               	clrf	??_RunGame+1
  3509  00EE  01E1               	clrf	??_RunGame+2
  3510  00EF  01E2               	clrf	??_RunGame+3
  3511  00F0  083C               	movf	RunGame@last_button_press_time,w
  3512  00F1  07DF               	addwf	??_RunGame,f
  3513  00F2  083D               	movf	RunGame@last_button_press_time+1,w
  3514  00F3  3DE0               	addwfc	??_RunGame+1,f
  3515  00F4  083E               	movf	RunGame@last_button_press_time+2,w
  3516  00F5  3DE1               	addwfc	??_RunGame+2,f
  3517  00F6  083F               	movf	RunGame@last_button_press_time+3,w
  3518  00F7  3DE2               	addwfc	??_RunGame+3,f
  3519  00F8  0862               	movf	??_RunGame+3,w
  3520  00F9  0247               	subwf	_LastRightButtonPressTime+3,w	;volatile
  3521  00FA  1D03               	skipz
  3522  00FB  2906               	goto	u1945
  3523  00FC  0861               	movf	??_RunGame+2,w
  3524  00FD  0246               	subwf	_LastRightButtonPressTime+2,w	;volatile
  3525  00FE  1D03               	skipz
  3526  00FF  2906               	goto	u1945
  3527  0100  0860               	movf	??_RunGame+1,w
  3528  0101  0245               	subwf	_LastRightButtonPressTime+1,w	;volatile
  3529  0102  1D03               	skipz
  3530  0103  2906               	goto	u1945
  3531  0104  085F               	movf	??_RunGame,w
  3532  0105  0244               	subwf	_LastRightButtonPressTime,w	;volatile
  3533  0106                     u1945:	
  3534  0106  1803               	skipnc
  3535  0107  299A               	goto	l2376
  3536  0108  3009               	movlw	9
  3537                           
  3538                           ;main.c: 697: {
  3539                           ;main.c: 698: num_leds_lit++;
  3540  0109  0ADE               	incf	RunGame@num_leds_lit,f
  3541                           
  3542                           ;main.c: 700: if (num_leds_lit > 8)
  3543  010A  025E               	subwf	RunGame@num_leds_lit,w
  3544  010B  1C03               	skipc
  3545  010C  299A               	goto	l2376
  3546  010D  30FF               	movlw	255
  3547                           
  3548                           ;main.c: 701: {
  3549                           ;main.c: 702: num_leds_lit = 0;
  3550  010E  01DE               	clrf	RunGame@num_leds_lit
  3551                           
  3552                           ;main.c: 704: SetLEDOn(0xFF);
  3553  010F  2583               	fcall	_SetLEDOn
  3554                           
  3555                           ;main.c: 705: _delay((unsigned long)((100)*(16000000/4000.0)));
  3556  0110  3003               	movlw	3
  3557  0111  0020               	movlb	0	; select bank0
  3558  0112  00E0               	movwf	??_RunGame+1
  3559  0113  3008               	movlw	8
  3560  0114  00DF               	movwf	??_RunGame
  3561  0115  3077               	movlw	119
  3562  0116                     u2317:	
  3563  0116  0B89               	decfsz	9,f
  3564  0117  2916               	goto	u2317
  3565  0118  0BDF               	decfsz	??_RunGame,f
  3566  0119  2916               	goto	u2317
  3567  011A  0BE0               	decfsz	??_RunGame+1,f
  3568  011B  2916               	goto	u2317
  3569                           
  3570                           ;main.c: 706: SetLEDOff(0xFF);
  3571  011C  30FF               	movlw	255
  3572  011D  2567               	fcall	_SetLEDOff
  3573                           
  3574                           ;main.c: 707: _delay((unsigned long)((100)*(16000000/4000.0)));
  3575  011E  3003               	movlw	3
  3576  011F  0020               	movlb	0	; select bank0
  3577  0120  00E0               	movwf	??_RunGame+1
  3578  0121  3008               	movlw	8
  3579  0122  00DF               	movwf	??_RunGame
  3580  0123  3077               	movlw	119
  3581  0124                     u2327:	
  3582  0124  0B89               	decfsz	9,f
  3583  0125  2924               	goto	u2327
  3584  0126  0BDF               	decfsz	??_RunGame,f
  3585  0127  2924               	goto	u2327
  3586  0128  0BE0               	decfsz	??_RunGame+1,f
  3587  0129  2924               	goto	u2327
  3588                           
  3589                           ;main.c: 708: SetLEDOn(0xFF);
  3590  012A  30FF               	movlw	255
  3591  012B  2583               	fcall	_SetLEDOn
  3592                           
  3593                           ;main.c: 709: _delay((unsigned long)((100)*(16000000/4000.0)));
  3594  012C  3003               	movlw	3
  3595  012D  0020               	movlb	0	; select bank0
  3596  012E  00E0               	movwf	??_RunGame+1
  3597  012F  3008               	movlw	8
  3598  0130  00DF               	movwf	??_RunGame
  3599  0131  3077               	movlw	119
  3600  0132                     u2337:	
  3601  0132  0B89               	decfsz	9,f
  3602  0133  2932               	goto	u2337
  3603  0134  0BDF               	decfsz	??_RunGame,f
  3604  0135  2932               	goto	u2337
  3605  0136  0BE0               	decfsz	??_RunGame+1,f
  3606  0137  2932               	goto	u2337
  3607                           
  3608                           ;main.c: 710: SetLEDOff(0xFF);
  3609  0138  30FF               	movlw	255
  3610  0139  2567               	fcall	_SetLEDOff
  3611                           
  3612                           ;main.c: 711: _delay((unsigned long)((100)*(16000000/4000.0)));
  3613  013A  3003               	movlw	3
  3614  013B  0020               	movlb	0	; select bank0
  3615  013C  00E0               	movwf	??_RunGame+1
  3616  013D  3008               	movlw	8
  3617  013E  00DF               	movwf	??_RunGame
  3618  013F  3077               	movlw	119
  3619  0140                     u2347:	
  3620  0140  0B89               	decfsz	9,f
  3621  0141  2940               	goto	u2347
  3622  0142  0BDF               	decfsz	??_RunGame,f
  3623  0143  2940               	goto	u2347
  3624  0144  0BE0               	decfsz	??_RunGame+1,f
  3625  0145  2940               	goto	u2347
  3626                           
  3627                           ;main.c: 712: SetLEDOn(0xFF);
  3628  0146  30FF               	movlw	255
  3629  0147  2583               	fcall	_SetLEDOn
  3630                           
  3631                           ;main.c: 713: _delay((unsigned long)((100)*(16000000/4000.0)));
  3632  0148  3003               	movlw	3
  3633  0149  0020               	movlb	0	; select bank0
  3634  014A  00E0               	movwf	??_RunGame+1
  3635  014B  3008               	movlw	8
  3636  014C  00DF               	movwf	??_RunGame
  3637  014D  3077               	movlw	119
  3638  014E                     u2357:	
  3639  014E  0B89               	decfsz	9,f
  3640  014F  294E               	goto	u2357
  3641  0150  0BDF               	decfsz	??_RunGame,f
  3642  0151  294E               	goto	u2357
  3643  0152  0BE0               	decfsz	??_RunGame+1,f
  3644  0153  294E               	goto	u2357
  3645                           
  3646                           ;main.c: 714: SetLEDOff(0xFF);
  3647  0154  30FF               	movlw	255
  3648  0155  2567               	fcall	_SetLEDOff
  3649                           
  3650                           ;main.c: 715: _delay((unsigned long)((100)*(16000000/4000.0)));
  3651  0156  3003               	movlw	3
  3652  0157  0020               	movlb	0	; select bank0
  3653  0158  00E0               	movwf	??_RunGame+1
  3654  0159  3008               	movlw	8
  3655  015A  00DF               	movwf	??_RunGame
  3656  015B  3077               	movlw	119
  3657  015C                     u2367:	
  3658  015C  0B89               	decfsz	9,f
  3659  015D  295C               	goto	u2367
  3660  015E  0BDF               	decfsz	??_RunGame,f
  3661  015F  295C               	goto	u2367
  3662  0160  0BE0               	decfsz	??_RunGame+1,f
  3663  0161  295C               	goto	u2367
  3664                           
  3665                           ;main.c: 716: SetLEDOn(0xFF);
  3666  0162  30FF               	movlw	255
  3667  0163  2583               	fcall	_SetLEDOn
  3668                           
  3669                           ;main.c: 717: _delay((unsigned long)((100)*(16000000/4000.0)));
  3670  0164  3003               	movlw	3
  3671  0165  0020               	movlb	0	; select bank0
  3672  0166  00E0               	movwf	??_RunGame+1
  3673  0167  3008               	movlw	8
  3674  0168  00DF               	movwf	??_RunGame
  3675  0169  3077               	movlw	119
  3676  016A                     u2377:	
  3677  016A  0B89               	decfsz	9,f
  3678  016B  296A               	goto	u2377
  3679  016C  0BDF               	decfsz	??_RunGame,f
  3680  016D  296A               	goto	u2377
  3681  016E  0BE0               	decfsz	??_RunGame+1,f
  3682  016F  296A               	goto	u2377
  3683                           
  3684                           ;main.c: 718: SetLEDOff(0xFF);
  3685  0170  30FF               	movlw	255
  3686  0171  2567               	fcall	_SetLEDOff
  3687                           
  3688                           ;main.c: 719: _delay((unsigned long)((100)*(16000000/4000.0)));
  3689  0172  3003               	movlw	3
  3690  0173  0020               	movlb	0	; select bank0
  3691  0174  00E0               	movwf	??_RunGame+1
  3692  0175  3008               	movlw	8
  3693  0176  00DF               	movwf	??_RunGame
  3694  0177  3077               	movlw	119
  3695  0178                     u2387:	
  3696  0178  0B89               	decfsz	9,f
  3697  0179  2978               	goto	u2387
  3698  017A  0BDF               	decfsz	??_RunGame,f
  3699  017B  2978               	goto	u2387
  3700  017C  0BE0               	decfsz	??_RunGame+1,f
  3701  017D  2978               	goto	u2387
  3702                           
  3703                           ;main.c: 720: SetLEDOn(0xFF);
  3704  017E  30FF               	movlw	255
  3705  017F  2583               	fcall	_SetLEDOn
  3706                           
  3707                           ;main.c: 721: _delay((unsigned long)((100)*(16000000/4000.0)));
  3708  0180  3003               	movlw	3
  3709  0181  0020               	movlb	0	; select bank0
  3710  0182  00E0               	movwf	??_RunGame+1
  3711  0183  3008               	movlw	8
  3712  0184  00DF               	movwf	??_RunGame
  3713  0185  3077               	movlw	119
  3714  0186                     u2397:	
  3715  0186  0B89               	decfsz	9,f
  3716  0187  2986               	goto	u2397
  3717  0188  0BDF               	decfsz	??_RunGame,f
  3718  0189  2986               	goto	u2397
  3719  018A  0BE0               	decfsz	??_RunGame+1,f
  3720  018B  2986               	goto	u2397
  3721                           
  3722                           ;main.c: 722: SetLEDOff(0xFF);
  3723  018C  30FF               	movlw	255
  3724  018D  2567               	fcall	_SetLEDOff
  3725                           
  3726                           ;main.c: 723: _delay((unsigned long)((100)*(16000000/4000.0)));
  3727  018E  3003               	movlw	3
  3728  018F  0020               	movlb	0	; select bank0
  3729  0190  00E0               	movwf	??_RunGame+1
  3730  0191  3008               	movlw	8
  3731  0192  00DF               	movwf	??_RunGame
  3732  0193  3077               	movlw	119
  3733  0194                     u2407:	
  3734  0194  0B89               	decfsz	9,f
  3735  0195  2994               	goto	u2407
  3736  0196  0BDF               	decfsz	??_RunGame,f
  3737  0197  2994               	goto	u2407
  3738  0198  0BE0               	decfsz	??_RunGame+1,f
  3739  0199  2994               	goto	u2407
  3740  019A                     l2376:	
  3741                           
  3742                           ;main.c: 724: }
  3743                           ;main.c: 725: }
  3744                           ;main.c: 726: last_button_press_time = LastRightButtonPressTime;
  3745  019A  0020               	movlb	0	; select bank0
  3746  019B  0847               	movf	_LastRightButtonPressTime+3,w	;volatile
  3747  019C  00BF               	movwf	RunGame@last_button_press_time+3
  3748  019D  0846               	movf	_LastRightButtonPressTime+2,w	;volatile
  3749  019E  00BE               	movwf	RunGame@last_button_press_time+2
  3750  019F  0845               	movf	_LastRightButtonPressTime+1,w	;volatile
  3751  01A0  00BD               	movwf	RunGame@last_button_press_time+1
  3752  01A1  0844               	movf	_LastRightButtonPressTime,w	;volatile
  3753  01A2  00BC               	movwf	RunGame@last_button_press_time
  3754  01A3                     l2378:	
  3755                           
  3756                           ;main.c: 727: }
  3757                           ;main.c: 730: if (WakeTimer > next_decrement_time)
  3758  01A3  084B               	movf	_WakeTimer+3,w	;volatile
  3759  01A4  023B               	subwf	RunGame@next_decrement_time+3,w
  3760  01A5  1D03               	skipz
  3761  01A6  29B1               	goto	u1965
  3762  01A7  084A               	movf	_WakeTimer+2,w	;volatile
  3763  01A8  023A               	subwf	RunGame@next_decrement_time+2,w
  3764  01A9  1D03               	skipz
  3765  01AA  29B1               	goto	u1965
  3766  01AB  0849               	movf	_WakeTimer+1,w	;volatile
  3767  01AC  0239               	subwf	RunGame@next_decrement_time+1,w
  3768  01AD  1D03               	skipz
  3769  01AE  29B1               	goto	u1965
  3770  01AF  0848               	movf	_WakeTimer,w	;volatile
  3771  01B0  0238               	subwf	RunGame@next_decrement_time,w
  3772  01B1                     u1965:	
  3773  01B1  1803               	skipnc
  3774  01B2  0008               	return
  3775                           
  3776                           ;main.c: 731: {
  3777                           ;main.c: 732: next_decrement_time = WakeTimer + 160;
  3778  01B3  30A0               	movlw	160
  3779  01B4  0748               	addwf	_WakeTimer,w	;volatile
  3780  01B5  00B8               	movwf	RunGame@next_decrement_time
  3781  01B6  3000               	movlw	0
  3782  01B7  3D49               	addwfc	_WakeTimer+1,w	;volatile
  3783  01B8  00B9               	movwf	RunGame@next_decrement_time+1
  3784  01B9  3000               	movlw	0
  3785  01BA  3D4A               	addwfc	_WakeTimer+2,w	;volatile
  3786  01BB  00BA               	movwf	RunGame@next_decrement_time+2
  3787  01BC  3000               	movlw	0
  3788  01BD  3D4B               	addwfc	_WakeTimer+3,w	;volatile
  3789  01BE  00BB               	movwf	RunGame@next_decrement_time+3
  3790                           
  3791                           ;main.c: 733: if (num_leds_lit)
  3792  01BF  085E               	movf	RunGame@num_leds_lit,w
  3793  01C0  1D03               	btfss	3,2
  3794                           
  3795                           ;main.c: 734: {
  3796                           ;main.c: 735: num_leds_lit--;
  3797  01C1  03DE               	decf	RunGame@num_leds_lit,f
  3798  01C2  0008               	return
  3799  01C3                     __end_of_RunGame:	
  3800                           
  3801                           	psect	swtext3
  3802  052E                     __pswtext3:	
  3803  052E                     S2598:	
  3804  052E  28DB               	ljmp	l2326
  3805  052F  2849               	ljmp	l2306
  3806  0530  285A               	ljmp	l2308
  3807  0531  286B               	ljmp	l2310
  3808  0532  287C               	ljmp	l2312
  3809  0533  288D               	ljmp	l2314
  3810  0534  289E               	ljmp	l2316
  3811  0535  28AF               	ljmp	l2318
  3812  0536  28C0               	ljmp	l2320
  3813                           
  3814                           	psect	text15
  3815  0583                     __ptext15:	
  3816 ;; *************** function _SetLEDOn *****************
  3817 ;; Defined at:
  3818 ;;		line 202 in file "main.c"
  3819 ;; Parameters:    Size  Location     Type
  3820 ;;  LED             1    wreg     unsigned char 
  3821 ;; Auto vars:     Size  Location     Type
  3822 ;;  LED             1    3[COMMON] unsigned char 
  3823 ;; Return value:  Size  Location     Type
  3824 ;;                  1    wreg      void 
  3825 ;; Registers used:
  3826 ;;		wreg, status,2, status,0
  3827 ;; Tracked objects:
  3828 ;;		On entry : 0/0
  3829 ;;		On exit  : 1F/0
  3830 ;;		Unchanged: 0/0
  3831 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3832 ;;      Params:         0       0       0       0
  3833 ;;      Locals:         1       0       0       0
  3834 ;;      Temps:          0       0       0       0
  3835 ;;      Totals:         1       0       0       0
  3836 ;;Total ram usage:        1 bytes
  3837 ;; Hardware stack levels used:    1
  3838 ;; Hardware stack levels required when called:    4
  3839 ;; This function calls:
  3840 ;;		Nothing
  3841 ;; This function is called by:
  3842 ;;		_RunRightFlash
  3843 ;;		_RunLeftFlash
  3844 ;;		_RunGame
  3845 ;; This function uses a non-reentrant model
  3846 ;;
  3847                           
  3848                           
  3849                           ;psect for function _SetLEDOn
  3850  0583                     _SetLEDOn:	
  3851                           
  3852                           ;incstack = 0
  3853                           ; Regs used in _SetLEDOn: [wreg+status,2+status,0]
  3854                           ;SetLEDOn@LED stored from wreg
  3855  0583  00F3               	movwf	SetLEDOn@LED
  3856                           
  3857                           ;main.c: 204: LEDOns = (uint8_t)(LEDOns | LED);
  3858  0584  0020               	movlb	0	; select bank0
  3859  0585  04D0               	iorwf	_LEDOns,f	;volatile
  3860  0586  0008               	return
  3861  0587                     __end_of_SetLEDOn:	
  3862                           
  3863                           	psect	text16
  3864  0567                     __ptext16:	
  3865 ;; *************** function _SetLEDOff *****************
  3866 ;; Defined at:
  3867 ;;		line 207 in file "main.c"
  3868 ;; Parameters:    Size  Location     Type
  3869 ;;  LED             1    wreg     unsigned char 
  3870 ;; Auto vars:     Size  Location     Type
  3871 ;;  LED             1    3[COMMON] unsigned char 
  3872 ;; Return value:  Size  Location     Type
  3873 ;;                  1    wreg      void 
  3874 ;; Registers used:
  3875 ;;		wreg, status,2, status,0
  3876 ;; Tracked objects:
  3877 ;;		On entry : 0/0
  3878 ;;		On exit  : 1F/0
  3879 ;;		Unchanged: 0/0
  3880 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3881 ;;      Params:         0       0       0       0
  3882 ;;      Locals:         1       0       0       0
  3883 ;;      Temps:          0       0       0       0
  3884 ;;      Totals:         1       0       0       0
  3885 ;;Total ram usage:        1 bytes
  3886 ;; Hardware stack levels used:    1
  3887 ;; Hardware stack levels required when called:    4
  3888 ;; This function calls:
  3889 ;;		Nothing
  3890 ;; This function is called by:
  3891 ;;		_RunRightFlash
  3892 ;;		_RunLeftFlash
  3893 ;;		_RunGame
  3894 ;; This function uses a non-reentrant model
  3895 ;;
  3896                           
  3897                           
  3898                           ;psect for function _SetLEDOff
  3899  0567                     _SetLEDOff:	
  3900                           
  3901                           ;incstack = 0
  3902                           ; Regs used in _SetLEDOff: [wreg+status,2+status,0]
  3903                           ;SetLEDOff@LED stored from wreg
  3904  0567  00F3               	movwf	SetLEDOff@LED
  3905                           
  3906                           ;main.c: 209: LEDOns = (uint8_t)(LEDOns & ~LED);
  3907  0568  0973               	comf	SetLEDOff@LED,w
  3908  0569  0020               	movlb	0	; select bank0
  3909  056A  05D0               	andwf	_LEDOns,f	;volatile
  3910  056B  0008               	return
  3911  056C                     __end_of_SetLEDOff:	
  3912                           
  3913                           	psect	text17
  3914  034C                     __ptext17:	
  3915 ;; *************** function _CheckForButtonPushes *****************
  3916 ;; Defined at:
  3917 ;;		line 743 in file "main.c"
  3918 ;; Parameters:    Size  Location     Type
  3919 ;;		None
  3920 ;; Auto vars:     Size  Location     Type
  3921 ;;		None
  3922 ;; Return value:  Size  Location     Type
  3923 ;;                  1    wreg      unsigned char 
  3924 ;; Registers used:
  3925 ;;		wreg, status,2, status,0, pclath, cstack
  3926 ;; Tracked objects:
  3927 ;;		On entry : 1F/0
  3928 ;;		On exit  : 1F/0
  3929 ;;		Unchanged: 0/0
  3930 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3931 ;;      Params:         0       0       0       0
  3932 ;;      Locals:         0       1       0       0
  3933 ;;      Temps:          4       0       0       0
  3934 ;;      Totals:         4       1       0       0
  3935 ;;Total ram usage:        5 bytes
  3936 ;; Hardware stack levels used:    1
  3937 ;; Hardware stack levels required when called:    5
  3938 ;; This function calls:
  3939 ;;		_LeftButtonPressed
  3940 ;;		_LeftButtonPressedRaw
  3941 ;;		_RightButtonPressed
  3942 ;;		_RightButtonPressedRaw
  3943 ;; This function is called by:
  3944 ;;		_main
  3945 ;; This function uses a non-reentrant model
  3946 ;;
  3947                           
  3948                           
  3949                           ;psect for function _CheckForButtonPushes
  3950  034C                     _CheckForButtonPushes:	
  3951                           
  3952                           ;main.c: 745: static bool LastLeftButtonState = 0;
  3953                           ;main.c: 746: static bool LastRightButtonState = 0;
  3954                           ;main.c: 747: static uint8_t LeftButtonQuickPressCount = 0;
  3955                           ;main.c: 750: if (LeftButtonPressedRaw())
  3956                           
  3957                           ;incstack = 0
  3958                           ; Regs used in _CheckForButtonPushes: [wreg+status,2+status,0+pclath+cstack]
  3959  034C  2557               	fcall	_LeftButtonPressedRaw
  3960  034D  3A00               	xorlw	0
  3961  034E  1903               	skipnz
  3962  034F  2B5D               	goto	l2400
  3963                           
  3964                           ;main.c: 751: {
  3965                           ;main.c: 752: if (LeftButtonState == BUTTON_STATE_PRESSED_TIMING)
  3966  0350  0B78               	decfsz	_LeftButtonState,w	;volatile
  3967  0351  2B57               	goto	l2396
  3968                           
  3969                           ;main.c: 753: {
  3970                           ;main.c: 754: if (LeftDebounceTimer == 0)
  3971  0352  087A               	movf	_LeftDebounceTimer,w	;volatile
  3972  0353  1D03               	btfss	3,2
  3973  0354  2B6F               	goto	l2410
  3974                           
  3975                           ;main.c: 755: {
  3976                           ;main.c: 756: LeftButtonState = BUTTON_STATE_PRESSED;
  3977  0355  3002               	movlw	2
  3978  0356  2B65               	goto	L8
  3979  0357                     l2396:	
  3980                           
  3981                           ;main.c: 759: else if (LeftButtonState != BUTTON_STATE_PRESSED)
  3982  0357  3002               	movlw	2
  3983  0358  0678               	xorwf	_LeftButtonState,w	;volatile
  3984  0359  1903               	btfsc	3,2
  3985  035A  2B6F               	goto	l2410
  3986                           
  3987                           ;main.c: 760: {
  3988                           ;main.c: 761: LeftButtonState = BUTTON_STATE_PRESSED_TIMING;
  3989  035B  3001               	movlw	1
  3990  035C  2B6C               	goto	L9
  3991  035D                     l2400:	
  3992                           ;main.c: 762: LeftDebounceTimer = 20;
  3993                           
  3994                           
  3995                           ;main.c: 765: else
  3996                           ;main.c: 766: {
  3997                           ;main.c: 767: if (LeftButtonState == BUTTON_STATE_RELEASED_TIMING)
  3998  035D  3003               	movlw	3
  3999  035E  0678               	xorwf	_LeftButtonState,w	;volatile
  4000  035F  1D03               	btfss	3,2
  4001  0360  2B67               	goto	l2406
  4002                           
  4003                           ;main.c: 768: {
  4004                           ;main.c: 769: if (LeftDebounceTimer == 0)
  4005  0361  087A               	movf	_LeftDebounceTimer,w	;volatile
  4006  0362  1D03               	btfss	3,2
  4007  0363  2B6F               	goto	l2410
  4008                           
  4009                           ;main.c: 770: {
  4010                           ;main.c: 771: LeftButtonState = BUTTON_STATE_RELEASED;
  4011  0364  3004               	movlw	4
  4012  0365                     L8:	
  4013  0365  00F8               	movwf	_LeftButtonState	;volatile
  4014  0366  2B6F               	goto	l2410
  4015  0367                     l2406:	
  4016                           
  4017                           ;main.c: 774: else if (LeftButtonState != BUTTON_STATE_RELEASED)
  4018  0367  3004               	movlw	4
  4019  0368  0678               	xorwf	_LeftButtonState,w	;volatile
  4020  0369  1903               	btfsc	3,2
  4021  036A  2B6F               	goto	l2410
  4022                           
  4023                           ;main.c: 775: {
  4024                           ;main.c: 776: LeftButtonState = BUTTON_STATE_RELEASED_TIMING;
  4025  036B  3003               	movlw	3
  4026  036C                     L9:	
  4027  036C  00F8               	movwf	_LeftButtonState	;volatile
  4028                           
  4029                           ;main.c: 777: LeftDebounceTimer = 20;
  4030  036D  3014               	movlw	20
  4031  036E  00FA               	movwf	_LeftDebounceTimer	;volatile
  4032  036F                     l2410:	
  4033                           
  4034                           ;main.c: 778: }
  4035                           ;main.c: 779: }
  4036                           ;main.c: 782: if (RightButtonPressedRaw())
  4037  036F  2551               	fcall	_RightButtonPressedRaw
  4038  0370  3A00               	xorlw	0
  4039  0371  1903               	skipnz
  4040  0372  2B80               	goto	l2422
  4041                           
  4042                           ;main.c: 783: {
  4043                           ;main.c: 784: if (RightButtonState == BUTTON_STATE_PRESSED_TIMING)
  4044  0373  0B77               	decfsz	_RightButtonState,w	;volatile
  4045  0374  2B7A               	goto	l2418
  4046                           
  4047                           ;main.c: 785: {
  4048                           ;main.c: 786: if (RightDebounceTimer == 0)
  4049  0375  0879               	movf	_RightDebounceTimer,w	;volatile
  4050  0376  1D03               	btfss	3,2
  4051  0377  2B92               	goto	l2432
  4052                           
  4053                           ;main.c: 787: {
  4054                           ;main.c: 788: RightButtonState = BUTTON_STATE_PRESSED;
  4055  0378  3002               	movlw	2
  4056  0379  2B88               	goto	L10
  4057  037A                     l2418:	
  4058                           
  4059                           ;main.c: 791: else if (RightButtonState != BUTTON_STATE_PRESSED)
  4060  037A  3002               	movlw	2
  4061  037B  0677               	xorwf	_RightButtonState,w	;volatile
  4062  037C  1903               	btfsc	3,2
  4063  037D  2B92               	goto	l2432
  4064                           
  4065                           ;main.c: 792: {
  4066                           ;main.c: 793: RightButtonState = BUTTON_STATE_PRESSED_TIMING;
  4067  037E  3001               	movlw	1
  4068  037F  2B8F               	goto	L11
  4069  0380                     l2422:	
  4070                           ;main.c: 794: RightDebounceTimer = 20;
  4071                           
  4072                           
  4073                           ;main.c: 797: else
  4074                           ;main.c: 798: {
  4075                           ;main.c: 799: if (RightButtonState == BUTTON_STATE_RELEASED_TIMING)
  4076  0380  3003               	movlw	3
  4077  0381  0677               	xorwf	_RightButtonState,w	;volatile
  4078  0382  1D03               	btfss	3,2
  4079  0383  2B8A               	goto	l2428
  4080                           
  4081                           ;main.c: 800: {
  4082                           ;main.c: 801: if (RightDebounceTimer == 0)
  4083  0384  0879               	movf	_RightDebounceTimer,w	;volatile
  4084  0385  1D03               	btfss	3,2
  4085  0386  2B92               	goto	l2432
  4086                           
  4087                           ;main.c: 802: {
  4088                           ;main.c: 803: RightButtonState = BUTTON_STATE_RELEASED;
  4089  0387  3004               	movlw	4
  4090  0388                     L10:	
  4091  0388  00F7               	movwf	_RightButtonState	;volatile
  4092  0389  2B92               	goto	l2432
  4093  038A                     l2428:	
  4094                           
  4095                           ;main.c: 806: else if (RightButtonState != BUTTON_STATE_RELEASED)
  4096  038A  3004               	movlw	4
  4097  038B  0677               	xorwf	_RightButtonState,w	;volatile
  4098  038C  1903               	btfsc	3,2
  4099  038D  2B92               	goto	l2432
  4100                           
  4101                           ;main.c: 807: {
  4102                           ;main.c: 808: RightButtonState = BUTTON_STATE_RELEASED_TIMING;
  4103  038E  3003               	movlw	3
  4104  038F                     L11:	
  4105  038F  00F7               	movwf	_RightButtonState	;volatile
  4106                           
  4107                           ;main.c: 809: RightDebounceTimer = 20;
  4108  0390  3014               	movlw	20
  4109  0391  00F9               	movwf	_RightDebounceTimer	;volatile
  4110  0392                     l2432:	
  4111                           
  4112                           ;main.c: 810: }
  4113                           ;main.c: 811: }
  4114                           ;main.c: 813: if (LeftButtonPressed())
  4115  0392  2571               	fcall	_LeftButtonPressed
  4116  0393  3A00               	xorlw	0
  4117  0394  1903               	skipnz
  4118  0395  2B9E               	goto	l2440
  4119                           
  4120                           ;main.c: 814: {
  4121                           ;main.c: 815: if (LastLeftButtonState == 0)
  4122  0396  084E               	movf	CheckForButtonPushes@LastLeftButtonState,w
  4123  0397  1D03               	btfss	3,2
  4124  0398  2B9B               	goto	l2438
  4125                           
  4126                           ;main.c: 816: {
  4127                           ;main.c: 817: PatternState[1] = 1;
  4128  0399  3001               	movlw	1
  4129  039A  00B1               	movwf	_PatternState+1	;volatile
  4130  039B                     l2438:	
  4131                           
  4132                           ;main.c: 818: }
  4133                           ;main.c: 819: LastLeftButtonState = 1;
  4134  039B  01CE               	clrf	CheckForButtonPushes@LastLeftButtonState
  4135  039C  0ACE               	incf	CheckForButtonPushes@LastLeftButtonState,f
  4136                           
  4137                           ;main.c: 820: }
  4138  039D  2B9F               	goto	l2442
  4139  039E                     l2440:	
  4140                           
  4141                           ;main.c: 821: else
  4142                           ;main.c: 822: {
  4143                           ;main.c: 823: LastLeftButtonState = 0;
  4144  039E  01CE               	clrf	CheckForButtonPushes@LastLeftButtonState
  4145  039F                     l2442:	
  4146                           
  4147                           ;main.c: 824: }
  4148                           ;main.c: 827: if (RightButtonPressed())
  4149  039F  256C               	fcall	_RightButtonPressed
  4150  03A0  3A00               	xorlw	0
  4151  03A1  1903               	skipnz
  4152  03A2  2BDF               	goto	l2466
  4153                           
  4154                           ;main.c: 828: {
  4155                           ;main.c: 829: if (LastRightButtonState == 0)
  4156  03A3  084D               	movf	CheckForButtonPushes@LastRightButtonState,w
  4157  03A4  1D03               	btfss	3,2
  4158  03A5  2BDC               	goto	l2464
  4159                           
  4160                           ;main.c: 830: {
  4161                           ;main.c: 831: PatternState[0] = 1;
  4162  03A6  3001               	movlw	1
  4163  03A7  00B0               	movwf	_PatternState	;volatile
  4164                           
  4165                           ;main.c: 834: if (LeftButtonPressed())
  4166  03A8  2571               	fcall	_LeftButtonPressed
  4167  03A9  3A00               	xorlw	0
  4168  03AA  1903               	skipnz
  4169  03AB  2BD4               	goto	l2462
  4170                           
  4171                           ;main.c: 835: {
  4172                           ;main.c: 836: if (WakeTimer < (LastRightButtonPressTime + 250))
  4173  03AC  30FA               	movlw	250
  4174  03AD  00F3               	movwf	??_CheckForButtonPushes
  4175  03AE  01F4               	clrf	??_CheckForButtonPushes+1
  4176  03AF  01F5               	clrf	??_CheckForButtonPushes+2
  4177  03B0  01F6               	clrf	??_CheckForButtonPushes+3
  4178  03B1  0844               	movf	_LastRightButtonPressTime,w	;volatile
  4179  03B2  07F3               	addwf	??_CheckForButtonPushes,f
  4180  03B3  0845               	movf	_LastRightButtonPressTime+1,w	;volatile
  4181  03B4  3DF4               	addwfc	??_CheckForButtonPushes+1,f
  4182  03B5  0846               	movf	_LastRightButtonPressTime+2,w	;volatile
  4183  03B6  3DF5               	addwfc	??_CheckForButtonPushes+2,f
  4184  03B7  0847               	movf	_LastRightButtonPressTime+3,w	;volatile
  4185  03B8  3DF6               	addwfc	??_CheckForButtonPushes+3,f
  4186  03B9  0876               	movf	??_CheckForButtonPushes+3,w
  4187  03BA  024B               	subwf	_WakeTimer+3,w	;volatile
  4188  03BB  1D03               	skipz
  4189  03BC  2BC7               	goto	u2175
  4190  03BD  0875               	movf	??_CheckForButtonPushes+2,w
  4191  03BE  024A               	subwf	_WakeTimer+2,w	;volatile
  4192  03BF  1D03               	skipz
  4193  03C0  2BC7               	goto	u2175
  4194  03C1  0874               	movf	??_CheckForButtonPushes+1,w
  4195  03C2  0249               	subwf	_WakeTimer+1,w	;volatile
  4196  03C3  1D03               	skipz
  4197  03C4  2BC7               	goto	u2175
  4198  03C5  0873               	movf	??_CheckForButtonPushes,w
  4199  03C6  0248               	subwf	_WakeTimer,w	;volatile
  4200  03C7                     u2175:	
  4201  03C7  1803               	skipnc
  4202  03C8  2BD3               	goto	l2460
  4203  03C9  3004               	movlw	4
  4204                           
  4205                           ;main.c: 837: {
  4206                           ;main.c: 838: LeftButtonQuickPressCount++;
  4207  03CA  0ACC               	incf	CheckForButtonPushes@LeftButtonQuickPressCount,f
  4208                           
  4209                           ;main.c: 840: if (LeftButtonQuickPressCount == 4)
  4210  03CB  064C               	xorwf	CheckForButtonPushes@LeftButtonQuickPressCount,w
  4211  03CC  1D03               	btfss	3,2
  4212  03CD  2BD4               	goto	l2462
  4213                           
  4214                           ;main.c: 841: {
  4215                           ;main.c: 843: PatternState[0] = 0;
  4216  03CE  01B0               	clrf	_PatternState	;volatile
  4217                           
  4218                           ;main.c: 844: PatternState[1] = 0;
  4219  03CF  01B1               	clrf	_PatternState+1	;volatile
  4220                           
  4221                           ;main.c: 845: PatternState[2] = 1;
  4222  03D0  3001               	movlw	1
  4223  03D1  00B2               	movwf	_PatternState+2	;volatile
  4224  03D2  2BD4               	goto	l2462
  4225  03D3                     l2460:	
  4226                           
  4227                           ;main.c: 859: else
  4228                           ;main.c: 860: {
  4229                           ;main.c: 861: LeftButtonQuickPressCount = 0;
  4230  03D3  01CC               	clrf	CheckForButtonPushes@LeftButtonQuickPressCount
  4231  03D4                     l2462:	
  4232                           
  4233                           ;main.c: 862: }
  4234                           ;main.c: 863: }
  4235                           ;main.c: 864: LastRightButtonPressTime = WakeTimer;
  4236  03D4  084B               	movf	_WakeTimer+3,w	;volatile
  4237  03D5  00C7               	movwf	_LastRightButtonPressTime+3	;volatile
  4238  03D6  084A               	movf	_WakeTimer+2,w	;volatile
  4239  03D7  00C6               	movwf	_LastRightButtonPressTime+2	;volatile
  4240  03D8  0849               	movf	_WakeTimer+1,w	;volatile
  4241  03D9  00C5               	movwf	_LastRightButtonPressTime+1	;volatile
  4242  03DA  0848               	movf	_WakeTimer,w	;volatile
  4243  03DB  00C4               	movwf	_LastRightButtonPressTime	;volatile
  4244  03DC                     l2464:	
  4245                           
  4246                           ;main.c: 865: }
  4247                           ;main.c: 866: LastRightButtonState = 1;
  4248  03DC  01CD               	clrf	CheckForButtonPushes@LastRightButtonState
  4249  03DD  0ACD               	incf	CheckForButtonPushes@LastRightButtonState,f
  4250                           
  4251                           ;main.c: 867: }
  4252  03DE  2BE0               	goto	l2468
  4253  03DF                     l2466:	
  4254                           
  4255                           ;main.c: 868: else
  4256                           ;main.c: 869: {
  4257                           ;main.c: 870: LastRightButtonState = 0;
  4258  03DF  01CD               	clrf	CheckForButtonPushes@LastRightButtonState
  4259  03E0                     l2468:	
  4260                           
  4261                           ;main.c: 871: }
  4262                           ;main.c: 873: return ((bool)(LeftButtonPressedRaw() || RightButtonPressedRaw()));
  4263  03E0  01DF               	clrf	_CheckForButtonPushes$440
  4264  03E1  0ADF               	incf	_CheckForButtonPushes$440,f
  4265  03E2  2557               	fcall	_LeftButtonPressedRaw
  4266  03E3  3A00               	xorlw	0
  4267  03E4  1D03               	skipz
  4268  03E5  2BEB               	goto	l2476
  4269  03E6  2551               	fcall	_RightButtonPressedRaw
  4270  03E7  3A00               	xorlw	0
  4271  03E8  1D03               	skipz
  4272  03E9  2BEB               	goto	l2476
  4273  03EA  01DF               	clrf	_CheckForButtonPushes$440
  4274  03EB                     l2476:	
  4275  03EB  085F               	movf	_CheckForButtonPushes$440,w
  4276  03EC  0008               	return
  4277  03ED                     __end_of_CheckForButtonPushes:	
  4278                           
  4279                           	psect	text18
  4280  0551                     __ptext18:	
  4281 ;; *************** function _RightButtonPressedRaw *****************
  4282 ;; Defined at:
  4283 ;;		line 280 in file "main.c"
  4284 ;; Parameters:    Size  Location     Type
  4285 ;;		None
  4286 ;; Auto vars:     Size  Location     Type
  4287 ;;		None
  4288 ;; Return value:  Size  Location     Type
  4289 ;;                  1    wreg      unsigned char 
  4290 ;; Registers used:
  4291 ;;		wreg, status,0
  4292 ;; Tracked objects:
  4293 ;;		On entry : 1F/0
  4294 ;;		On exit  : 1F/0
  4295 ;;		Unchanged: 0/0
  4296 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4297 ;;      Params:         0       0       0       0
  4298 ;;      Locals:         0       0       0       0
  4299 ;;      Temps:          0       0       0       0
  4300 ;;      Totals:         0       0       0       0
  4301 ;;Total ram usage:        0 bytes
  4302 ;; Hardware stack levels used:    1
  4303 ;; Hardware stack levels required when called:    4
  4304 ;; This function calls:
  4305 ;;		Nothing
  4306 ;; This function is called by:
  4307 ;;		_CheckForButtonPushes
  4308 ;; This function uses a non-reentrant model
  4309 ;;
  4310                           
  4311                           
  4312                           ;psect for function _RightButtonPressedRaw
  4313  0551                     _RightButtonPressedRaw:	
  4314                           
  4315                           ;main.c: 282: return (uint8_t)(PORTAbits.RA3 == 0);
  4316                           
  4317                           ;incstack = 0
  4318                           ; Regs used in _RightButtonPressedRaw: [wreg+status,0]
  4319  0551  1003               	clrc
  4320  0552  1D8C               	btfss	12,3	;volatile
  4321  0553  1403               	setc
  4322  0554  3000               	movlw	0
  4323  0555  3D09               	addwfc	9,w
  4324  0556  0008               	return
  4325  0557                     __end_of_RightButtonPressedRaw:	
  4326                           
  4327                           	psect	text19
  4328  056C                     __ptext19:	
  4329 ;; *************** function _RightButtonPressed *****************
  4330 ;; Defined at:
  4331 ;;		line 292 in file "main.c"
  4332 ;; Parameters:    Size  Location     Type
  4333 ;;		None
  4334 ;; Auto vars:     Size  Location     Type
  4335 ;;		None
  4336 ;; Return value:  Size  Location     Type
  4337 ;;                  1    wreg      unsigned char 
  4338 ;; Registers used:
  4339 ;;		wreg, status,2, status,0
  4340 ;; Tracked objects:
  4341 ;;		On entry : 1F/0
  4342 ;;		On exit  : 1F/0
  4343 ;;		Unchanged: 1F/0
  4344 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4345 ;;      Params:         0       0       0       0
  4346 ;;      Locals:         0       0       0       0
  4347 ;;      Temps:          0       0       0       0
  4348 ;;      Totals:         0       0       0       0
  4349 ;;Total ram usage:        0 bytes
  4350 ;; Hardware stack levels used:    1
  4351 ;; Hardware stack levels required when called:    4
  4352 ;; This function calls:
  4353 ;;		Nothing
  4354 ;; This function is called by:
  4355 ;;		_RunRightFlash
  4356 ;;		_CheckForButtonPushes
  4357 ;; This function uses a non-reentrant model
  4358 ;;
  4359                           
  4360                           
  4361                           ;psect for function _RightButtonPressed
  4362  056C                     _RightButtonPressed:	
  4363                           
  4364                           ;main.c: 294: return (RightButtonState == BUTTON_STATE_PRESSED);
  4365                           
  4366                           ;incstack = 0
  4367                           ; Regs used in _RightButtonPressed: [wreg+status,2+status,0]
  4368  056C  3002               	movlw	2
  4369  056D  0677               	xorwf	_RightButtonState,w	;volatile
  4370  056E  1903               	btfsc	3,2
  4371  056F  3401               	retlw	1
  4372  0570  3400               	retlw	0
  4373  0571                     __end_of_RightButtonPressed:	
  4374                           
  4375                           	psect	text20
  4376  0557                     __ptext20:	
  4377 ;; *************** function _LeftButtonPressedRaw *****************
  4378 ;; Defined at:
  4379 ;;		line 286 in file "main.c"
  4380 ;; Parameters:    Size  Location     Type
  4381 ;;		None
  4382 ;; Auto vars:     Size  Location     Type
  4383 ;;		None
  4384 ;; Return value:  Size  Location     Type
  4385 ;;                  1    wreg      unsigned char 
  4386 ;; Registers used:
  4387 ;;		wreg, status,0
  4388 ;; Tracked objects:
  4389 ;;		On entry : 1F/0
  4390 ;;		On exit  : 1F/0
  4391 ;;		Unchanged: 0/0
  4392 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4393 ;;      Params:         0       0       0       0
  4394 ;;      Locals:         0       0       0       0
  4395 ;;      Temps:          0       0       0       0
  4396 ;;      Totals:         0       0       0       0
  4397 ;;Total ram usage:        0 bytes
  4398 ;; Hardware stack levels used:    1
  4399 ;; Hardware stack levels required when called:    4
  4400 ;; This function calls:
  4401 ;;		Nothing
  4402 ;; This function is called by:
  4403 ;;		_CheckForButtonPushes
  4404 ;; This function uses a non-reentrant model
  4405 ;;
  4406                           
  4407                           
  4408                           ;psect for function _LeftButtonPressedRaw
  4409  0557                     _LeftButtonPressedRaw:	
  4410                           
  4411                           ;main.c: 288: return (uint8_t)(PORTAbits.RA2 == 0);
  4412                           
  4413                           ;incstack = 0
  4414                           ; Regs used in _LeftButtonPressedRaw: [wreg+status,0]
  4415  0557  1003               	clrc
  4416  0558  1D0C               	btfss	12,2	;volatile
  4417  0559  1403               	setc
  4418  055A  3000               	movlw	0
  4419  055B  3D09               	addwfc	9,w
  4420  055C  0008               	return
  4421  055D                     __end_of_LeftButtonPressedRaw:	
  4422                           
  4423                           	psect	text21
  4424  0571                     __ptext21:	
  4425 ;; *************** function _LeftButtonPressed *****************
  4426 ;; Defined at:
  4427 ;;		line 298 in file "main.c"
  4428 ;; Parameters:    Size  Location     Type
  4429 ;;		None
  4430 ;; Auto vars:     Size  Location     Type
  4431 ;;		None
  4432 ;; Return value:  Size  Location     Type
  4433 ;;                  1    wreg      unsigned char 
  4434 ;; Registers used:
  4435 ;;		wreg, status,2, status,0
  4436 ;; Tracked objects:
  4437 ;;		On entry : 1F/0
  4438 ;;		On exit  : 1F/0
  4439 ;;		Unchanged: 1F/0
  4440 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4441 ;;      Params:         0       0       0       0
  4442 ;;      Locals:         0       0       0       0
  4443 ;;      Temps:          0       0       0       0
  4444 ;;      Totals:         0       0       0       0
  4445 ;;Total ram usage:        0 bytes
  4446 ;; Hardware stack levels used:    1
  4447 ;; Hardware stack levels required when called:    4
  4448 ;; This function calls:
  4449 ;;		Nothing
  4450 ;; This function is called by:
  4451 ;;		_RunLeftFlash
  4452 ;;		_CheckForButtonPushes
  4453 ;; This function uses a non-reentrant model
  4454 ;;
  4455                           
  4456                           
  4457                           ;psect for function _LeftButtonPressed
  4458  0571                     _LeftButtonPressed:	
  4459                           
  4460                           ;main.c: 300: return (LeftButtonState == BUTTON_STATE_PRESSED);
  4461                           
  4462                           ;incstack = 0
  4463                           ; Regs used in _LeftButtonPressed: [wreg+status,2+status,0]
  4464  0571  3002               	movlw	2
  4465  0572  0678               	xorwf	_LeftButtonState,w	;volatile
  4466  0573  1903               	btfsc	3,2
  4467  0574  3401               	retlw	1
  4468  0575  3400               	retlw	0
  4469  0576                     __end_of_LeftButtonPressed:	
  4470                           
  4471                           	psect	intentry
  4472  0004                     __pintentry:	
  4473 ;; *************** function _INTERRUPT_InterruptManager *****************
  4474 ;; Defined at:
  4475 ;;		line 51 in file "mcc_generated_files/interrupt_manager.c"
  4476 ;; Parameters:    Size  Location     Type
  4477 ;;		None
  4478 ;; Auto vars:     Size  Location     Type
  4479 ;;		None
  4480 ;; Return value:  Size  Location     Type
  4481 ;;                  1    wreg      void 
  4482 ;; Registers used:
  4483 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4484 ;; Tracked objects:
  4485 ;;		On entry : 0/0
  4486 ;;		On exit  : 0/0
  4487 ;;		Unchanged: 0/0
  4488 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4489 ;;      Params:         0       0       0       0
  4490 ;;      Locals:         0       0       0       0
  4491 ;;      Temps:          0       0       0       0
  4492 ;;      Totals:         0       0       0       0
  4493 ;;Total ram usage:        0 bytes
  4494 ;; Hardware stack levels used:    1
  4495 ;; Hardware stack levels required when called:    3
  4496 ;; This function calls:
  4497 ;;		_PIN_MANAGER_IOC
  4498 ;;		_TMR0_ISR
  4499 ;; This function is called by:
  4500 ;;		Interrupt level 1
  4501 ;; This function uses a non-reentrant model
  4502 ;;
  4503                           
  4504  0004                     _INTERRUPT_InterruptManager:	
  4505                           
  4506                           ;incstack = 0
  4507  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  4508                           
  4509                           ; Regs used in _INTERRUPT_InterruptManager: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  4510  0005  3180               	pagesel	$
  4511                           
  4512                           ;interrupt_manager.c: 54: if(INTCONbits.TMR0IE == 1 && INTCONbits.TMR0IF == 1)
  4513  0006  1A8B               	btfsc	11,5	;volatile
  4514  0007  1D0B               	btfss	11,2	;volatile
  4515  0008  280B               	goto	i1l102
  4516                           
  4517                           ;interrupt_manager.c: 55: {
  4518                           ;interrupt_manager.c: 56: TMR0_ISR();
  4519  0009  2576               	fcall	_TMR0_ISR
  4520                           
  4521                           ;interrupt_manager.c: 57: }
  4522  000A  280F               	goto	i1l106
  4523  000B                     i1l102:	
  4524                           
  4525                           ;interrupt_manager.c: 58: else if(INTCONbits.IOCIE == 1 && INTCONbits.IOCIF == 1)
  4526  000B  198B               	btfsc	11,3	;volatile
  4527  000C  1C0B               	btfss	11,0	;volatile
  4528  000D  280F               	goto	i1l106
  4529                           
  4530                           ;interrupt_manager.c: 59: {
  4531                           ;interrupt_manager.c: 60: PIN_MANAGER_IOC();
  4532  000E  253E               	fcall	_PIN_MANAGER_IOC
  4533  000F                     i1l106:	
  4534                           ;interrupt_manager.c: 61: }
  4535                           
  4536  000F  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  4537  0010  0009               	retfie
  4538  0011                     __end_of_INTERRUPT_InterruptManager:	
  4539                           
  4540                           	psect	text23
  4541  0576                     __ptext23:	
  4542 ;; *************** function _TMR0_ISR *****************
  4543 ;; Defined at:
  4544 ;;		line 108 in file "mcc_generated_files/tmr0.c"
  4545 ;; Parameters:    Size  Location     Type
  4546 ;;		None
  4547 ;; Auto vars:     Size  Location     Type
  4548 ;;		None
  4549 ;; Return value:  Size  Location     Type
  4550 ;;                  1    wreg      void 
  4551 ;; Registers used:
  4552 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4553 ;; Tracked objects:
  4554 ;;		On entry : 0/0
  4555 ;;		On exit  : 0/0
  4556 ;;		Unchanged: 0/0
  4557 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4558 ;;      Params:         0       0       0       0
  4559 ;;      Locals:         0       0       0       0
  4560 ;;      Temps:          0       0       0       0
  4561 ;;      Totals:         0       0       0       0
  4562 ;;Total ram usage:        0 bytes
  4563 ;; Hardware stack levels used:    1
  4564 ;; Hardware stack levels required when called:    2
  4565 ;; This function calls:
  4566 ;;		_TMR0_CallBack
  4567 ;; This function is called by:
  4568 ;;		_INTERRUPT_InterruptManager
  4569 ;; This function uses a non-reentrant model
  4570 ;;
  4571                           
  4572                           
  4573                           ;psect for function _TMR0_ISR
  4574  0576                     _TMR0_ISR:	
  4575                           
  4576                           ;tmr0.c: 112: INTCONbits.TMR0IF = 0;
  4577                           
  4578                           ;incstack = 0
  4579                           ; Regs used in _TMR0_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4580  0576  110B               	bcf	11,2	;volatile
  4581                           
  4582                           ;tmr0.c: 114: TMR0 = timer0ReloadVal;
  4583  0577  0020               	movlb	0	; select bank0
  4584  0578  086F               	movf	_timer0ReloadVal,w	;volatile
  4585  0579  0095               	movwf	21	;volatile
  4586                           
  4587                           ;tmr0.c: 118: TMR0_CallBack();
  4588  057A  2D24               	ljmp	i1l1508
  4589  057B                     __end_of_TMR0_ISR:	
  4590                           
  4591                           	psect	text24
  4592  0524                     __ptext24:	
  4593 ;; *************** function _TMR0_CallBack *****************
  4594 ;; Defined at:
  4595 ;;		line 123 in file "mcc_generated_files/tmr0.c"
  4596 ;; Parameters:    Size  Location     Type
  4597 ;;		None
  4598 ;; Auto vars:     Size  Location     Type
  4599 ;;		None
  4600 ;; Return value:  Size  Location     Type
  4601 ;;                  1    wreg      void 
  4602 ;; Registers used:
  4603 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4604 ;; Tracked objects:
  4605 ;;		On entry : 1F/0
  4606 ;;		On exit  : 0/0
  4607 ;;		Unchanged: 0/0
  4608 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4609 ;;      Params:         0       0       0       0
  4610 ;;      Locals:         0       0       0       0
  4611 ;;      Temps:          0       0       0       0
  4612 ;;      Totals:         0       0       0       0
  4613 ;;Total ram usage:        0 bytes
  4614 ;; Hardware stack levels used:    1
  4615 ;; Hardware stack levels required when called:    1
  4616 ;; This function calls:
  4617 ;;		Absolute function
  4618 ;;		_TMR0_Callback
  4619 ;; This function is called by:
  4620 ;;		_TMR0_ISR
  4621 ;; This function uses a non-reentrant model
  4622 ;;
  4623                           
  4624                           
  4625                           ;psect for function _TMR0_CallBack
  4626  0524                     _TMR0_CallBack:	
  4627  0524                     i1l1508:	
  4628                           ;incstack = 0
  4629                           ; Regs used in _TMR0_CallBack: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4630                           
  4631                           
  4632                           ;tmr0.c: 127: if(TMR0_InterruptHandler)
  4633  0524  0869               	movf	_TMR0_InterruptHandler,w
  4634  0525  046A               	iorwf	_TMR0_InterruptHandler+1,w
  4635  0526  1903               	btfsc	3,2
  4636  0527  0008               	return
  4637                           
  4638                           ;tmr0.c: 128: {
  4639                           ;tmr0.c: 129: TMR0_InterruptHandler();
  4640  0528  086A               	movf	_TMR0_InterruptHandler+1,w
  4641  0529  008A               	movwf	10
  4642  052A  0869               	movf	_TMR0_InterruptHandler,w
  4643  052B  000A               	callw
  4644  052C  3185               	pagesel	$
  4645  052D  0008               	return
  4646  052E                     __end_of_TMR0_CallBack:	
  4647                           
  4648                           	psect	text25
  4649  043F                     __ptext25:	
  4650 ;; *************** function _TMR0_Callback *****************
  4651 ;; Defined at:
  4652 ;;		line 221 in file "main.c"
  4653 ;; Parameters:    Size  Location     Type
  4654 ;;		None
  4655 ;; Auto vars:     Size  Location     Type
  4656 ;;  i               1    2[COMMON] unsigned char 
  4657 ;; Return value:  Size  Location     Type
  4658 ;;                  1    wreg      void 
  4659 ;; Registers used:
  4660 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  4661 ;; Tracked objects:
  4662 ;;		On entry : 1F/0
  4663 ;;		On exit  : 1F/0
  4664 ;;		Unchanged: 0/0
  4665 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4666 ;;      Params:         0       0       0       0
  4667 ;;      Locals:         1       0       0       0
  4668 ;;      Temps:          2       0       0       0
  4669 ;;      Totals:         3       0       0       0
  4670 ;;Total ram usage:        3 bytes
  4671 ;; Hardware stack levels used:    1
  4672 ;; This function calls:
  4673 ;;		Nothing
  4674 ;; This function is called by:
  4675 ;;		_main
  4676 ;;		_TMR0_CallBack
  4677 ;; This function uses a non-reentrant model
  4678 ;;
  4679                           
  4680                           
  4681                           ;psect for function _TMR0_Callback
  4682  043F                     _TMR0_Callback:	
  4683                           
  4684                           ;main.c: 223: uint8_t i;
  4685                           ;main.c: 226: TRISA = 0xCC;
  4686                           
  4687                           ;incstack = 0
  4688                           ; Regs used in _TMR0_Callback: [wreg+fsr1l+fsr1h+status,2+status,0]
  4689  043F  30CC               	movlw	204
  4690  0440  0021               	movlb	1	; select bank1
  4691  0441  008C               	movwf	12	;volatile
  4692                           
  4693                           ;main.c: 227: PORTA = 0x00;
  4694  0442  0020               	movlb	0	; select bank0
  4695  0443  018C               	clrf	12	;volatile
  4696                           
  4697                           ;main.c: 230: i = (uint8_t)(1 << LEDState);
  4698  0444  3001               	movlw	1
  4699  0445  00F0               	movwf	??_TMR0_Callback
  4700  0446  0A51               	incf	_LEDState,w
  4701  0447  2C49               	goto	u83_24
  4702  0448                     u83_25:	
  4703  0448  35F0               	lslf	??_TMR0_Callback,f
  4704  0449                     u83_24:	
  4705  0449  0B89               	decfsz	9,f
  4706  044A  2C48               	goto	u83_25
  4707  044B  0870               	movf	??_TMR0_Callback,w
  4708  044C  00F2               	movwf	TMR0_Callback@i
  4709                           
  4710                           ;main.c: 233: if (i & LEDOns)
  4711  044D  0550               	andwf	_LEDOns,w	;volatile
  4712  044E  1903               	btfsc	3,2
  4713  044F  2C5D               	goto	i1l1412
  4714                           
  4715                           ;main.c: 234: {
  4716                           ;main.c: 236: TRISA = TRISTable[LEDState];
  4717  0450  0851               	movf	_LEDState,w
  4718  0451  3E52               	addlw	(low (_TRISTable| 0))& (0+255)
  4719  0452  0086               	movwf	6
  4720  0453  0187               	clrf	7
  4721  0454  0801               	movf	1,w
  4722  0455  0021               	movlb	1	; select bank1
  4723  0456  008C               	movwf	12	;volatile
  4724                           
  4725                           ;main.c: 237: PORTA = PORTTable[LEDState];
  4726  0457  0020               	movlb	0	; select bank0
  4727  0458  0851               	movf	_LEDState,w
  4728  0459  3EA0               	addlw	(low (_PORTTable| 0))& (0+255)
  4729  045A  0086               	movwf	6
  4730  045B  0801               	movf	1,w
  4731  045C  008C               	movwf	12	;volatile
  4732  045D                     i1l1412:	
  4733  045D  3008               	movlw	8
  4734                           
  4735                           ;main.c: 238: }
  4736                           ;main.c: 241: LEDState++;
  4737  045E  0AD1               	incf	_LEDState,f
  4738                           
  4739                           ;main.c: 242: if (LEDState == 8)
  4740  045F  0651               	xorwf	_LEDState,w
  4741  0460  1D03               	btfss	3,2
  4742  0461  0008               	return
  4743                           
  4744                           ;main.c: 243: {
  4745                           ;main.c: 248: WakeTimer++;
  4746  0462  3001               	movlw	1
  4747  0463  07C8               	addwf	_WakeTimer,f	;volatile
  4748  0464  3000               	movlw	0
  4749  0465  3DC9               	addwfc	_WakeTimer+1,f	;volatile
  4750  0466  3DCA               	addwfc	_WakeTimer+2,f	;volatile
  4751  0467  3DCB               	addwfc	_WakeTimer+3,f	;volatile
  4752                           
  4753                           ;main.c: 251: for (i=0; i < 8; i++)
  4754  0468  01F2               	clrf	TMR0_Callback@i
  4755  0469                     i1l1424:	
  4756                           
  4757                           ;main.c: 252: {
  4758                           ;main.c: 253: if (PatternDelay[i])
  4759  0469  3572               	lslf	TMR0_Callback@i,w
  4760  046A  3E20               	addlw	(low (_PatternDelay| 0))& (0+255)
  4761  046B  0086               	movwf	6
  4762  046C  0187               	clrf	7
  4763  046D  0016               	moviw fsr1++
  4764  046E  0401               	iorwf	1,w
  4765  046F  1903               	btfsc	3,2
  4766  0470  2C7B               	goto	i1l1428
  4767                           
  4768                           ;main.c: 254: {
  4769                           ;main.c: 255: PatternDelay[i]--;
  4770  0471  3572               	lslf	TMR0_Callback@i,w
  4771  0472  3E20               	addlw	(low (_PatternDelay| 0))& (0+255)
  4772  0473  0086               	movwf	6
  4773  0474  3001               	movlw	1
  4774  0475  0187               	clrf	7
  4775  0476  0281               	subwf	1,f
  4776  0477  3000               	movlw	0
  4777  0478  3141               	addfsr 1,1
  4778  0479  3B81               	subwfb	1,f
  4779  047A  317F               	addfsr 1,-1
  4780  047B                     i1l1428:	
  4781  047B  3008               	movlw	8
  4782  047C  0AF2               	incf	TMR0_Callback@i,f
  4783  047D  0272               	subwf	TMR0_Callback@i,w
  4784  047E  1C03               	skipc
  4785  047F  2C69               	goto	i1l1424
  4786                           
  4787                           ;main.c: 256: }
  4788                           ;main.c: 257: }
  4789                           ;main.c: 259: LEDState = 0;
  4790  0480  01D1               	clrf	_LEDState
  4791                           
  4792                           ;main.c: 262: if (LeftDebounceTimer)
  4793  0481  087A               	movf	_LeftDebounceTimer,w	;volatile
  4794  0482  1D03               	btfss	3,2
  4795                           
  4796                           ;main.c: 263: {
  4797                           ;main.c: 264: LeftDebounceTimer--;
  4798  0483  03FA               	decf	_LeftDebounceTimer,f	;volatile
  4799                           
  4800                           ;main.c: 265: }
  4801                           ;main.c: 267: if (RightDebounceTimer)
  4802  0484  0879               	movf	_RightDebounceTimer,w	;volatile
  4803  0485  1D03               	btfss	3,2
  4804                           
  4805                           ;main.c: 268: {
  4806                           ;main.c: 269: RightDebounceTimer--;
  4807  0486  03F9               	decf	_RightDebounceTimer,f	;volatile
  4808                           
  4809                           ;main.c: 270: }
  4810                           ;main.c: 272: if (ShutdownDelayTimer)
  4811  0487  084F               	movf	_ShutdownDelayTimer,w	;volatile
  4812  0488  1D03               	btfss	3,2
  4813                           
  4814                           ;main.c: 273: {
  4815                           ;main.c: 274: ShutdownDelayTimer--;
  4816  0489  03CF               	decf	_ShutdownDelayTimer,f	;volatile
  4817  048A  0008               	return
  4818  048B                     __end_of_TMR0_Callback:	
  4819                           
  4820                           	psect	text26
  4821  053E                     __ptext26:	
  4822 ;; *************** function _PIN_MANAGER_IOC *****************
  4823 ;; Defined at:
  4824 ;;		line 110 in file "mcc_generated_files/pin_manager.c"
  4825 ;; Parameters:    Size  Location     Type
  4826 ;;		None
  4827 ;; Auto vars:     Size  Location     Type
  4828 ;;		None
  4829 ;; Return value:  Size  Location     Type
  4830 ;;                  1    wreg      void 
  4831 ;; Registers used:
  4832 ;;		wreg, status,2, status,0, pclath, cstack
  4833 ;; Tracked objects:
  4834 ;;		On entry : 0/0
  4835 ;;		On exit  : 1F/7
  4836 ;;		Unchanged: 0/0
  4837 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4838 ;;      Params:         0       0       0       0
  4839 ;;      Locals:         0       0       0       0
  4840 ;;      Temps:          0       0       0       0
  4841 ;;      Totals:         0       0       0       0
  4842 ;;Total ram usage:        0 bytes
  4843 ;; Hardware stack levels used:    1
  4844 ;; Hardware stack levels required when called:    2
  4845 ;; This function calls:
  4846 ;;		_IOCAF2_ISR
  4847 ;;		_IOCAF3_ISR
  4848 ;; This function is called by:
  4849 ;;		_INTERRUPT_InterruptManager
  4850 ;; This function uses a non-reentrant model
  4851 ;;
  4852                           
  4853                           
  4854                           ;psect for function _PIN_MANAGER_IOC
  4855  053E                     _PIN_MANAGER_IOC:	
  4856                           
  4857                           ;pin_manager.c: 113: if(IOCAFbits.IOCAF2 == 1)
  4858                           
  4859                           ;incstack = 0
  4860                           ; Regs used in _PIN_MANAGER_IOC: [wreg+status,2+status,0+pclath+cstack]
  4861  053E  0027               	movlb	7	; select bank7
  4862  053F  1D13               	btfss	19,2	;volatile
  4863  0540  2D42               	goto	i1l1578
  4864                           
  4865                           ;pin_manager.c: 114: {
  4866                           ;pin_manager.c: 115: IOCAF2_ISR();
  4867  0541  24F6               	fcall	_IOCAF2_ISR
  4868  0542                     i1l1578:	
  4869                           
  4870                           ;pin_manager.c: 116: }
  4871                           ;pin_manager.c: 119: if(IOCAFbits.IOCAF3 == 1)
  4872  0542  1D93               	btfss	19,3	;volatile
  4873  0543  0008               	return
  4874                           
  4875                           ;pin_manager.c: 120: {
  4876                           ;pin_manager.c: 121: IOCAF3_ISR();
  4877  0544  2CE9               	ljmp	i1l1484
  4878  0545                     __end_of_PIN_MANAGER_IOC:	
  4879                           
  4880                           	psect	text27
  4881  04E9                     __ptext27:	
  4882 ;; *************** function _IOCAF3_ISR *****************
  4883 ;; Defined at:
  4884 ;;		line 160 in file "mcc_generated_files/pin_manager.c"
  4885 ;; Parameters:    Size  Location     Type
  4886 ;;		None
  4887 ;; Auto vars:     Size  Location     Type
  4888 ;;		None
  4889 ;; Return value:  Size  Location     Type
  4890 ;;                  1    wreg      void 
  4891 ;; Registers used:
  4892 ;;		wreg, status,2, status,0, pclath, cstack
  4893 ;; Tracked objects:
  4894 ;;		On entry : 1F/7
  4895 ;;		On exit  : 1F/7
  4896 ;;		Unchanged: 0/0
  4897 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4898 ;;      Params:         0       0       0       0
  4899 ;;      Locals:         0       0       0       0
  4900 ;;      Temps:          0       0       0       0
  4901 ;;      Totals:         0       0       0       0
  4902 ;;Total ram usage:        0 bytes
  4903 ;; Hardware stack levels used:    1
  4904 ;; Hardware stack levels required when called:    1
  4905 ;; This function calls:
  4906 ;;		Absolute function
  4907 ;;		_IOCAF3_DefaultInterruptHandler
  4908 ;; This function is called by:
  4909 ;;		_PIN_MANAGER_IOC
  4910 ;; This function uses a non-reentrant model
  4911 ;;
  4912                           
  4913                           
  4914                           ;psect for function _IOCAF3_ISR
  4915  04E9                     _IOCAF3_ISR:	
  4916  04E9                     i1l1484:	
  4917                           ;incstack = 0
  4918                           ; Regs used in _IOCAF3_ISR: [wreg+status,2+status,0+pclath+cstack]
  4919                           
  4920                           
  4921                           ;pin_manager.c: 165: if(IOCAF3_InterruptHandler)
  4922  04E9  0020               	movlb	0	; select bank0
  4923  04EA  086B               	movf	_IOCAF3_InterruptHandler,w
  4924  04EB  046C               	iorwf	_IOCAF3_InterruptHandler+1,w
  4925  04EC  1903               	btfsc	3,2
  4926  04ED  2CF3               	goto	i1l1488
  4927                           
  4928                           ;pin_manager.c: 166: {
  4929                           ;pin_manager.c: 167: IOCAF3_InterruptHandler();
  4930  04EE  086C               	movf	_IOCAF3_InterruptHandler+1,w
  4931  04EF  008A               	movwf	10
  4932  04F0  086B               	movf	_IOCAF3_InterruptHandler,w
  4933  04F1  000A               	callw
  4934  04F2  3184               	pagesel	$
  4935  04F3                     i1l1488:	
  4936                           
  4937                           ;pin_manager.c: 168: }
  4938                           ;pin_manager.c: 169: IOCAFbits.IOCAF3 = 0;
  4939  04F3  0027               	movlb	7	; select bank7
  4940  04F4  1193               	bcf	19,3	;volatile
  4941  04F5  0008               	return
  4942  04F6                     __end_of_IOCAF3_ISR:	
  4943                           
  4944                           	psect	text28
  4945  058A                     __ptext28:	
  4946 ;; *************** function _IOCAF3_DefaultInterruptHandler *****************
  4947 ;; Defined at:
  4948 ;;		line 182 in file "mcc_generated_files/pin_manager.c"
  4949 ;; Parameters:    Size  Location     Type
  4950 ;;		None
  4951 ;; Auto vars:     Size  Location     Type
  4952 ;;		None
  4953 ;; Return value:  Size  Location     Type
  4954 ;;                  1    wreg      void 
  4955 ;; Registers used:
  4956 ;;		None
  4957 ;; Tracked objects:
  4958 ;;		On entry : 1F/0
  4959 ;;		On exit  : 1F/0
  4960 ;;		Unchanged: 1F/0
  4961 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4962 ;;      Params:         0       0       0       0
  4963 ;;      Locals:         0       0       0       0
  4964 ;;      Temps:          0       0       0       0
  4965 ;;      Totals:         0       0       0       0
  4966 ;;Total ram usage:        0 bytes
  4967 ;; Hardware stack levels used:    1
  4968 ;; This function calls:
  4969 ;;		Nothing
  4970 ;; This function is called by:
  4971 ;;		_PIN_MANAGER_Initialize
  4972 ;;		_IOCAF3_ISR
  4973 ;; This function uses a non-reentrant model
  4974 ;;
  4975                           
  4976                           
  4977                           ;psect for function _IOCAF3_DefaultInterruptHandler
  4978  058A                     _IOCAF3_DefaultInterruptHandler:	
  4979                           
  4980                           ;incstack = 0
  4981                           ; Regs used in _IOCAF3_DefaultInterruptHandler: []
  4982  058A  0008               	return
  4983  058B                     __end_of_IOCAF3_DefaultInterruptHandler:	
  4984                           
  4985                           	psect	text29
  4986  04F6                     __ptext29:	
  4987 ;; *************** function _IOCAF2_ISR *****************
  4988 ;; Defined at:
  4989 ;;		line 130 in file "mcc_generated_files/pin_manager.c"
  4990 ;; Parameters:    Size  Location     Type
  4991 ;;		None
  4992 ;; Auto vars:     Size  Location     Type
  4993 ;;		None
  4994 ;; Return value:  Size  Location     Type
  4995 ;;                  1    wreg      void 
  4996 ;; Registers used:
  4997 ;;		wreg, status,2, status,0, pclath, cstack
  4998 ;; Tracked objects:
  4999 ;;		On entry : 1F/7
  5000 ;;		On exit  : 1F/7
  5001 ;;		Unchanged: 0/0
  5002 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5003 ;;      Params:         0       0       0       0
  5004 ;;      Locals:         0       0       0       0
  5005 ;;      Temps:          0       0       0       0
  5006 ;;      Totals:         0       0       0       0
  5007 ;;Total ram usage:        0 bytes
  5008 ;; Hardware stack levels used:    1
  5009 ;; Hardware stack levels required when called:    1
  5010 ;; This function calls:
  5011 ;;		Absolute function
  5012 ;;		_IOCAF2_DefaultInterruptHandler
  5013 ;; This function is called by:
  5014 ;;		_PIN_MANAGER_IOC
  5015 ;; This function uses a non-reentrant model
  5016 ;;
  5017                           
  5018                           
  5019                           ;psect for function _IOCAF2_ISR
  5020  04F6                     _IOCAF2_ISR:	
  5021                           
  5022                           ;pin_manager.c: 135: if(IOCAF2_InterruptHandler)
  5023                           
  5024                           ;incstack = 0
  5025                           ; Regs used in _IOCAF2_ISR: [wreg+status,2+status,0+pclath+cstack]
  5026  04F6  0020               	movlb	0	; select bank0
  5027  04F7  086D               	movf	_IOCAF2_InterruptHandler,w
  5028  04F8  046E               	iorwf	_IOCAF2_InterruptHandler+1,w
  5029  04F9  1903               	btfsc	3,2
  5030  04FA  2D00               	goto	i1l1482
  5031                           
  5032                           ;pin_manager.c: 136: {
  5033                           ;pin_manager.c: 137: IOCAF2_InterruptHandler();
  5034  04FB  086E               	movf	_IOCAF2_InterruptHandler+1,w
  5035  04FC  008A               	movwf	10
  5036  04FD  086D               	movf	_IOCAF2_InterruptHandler,w
  5037  04FE  000A               	callw
  5038  04FF  3184               	pagesel	$
  5039  0500                     i1l1482:	
  5040                           
  5041                           ;pin_manager.c: 138: }
  5042                           ;pin_manager.c: 139: IOCAFbits.IOCAF2 = 0;
  5043  0500  0027               	movlb	7	; select bank7
  5044  0501  1113               	bcf	19,2	;volatile
  5045  0502  0008               	return
  5046  0503                     __end_of_IOCAF2_ISR:	
  5047                           
  5048                           	psect	text30
  5049  058B                     __ptext30:	
  5050 ;; *************** function _IOCAF2_DefaultInterruptHandler *****************
  5051 ;; Defined at:
  5052 ;;		line 152 in file "mcc_generated_files/pin_manager.c"
  5053 ;; Parameters:    Size  Location     Type
  5054 ;;		None
  5055 ;; Auto vars:     Size  Location     Type
  5056 ;;		None
  5057 ;; Return value:  Size  Location     Type
  5058 ;;                  1    wreg      void 
  5059 ;; Registers used:
  5060 ;;		None
  5061 ;; Tracked objects:
  5062 ;;		On entry : 1F/0
  5063 ;;		On exit  : 1F/0
  5064 ;;		Unchanged: 1F/0
  5065 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5066 ;;      Params:         0       0       0       0
  5067 ;;      Locals:         0       0       0       0
  5068 ;;      Temps:          0       0       0       0
  5069 ;;      Totals:         0       0       0       0
  5070 ;;Total ram usage:        0 bytes
  5071 ;; Hardware stack levels used:    1
  5072 ;; This function calls:
  5073 ;;		Nothing
  5074 ;; This function is called by:
  5075 ;;		_PIN_MANAGER_Initialize
  5076 ;;		_IOCAF2_ISR
  5077 ;; This function uses a non-reentrant model
  5078 ;;
  5079                           
  5080                           
  5081                           ;psect for function _IOCAF2_DefaultInterruptHandler
  5082  058B                     _IOCAF2_DefaultInterruptHandler:	
  5083                           
  5084                           ;incstack = 0
  5085                           ; Regs used in _IOCAF2_DefaultInterruptHandler: []
  5086  058B  0008               	return
  5087  058C                     __end_of_IOCAF2_DefaultInterruptHandler:	
  5088  007E                     btemp	set	126	;btemp
  5089  007E                     int$flags	set	126
  5090  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        21
    BSS         54
    Persistent  7
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      7      11
    BANK0            80     10      80
    BANK1            80      2      10
    BANK2            80      0       0

Pointer List with Targets:

    TMR0_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR0_Callback(), 

    TMR0_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR0_Callback(), Absolute function(), 

    IOCAF3_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> IOCAF3_DefaultInterruptHandler(), 

    IOCAF3_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), IOCAF3_DefaultInterruptHandler(), 

    IOCAF2_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> IOCAF2_DefaultInterruptHandler(), 

    IOCAF2_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), IOCAF2_DefaultInterruptHandler(), 


Critical Paths under _main in COMMON

    _main->_CheckForButtonPushes
    _PIN_MANAGER_Initialize->_IOCAF2_SetInterruptHandler
    _PIN_MANAGER_Initialize->_IOCAF3_SetInterruptHandler
    _RunRightFlash->___wmul
    _RunLeftFlash->___wmul
    ___lwdiv->___wmul
    _RunGame->_SetLEDOff
    _RunGame->_SetLEDOn

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _TMR0_CallBack->_TMR0_Callback

Critical Paths under _main in BANK0

    _RunRightFlash->___lwdiv
    _RunLeftFlash->___lwdiv
    ___lwdiv->___wmul

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0    3484
                                              9 BANK0      1     1      0
                                              0 BANK1      2     2      0
               _CheckForButtonPushes
                            _RunGame
                       _RunLeftFlash
                      _RunRightFlash
                  _SYSTEM_Initialize
                      _SetAllLEDsOff
           _TMR0_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (1) _TMR0_SetInterruptHandler                             2     0      2      96
                                              3 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (1) _SetAllLEDsOff                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     192
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR0_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR0_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0     192
         _IOCAF2_SetInterruptHandler
         _IOCAF3_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _IOCAF3_SetInterruptHandler                           2     0      2      96
                                              3 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (3) _IOCAF2_SetInterruptHandler                           2     0      2      96
                                              3 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _RunRightFlash                                        0     0      0    1479
                 _RightButtonPressed
                          _SetLEDOff
                           _SetLEDOn
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _RunLeftFlash                                         0     0      0    1479
                  _LeftButtonPressed
                          _SetLEDOff
                           _SetLEDOn
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     656
                                              3 COMMON     4     0      4
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     761
                                              2 BANK0      7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _RunGame                                              4     4      0      62
                                              0 BANK0      4     4      0
                          _SetLEDOff
                           _SetLEDOn
 ---------------------------------------------------------------------------------
 (2) _SetLEDOn                                             1     1      0      31
                                              3 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _SetLEDOff                                            1     1      0      31
                                              3 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _CheckForButtonPushes                                 5     5      0      37
                                              3 COMMON     4     4      0
                                              0 BANK0      1     1      0
                  _LeftButtonPressed
               _LeftButtonPressedRaw
                 _RightButtonPressed
              _RightButtonPressedRaw
 ---------------------------------------------------------------------------------
 (2) _RightButtonPressedRaw                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _RightButtonPressed                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _LeftButtonPressedRaw                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _LeftButtonPressed                                    0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _INTERRUPT_InterruptManager                           0     0      0     113
                    _PIN_MANAGER_IOC
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (5) _TMR0_ISR                                             0     0      0     113
                      _TMR0_CallBack
 ---------------------------------------------------------------------------------
 (6) _TMR0_CallBack                                        0     0      0     113
                   Absolute function *
                      _TMR0_Callback *
 ---------------------------------------------------------------------------------
 (7) _TMR0_Callback                                        3     3      0     113
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (5) _PIN_MANAGER_IOC                                      0     0      0       0
                         _IOCAF2_ISR
                         _IOCAF3_ISR
 ---------------------------------------------------------------------------------
 (6) _IOCAF3_ISR                                           0     0      0       0
                   Absolute function *
     _IOCAF3_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (7) _IOCAF3_DefaultInterruptHandler                       0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _IOCAF2_ISR                                           0     0      0       0
                   Absolute function *
     _IOCAF2_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (7) _IOCAF2_DefaultInterruptHandler                       0     0      0       0
 ---------------------------------------------------------------------------------
 (7) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _CheckForButtonPushes
     _LeftButtonPressed
     _LeftButtonPressedRaw
     _RightButtonPressed
     _RightButtonPressedRaw
   _RunGame
     _SetLEDOff
     _SetLEDOn
   _RunLeftFlash
     _LeftButtonPressed
     _SetLEDOff
     _SetLEDOn
     ___lwdiv
       ___wmul (ARG)
     ___wmul
   _RunRightFlash
     _RightButtonPressed
     _SetLEDOff
     _SetLEDOn
     ___lwdiv
       ___wmul (ARG)
     ___wmul
   _SYSTEM_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
       _IOCAF2_SetInterruptHandler
       _IOCAF3_SetInterruptHandler
     _TMR0_Initialize
     _WDT_Initialize
   _SetAllLEDsOff
   _TMR0_SetInterruptHandler

 _INTERRUPT_InterruptManager (ROOT)
   _PIN_MANAGER_IOC
     _IOCAF2_ISR
       Absolute function(Fake) *
       _IOCAF2_DefaultInterruptHandler *
     _IOCAF3_ISR
       Absolute function(Fake) *
       _IOCAF3_DefaultInterruptHandler *
   _TMR0_ISR
     _TMR0_CallBack
       Absolute function(Fake) *
       _TMR0_Callback *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      7       B       2       78.6%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      65       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50      A      50       6      100.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      2       A       8       12.5%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
DATA                 0      0      65      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Tue May 22 19:18:56 2018

                              ??_RunRightFlash 0077                                              pc 0002  
                                  __CFG_CP$OFF 0000                                             PL2 027D  
                                           PL4 0344                                             PL6 0285  
                          ___wmul@multiplicand 0075                                _timer0ReloadVal 006F  
                                 __CFG_BORV$LO 0000                                            wreg 0009  
           __end_of_IOCAF2_SetInterruptHandler 0551                     _IOCAF2_SetInterruptHandler 054B  
                                         S2594 050E                                           S2596 0519  
                                         S2598 052E                                   __CFG_LVP$OFF 0000  
                                         l2114 04D6                                           l2210 031B  
                                         l2220 0338                                           l2310 006B  
                                         l2150 04AB                                           l2118 04DC  
                                         l2222 033E                                           l2206 0317  
                                         l2400 035D                                           l2320 00C0  
                                         l2312 007C                                           l2240 01DE  
                                         l2224 033F                                           l2208 0319  
                                         l2410 036F                                           l2314 008D  
                                         l2306 0049                                           l2146 04A7  
                                         l2138 0498                                           l2250 020B  
                                         l2242 01E7                                           l2234 01C8  
                                         l2170 02A5                                           l2082 0503  
                                         l2316 009E                                           l2308 005A  
                                         l2324 00D1                                           l2252 0214  
                                         l2244 01F0                                           l2236 01CC  
                                         l2180 02D2                                           l2172 02AE  
                                         l2164 028F                                           l2422 0380  
                                         l2406 0367                                           l2318 00AF  
                                         l2326 00DB                                           l2254 021D  
                                         l2246 01F9                                           l2238 01D5  
                                         l2262 0227                                           l2182 02DB  
                                         l2174 02B7                                           l2166 0293  
                                         l2502 03FB                                           l2440 039E  
                                         l2432 0392                                           l2280 0254  
                                         l2256 0225                                           l2248 0202  
                                         l2264 0231                                           l2184 02E4  
                                         l2176 02C0                                           l2168 029C  
                                         l2192 02EE                                           l2442 039F  
                                         l2418 037A                                           l2290 0271  
                                         l2178 02C9                                           l2194 02F8  
                                         l2506 0404                                           l2460 03D3  
                                         l2428 038A                                           l2292 0277  
                                         l2276 0250                                           l2188 02EC  
                                         l2524 042F                                           l2532 043D  
                                         l2516 0411                                           l2462 03D4  
                                         l2438 039B                                           l2294 0278  
                                         l2278 0252                                           l2526 042B  
                                         l2518 041D                                           l2464 03DC  
                                         l2376 019A                                           l2528 0432  
                                         l2466 03DF                                           l2378 01A3  
                                         l2476 03EB                                           l2468 03E0  
                                         l2396 0357                                           l2488 03F5  
                                         _LATA 010C                                           u2307 0422  
                                         u2317 0116                                           u2175 03C7  
                                         u2407 0194                                           u2327 0124  
                                         u2337 0132                                           u2347 0140  
                                         u2357 014E                                           u2367 015C  
                                         u1735 04A0                                           u2377 016A  
                                         u2387 0178                                           u2397 0186  
                                         u1935 00E9                                           u1945 0106  
                                         u1965 01B1                          ?_CheckForButtonPushes 0070  
                                         _TMR0 0015                                           _WPUA 020C  
                                 __CFG_WRT$OFF 0000                          ?_LeftButtonPressedRaw 0070  
                           _RightButtonPressed 056C                                           _main 03ED  
                                         fsr0h 0005                                           fsr1h 0007  
                                         indf0 0000                                           fsr0l 0004  
                                         indf1 0001                                           fsr1l 0006  
                                         btemp 007E  CheckForButtonPushes@LeftButtonQuickPressCount 004C  
                                         start 0011                            ?_RightButtonPressed 0070  
               __size_of_RightButtonPressedRaw 0006                  __end_of_RightButtonPressedRaw 0557  
                      __end_of_TMR0_Initialize 050E                                __end_of_RunGame 01C3  
               __size_of_OSCILLATOR_Initialize 0007                            __size_of_IOCAF2_ISR 000D  
                          __size_of_IOCAF3_ISR 000D                  __end_of_OSCILLATOR_Initialize 053E  
                                        ?_main 0070                                  __CFG_WDTE$OFF 0000  
                              __end_of___lwdiv 04B0                                          i1l102 000B  
                                        i1l106 000F                                          _PORTA 000C  
                                        _TRISA 008C                                          u83_24 0449  
                                        u83_25 0448              __size_of_TMR0_SetInterruptHandler 0005  
                    ?_TMR0_SetInterruptHandler 0073                           ??_RightButtonPressed 0073  
                             __end_of_TMR0_ISR 057B                        __end_of_PIN_MANAGER_IOC 0545  
                               _WDT_Initialize 057F                                          main@i 00A9  
                               __CFG_BOREN$OFF 0000                                          pclath 000A  
                                        status 0003                                          wtemp0 007E  
                                  SetLEDOn@LED 0073                                 __CFG_MCLRE$OFF 0000  
                              __initialization 0012                                   __end_of_main 043F  
                             __end_of_SetLEDOn 0587                    ?_INTERRUPT_InterruptManager 0070  
                                       ??_main 0068                                 __CFG_PLLEN$OFF 0000  
                       __end_of_WDT_Initialize 0583                          main@APatternIsRunning 00A8  
                       __size_of_SetAllLEDsOff 0003                   ??_IOCAF3_SetInterruptHandler 0075  
                       ??_CheckForButtonPushes 0073                                         _APFCON 011D  
                                       _ANSELA 018C                                         _BORCON 0116  
                       ??_LeftButtonPressedRaw 0073                                         i1l1412 045D  
                                       i1l1424 0469                                         _ODCONA 028C  
                                       i1l1428 047B                                         i1l1508 0524  
                                       i1l1482 0500                                         i1l1484 04E9  
                                       i1l1488 04F3                                         i1l1578 0542  
                                       _LEDOns 0050                                         _OSCCON 0099  
      CheckForButtonPushes@LastLeftButtonState 004E                                         _WDTCON 0097  
                           __size_of_SetLEDOff 0005                                 __CFG_PWRTE$OFF 0000  
                                    ??_RunGame 005F                                         ___wmul 04D4  
                               __CFG_STVREN$ON 0000                                      ??___lwdiv 0077  
                             ?_TMR0_Initialize 0070            __size_of_IOCAF3_SetInterruptHandler 0005  
                              ?_WDT_Initialize 0070                          __end_of_TMR0_CallBack 052E  
     TMR0_SetInterruptHandler@InterruptHandler 0073     IOCAF3_SetInterruptHandler@InterruptHandler 0073  
   IOCAF2_SetInterruptHandler@InterruptHandler 0073                               ?_PIN_MANAGER_IOC 0070  
                        __end_of_TMR0_Callback 048B                                   ??_IOCAF2_ISR 0070  
                                 ??_IOCAF3_ISR 0070                              _SYSTEM_Initialize 057B  
                      __end_of__initialization 003E                             ?_SYSTEM_Initialize 0070  
                                 SetLEDOff@LED 0073                                  _SetAllLEDsOff 0587  
                               __pcstackCOMMON 0070                                   __pidataBANK0 0000  
                                 __pidataBANK1 0000                            ??_SYSTEM_Initialize 0075  
                                    ?_TMR0_ISR 0070                                     __end_ofPL2 0285  
                                   __end_ofPL4 034C                                     __end_ofPL6 028A  
                           __end_of_IOCAF2_ISR 0503                             __end_of_IOCAF3_ISR 04F6  
                            __end_of_SetLEDOff 056C                                 _OPTION_REGbits 0095  
                  ?_IOCAF2_SetInterruptHandler 0073               ??_IOCAF2_DefaultInterruptHandler 0070  
              ?_IOCAF2_DefaultInterruptHandler 0070                      __end_of_SYSTEM_Initialize 057F  
                                   __pbssBANK0 0020                                      ?_SetLEDOn 0070  
                               ?_SetAllLEDsOff 0070                             _RightDebounceTimer 0079  
                                   __pmaintext 03ED               __end_of_TMR0_SetInterruptHandler 0562  
                                      ?___wmul 0073                                     ??_TMR0_ISR 0073  
                                   __pintentry 0004                          __end_of_RunRightFlash 0344  
                      _LastLeftButtonPressTime 0040             __end_of_IOCAF3_SetInterruptHandler 0567  
                   _IOCAF3_SetInterruptHandler 0562                                        _OSCTUNE 0098  
                           _ShutdownDelayTimer 004F                                     ??_SetLEDOn 0073  
                               TMR0_Callback@i 0072                                        _RunGame 0041  
                                ?_RunLeftFlash 0070                                __size_of___wmul 0015  
                                      ___lwdiv 048B                          _RightButtonPressedRaw 0551  
                                      __ptext1 055D                                        __ptext2 0587  
                                      __ptext3 057B                                        __ptext4 057F  
                                      __ptext5 0503                                        __ptext6 04B0  
                                      __ptext7 0562                                        __ptext8 054B  
                                      __ptext9 0537                          _OSCILLATOR_Initialize 0537  
                     ??_PIN_MANAGER_Initialize 0075                                      _IOCAFbits 0393  
                                    _IOCANbits 0392                                      _IOCAPbits 0391  
                  __size_of_RightButtonPressed 0005                     __size_of_SYSTEM_Initialize 0004  
                                      clrloop0 0546                           end_of_initialization 003E  
                              ??_SetAllLEDsOff 0073                                 ??_RunLeftFlash 0077  
     CheckForButtonPushes@LastRightButtonState 004D                     RunGame@next_decrement_time 0038  
                             ??_WDT_Initialize 0073                       _TMR0_SetInterruptHandler 055D  
                                    _PORTAbits 000C                                      _PORTTable 00A0  
                             __CFG_FOSC$INTOSC 0000                              _LeftButtonPressed 0571  
                                    _TRISTable 0052                             ?_LeftButtonPressed 0070  
                          RunGame@num_leds_lit 005E                  __size_of_CheckForButtonPushes 00A1  
                __size_of_LeftButtonPressedRaw 0006                            ??_LeftButtonPressed 0073  
                       ?_RightButtonPressedRaw 0070                                 __end_of___wmul 04E9  
                            __size_of_TMR0_ISR 0005                         ?_OSCILLATOR_Initialize 0070  
                    __end_of_LeftButtonPressed 0576                            start_initialization 0012  
                     __size_of_TMR0_Initialize 000B                __size_of_PIN_MANAGER_Initialize 0024  
                                    _SetLEDOff 0567                       __size_of_PIN_MANAGER_IOC 0007  
                                    _WakeTimer 0048                              __size_of_SetLEDOn 0004  
       __end_of_IOCAF2_DefaultInterruptHandler 058C        __size_of_IOCAF2_DefaultInterruptHandler 0001  
               _IOCAF2_DefaultInterruptHandler 058B                               __CFG_LPBOREN$OFF 0000  
                                     ??___wmul 0077                         __size_of_TMR0_CallBack 000A  
                                  __pdataBANK0 0052                                    __pdataBANK1 00A0  
                       __size_of_TMR0_Callback 004C                                _LeftButtonState 0078  
                                  __pbssCOMMON 0077                                      ___latbits 0000  
                                __pcstackBANK0 005F                                  __pcstackBANK1 00A8  
                  ?_IOCAF3_SetInterruptHandler 0073                           __end_of_RunLeftFlash 027D  
                                   ?_SetLEDOff 0070               ??_IOCAF3_DefaultInterruptHandler 0070  
              ?_IOCAF3_DefaultInterruptHandler 0070                          _TMR0_InterruptHandler 0069  
                                    __pnvBANK0 0069                               ___lwdiv@dividend 0063  
                       _PIN_MANAGER_Initialize 04B0                                       ?_RunGame 0070  
                                     ?___lwdiv 0061                   ??_INTERRUPT_InterruptManager 0073  
                                    __pswtext1 050E                                      __pswtext2 0519  
                                    __pswtext3 052E                     __size_of_LeftButtonPressed 0005  
                                 _PatternDelay 0020                       _CheckForButtonPushes$440 005F  
                                 _PatternState 0030                               ___lwdiv@quotient 0066  
                                _TMR0_CallBack 0524                                  _TMR0_Callback 043F  
                       __size_of_RunRightFlash 00BA                              ??_TMR0_Initialize 0073  
                               ___wmul@product 005F                                       _LEDState 0051  
                                    clear_ram0 0545            __size_of_INTERRUPT_InterruptManager 000D  
                   ??_TMR0_SetInterruptHandler 0075                                       _TMR0_ISR 0576  
                            ??_PIN_MANAGER_IOC 0070                              ___wmul@multiplier 0073  
                   __end_of_RightButtonPressed 0571                               _RightButtonState 0077  
                                  ??_SetLEDOff 0073                                 ?_TMR0_CallBack 0070  
                               ?_TMR0_Callback 0070                              _LeftDebounceTimer 007A  
                                     _SetLEDOn 0583                          __end_of_SetAllLEDsOff 058A  
                      ??_RightButtonPressedRaw 0073                               __size_of_RunGame 0182  
                      ??_OSCILLATOR_Initialize 0073                   __end_of_CheckForButtonPushes 03ED  
                                _RunRightFlash 028A                               __size_of___lwdiv 0025  
                 __end_of_LeftButtonPressedRaw 055D                          __size_of_RunLeftFlash 00BA  
                      _IOCAF2_InterruptHandler 006D                                ___lwdiv@divisor 0061  
                              ___lwdiv@counter 0065                   ??_IOCAF2_SetInterruptHandler 0075  
                                     __ptext10 028A                                       __ptext11 01C3  
                                     __ptext20 0557                                       __ptext12 04D4  
                                     __ptext21 0571                                       __ptext13 048B  
                                     __ptext30 058B                                       __ptext14 0041  
                                     __ptext23 0576                                       __ptext15 0583  
                                     __ptext24 0524                                       __ptext16 0567  
                                     __ptext25 043F                                       __ptext17 034C  
                                     __ptext26 053E                                       __ptext18 0551  
                                     __ptext27 04E9                                       __ptext19 056C  
                                     __ptext28 058A                                       __ptext29 04F6  
                                   _IOCAF2_ISR 04F6                                     _IOCAF3_ISR 04E9  
                                __size_of_main 0052                         RunLeftFlash@left_delay 005A  
                                 _RunLeftFlash 01C3                                       int$flags 007E  
                               ?_RunRightFlash 0070             __end_of_INTERRUPT_InterruptManager 0011  
                   _INTERRUPT_InterruptManager 0004            __size_of_IOCAF2_SetInterruptHandler 0006  
                                   _INTCONbits 000B                                ??_TMR0_CallBack 0073  
                              ??_TMR0_Callback 0070                        __size_of_WDT_Initialize 0004  
                                     intlevel1 0000                        ?_PIN_MANAGER_Initialize 0070  
                            __CFG_CLKOUTEN$OFF 0000                  RunGame@last_button_press_time 003C  
       __end_of_IOCAF3_DefaultInterruptHandler 058B        __size_of_IOCAF3_DefaultInterruptHandler 0001  
               _IOCAF3_DefaultInterruptHandler 058A                       _LastRightButtonPressTime 0044  
                                   _OPTION_REG 0095                                _TMR0_Initialize 0503  
                                  _VREGCONbits 0197                       RunRightFlash@right_delay 005C  
                                  ?_IOCAF2_ISR 0070                                    ?_IOCAF3_ISR 0070  
               __end_of_PIN_MANAGER_Initialize 04D4                           _CheckForButtonPushes 034C  
                         _LeftButtonPressedRaw 0557                                _PIN_MANAGER_IOC 053E  
                      _IOCAF3_InterruptHandler 006B  
