

Microchip Technology PIC LITE Macro Assembler V1.41 build -162212810 
                                                                                               Thu May 17 09:00:26 2018

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	12F1572
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	inittext,global,class=CODE,delta=2
    11                           	psect	clrtext,global,class=CODE,delta=2
    12                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    15                           	psect	text1,local,class=CODE,merge=1,delta=2
    16                           	psect	text2,local,class=CODE,merge=1,delta=2
    17                           	psect	text3,local,class=CODE,merge=1,delta=2
    18                           	psect	text4,local,class=CODE,merge=1,delta=2
    19                           	psect	text5,local,class=CODE,merge=1,delta=2
    20                           	psect	text6,local,class=CODE,merge=1,delta=2
    21                           	psect	text7,local,class=CODE,merge=1,delta=2
    22                           	psect	text8,local,class=CODE,merge=1,delta=2
    23                           	psect	text9,local,class=CODE,merge=1,delta=2
    24                           	psect	text10,local,class=CODE,merge=1,delta=2
    25                           	psect	swtext1,local,class=CONST,delta=2
    26                           	psect	text11,local,class=CODE,merge=1,delta=2
    27                           	psect	swtext2,local,class=CONST,delta=2
    28                           	psect	text12,local,class=CODE,merge=1,delta=2
    29                           	psect	text13,local,class=CODE,merge=1,delta=2
    30                           	psect	text14,local,class=CODE,merge=1,delta=2
    31                           	psect	text15,local,class=CODE,merge=1,delta=2
    32                           	psect	text16,local,class=CODE,merge=1,delta=2
    33                           	psect	intentry,global,class=CODE,delta=2
    34                           	psect	text18,local,class=CODE,merge=1,delta=2
    35                           	psect	text19,local,class=CODE,merge=1,delta=2
    36                           	psect	text20,local,class=CODE,merge=1,delta=2
    37                           	psect	text21,local,class=CODE,merge=1,delta=2
    38                           	psect	text22,local,class=CODE,merge=1,delta=2
    39                           	psect	text23,local,class=CODE,merge=1,delta=2
    40                           	psect	text24,local,class=CODE,merge=1,delta=2
    41                           	psect	text25,local,class=CODE,merge=1,delta=2
    42                           	dabs	1,0x7E,2
    43  0000                     
    44                           ; Version 1.41
    45                           ; Generated 25/01/2017 GMT
    46                           ; 
    47                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    48                           ; All rights reserved.
    49                           ; 
    50                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    51                           ; 
    52                           ; Redistribution and use in source and binary forms, with or without modification, are
    53                           ; permitted provided that the following conditions are met:
    54                           ; 
    55                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    56                           ;        conditions and the following disclaimer.
    57                           ; 
    58                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    59                           ;        of conditions and the following disclaimer in the documentation and/or other
    60                           ;        materials provided with the distribution.
    61                           ; 
    62                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    63                           ;        software without specific prior written permission.
    64                           ; 
    65                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    66                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    67                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    68                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    69                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    70                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    71                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    72                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    73                           ; 
    74                           ; 
    75                           ; Code-generator required, PIC12F1572 Definitions
    76                           ; 
    77                           ; SFR Addresses
    78  0000                     	;# 
    79  0001                     	;# 
    80  0002                     	;# 
    81  0003                     	;# 
    82  0004                     	;# 
    83  0005                     	;# 
    84  0006                     	;# 
    85  0007                     	;# 
    86  0008                     	;# 
    87  0009                     	;# 
    88  000A                     	;# 
    89  000B                     	;# 
    90  000C                     	;# 
    91  0011                     	;# 
    92  0012                     	;# 
    93  0013                     	;# 
    94  0015                     	;# 
    95  0016                     	;# 
    96  0016                     	;# 
    97  0017                     	;# 
    98  0018                     	;# 
    99  0019                     	;# 
   100  001A                     	;# 
   101  001B                     	;# 
   102  001C                     	;# 
   103  008C                     	;# 
   104  0091                     	;# 
   105  0092                     	;# 
   106  0093                     	;# 
   107  0095                     	;# 
   108  0096                     	;# 
   109  0097                     	;# 
   110  0098                     	;# 
   111  0099                     	;# 
   112  009A                     	;# 
   113  009B                     	;# 
   114  009B                     	;# 
   115  009C                     	;# 
   116  009D                     	;# 
   117  009E                     	;# 
   118  009F                     	;# 
   119  010C                     	;# 
   120  0111                     	;# 
   121  0112                     	;# 
   122  0115                     	;# 
   123  0116                     	;# 
   124  0117                     	;# 
   125  0118                     	;# 
   126  0119                     	;# 
   127  011D                     	;# 
   128  011D                     	;# 
   129  018C                     	;# 
   130  0191                     	;# 
   131  0191                     	;# 
   132  0192                     	;# 
   133  0193                     	;# 
   134  0193                     	;# 
   135  0194                     	;# 
   136  0195                     	;# 
   137  0196                     	;# 
   138  0197                     	;# 
   139  0199                     	;# 
   140  019A                     	;# 
   141  019B                     	;# 
   142  019B                     	;# 
   143  019C                     	;# 
   144  019D                     	;# 
   145  019E                     	;# 
   146  019F                     	;# 
   147  020C                     	;# 
   148  028C                     	;# 
   149  030C                     	;# 
   150  038C                     	;# 
   151  0391                     	;# 
   152  0392                     	;# 
   153  0393                     	;# 
   154  0691                     	;# 
   155  0692                     	;# 
   156  0693                     	;# 
   157  0694                     	;# 
   158  0695                     	;# 
   159  0D8E                     	;# 
   160  0D8F                     	;# 
   161  0D90                     	;# 
   162  0D91                     	;# 
   163  0D91                     	;# 
   164  0D92                     	;# 
   165  0D93                     	;# 
   166  0D93                     	;# 
   167  0D94                     	;# 
   168  0D95                     	;# 
   169  0D95                     	;# 
   170  0D96                     	;# 
   171  0D97                     	;# 
   172  0D97                     	;# 
   173  0D98                     	;# 
   174  0D99                     	;# 
   175  0D99                     	;# 
   176  0D9A                     	;# 
   177  0D9B                     	;# 
   178  0D9C                     	;# 
   179  0D9C                     	;# 
   180  0D9D                     	;# 
   181  0D9D                     	;# 
   182  0D9E                     	;# 
   183  0D9F                     	;# 
   184  0DA0                     	;# 
   185  0DA1                     	;# 
   186  0DA1                     	;# 
   187  0DA2                     	;# 
   188  0DA3                     	;# 
   189  0DA3                     	;# 
   190  0DA4                     	;# 
   191  0DA5                     	;# 
   192  0DA5                     	;# 
   193  0DA6                     	;# 
   194  0DA7                     	;# 
   195  0DA7                     	;# 
   196  0DA8                     	;# 
   197  0DA9                     	;# 
   198  0DA9                     	;# 
   199  0DAA                     	;# 
   200  0DAB                     	;# 
   201  0DAC                     	;# 
   202  0DAC                     	;# 
   203  0DAD                     	;# 
   204  0DAD                     	;# 
   205  0DAE                     	;# 
   206  0DAF                     	;# 
   207  0DB0                     	;# 
   208  0DB1                     	;# 
   209  0DB1                     	;# 
   210  0DB2                     	;# 
   211  0DB3                     	;# 
   212  0DB3                     	;# 
   213  0DB4                     	;# 
   214  0DB5                     	;# 
   215  0DB5                     	;# 
   216  0DB6                     	;# 
   217  0DB7                     	;# 
   218  0DB7                     	;# 
   219  0DB8                     	;# 
   220  0DB9                     	;# 
   221  0DB9                     	;# 
   222  0DBA                     	;# 
   223  0DBB                     	;# 
   224  0DBC                     	;# 
   225  0DBC                     	;# 
   226  0DBD                     	;# 
   227  0DBD                     	;# 
   228  0DBE                     	;# 
   229  0DBF                     	;# 
   230  0DC0                     	;# 
   231  0FE4                     	;# 
   232  0FE5                     	;# 
   233  0FE6                     	;# 
   234  0FE7                     	;# 
   235  0FE8                     	;# 
   236  0FE8                     	;# 
   237  0FE9                     	;# 
   238  0FEA                     	;# 
   239  0FEA                     	;# 
   240  0FEB                     	;# 
   241  0FED                     	;# 
   242  0FEE                     	;# 
   243  0FEE                     	;# 
   244  0FEF                     	;# 
   245  0000                     	;# 
   246  0001                     	;# 
   247  0002                     	;# 
   248  0003                     	;# 
   249  0004                     	;# 
   250  0005                     	;# 
   251  0006                     	;# 
   252  0007                     	;# 
   253  0008                     	;# 
   254  0009                     	;# 
   255  000A                     	;# 
   256  000B                     	;# 
   257  000C                     	;# 
   258  0011                     	;# 
   259  0012                     	;# 
   260  0013                     	;# 
   261  0015                     	;# 
   262  0016                     	;# 
   263  0016                     	;# 
   264  0017                     	;# 
   265  0018                     	;# 
   266  0019                     	;# 
   267  001A                     	;# 
   268  001B                     	;# 
   269  001C                     	;# 
   270  008C                     	;# 
   271  0091                     	;# 
   272  0092                     	;# 
   273  0093                     	;# 
   274  0095                     	;# 
   275  0096                     	;# 
   276  0097                     	;# 
   277  0098                     	;# 
   278  0099                     	;# 
   279  009A                     	;# 
   280  009B                     	;# 
   281  009B                     	;# 
   282  009C                     	;# 
   283  009D                     	;# 
   284  009E                     	;# 
   285  009F                     	;# 
   286  010C                     	;# 
   287  0111                     	;# 
   288  0112                     	;# 
   289  0115                     	;# 
   290  0116                     	;# 
   291  0117                     	;# 
   292  0118                     	;# 
   293  0119                     	;# 
   294  011D                     	;# 
   295  011D                     	;# 
   296  018C                     	;# 
   297  0191                     	;# 
   298  0191                     	;# 
   299  0192                     	;# 
   300  0193                     	;# 
   301  0193                     	;# 
   302  0194                     	;# 
   303  0195                     	;# 
   304  0196                     	;# 
   305  0197                     	;# 
   306  0199                     	;# 
   307  019A                     	;# 
   308  019B                     	;# 
   309  019B                     	;# 
   310  019C                     	;# 
   311  019D                     	;# 
   312  019E                     	;# 
   313  019F                     	;# 
   314  020C                     	;# 
   315  028C                     	;# 
   316  030C                     	;# 
   317  038C                     	;# 
   318  0391                     	;# 
   319  0392                     	;# 
   320  0393                     	;# 
   321  0691                     	;# 
   322  0692                     	;# 
   323  0693                     	;# 
   324  0694                     	;# 
   325  0695                     	;# 
   326  0D8E                     	;# 
   327  0D8F                     	;# 
   328  0D90                     	;# 
   329  0D91                     	;# 
   330  0D91                     	;# 
   331  0D92                     	;# 
   332  0D93                     	;# 
   333  0D93                     	;# 
   334  0D94                     	;# 
   335  0D95                     	;# 
   336  0D95                     	;# 
   337  0D96                     	;# 
   338  0D97                     	;# 
   339  0D97                     	;# 
   340  0D98                     	;# 
   341  0D99                     	;# 
   342  0D99                     	;# 
   343  0D9A                     	;# 
   344  0D9B                     	;# 
   345  0D9C                     	;# 
   346  0D9C                     	;# 
   347  0D9D                     	;# 
   348  0D9D                     	;# 
   349  0D9E                     	;# 
   350  0D9F                     	;# 
   351  0DA0                     	;# 
   352  0DA1                     	;# 
   353  0DA1                     	;# 
   354  0DA2                     	;# 
   355  0DA3                     	;# 
   356  0DA3                     	;# 
   357  0DA4                     	;# 
   358  0DA5                     	;# 
   359  0DA5                     	;# 
   360  0DA6                     	;# 
   361  0DA7                     	;# 
   362  0DA7                     	;# 
   363  0DA8                     	;# 
   364  0DA9                     	;# 
   365  0DA9                     	;# 
   366  0DAA                     	;# 
   367  0DAB                     	;# 
   368  0DAC                     	;# 
   369  0DAC                     	;# 
   370  0DAD                     	;# 
   371  0DAD                     	;# 
   372  0DAE                     	;# 
   373  0DAF                     	;# 
   374  0DB0                     	;# 
   375  0DB1                     	;# 
   376  0DB1                     	;# 
   377  0DB2                     	;# 
   378  0DB3                     	;# 
   379  0DB3                     	;# 
   380  0DB4                     	;# 
   381  0DB5                     	;# 
   382  0DB5                     	;# 
   383  0DB6                     	;# 
   384  0DB7                     	;# 
   385  0DB7                     	;# 
   386  0DB8                     	;# 
   387  0DB9                     	;# 
   388  0DB9                     	;# 
   389  0DBA                     	;# 
   390  0DBB                     	;# 
   391  0DBC                     	;# 
   392  0DBC                     	;# 
   393  0DBD                     	;# 
   394  0DBD                     	;# 
   395  0DBE                     	;# 
   396  0DBF                     	;# 
   397  0DC0                     	;# 
   398  0FE4                     	;# 
   399  0FE5                     	;# 
   400  0FE6                     	;# 
   401  0FE7                     	;# 
   402  0FE8                     	;# 
   403  0FE8                     	;# 
   404  0FE9                     	;# 
   405  0FEA                     	;# 
   406  0FEA                     	;# 
   407  0FEB                     	;# 
   408  0FED                     	;# 
   409  0FEE                     	;# 
   410  0FEE                     	;# 
   411  0FEF                     	;# 
   412  0000                     	;# 
   413  0001                     	;# 
   414  0002                     	;# 
   415  0003                     	;# 
   416  0004                     	;# 
   417  0005                     	;# 
   418  0006                     	;# 
   419  0007                     	;# 
   420  0008                     	;# 
   421  0009                     	;# 
   422  000A                     	;# 
   423  000B                     	;# 
   424  000C                     	;# 
   425  0011                     	;# 
   426  0012                     	;# 
   427  0013                     	;# 
   428  0015                     	;# 
   429  0016                     	;# 
   430  0016                     	;# 
   431  0017                     	;# 
   432  0018                     	;# 
   433  0019                     	;# 
   434  001A                     	;# 
   435  001B                     	;# 
   436  001C                     	;# 
   437  008C                     	;# 
   438  0091                     	;# 
   439  0092                     	;# 
   440  0093                     	;# 
   441  0095                     	;# 
   442  0096                     	;# 
   443  0097                     	;# 
   444  0098                     	;# 
   445  0099                     	;# 
   446  009A                     	;# 
   447  009B                     	;# 
   448  009B                     	;# 
   449  009C                     	;# 
   450  009D                     	;# 
   451  009E                     	;# 
   452  009F                     	;# 
   453  010C                     	;# 
   454  0111                     	;# 
   455  0112                     	;# 
   456  0115                     	;# 
   457  0116                     	;# 
   458  0117                     	;# 
   459  0118                     	;# 
   460  0119                     	;# 
   461  011D                     	;# 
   462  011D                     	;# 
   463  018C                     	;# 
   464  0191                     	;# 
   465  0191                     	;# 
   466  0192                     	;# 
   467  0193                     	;# 
   468  0193                     	;# 
   469  0194                     	;# 
   470  0195                     	;# 
   471  0196                     	;# 
   472  0197                     	;# 
   473  0199                     	;# 
   474  019A                     	;# 
   475  019B                     	;# 
   476  019B                     	;# 
   477  019C                     	;# 
   478  019D                     	;# 
   479  019E                     	;# 
   480  019F                     	;# 
   481  020C                     	;# 
   482  028C                     	;# 
   483  030C                     	;# 
   484  038C                     	;# 
   485  0391                     	;# 
   486  0392                     	;# 
   487  0393                     	;# 
   488  0691                     	;# 
   489  0692                     	;# 
   490  0693                     	;# 
   491  0694                     	;# 
   492  0695                     	;# 
   493  0D8E                     	;# 
   494  0D8F                     	;# 
   495  0D90                     	;# 
   496  0D91                     	;# 
   497  0D91                     	;# 
   498  0D92                     	;# 
   499  0D93                     	;# 
   500  0D93                     	;# 
   501  0D94                     	;# 
   502  0D95                     	;# 
   503  0D95                     	;# 
   504  0D96                     	;# 
   505  0D97                     	;# 
   506  0D97                     	;# 
   507  0D98                     	;# 
   508  0D99                     	;# 
   509  0D99                     	;# 
   510  0D9A                     	;# 
   511  0D9B                     	;# 
   512  0D9C                     	;# 
   513  0D9C                     	;# 
   514  0D9D                     	;# 
   515  0D9D                     	;# 
   516  0D9E                     	;# 
   517  0D9F                     	;# 
   518  0DA0                     	;# 
   519  0DA1                     	;# 
   520  0DA1                     	;# 
   521  0DA2                     	;# 
   522  0DA3                     	;# 
   523  0DA3                     	;# 
   524  0DA4                     	;# 
   525  0DA5                     	;# 
   526  0DA5                     	;# 
   527  0DA6                     	;# 
   528  0DA7                     	;# 
   529  0DA7                     	;# 
   530  0DA8                     	;# 
   531  0DA9                     	;# 
   532  0DA9                     	;# 
   533  0DAA                     	;# 
   534  0DAB                     	;# 
   535  0DAC                     	;# 
   536  0DAC                     	;# 
   537  0DAD                     	;# 
   538  0DAD                     	;# 
   539  0DAE                     	;# 
   540  0DAF                     	;# 
   541  0DB0                     	;# 
   542  0DB1                     	;# 
   543  0DB1                     	;# 
   544  0DB2                     	;# 
   545  0DB3                     	;# 
   546  0DB3                     	;# 
   547  0DB4                     	;# 
   548  0DB5                     	;# 
   549  0DB5                     	;# 
   550  0DB6                     	;# 
   551  0DB7                     	;# 
   552  0DB7                     	;# 
   553  0DB8                     	;# 
   554  0DB9                     	;# 
   555  0DB9                     	;# 
   556  0DBA                     	;# 
   557  0DBB                     	;# 
   558  0DBC                     	;# 
   559  0DBC                     	;# 
   560  0DBD                     	;# 
   561  0DBD                     	;# 
   562  0DBE                     	;# 
   563  0DBF                     	;# 
   564  0DC0                     	;# 
   565  0FE4                     	;# 
   566  0FE5                     	;# 
   567  0FE6                     	;# 
   568  0FE7                     	;# 
   569  0FE8                     	;# 
   570  0FE8                     	;# 
   571  0FE9                     	;# 
   572  0FEA                     	;# 
   573  0FEA                     	;# 
   574  0FEB                     	;# 
   575  0FED                     	;# 
   576  0FEE                     	;# 
   577  0FEE                     	;# 
   578  0FEF                     	;# 
   579  0000                     	;# 
   580  0001                     	;# 
   581  0002                     	;# 
   582  0003                     	;# 
   583  0004                     	;# 
   584  0005                     	;# 
   585  0006                     	;# 
   586  0007                     	;# 
   587  0008                     	;# 
   588  0009                     	;# 
   589  000A                     	;# 
   590  000B                     	;# 
   591  000C                     	;# 
   592  0011                     	;# 
   593  0012                     	;# 
   594  0013                     	;# 
   595  0015                     	;# 
   596  0016                     	;# 
   597  0016                     	;# 
   598  0017                     	;# 
   599  0018                     	;# 
   600  0019                     	;# 
   601  001A                     	;# 
   602  001B                     	;# 
   603  001C                     	;# 
   604  008C                     	;# 
   605  0091                     	;# 
   606  0092                     	;# 
   607  0093                     	;# 
   608  0095                     	;# 
   609  0096                     	;# 
   610  0097                     	;# 
   611  0098                     	;# 
   612  0099                     	;# 
   613  009A                     	;# 
   614  009B                     	;# 
   615  009B                     	;# 
   616  009C                     	;# 
   617  009D                     	;# 
   618  009E                     	;# 
   619  009F                     	;# 
   620  010C                     	;# 
   621  0111                     	;# 
   622  0112                     	;# 
   623  0115                     	;# 
   624  0116                     	;# 
   625  0117                     	;# 
   626  0118                     	;# 
   627  0119                     	;# 
   628  011D                     	;# 
   629  011D                     	;# 
   630  018C                     	;# 
   631  0191                     	;# 
   632  0191                     	;# 
   633  0192                     	;# 
   634  0193                     	;# 
   635  0193                     	;# 
   636  0194                     	;# 
   637  0195                     	;# 
   638  0196                     	;# 
   639  0197                     	;# 
   640  0199                     	;# 
   641  019A                     	;# 
   642  019B                     	;# 
   643  019B                     	;# 
   644  019C                     	;# 
   645  019D                     	;# 
   646  019E                     	;# 
   647  019F                     	;# 
   648  020C                     	;# 
   649  028C                     	;# 
   650  030C                     	;# 
   651  038C                     	;# 
   652  0391                     	;# 
   653  0392                     	;# 
   654  0393                     	;# 
   655  0691                     	;# 
   656  0692                     	;# 
   657  0693                     	;# 
   658  0694                     	;# 
   659  0695                     	;# 
   660  0D8E                     	;# 
   661  0D8F                     	;# 
   662  0D90                     	;# 
   663  0D91                     	;# 
   664  0D91                     	;# 
   665  0D92                     	;# 
   666  0D93                     	;# 
   667  0D93                     	;# 
   668  0D94                     	;# 
   669  0D95                     	;# 
   670  0D95                     	;# 
   671  0D96                     	;# 
   672  0D97                     	;# 
   673  0D97                     	;# 
   674  0D98                     	;# 
   675  0D99                     	;# 
   676  0D99                     	;# 
   677  0D9A                     	;# 
   678  0D9B                     	;# 
   679  0D9C                     	;# 
   680  0D9C                     	;# 
   681  0D9D                     	;# 
   682  0D9D                     	;# 
   683  0D9E                     	;# 
   684  0D9F                     	;# 
   685  0DA0                     	;# 
   686  0DA1                     	;# 
   687  0DA1                     	;# 
   688  0DA2                     	;# 
   689  0DA3                     	;# 
   690  0DA3                     	;# 
   691  0DA4                     	;# 
   692  0DA5                     	;# 
   693  0DA5                     	;# 
   694  0DA6                     	;# 
   695  0DA7                     	;# 
   696  0DA7                     	;# 
   697  0DA8                     	;# 
   698  0DA9                     	;# 
   699  0DA9                     	;# 
   700  0DAA                     	;# 
   701  0DAB                     	;# 
   702  0DAC                     	;# 
   703  0DAC                     	;# 
   704  0DAD                     	;# 
   705  0DAD                     	;# 
   706  0DAE                     	;# 
   707  0DAF                     	;# 
   708  0DB0                     	;# 
   709  0DB1                     	;# 
   710  0DB1                     	;# 
   711  0DB2                     	;# 
   712  0DB3                     	;# 
   713  0DB3                     	;# 
   714  0DB4                     	;# 
   715  0DB5                     	;# 
   716  0DB5                     	;# 
   717  0DB6                     	;# 
   718  0DB7                     	;# 
   719  0DB7                     	;# 
   720  0DB8                     	;# 
   721  0DB9                     	;# 
   722  0DB9                     	;# 
   723  0DBA                     	;# 
   724  0DBB                     	;# 
   725  0DBC                     	;# 
   726  0DBC                     	;# 
   727  0DBD                     	;# 
   728  0DBD                     	;# 
   729  0DBE                     	;# 
   730  0DBF                     	;# 
   731  0DC0                     	;# 
   732  0FE4                     	;# 
   733  0FE5                     	;# 
   734  0FE6                     	;# 
   735  0FE7                     	;# 
   736  0FE8                     	;# 
   737  0FE8                     	;# 
   738  0FE9                     	;# 
   739  0FEA                     	;# 
   740  0FEA                     	;# 
   741  0FEB                     	;# 
   742  0FED                     	;# 
   743  0FEE                     	;# 
   744  0FEE                     	;# 
   745  0FEF                     	;# 
   746  0000                     	;# 
   747  0001                     	;# 
   748  0002                     	;# 
   749  0003                     	;# 
   750  0004                     	;# 
   751  0005                     	;# 
   752  0006                     	;# 
   753  0007                     	;# 
   754  0008                     	;# 
   755  0009                     	;# 
   756  000A                     	;# 
   757  000B                     	;# 
   758  000C                     	;# 
   759  0011                     	;# 
   760  0012                     	;# 
   761  0013                     	;# 
   762  0015                     	;# 
   763  0016                     	;# 
   764  0016                     	;# 
   765  0017                     	;# 
   766  0018                     	;# 
   767  0019                     	;# 
   768  001A                     	;# 
   769  001B                     	;# 
   770  001C                     	;# 
   771  008C                     	;# 
   772  0091                     	;# 
   773  0092                     	;# 
   774  0093                     	;# 
   775  0095                     	;# 
   776  0096                     	;# 
   777  0097                     	;# 
   778  0098                     	;# 
   779  0099                     	;# 
   780  009A                     	;# 
   781  009B                     	;# 
   782  009B                     	;# 
   783  009C                     	;# 
   784  009D                     	;# 
   785  009E                     	;# 
   786  009F                     	;# 
   787  010C                     	;# 
   788  0111                     	;# 
   789  0112                     	;# 
   790  0115                     	;# 
   791  0116                     	;# 
   792  0117                     	;# 
   793  0118                     	;# 
   794  0119                     	;# 
   795  011D                     	;# 
   796  011D                     	;# 
   797  018C                     	;# 
   798  0191                     	;# 
   799  0191                     	;# 
   800  0192                     	;# 
   801  0193                     	;# 
   802  0193                     	;# 
   803  0194                     	;# 
   804  0195                     	;# 
   805  0196                     	;# 
   806  0197                     	;# 
   807  0199                     	;# 
   808  019A                     	;# 
   809  019B                     	;# 
   810  019B                     	;# 
   811  019C                     	;# 
   812  019D                     	;# 
   813  019E                     	;# 
   814  019F                     	;# 
   815  020C                     	;# 
   816  028C                     	;# 
   817  030C                     	;# 
   818  038C                     	;# 
   819  0391                     	;# 
   820  0392                     	;# 
   821  0393                     	;# 
   822  0691                     	;# 
   823  0692                     	;# 
   824  0693                     	;# 
   825  0694                     	;# 
   826  0695                     	;# 
   827  0D8E                     	;# 
   828  0D8F                     	;# 
   829  0D90                     	;# 
   830  0D91                     	;# 
   831  0D91                     	;# 
   832  0D92                     	;# 
   833  0D93                     	;# 
   834  0D93                     	;# 
   835  0D94                     	;# 
   836  0D95                     	;# 
   837  0D95                     	;# 
   838  0D96                     	;# 
   839  0D97                     	;# 
   840  0D97                     	;# 
   841  0D98                     	;# 
   842  0D99                     	;# 
   843  0D99                     	;# 
   844  0D9A                     	;# 
   845  0D9B                     	;# 
   846  0D9C                     	;# 
   847  0D9C                     	;# 
   848  0D9D                     	;# 
   849  0D9D                     	;# 
   850  0D9E                     	;# 
   851  0D9F                     	;# 
   852  0DA0                     	;# 
   853  0DA1                     	;# 
   854  0DA1                     	;# 
   855  0DA2                     	;# 
   856  0DA3                     	;# 
   857  0DA3                     	;# 
   858  0DA4                     	;# 
   859  0DA5                     	;# 
   860  0DA5                     	;# 
   861  0DA6                     	;# 
   862  0DA7                     	;# 
   863  0DA7                     	;# 
   864  0DA8                     	;# 
   865  0DA9                     	;# 
   866  0DA9                     	;# 
   867  0DAA                     	;# 
   868  0DAB                     	;# 
   869  0DAC                     	;# 
   870  0DAC                     	;# 
   871  0DAD                     	;# 
   872  0DAD                     	;# 
   873  0DAE                     	;# 
   874  0DAF                     	;# 
   875  0DB0                     	;# 
   876  0DB1                     	;# 
   877  0DB1                     	;# 
   878  0DB2                     	;# 
   879  0DB3                     	;# 
   880  0DB3                     	;# 
   881  0DB4                     	;# 
   882  0DB5                     	;# 
   883  0DB5                     	;# 
   884  0DB6                     	;# 
   885  0DB7                     	;# 
   886  0DB7                     	;# 
   887  0DB8                     	;# 
   888  0DB9                     	;# 
   889  0DB9                     	;# 
   890  0DBA                     	;# 
   891  0DBB                     	;# 
   892  0DBC                     	;# 
   893  0DBC                     	;# 
   894  0DBD                     	;# 
   895  0DBD                     	;# 
   896  0DBE                     	;# 
   897  0DBF                     	;# 
   898  0DC0                     	;# 
   899  0FE4                     	;# 
   900  0FE5                     	;# 
   901  0FE6                     	;# 
   902  0FE7                     	;# 
   903  0FE8                     	;# 
   904  0FE8                     	;# 
   905  0FE9                     	;# 
   906  0FEA                     	;# 
   907  0FEA                     	;# 
   908  0FEB                     	;# 
   909  0FED                     	;# 
   910  0FEE                     	;# 
   911  0FEE                     	;# 
   912  0FEF                     	;# 
   913                           
   914                           	psect	idataBANK0
   915  01DB                     __pidataBANK0:	
   916                           
   917                           ;initializer for _PORTTable
   918  01DB  3401               	retlw	1
   919  01DC  3402               	retlw	2
   920  01DD  3410               	retlw	16
   921  01DE  3420               	retlw	32
   922  01DF  3420               	retlw	32
   923  01E0  3401               	retlw	1
   924  01E1  3410               	retlw	16
   925  01E2  3402               	retlw	2
   926                           
   927                           ;initializer for _TRISTable
   928  01E3  34FC               	retlw	252
   929  01E4  34FC               	retlw	252
   930  01E5  34CF               	retlw	207
   931  01E6  34CF               	retlw	207
   932  01E7  34DE               	retlw	222
   933  01E8  34DE               	retlw	222
   934  01E9  34ED               	retlw	237
   935  01EA  34ED               	retlw	237
   936                           
   937                           ;initializer for RunLeftFlash@delay
   938  01EB  34E8               	retlw	232
   939  01EC  3403               	retlw	3
   940                           
   941                           	psect	nvBANK0
   942  004E                     __pnvBANK0:	
   943  004E                     _TMR0_InterruptHandler:	
   944  004E                     	ds	2
   945  0050                     _IOCAF3_InterruptHandler:	
   946  0050                     	ds	2
   947  0052                     _IOCAF2_InterruptHandler:	
   948  0052                     	ds	2
   949  0054                     _timer0ReloadVal:	
   950  0054                     	ds	1
   951  000C                     _PORTAbits	set	12
   952  000C                     _PORTA	set	12
   953  0015                     _TMR0	set	21
   954  000B                     _INTCONbits	set	11
   955  0095                     _OPTION_REG	set	149
   956  0097                     _WDTCON	set	151
   957  0098                     _OSCTUNE	set	152
   958  0099                     _OSCCON	set	153
   959  0095                     _OPTION_REGbits	set	149
   960  008C                     _TRISA	set	140
   961  0116                     _BORCON	set	278
   962  011D                     _APFCON	set	285
   963  010C                     _LATA	set	268
   964  0197                     _VREGCONbits	set	407
   965  018C                     _ANSELA	set	396
   966  020C                     _WPUA	set	524
   967  028C                     _ODCONA	set	652
   968  0391                     _IOCAPbits	set	913
   969  0392                     _IOCANbits	set	914
   970  0393                     _IOCAFbits	set	915
   971                           
   972                           ; #config settings
   973  0000                     
   974                           	psect	cinit
   975  0018                     start_initialization:	
   976  0018                     __initialization:	
   977                           
   978                           ; Initialize objects allocated to BANK0
   979  0018  30DB               	movlw	low __pidataBANK0
   980  0019  0084               	movwf	4
   981  001A  3081               	movlw	(high __pidataBANK0)| (0+128)
   982  001B  0085               	movwf	5
   983  001C  303C               	movlw	low __pdataBANK0
   984  001D  0086               	movwf	6
   985  001E  3000               	movlw	high __pdataBANK0
   986  001F  0087               	movwf	7
   987  0020  3012               	movlw	18
   988  0021  224D               	fcall	init_ram
   989                           
   990                           ; Clear objects allocated to COMMON
   991  0022  01F6               	clrf	__pbssCOMMON& (0+127)
   992  0023  01F7               	clrf	(__pbssCOMMON+1)& (0+127)
   993  0024  01F8               	clrf	(__pbssCOMMON+2)& (0+127)
   994  0025  01F9               	clrf	(__pbssCOMMON+3)& (0+127)
   995                           
   996                           ; Clear objects allocated to BANK0
   997  0026  3020               	movlw	low __pbssBANK0
   998  0027  0084               	movwf	4
   999  0028  3000               	movlw	high __pbssBANK0
  1000  0029  0085               	movwf	5
  1001  002A  301C               	movlw	28
  1002  002B  2253               	fcall	clear_ram0
  1003  002C                     end_of_initialization:	
  1004                           ;End of C runtime variable initialization code
  1005                           
  1006  002C                     __end_of__initialization:	
  1007  002C  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  1008  002D  0020               	movlb	0
  1009  002E  294B               	ljmp	_main	;jump to C main() function
  1010                           
  1011                           	psect	bssCOMMON
  1012  0076                     __pbssCOMMON:	
  1013  0076                     CheckForButtonPushes@LastRightButtonState:	
  1014  0076                     	ds	1
  1015  0077                     CheckForButtonPushes@LastLeftButtonState:	
  1016  0077                     	ds	1
  1017  0078                     _LEDOns:	
  1018  0078                     	ds	1
  1019  0079                     _LEDState:	
  1020  0079                     	ds	1
  1021                           
  1022                           	psect	bssBANK0
  1023  0020                     __pbssBANK0:	
  1024  0020                     _PatternDelay:	
  1025  0020                     	ds	16
  1026  0030                     _PatternState:	
  1027  0030                     	ds	8
  1028  0038                     _WakeTimer:	
  1029  0038                     	ds	4
  1030                           
  1031                           	psect	dataBANK0
  1032  003C                     __pdataBANK0:	
  1033  003C                     _PORTTable:	
  1034  003C                     	ds	8
  1035  0044                     _TRISTable:	
  1036  0044                     	ds	8
  1037  004C                     RunLeftFlash@delay:	
  1038  004C                     	ds	2
  1039                           
  1040                           	psect	inittext
  1041  024D                     init_ram:	
  1042  024D  00FE               	movwf	126
  1043  024E                     initloop:	
  1044  024E  0012               	moviw fsr0++
  1045  024F  001E               	movwi fsr1++
  1046  0250  0BFE               	decfsz	126,f
  1047  0251  2A4E               	goto	initloop
  1048  0252  3400               	retlw	0
  1049                           
  1050                           	psect	clrtext
  1051  0253                     clear_ram0:	
  1052                           ;	Called with FSR0 containing the base address, and
  1053                           ;	WREG with the size to clear
  1054                           
  1055  0253  0064               	clrwdt	;clear the watchdog before getting into this loop
  1056  0254                     clrloop0:	
  1057  0254  0180               	clrf	0	;clear RAM location pointed to by FSR
  1058  0255  3101               	addfsr 0,1
  1059  0256  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  1060  0257  2A54               	goto	clrloop0	;have we reached the end yet?
  1061  0258  3400               	retlw	0	;all done for this memory range, return
  1062                           
  1063                           	psect	cstackCOMMON
  1064  0070                     __pcstackCOMMON:	
  1065  0070                     ?_IOCAF2_DefaultInterruptHandler:	
  1066  0070                     ??_IOCAF2_DefaultInterruptHandler:	
  1067                           ; 1 bytes @ 0x0
  1068                           
  1069  0070                     ?_IOCAF3_DefaultInterruptHandler:	
  1070                           ; 1 bytes @ 0x0
  1071                           
  1072  0070                     ??_IOCAF3_DefaultInterruptHandler:	
  1073                           ; 1 bytes @ 0x0
  1074                           
  1075  0070                     ?_IOCAF2_ISR:	
  1076                           ; 1 bytes @ 0x0
  1077                           
  1078  0070                     ??_IOCAF2_ISR:	
  1079                           ; 1 bytes @ 0x0
  1080                           
  1081  0070                     ?_IOCAF3_ISR:	
  1082                           ; 1 bytes @ 0x0
  1083                           
  1084  0070                     ??_IOCAF3_ISR:	
  1085                           ; 1 bytes @ 0x0
  1086                           
  1087  0070                     ?_OSCILLATOR_Initialize:	
  1088                           ; 1 bytes @ 0x0
  1089                           
  1090  0070                     ?_WDT_Initialize:	
  1091                           ; 1 bytes @ 0x0
  1092                           
  1093  0070                     ?_TMR0_Initialize:	
  1094                           ; 1 bytes @ 0x0
  1095                           
  1096  0070                     ?_TMR0_ISR:	
  1097                           ; 1 bytes @ 0x0
  1098                           
  1099  0070                     ?_TMR0_CallBack:	
  1100                           ; 1 bytes @ 0x0
  1101                           
  1102  0070                     ?_PIN_MANAGER_Initialize:	
  1103                           ; 1 bytes @ 0x0
  1104                           
  1105  0070                     ?_PIN_MANAGER_IOC:	
  1106                           ; 1 bytes @ 0x0
  1107                           
  1108  0070                     ??_PIN_MANAGER_IOC:	
  1109                           ; 1 bytes @ 0x0
  1110                           
  1111  0070                     ?_SYSTEM_Initialize:	
  1112                           ; 1 bytes @ 0x0
  1113                           
  1114  0070                     ?_INTERRUPT_InterruptManager:	
  1115                           ; 1 bytes @ 0x0
  1116                           
  1117  0070                     ?_SetLEDOn:	
  1118                           ; 1 bytes @ 0x0
  1119                           
  1120  0070                     ?_SetLEDOff:	
  1121                           ; 1 bytes @ 0x0
  1122                           
  1123  0070                     ?_SetAllLEDsOff:	
  1124                           ; 1 bytes @ 0x0
  1125                           
  1126  0070                     ?_CharlieplexLEDs:	
  1127                           ; 1 bytes @ 0x0
  1128                           
  1129  0070                     ??_CharlieplexLEDs:	
  1130                           ; 1 bytes @ 0x0
  1131                           
  1132  0070                     ?_RightButtonPressed:	
  1133                           ; 1 bytes @ 0x0
  1134                           
  1135  0070                     ?_LeftButtonPressed:	
  1136                           ; 1 bytes @ 0x0
  1137                           
  1138  0070                     ?_RunRightFlash:	
  1139                           ; 1 bytes @ 0x0
  1140                           
  1141  0070                     ?_RunLeftFlash:	
  1142                           ; 1 bytes @ 0x0
  1143                           
  1144  0070                     ?_CheckForButtonPushes:	
  1145                           ; 1 bytes @ 0x0
  1146                           
  1147  0070                     ?_main:	
  1148                           ; 1 bytes @ 0x0
  1149                           
  1150                           
  1151                           ; 1 bytes @ 0x0
  1152  0070                     	ds	2
  1153  0072                     CharlieplexLEDs@i:	
  1154                           
  1155                           ; 1 bytes @ 0x2
  1156  0072                     	ds	1
  1157  0073                     ??_TMR0_ISR:	
  1158  0073                     ??_TMR0_CallBack:	
  1159                           ; 1 bytes @ 0x3
  1160                           
  1161  0073                     ??_INTERRUPT_InterruptManager:	
  1162                           ; 1 bytes @ 0x3
  1163                           
  1164                           
  1165                           ; 1 bytes @ 0x3
  1166  0073                     	ds	1
  1167  0074                     ?_IOCAF2_SetInterruptHandler:	
  1168  0074                     ?_IOCAF3_SetInterruptHandler:	
  1169                           ; 1 bytes @ 0x4
  1170                           
  1171  0074                     ??_OSCILLATOR_Initialize:	
  1172                           ; 1 bytes @ 0x4
  1173                           
  1174  0074                     ??_WDT_Initialize:	
  1175                           ; 1 bytes @ 0x4
  1176                           
  1177  0074                     ??_TMR0_Initialize:	
  1178                           ; 1 bytes @ 0x4
  1179                           
  1180  0074                     ?_TMR0_SetInterruptHandler:	
  1181                           ; 1 bytes @ 0x4
  1182                           
  1183  0074                     ??_SetLEDOn:	
  1184                           ; 1 bytes @ 0x4
  1185                           
  1186  0074                     ??_SetLEDOff:	
  1187                           ; 1 bytes @ 0x4
  1188                           
  1189  0074                     ??_SetAllLEDsOff:	
  1190                           ; 1 bytes @ 0x4
  1191                           
  1192  0074                     ??_RightButtonPressed:	
  1193                           ; 1 bytes @ 0x4
  1194                           
  1195  0074                     ??_LeftButtonPressed:	
  1196                           ; 1 bytes @ 0x4
  1197                           
  1198  0074                     ??_CheckForButtonPushes:	
  1199                           ; 1 bytes @ 0x4
  1200                           
  1201  0074                     IOCAF2_SetInterruptHandler@InterruptHandler:	
  1202                           ; 1 bytes @ 0x4
  1203                           
  1204  0074                     IOCAF3_SetInterruptHandler@InterruptHandler:	
  1205                           ; 2 bytes @ 0x4
  1206                           
  1207  0074                     TMR0_SetInterruptHandler@InterruptHandler:	
  1208                           ; 2 bytes @ 0x4
  1209                           
  1210                           
  1211                           ; 2 bytes @ 0x4
  1212  0074                     	ds	1
  1213  0075                     SetLEDOn@LED:	
  1214  0075                     SetLEDOff@LED:	
  1215                           ; 1 bytes @ 0x5
  1216                           
  1217                           
  1218                           ; 1 bytes @ 0x5
  1219  0075                     	ds	1
  1220  0076                     ??_IOCAF2_SetInterruptHandler:	
  1221  0076                     ??_IOCAF3_SetInterruptHandler:	
  1222                           ; 1 bytes @ 0x6
  1223                           
  1224  0076                     ??_PIN_MANAGER_Initialize:	
  1225                           ; 1 bytes @ 0x6
  1226                           
  1227  0076                     ??_SYSTEM_Initialize:	
  1228                           ; 1 bytes @ 0x6
  1229                           
  1230  0076                     ??_TMR0_SetInterruptHandler:	
  1231                           ; 1 bytes @ 0x6
  1232                           
  1233                           
  1234                           	psect	cstackBANK0
  1235  0055                     __pcstackBANK0:	
  1236                           ; 1 bytes @ 0x6
  1237                           
  1238  0055                     ??_RunRightFlash:	
  1239  0055                     ??_RunLeftFlash:	
  1240                           ; 1 bytes @ 0x0
  1241                           
  1242                           
  1243                           ; 1 bytes @ 0x0
  1244  0055                     	ds	1
  1245  0056                     ??_main:	
  1246                           
  1247                           ; 1 bytes @ 0x1
  1248  0056                     	ds	1
  1249  0057                     main@APatternIsRunning:	
  1250                           
  1251                           ; 1 bytes @ 0x2
  1252  0057                     	ds	1
  1253  0058                     main@i:	
  1254                           
  1255                           ; 1 bytes @ 0x3
  1256  0058                     	ds	1
  1257                           
  1258                           	psect	maintext
  1259  014B                     __pmaintext:	
  1260 ;;
  1261 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  1262 ;;
  1263 ;; *************** function _main *****************
  1264 ;; Defined at:
  1265 ;;		line 414 in file "main.c"
  1266 ;; Parameters:    Size  Location     Type
  1267 ;;		None
  1268 ;; Auto vars:     Size  Location     Type
  1269 ;;  i               1    3[BANK0 ] unsigned char 
  1270 ;;  APatternIsRu    1    2[BANK0 ] unsigned char 
  1271 ;; Return value:  Size  Location     Type
  1272 ;;                  1    wreg      void 
  1273 ;; Registers used:
  1274 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1275 ;; Tracked objects:
  1276 ;;		On entry : B1F/0
  1277 ;;		On exit  : 0/0
  1278 ;;		Unchanged: 0/0
  1279 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1280 ;;      Params:         0       0       0       0
  1281 ;;      Locals:         0       2       0       0
  1282 ;;      Temps:          0       1       0       0
  1283 ;;      Totals:         0       3       0       0
  1284 ;;Total ram usage:        3 bytes
  1285 ;; Hardware stack levels required when called:    7
  1286 ;; This function calls:
  1287 ;;		_CheckForButtonPushes
  1288 ;;		_RunLeftFlash
  1289 ;;		_RunRightFlash
  1290 ;;		_SYSTEM_Initialize
  1291 ;;		_SetAllLEDsOff
  1292 ;;		_TMR0_SetInterruptHandler
  1293 ;; This function is called by:
  1294 ;;		Startup code after reset
  1295 ;; This function uses a non-reentrant model
  1296 ;;
  1297                           
  1298                           
  1299                           ;psect for function _main
  1300  014B                     _main:	
  1301                           
  1302                           ;main.c: 417: SYSTEM_Initialize();
  1303                           
  1304                           ;incstack = 0
  1305                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1306  014B  227D               	fcall	_SYSTEM_Initialize
  1307                           
  1308                           ;main.c: 419: TMR0_SetInterruptHandler(CharlieplexLEDs);
  1309  014C  30F8               	movlw	low _CharlieplexLEDs
  1310  014D  00F4               	movwf	TMR0_SetInterruptHandler@InterruptHandler
  1311  014E  3000               	movlw	high _CharlieplexLEDs
  1312  014F  00F5               	movwf	TMR0_SetInterruptHandler@InterruptHandler+1
  1313  0150  2259               	fcall	_TMR0_SetInterruptHandler
  1314                           
  1315                           ;main.c: 425: (INTCONbits.GIE = 1);
  1316  0151  178B               	bsf	11,7	;volatile
  1317                           
  1318                           ;main.c: 428: (INTCONbits.PEIE = 1);
  1319  0152  170B               	bsf	11,6	;volatile
  1320                           
  1321                           ;main.c: 436: uint8_t i;
  1322                           ;main.c: 437: bool APatternIsRunning = 0;
  1323  0153  0020               	movlb	0	; select bank0
  1324  0154  01D7               	clrf	main@APatternIsRunning
  1325  0155                     l1457:	
  1326                           ;main.c: 439: while (1)
  1327                           
  1328                           
  1329                           ;main.c: 440: {
  1330                           ;main.c: 441: RunRightFlash();
  1331  0155  209A               	fcall	_RunRightFlash
  1332                           
  1333                           ;main.c: 442: RunLeftFlash();
  1334  0156  202F               	fcall	_RunLeftFlash
  1335                           
  1336                           ;main.c: 444: APatternIsRunning = 0;
  1337  0157  0020               	movlb	0	; select bank0
  1338  0158  01D7               	clrf	main@APatternIsRunning
  1339                           
  1340                           ;main.c: 445: for (i=0; i < 8; i++)
  1341  0159  01D8               	clrf	main@i
  1342  015A  3008               	movlw	8
  1343  015B  0258               	subwf	main@i,w
  1344  015C  1803               	btfsc	3,0
  1345  015D  296F               	goto	l1477
  1346  015E                     l1469:	
  1347                           
  1348                           ;main.c: 446: {
  1349                           ;main.c: 447: if (PatternState[i] != 0)
  1350  015E  0858               	movf	main@i,w
  1351  015F  3E30               	addlw	(low (_PatternState| 0))& (0+255)
  1352  0160  0086               	movwf	6
  1353  0161  0187               	clrf	7
  1354  0162  0801               	movf	1,w
  1355  0163  1903               	btfsc	3,2
  1356  0164  2967               	goto	l1473
  1357                           
  1358                           ;main.c: 448: {
  1359                           ;main.c: 449: APatternIsRunning = 1;
  1360  0165  01D7               	clrf	main@APatternIsRunning
  1361  0166  0AD7               	incf	main@APatternIsRunning,f
  1362  0167                     l1473:	
  1363  0167  3001               	movlw	1
  1364  0168  00D6               	movwf	??_main
  1365  0169  0856               	movf	??_main,w
  1366  016A  07D8               	addwf	main@i,f
  1367  016B  3008               	movlw	8
  1368  016C  0258               	subwf	main@i,w
  1369  016D  1C03               	skipc
  1370  016E  295E               	goto	l1469
  1371  016F                     l1477:	
  1372                           
  1373                           ;main.c: 450: }
  1374                           ;main.c: 451: }
  1375                           ;main.c: 452: if (!APatternIsRunning || (WakeTimer > (1UL * 60UL * 1000UL)))
  1376  016F  0857               	movf	main@APatternIsRunning,w
  1377  0170  1903               	btfsc	3,2
  1378  0171  297E               	goto	l240
  1379  0172  083B               	movf	_WakeTimer+3,w	;volatile
  1380  0173  1D03               	btfss	3,2
  1381  0174  297E               	goto	l240
  1382  0175  083A               	movf	_WakeTimer+2,w	;volatile
  1383  0176  1D03               	btfss	3,2
  1384  0177  297E               	goto	l240
  1385  0178  3061               	movlw	97
  1386  0179  0238               	subwf	_WakeTimer,w	;volatile
  1387  017A  30EA               	movlw	234
  1388  017B  3B39               	subwfb	_WakeTimer+1,w	;volatile
  1389  017C  1C03               	btfss	3,0
  1390  017D  2994               	goto	l1487
  1391  017E                     l240:	
  1392                           
  1393                           ;main.c: 453: {
  1394                           ;main.c: 455: VREGCONbits.VREGPM = 1;
  1395  017E  0023               	movlb	3	; select bank3
  1396  017F  1497               	bsf	23,1	;volatile
  1397                           
  1398                           ;main.c: 457: SetAllLEDsOff();
  1399  0180  2286               	fcall	_SetAllLEDsOff
  1400                           
  1401                           ;main.c: 459: _delay((unsigned long)((10)*(16000000/4000.0)));
  1402  0181  3034               	movlw	52
  1403  0182  0020               	movlb	0	; select bank0
  1404  0183  00D6               	movwf	??_main
  1405  0184  30F1               	movlw	241
  1406  0185                     u887:	
  1407  0185  0B89               	decfsz	9,f
  1408  0186  2985               	goto	u887
  1409  0187  0BD6               	decfsz	??_main,f
  1410  0188  2985               	goto	u887
  1411  0189  3200               	nop2
  1412  018A  0063               	sleep	;# 
  1413                           
  1414                           ;main.c: 464: WakeTimer = 0;
  1415  018B  3000               	movlw	0
  1416  018C  0020               	movlb	0	; select bank0
  1417  018D  00BB               	movwf	_WakeTimer+3	;volatile
  1418  018E  3000               	movlw	0
  1419  018F  00BA               	movwf	_WakeTimer+2	;volatile
  1420  0190  3000               	movlw	0
  1421  0191  00B9               	movwf	_WakeTimer+1	;volatile
  1422  0192  3000               	movlw	0
  1423  0193  00B8               	movwf	_WakeTimer	;volatile
  1424  0194                     l1487:	
  1425                           
  1426                           ;main.c: 465: }
  1427                           ;main.c: 467: CheckForButtonPushes();
  1428  0194  21BA               	fcall	_CheckForButtonPushes
  1429  0195  2955               	goto	l1457
  1430  0196                     __end_of_main:	
  1431                           
  1432                           	psect	text1
  1433  0259                     __ptext1:	
  1434 ;; *************** function _TMR0_SetInterruptHandler *****************
  1435 ;; Defined at:
  1436 ;;		line 134 in file "mcc_generated_files/tmr0.c"
  1437 ;; Parameters:    Size  Location     Type
  1438 ;;  InterruptHan    2    4[COMMON] PTR FTN()void 
  1439 ;;		 -> CharlieplexLEDs(1), 
  1440 ;; Auto vars:     Size  Location     Type
  1441 ;;		None
  1442 ;; Return value:  Size  Location     Type
  1443 ;;                  1    wreg      void 
  1444 ;; Registers used:
  1445 ;;		wreg
  1446 ;; Tracked objects:
  1447 ;;		On entry : 0/0
  1448 ;;		On exit  : 0/0
  1449 ;;		Unchanged: 0/0
  1450 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1451 ;;      Params:         2       0       0       0
  1452 ;;      Locals:         0       0       0       0
  1453 ;;      Temps:          0       0       0       0
  1454 ;;      Totals:         2       0       0       0
  1455 ;;Total ram usage:        2 bytes
  1456 ;; Hardware stack levels used:    1
  1457 ;; Hardware stack levels required when called:    4
  1458 ;; This function calls:
  1459 ;;		Nothing
  1460 ;; This function is called by:
  1461 ;;		_main
  1462 ;; This function uses a non-reentrant model
  1463 ;;
  1464                           
  1465                           
  1466                           ;psect for function _TMR0_SetInterruptHandler
  1467  0259                     _TMR0_SetInterruptHandler:	
  1468                           
  1469                           ;tmr0.c: 135: TMR0_InterruptHandler = InterruptHandler;
  1470                           
  1471                           ;incstack = 0
  1472                           ; Regs used in _TMR0_SetInterruptHandler: [wreg]
  1473  0259  0875               	movf	TMR0_SetInterruptHandler@InterruptHandler+1,w
  1474  025A  0020               	movlb	0	; select bank0
  1475  025B  00CF               	movwf	_TMR0_InterruptHandler+1
  1476  025C  0874               	movf	TMR0_SetInterruptHandler@InterruptHandler,w
  1477  025D  00CE               	movwf	_TMR0_InterruptHandler
  1478  025E  0008               	return
  1479  025F                     __end_of_TMR0_SetInterruptHandler:	
  1480                           
  1481                           	psect	text2
  1482  0286                     __ptext2:	
  1483 ;; *************** function _SetAllLEDsOff *****************
  1484 ;; Defined at:
  1485 ;;		line 175 in file "main.c"
  1486 ;; Parameters:    Size  Location     Type
  1487 ;;		None
  1488 ;; Auto vars:     Size  Location     Type
  1489 ;;		None
  1490 ;; Return value:  Size  Location     Type
  1491 ;;                  1    wreg      void 
  1492 ;; Registers used:
  1493 ;;		status,2
  1494 ;; Tracked objects:
  1495 ;;		On entry : 0/0
  1496 ;;		On exit  : 0/0
  1497 ;;		Unchanged: 0/0
  1498 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1499 ;;      Params:         0       0       0       0
  1500 ;;      Locals:         0       0       0       0
  1501 ;;      Temps:          0       0       0       0
  1502 ;;      Totals:         0       0       0       0
  1503 ;;Total ram usage:        0 bytes
  1504 ;; Hardware stack levels used:    1
  1505 ;; Hardware stack levels required when called:    4
  1506 ;; This function calls:
  1507 ;;		Nothing
  1508 ;; This function is called by:
  1509 ;;		_main
  1510 ;; This function uses a non-reentrant model
  1511 ;;
  1512                           
  1513                           
  1514                           ;psect for function _SetAllLEDsOff
  1515  0286                     _SetAllLEDsOff:	
  1516                           
  1517                           ;main.c: 177: LEDOns = 0;
  1518                           
  1519                           ;incstack = 0
  1520                           ; Regs used in _SetAllLEDsOff: [status,2]
  1521  0286  01F8               	clrf	_LEDOns	;volatile
  1522  0287  0008               	return
  1523  0288                     __end_of_SetAllLEDsOff:	
  1524                           
  1525                           	psect	text3
  1526  027D                     __ptext3:	
  1527 ;; *************** function _SYSTEM_Initialize *****************
  1528 ;; Defined at:
  1529 ;;		line 68 in file "mcc_generated_files/mcc.c"
  1530 ;; Parameters:    Size  Location     Type
  1531 ;;		None
  1532 ;; Auto vars:     Size  Location     Type
  1533 ;;		None
  1534 ;; Return value:  Size  Location     Type
  1535 ;;                  1    wreg      void 
  1536 ;; Registers used:
  1537 ;;		wreg, status,2, status,0, pclath, cstack
  1538 ;; Tracked objects:
  1539 ;;		On entry : 0/0
  1540 ;;		On exit  : 0/0
  1541 ;;		Unchanged: 0/0
  1542 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1543 ;;      Params:         0       0       0       0
  1544 ;;      Locals:         0       0       0       0
  1545 ;;      Temps:          0       0       0       0
  1546 ;;      Totals:         0       0       0       0
  1547 ;;Total ram usage:        0 bytes
  1548 ;; Hardware stack levels used:    1
  1549 ;; Hardware stack levels required when called:    6
  1550 ;; This function calls:
  1551 ;;		_OSCILLATOR_Initialize
  1552 ;;		_PIN_MANAGER_Initialize
  1553 ;;		_TMR0_Initialize
  1554 ;;		_WDT_Initialize
  1555 ;; This function is called by:
  1556 ;;		_main
  1557 ;; This function uses a non-reentrant model
  1558 ;;
  1559                           
  1560                           
  1561                           ;psect for function _SYSTEM_Initialize
  1562  027D                     _SYSTEM_Initialize:	
  1563                           
  1564                           ;mcc.c: 71: PIN_MANAGER_Initialize();
  1565                           
  1566                           ;incstack = 0
  1567                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  1568  027D  2196               	fcall	_PIN_MANAGER_Initialize
  1569                           
  1570                           ;mcc.c: 72: OSCILLATOR_Initialize();
  1571  027E  222A               	fcall	_OSCILLATOR_Initialize
  1572                           
  1573                           ;mcc.c: 73: WDT_Initialize();
  1574  027F  2282               	fcall	_WDT_Initialize
  1575                           
  1576                           ;mcc.c: 74: TMR0_Initialize();
  1577  0280  21ED               	fcall	_TMR0_Initialize
  1578  0281  0008               	return
  1579  0282                     __end_of_SYSTEM_Initialize:	
  1580                           
  1581                           	psect	text4
  1582  0282                     __ptext4:	
  1583 ;; *************** function _WDT_Initialize *****************
  1584 ;; Defined at:
  1585 ;;		line 87 in file "mcc_generated_files/mcc.c"
  1586 ;; Parameters:    Size  Location     Type
  1587 ;;		None
  1588 ;; Auto vars:     Size  Location     Type
  1589 ;;		None
  1590 ;; Return value:  Size  Location     Type
  1591 ;;                  1    wreg      void 
  1592 ;; Registers used:
  1593 ;;		wreg
  1594 ;; Tracked objects:
  1595 ;;		On entry : 0/0
  1596 ;;		On exit  : 0/0
  1597 ;;		Unchanged: 0/0
  1598 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1599 ;;      Params:         0       0       0       0
  1600 ;;      Locals:         0       0       0       0
  1601 ;;      Temps:          0       0       0       0
  1602 ;;      Totals:         0       0       0       0
  1603 ;;Total ram usage:        0 bytes
  1604 ;; Hardware stack levels used:    1
  1605 ;; Hardware stack levels required when called:    4
  1606 ;; This function calls:
  1607 ;;		Nothing
  1608 ;; This function is called by:
  1609 ;;		_SYSTEM_Initialize
  1610 ;; This function uses a non-reentrant model
  1611 ;;
  1612                           
  1613                           
  1614                           ;psect for function _WDT_Initialize
  1615  0282                     _WDT_Initialize:	
  1616                           
  1617                           ;mcc.c: 90: WDTCON = 0x16;
  1618                           
  1619                           ;incstack = 0
  1620                           ; Regs used in _WDT_Initialize: [wreg]
  1621  0282  3016               	movlw	22
  1622  0283  0021               	movlb	1	; select bank1
  1623  0284  0097               	movwf	23	;volatile
  1624  0285  0008               	return
  1625  0286                     __end_of_WDT_Initialize:	
  1626                           
  1627                           	psect	text5
  1628  01ED                     __ptext5:	
  1629 ;; *************** function _TMR0_Initialize *****************
  1630 ;; Defined at:
  1631 ;;		line 66 in file "mcc_generated_files/tmr0.c"
  1632 ;; Parameters:    Size  Location     Type
  1633 ;;		None
  1634 ;; Auto vars:     Size  Location     Type
  1635 ;;		None
  1636 ;; Return value:  Size  Location     Type
  1637 ;;                  1    wreg      void 
  1638 ;; Registers used:
  1639 ;;		wreg, status,2
  1640 ;; Tracked objects:
  1641 ;;		On entry : 0/0
  1642 ;;		On exit  : 0/0
  1643 ;;		Unchanged: 0/0
  1644 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1645 ;;      Params:         0       0       0       0
  1646 ;;      Locals:         0       0       0       0
  1647 ;;      Temps:          1       0       0       0
  1648 ;;      Totals:         1       0       0       0
  1649 ;;Total ram usage:        1 bytes
  1650 ;; Hardware stack levels used:    1
  1651 ;; Hardware stack levels required when called:    4
  1652 ;; This function calls:
  1653 ;;		Nothing
  1654 ;; This function is called by:
  1655 ;;		_SYSTEM_Initialize
  1656 ;; This function uses a non-reentrant model
  1657 ;;
  1658                           
  1659                           
  1660                           ;psect for function _TMR0_Initialize
  1661  01ED                     _TMR0_Initialize:	
  1662                           
  1663                           ;tmr0.c: 71: OPTION_REG = (uint8_t)((OPTION_REG & 0xC0) | 0xD1 & 0x3F);
  1664                           
  1665                           ;incstack = 0
  1666                           ; Regs used in _TMR0_Initialize: [wreg+status,2]
  1667  01ED  0021               	movlb	1	; select bank1
  1668  01EE  0815               	movf	21,w	;volatile
  1669  01EF  39C0               	andlw	192
  1670  01F0  3811               	iorlw	17
  1671  01F1  0095               	movwf	21	;volatile
  1672                           
  1673                           ;tmr0.c: 74: TMR0 = 0x87;
  1674  01F2  3087               	movlw	135
  1675  01F3  0020               	movlb	0	; select bank0
  1676  01F4  0095               	movwf	21	;volatile
  1677                           
  1678                           ;tmr0.c: 77: timer0ReloadVal= 0x87;
  1679  01F5  3087               	movlw	135
  1680  01F6  00F4               	movwf	??_TMR0_Initialize
  1681  01F7  0874               	movf	??_TMR0_Initialize,w
  1682  01F8  00D4               	movwf	_timer0ReloadVal	;volatile
  1683                           
  1684                           ;tmr0.c: 80: INTCONbits.TMR0IF = 0;
  1685  01F9  110B               	bcf	11,2	;volatile
  1686                           
  1687                           ;tmr0.c: 83: INTCONbits.TMR0IE = 1;
  1688  01FA  168B               	bsf	11,5	;volatile
  1689  01FB  0008               	return
  1690  01FC                     __end_of_TMR0_Initialize:	
  1691                           
  1692                           	psect	text6
  1693  0196                     __ptext6:	
  1694 ;; *************** function _PIN_MANAGER_Initialize *****************
  1695 ;; Defined at:
  1696 ;;		line 55 in file "mcc_generated_files/pin_manager.c"
  1697 ;; Parameters:    Size  Location     Type
  1698 ;;		None
  1699 ;; Auto vars:     Size  Location     Type
  1700 ;;		None
  1701 ;; Return value:  Size  Location     Type
  1702 ;;                  1    wreg      void 
  1703 ;; Registers used:
  1704 ;;		wreg, status,2, status,0, pclath, cstack
  1705 ;; Tracked objects:
  1706 ;;		On entry : 0/0
  1707 ;;		On exit  : 0/0
  1708 ;;		Unchanged: 0/0
  1709 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1710 ;;      Params:         0       0       0       0
  1711 ;;      Locals:         0       0       0       0
  1712 ;;      Temps:          0       0       0       0
  1713 ;;      Totals:         0       0       0       0
  1714 ;;Total ram usage:        0 bytes
  1715 ;; Hardware stack levels used:    1
  1716 ;; Hardware stack levels required when called:    5
  1717 ;; This function calls:
  1718 ;;		_IOCAF2_SetInterruptHandler
  1719 ;;		_IOCAF3_SetInterruptHandler
  1720 ;; This function is called by:
  1721 ;;		_SYSTEM_Initialize
  1722 ;; This function uses a non-reentrant model
  1723 ;;
  1724                           
  1725                           
  1726                           ;psect for function _PIN_MANAGER_Initialize
  1727  0196                     _PIN_MANAGER_Initialize:	
  1728                           
  1729                           ;pin_manager.c: 60: LATA = 0x00;
  1730                           
  1731                           ;incstack = 0
  1732                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2+status,0+pclath+cstack]
  1733  0196  0022               	movlb	2	; select bank2
  1734  0197  018C               	clrf	12	;volatile
  1735                           
  1736                           ;pin_manager.c: 65: TRISA = 0x3F;
  1737  0198  303F               	movlw	63
  1738  0199  0021               	movlb	1	; select bank1
  1739  019A  008C               	movwf	12	;volatile
  1740                           
  1741                           ;pin_manager.c: 70: ANSELA = 0x13;
  1742  019B  3013               	movlw	19
  1743  019C  0023               	movlb	3	; select bank3
  1744  019D  008C               	movwf	12	;volatile
  1745                           
  1746                           ;pin_manager.c: 75: WPUA = 0x0C;
  1747  019E  300C               	movlw	12
  1748  019F  0024               	movlb	4	; select bank4
  1749  01A0  008C               	movwf	12	;volatile
  1750                           
  1751                           ;pin_manager.c: 76: OPTION_REGbits.nWPUEN = 0;
  1752  01A1  0021               	movlb	1	; select bank1
  1753  01A2  1395               	bcf	21,7	;volatile
  1754                           
  1755                           ;pin_manager.c: 81: ODCONA = 0x00;
  1756  01A3  0025               	movlb	5	; select bank5
  1757  01A4  018C               	clrf	12	;volatile
  1758                           
  1759                           ;pin_manager.c: 86: APFCON = 0x00;
  1760  01A5  0022               	movlb	2	; select bank2
  1761  01A6  019D               	clrf	29	;volatile
  1762                           
  1763                           ;pin_manager.c: 92: IOCAFbits.IOCAF2 = 0;
  1764  01A7  0027               	movlb	7	; select bank7
  1765  01A8  1113               	bcf	19,2	;volatile
  1766                           
  1767                           ;pin_manager.c: 93: IOCAFbits.IOCAF3 = 0;
  1768  01A9  1193               	bcf	19,3	;volatile
  1769                           
  1770                           ;pin_manager.c: 95: IOCANbits.IOCAN2 = 1;
  1771  01AA  1512               	bsf	18,2	;volatile
  1772                           
  1773                           ;pin_manager.c: 96: IOCANbits.IOCAN3 = 1;
  1774  01AB  1592               	bsf	18,3	;volatile
  1775                           
  1776                           ;pin_manager.c: 98: IOCAPbits.IOCAP2 = 1;
  1777  01AC  1511               	bsf	17,2	;volatile
  1778                           
  1779                           ;pin_manager.c: 99: IOCAPbits.IOCAP3 = 1;
  1780  01AD  1591               	bsf	17,3	;volatile
  1781                           
  1782                           ;pin_manager.c: 102: IOCAF2_SetInterruptHandler(IOCAF2_DefaultInterruptHandler);
  1783  01AE  3089               	movlw	low _IOCAF2_DefaultInterruptHandler
  1784  01AF  00F4               	movwf	IOCAF2_SetInterruptHandler@InterruptHandler
  1785  01B0  3002               	movlw	high _IOCAF2_DefaultInterruptHandler
  1786  01B1  00F5               	movwf	IOCAF2_SetInterruptHandler@InterruptHandler+1
  1787  01B2  2265               	fcall	_IOCAF2_SetInterruptHandler
  1788                           
  1789                           ;pin_manager.c: 103: IOCAF3_SetInterruptHandler(IOCAF3_DefaultInterruptHandler);
  1790  01B3  3088               	movlw	low _IOCAF3_DefaultInterruptHandler
  1791  01B4  00F4               	movwf	IOCAF3_SetInterruptHandler@InterruptHandler
  1792  01B5  3002               	movlw	high _IOCAF3_DefaultInterruptHandler
  1793  01B6  00F5               	movwf	IOCAF3_SetInterruptHandler@InterruptHandler+1
  1794  01B7  225F               	fcall	_IOCAF3_SetInterruptHandler
  1795                           
  1796                           ;pin_manager.c: 106: INTCONbits.IOCIE = 1;
  1797  01B8  158B               	bsf	11,3	;volatile
  1798  01B9  0008               	return
  1799  01BA                     __end_of_PIN_MANAGER_Initialize:	
  1800                           
  1801                           	psect	text7
  1802  025F                     __ptext7:	
  1803 ;; *************** function _IOCAF3_SetInterruptHandler *****************
  1804 ;; Defined at:
  1805 ;;		line 175 in file "mcc_generated_files/pin_manager.c"
  1806 ;; Parameters:    Size  Location     Type
  1807 ;;  InterruptHan    2    4[COMMON] PTR FTN()void 
  1808 ;;		 -> IOCAF3_DefaultInterruptHandler(1), 
  1809 ;; Auto vars:     Size  Location     Type
  1810 ;;		None
  1811 ;; Return value:  Size  Location     Type
  1812 ;;                  1    wreg      void 
  1813 ;; Registers used:
  1814 ;;		wreg
  1815 ;; Tracked objects:
  1816 ;;		On entry : 0/0
  1817 ;;		On exit  : 0/0
  1818 ;;		Unchanged: 0/0
  1819 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1820 ;;      Params:         2       0       0       0
  1821 ;;      Locals:         0       0       0       0
  1822 ;;      Temps:          0       0       0       0
  1823 ;;      Totals:         2       0       0       0
  1824 ;;Total ram usage:        2 bytes
  1825 ;; Hardware stack levels used:    1
  1826 ;; Hardware stack levels required when called:    4
  1827 ;; This function calls:
  1828 ;;		Nothing
  1829 ;; This function is called by:
  1830 ;;		_PIN_MANAGER_Initialize
  1831 ;; This function uses a non-reentrant model
  1832 ;;
  1833                           
  1834                           
  1835                           ;psect for function _IOCAF3_SetInterruptHandler
  1836  025F                     _IOCAF3_SetInterruptHandler:	
  1837                           
  1838                           ;pin_manager.c: 176: IOCAF3_InterruptHandler = InterruptHandler;
  1839                           
  1840                           ;incstack = 0
  1841                           ; Regs used in _IOCAF3_SetInterruptHandler: [wreg]
  1842  025F  0875               	movf	IOCAF3_SetInterruptHandler@InterruptHandler+1,w
  1843  0260  0020               	movlb	0	; select bank0
  1844  0261  00D1               	movwf	_IOCAF3_InterruptHandler+1
  1845  0262  0874               	movf	IOCAF3_SetInterruptHandler@InterruptHandler,w
  1846  0263  00D0               	movwf	_IOCAF3_InterruptHandler
  1847  0264  0008               	return
  1848  0265                     __end_of_IOCAF3_SetInterruptHandler:	
  1849                           
  1850                           	psect	text8
  1851  0265                     __ptext8:	
  1852 ;; *************** function _IOCAF2_SetInterruptHandler *****************
  1853 ;; Defined at:
  1854 ;;		line 145 in file "mcc_generated_files/pin_manager.c"
  1855 ;; Parameters:    Size  Location     Type
  1856 ;;  InterruptHan    2    4[COMMON] PTR FTN()void 
  1857 ;;		 -> IOCAF2_DefaultInterruptHandler(1), 
  1858 ;; Auto vars:     Size  Location     Type
  1859 ;;		None
  1860 ;; Return value:  Size  Location     Type
  1861 ;;                  1    wreg      void 
  1862 ;; Registers used:
  1863 ;;		wreg
  1864 ;; Tracked objects:
  1865 ;;		On entry : 0/0
  1866 ;;		On exit  : 0/0
  1867 ;;		Unchanged: 0/0
  1868 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1869 ;;      Params:         2       0       0       0
  1870 ;;      Locals:         0       0       0       0
  1871 ;;      Temps:          0       0       0       0
  1872 ;;      Totals:         2       0       0       0
  1873 ;;Total ram usage:        2 bytes
  1874 ;; Hardware stack levels used:    1
  1875 ;; Hardware stack levels required when called:    4
  1876 ;; This function calls:
  1877 ;;		Nothing
  1878 ;; This function is called by:
  1879 ;;		_PIN_MANAGER_Initialize
  1880 ;; This function uses a non-reentrant model
  1881 ;;
  1882                           
  1883                           
  1884                           ;psect for function _IOCAF2_SetInterruptHandler
  1885  0265                     _IOCAF2_SetInterruptHandler:	
  1886                           
  1887                           ;pin_manager.c: 146: IOCAF2_InterruptHandler = InterruptHandler;
  1888                           
  1889                           ;incstack = 0
  1890                           ; Regs used in _IOCAF2_SetInterruptHandler: [wreg]
  1891  0265  0875               	movf	IOCAF2_SetInterruptHandler@InterruptHandler+1,w
  1892  0266  0020               	movlb	0	; select bank0
  1893  0267  00D3               	movwf	_IOCAF2_InterruptHandler+1
  1894  0268  0874               	movf	IOCAF2_SetInterruptHandler@InterruptHandler,w
  1895  0269  00D2               	movwf	_IOCAF2_InterruptHandler
  1896  026A  0008               	return
  1897  026B                     __end_of_IOCAF2_SetInterruptHandler:	
  1898                           
  1899                           	psect	text9
  1900  022A                     __ptext9:	
  1901 ;; *************** function _OSCILLATOR_Initialize *****************
  1902 ;; Defined at:
  1903 ;;		line 77 in file "mcc_generated_files/mcc.c"
  1904 ;; Parameters:    Size  Location     Type
  1905 ;;		None
  1906 ;; Auto vars:     Size  Location     Type
  1907 ;;		None
  1908 ;; Return value:  Size  Location     Type
  1909 ;;                  1    wreg      void 
  1910 ;; Registers used:
  1911 ;;		wreg, status,2
  1912 ;; Tracked objects:
  1913 ;;		On entry : 0/0
  1914 ;;		On exit  : 0/0
  1915 ;;		Unchanged: 0/0
  1916 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1917 ;;      Params:         0       0       0       0
  1918 ;;      Locals:         0       0       0       0
  1919 ;;      Temps:          0       0       0       0
  1920 ;;      Totals:         0       0       0       0
  1921 ;;Total ram usage:        0 bytes
  1922 ;; Hardware stack levels used:    1
  1923 ;; Hardware stack levels required when called:    4
  1924 ;; This function calls:
  1925 ;;		Nothing
  1926 ;; This function is called by:
  1927 ;;		_SYSTEM_Initialize
  1928 ;; This function uses a non-reentrant model
  1929 ;;
  1930                           
  1931                           
  1932                           ;psect for function _OSCILLATOR_Initialize
  1933  022A                     _OSCILLATOR_Initialize:	
  1934                           
  1935                           ;mcc.c: 80: OSCCON = 0x78;
  1936                           
  1937                           ;incstack = 0
  1938                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  1939  022A  3078               	movlw	120
  1940  022B  0021               	movlb	1	; select bank1
  1941  022C  0099               	movwf	25	;volatile
  1942                           
  1943                           ;mcc.c: 82: OSCTUNE = 0x00;
  1944  022D  0198               	clrf	24	;volatile
  1945                           
  1946                           ;mcc.c: 84: BORCON = 0x00;
  1947  022E  0022               	movlb	2	; select bank2
  1948  022F  0196               	clrf	22	;volatile
  1949  0230  0008               	return
  1950  0231                     __end_of_OSCILLATOR_Initialize:	
  1951                           
  1952                           	psect	text10
  1953  009A                     __ptext10:	
  1954 ;; *************** function _RunRightFlash *****************
  1955 ;; Defined at:
  1956 ;;		line 233 in file "main.c"
  1957 ;; Parameters:    Size  Location     Type
  1958 ;;		None
  1959 ;; Auto vars:     Size  Location     Type
  1960 ;;		None
  1961 ;; Return value:  Size  Location     Type
  1962 ;;                  1    wreg      void 
  1963 ;; Registers used:
  1964 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1965 ;; Tracked objects:
  1966 ;;		On entry : 0/0
  1967 ;;		On exit  : 0/0
  1968 ;;		Unchanged: 0/0
  1969 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1970 ;;      Params:         0       0       0       0
  1971 ;;      Locals:         0       0       0       0
  1972 ;;      Temps:          0       1       0       0
  1973 ;;      Totals:         0       1       0       0
  1974 ;;Total ram usage:        1 bytes
  1975 ;; Hardware stack levels used:    1
  1976 ;; Hardware stack levels required when called:    5
  1977 ;; This function calls:
  1978 ;;		_RightButtonPressed
  1979 ;;		_SetLEDOff
  1980 ;;		_SetLEDOn
  1981 ;; This function is called by:
  1982 ;;		_main
  1983 ;; This function uses a non-reentrant model
  1984 ;;
  1985                           
  1986                           
  1987                           ;psect for function _RunRightFlash
  1988  009A                     _RunRightFlash:	
  1989                           
  1990                           ;main.c: 235: if (PatternState[0])
  1991                           
  1992                           ;incstack = 0
  1993                           ; Regs used in _RunRightFlash: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1994  009A  0020               	movlb	0	; select bank0
  1995  009B  0830               	movf	_PatternState,w	;volatile
  1996  009C  1903               	btfsc	3,2
  1997  009D  0008               	return
  1998                           
  1999                           ;main.c: 236: {
  2000                           ;main.c: 237: if (PatternDelay[0] == 0)
  2001  009E  0820               	movf	_PatternDelay,w	;volatile
  2002  009F  0421               	iorwf	_PatternDelay+1,w	;volatile
  2003  00A0  1D03               	btfss	3,2
  2004  00A1  0008               	return
  2005  00A2  28D2               	goto	l1369
  2006  00A3                     l1353:	
  2007                           ;main.c: 245: case 1:
  2008                           
  2009                           ;main.c: 243: break;
  2010                           
  2011                           ;main.c: 240: {
  2012                           ;main.c: 241: case 0:
  2013                           
  2014                           ;main.c: 238: {
  2015                           ;main.c: 239: switch(PatternState[0])
  2016                           
  2017                           
  2018                           ;main.c: 246: SetLEDOn(0x01);
  2019  00A3  3001               	movlw	1
  2020  00A4  2231               	fcall	_SetLEDOn
  2021                           
  2022                           ;main.c: 247: SetLEDOff(0x02);
  2023  00A5  3002               	movlw	2
  2024  00A6  2238               	fcall	_SetLEDOff
  2025                           
  2026                           ;main.c: 248: SetLEDOff(0x04);
  2027  00A7  3004               	movlw	4
  2028  00A8  2238               	fcall	_SetLEDOff
  2029                           
  2030                           ;main.c: 249: SetLEDOff(0x08);
  2031  00A9  3008               	movlw	8
  2032  00AA  2238               	fcall	_SetLEDOff
  2033                           
  2034                           ;main.c: 250: break;
  2035  00AB  28DC               	goto	l1371
  2036  00AC                     l1355:	
  2037                           ;main.c: 252: case 2:
  2038                           
  2039                           
  2040                           ;main.c: 253: SetLEDOff(0x01);
  2041  00AC  3001               	movlw	1
  2042  00AD  2238               	fcall	_SetLEDOff
  2043                           
  2044                           ;main.c: 254: SetLEDOn(0x02);
  2045  00AE  3002               	movlw	2
  2046  00AF  2231               	fcall	_SetLEDOn
  2047                           
  2048                           ;main.c: 255: SetLEDOff(0x04);
  2049  00B0  3004               	movlw	4
  2050  00B1  2238               	fcall	_SetLEDOff
  2051                           
  2052                           ;main.c: 256: SetLEDOff(0x08);
  2053  00B2  3008               	movlw	8
  2054  00B3  2238               	fcall	_SetLEDOff
  2055                           
  2056                           ;main.c: 257: break;
  2057  00B4  28DC               	goto	l1371
  2058  00B5                     l1357:	
  2059                           ;main.c: 259: case 3:
  2060                           
  2061                           
  2062                           ;main.c: 260: SetLEDOff(0x01);
  2063  00B5  3001               	movlw	1
  2064  00B6  2238               	fcall	_SetLEDOff
  2065                           
  2066                           ;main.c: 261: SetLEDOff(0x02);
  2067  00B7  3002               	movlw	2
  2068  00B8  2238               	fcall	_SetLEDOff
  2069                           
  2070                           ;main.c: 262: SetLEDOn(0x04);
  2071  00B9  3004               	movlw	4
  2072  00BA  2231               	fcall	_SetLEDOn
  2073                           
  2074                           ;main.c: 263: SetLEDOff(0x08);
  2075  00BB  3008               	movlw	8
  2076  00BC  2238               	fcall	_SetLEDOff
  2077                           
  2078                           ;main.c: 264: break;
  2079  00BD  28DC               	goto	l1371
  2080  00BE                     l1359:	
  2081                           ;main.c: 266: case 4:
  2082                           
  2083                           
  2084                           ;main.c: 267: SetLEDOff(0x01);
  2085  00BE  3001               	movlw	1
  2086  00BF  2238               	fcall	_SetLEDOff
  2087                           
  2088                           ;main.c: 268: SetLEDOff(0x02);
  2089  00C0  3002               	movlw	2
  2090  00C1  2238               	fcall	_SetLEDOff
  2091                           
  2092                           ;main.c: 269: SetLEDOff(0x04);
  2093  00C2  3004               	movlw	4
  2094  00C3  2238               	fcall	_SetLEDOff
  2095                           
  2096                           ;main.c: 270: SetLEDOn(0x08);
  2097  00C4  3008               	movlw	8
  2098  00C5  2231               	fcall	_SetLEDOn
  2099                           
  2100                           ;main.c: 271: break;
  2101  00C6  28DC               	goto	l1371
  2102  00C7                     l1361:	
  2103                           ;main.c: 273: case 5:
  2104                           
  2105                           
  2106                           ;main.c: 274: SetLEDOff(0x01);
  2107  00C7  3001               	movlw	1
  2108  00C8  2238               	fcall	_SetLEDOff
  2109                           
  2110                           ;main.c: 275: SetLEDOff(0x02);
  2111  00C9  3002               	movlw	2
  2112  00CA  2238               	fcall	_SetLEDOff
  2113                           
  2114                           ;main.c: 276: SetLEDOff(0x04);
  2115  00CB  3004               	movlw	4
  2116  00CC  2238               	fcall	_SetLEDOff
  2117                           
  2118                           ;main.c: 277: SetLEDOff(0x08);
  2119  00CD  3008               	movlw	8
  2120  00CE  2238               	fcall	_SetLEDOff
  2121                           
  2122                           ;main.c: 278: PatternState[0] = 0;
  2123  00CF  0020               	movlb	0	; select bank0
  2124  00D0                     l1365:	
  2125                           ;main.c: 281: default:
  2126                           
  2127                           ;main.c: 279: break;
  2128                           
  2129                           
  2130                           ;main.c: 282: PatternState[0] = 0;
  2131  00D0  01B0               	clrf	_PatternState	;volatile
  2132                           
  2133                           ;main.c: 284: }
  2134                           
  2135                           ;main.c: 283: break;
  2136  00D1  28DC               	goto	l1371
  2137  00D2                     l1369:	
  2138  00D2  0830               	movf	_PatternState,w	;volatile
  2139                           
  2140                           ; Switch size 1, requested type "space"
  2141                           ; Number of cases is 6, Range of values is 0 to 5
  2142                           ; switch strategies available:
  2143                           ; Name         Instructions Cycles
  2144                           ; direct_byte           18     6 (fixed)
  2145                           ; simple_byte           19    10 (average)
  2146                           ; jumptable            260     6 (fixed)
  2147                           ;	Chosen strategy is direct_byte
  2148  00D3  0084               	movwf	4
  2149  00D4  3006               	movlw	6
  2150  00D5  0204               	subwf	4,w
  2151  00D6  1803               	skipnc
  2152  00D7  28D0               	goto	l1365
  2153  00D8  3182               	movlp	high S1529
  2154  00D9  306B               	movlw	low S1529
  2155  00DA  0704               	addwf	4,w
  2156  00DB  0082               	movwf	2
  2157  00DC                     l1371:	
  2158                           
  2159                           ;main.c: 287: if (PatternState[0] != 0)
  2160  00DC  0020               	movlb	0	; select bank0
  2161  00DD  0830               	movf	_PatternState,w	;volatile
  2162  00DE  1903               	btfsc	3,2
  2163  00DF  0008               	return
  2164                           
  2165                           ;main.c: 288: {
  2166                           ;main.c: 289: if ((PatternState[0] == 4) && RightButtonPressed())
  2167  00E0  3004               	movlw	4
  2168  00E1  0630               	xorwf	_PatternState,w	;volatile
  2169  00E2  1D03               	btfss	3,2
  2170  00E3  28EE               	goto	l1379
  2171  00E4  223F               	fcall	_RightButtonPressed
  2172  00E5  3A00               	xorlw	0
  2173  00E6  1903               	skipnz
  2174  00E7  28EE               	goto	l1379
  2175                           
  2176                           ;main.c: 290: {
  2177                           ;main.c: 291: PatternState[0] = 1;
  2178  00E8  3001               	movlw	1
  2179  00E9  0020               	movlb	0	; select bank0
  2180  00EA  00D5               	movwf	??_RunRightFlash
  2181  00EB  0855               	movf	??_RunRightFlash,w
  2182  00EC  00B0               	movwf	_PatternState	;volatile
  2183                           
  2184                           ;main.c: 292: }
  2185  00ED  28F3               	goto	l1381
  2186  00EE                     l1379:	
  2187                           
  2188                           ;main.c: 293: else
  2189                           ;main.c: 294: {
  2190                           ;main.c: 295: PatternState[0]++;
  2191  00EE  3001               	movlw	1
  2192  00EF  0020               	movlb	0	; select bank0
  2193  00F0  00D5               	movwf	??_RunRightFlash
  2194  00F1  0855               	movf	??_RunRightFlash,w
  2195  00F2  07B0               	addwf	_PatternState,f	;volatile
  2196  00F3                     l1381:	
  2197                           
  2198                           ;main.c: 296: }
  2199                           ;main.c: 297: PatternDelay[0] = 1000;
  2200  00F3  30E8               	movlw	232
  2201  00F4  00A0               	movwf	_PatternDelay	;volatile
  2202  00F5  3003               	movlw	3
  2203  00F6  00A1               	movwf	_PatternDelay+1	;volatile
  2204  00F7  0008               	return
  2205  00F8                     __end_of_RunRightFlash:	
  2206                           
  2207                           	psect	swtext1
  2208  026B                     __pswtext1:	
  2209  026B                     S1529:	
  2210  026B  28DC               	ljmp	l1371
  2211  026C  28A3               	ljmp	l1353
  2212  026D  28AC               	ljmp	l1355
  2213  026E  28B5               	ljmp	l1357
  2214  026F  28BE               	ljmp	l1359
  2215  0270  28C7               	ljmp	l1361
  2216                           
  2217                           	psect	text11
  2218  002F                     __ptext11:	
  2219 ;; *************** function _RunLeftFlash *****************
  2220 ;; Defined at:
  2221 ;;		line 303 in file "main.c"
  2222 ;; Parameters:    Size  Location     Type
  2223 ;;		None
  2224 ;; Auto vars:     Size  Location     Type
  2225 ;;		None
  2226 ;; Return value:  Size  Location     Type
  2227 ;;                  1    wreg      void 
  2228 ;; Registers used:
  2229 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2230 ;; Tracked objects:
  2231 ;;		On entry : 0/0
  2232 ;;		On exit  : 0/0
  2233 ;;		Unchanged: 0/0
  2234 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2235 ;;      Params:         0       0       0       0
  2236 ;;      Locals:         0       0       0       0
  2237 ;;      Temps:          0       1       0       0
  2238 ;;      Totals:         0       1       0       0
  2239 ;;Total ram usage:        1 bytes
  2240 ;; Hardware stack levels used:    1
  2241 ;; Hardware stack levels required when called:    5
  2242 ;; This function calls:
  2243 ;;		_LeftButtonPressed
  2244 ;;		_SetLEDOff
  2245 ;;		_SetLEDOn
  2246 ;; This function is called by:
  2247 ;;		_main
  2248 ;; This function uses a non-reentrant model
  2249 ;;
  2250                           
  2251                           
  2252                           ;psect for function _RunLeftFlash
  2253  002F                     _RunLeftFlash:	
  2254                           
  2255                           ;main.c: 305: static uint16_t delay = 1000;
  2256                           ;main.c: 307: if (PatternDelay[1] == 0)
  2257                           
  2258                           ;incstack = 0
  2259                           ; Regs used in _RunLeftFlash: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2260  002F  0020               	movlb	0	; select bank0
  2261  0030  0822               	movf	_PatternDelay+2,w	;volatile
  2262  0031  0423               	iorwf	_PatternDelay+3,w	;volatile
  2263  0032  1D03               	btfss	3,2
  2264  0033  0008               	return
  2265  0034  2869               	goto	l1409
  2266  0035                     l1391:	
  2267                           ;main.c: 310: {
  2268                           ;main.c: 311: case 0:
  2269                           
  2270                           ;main.c: 308: {
  2271                           ;main.c: 309: switch(PatternState[1])
  2272                           
  2273                           
  2274                           ;main.c: 313: delay = 1000;
  2275  0035  30E8               	movlw	232
  2276  0036  00CC               	movwf	RunLeftFlash@delay
  2277  0037  3003               	movlw	3
  2278  0038  00CD               	movwf	RunLeftFlash@delay+1
  2279                           
  2280                           ;main.c: 314: break;
  2281  0039  2873               	goto	l1411
  2282  003A                     l1393:	
  2283                           ;main.c: 316: case 1:
  2284                           
  2285                           
  2286                           ;main.c: 317: SetLEDOn(0x80);
  2287  003A  3080               	movlw	128
  2288  003B  2231               	fcall	_SetLEDOn
  2289                           
  2290                           ;main.c: 318: SetLEDOff(0x40);
  2291  003C  3040               	movlw	64
  2292  003D  2238               	fcall	_SetLEDOff
  2293                           
  2294                           ;main.c: 319: SetLEDOff(0x20);
  2295  003E  3020               	movlw	32
  2296  003F  2238               	fcall	_SetLEDOff
  2297                           
  2298                           ;main.c: 320: SetLEDOff(0x10);
  2299  0040  3010               	movlw	16
  2300  0041  2238               	fcall	_SetLEDOff
  2301                           
  2302                           ;main.c: 321: break;
  2303  0042  2873               	goto	l1411
  2304  0043                     l1395:	
  2305                           ;main.c: 323: case 2:
  2306                           
  2307                           
  2308                           ;main.c: 324: SetLEDOff(0x80);
  2309  0043  3080               	movlw	128
  2310  0044  2238               	fcall	_SetLEDOff
  2311                           
  2312                           ;main.c: 325: SetLEDOn(0x40);
  2313  0045  3040               	movlw	64
  2314  0046  2231               	fcall	_SetLEDOn
  2315                           
  2316                           ;main.c: 326: SetLEDOff(0x20);
  2317  0047  3020               	movlw	32
  2318  0048  2238               	fcall	_SetLEDOff
  2319                           
  2320                           ;main.c: 327: SetLEDOff(0x10);
  2321  0049  3010               	movlw	16
  2322  004A  2238               	fcall	_SetLEDOff
  2323                           
  2324                           ;main.c: 328: break;
  2325  004B  2873               	goto	l1411
  2326  004C                     l1397:	
  2327                           ;main.c: 330: case 3:
  2328                           
  2329                           
  2330                           ;main.c: 331: SetLEDOff(0x80);
  2331  004C  3080               	movlw	128
  2332  004D  2238               	fcall	_SetLEDOff
  2333                           
  2334                           ;main.c: 332: SetLEDOff(0x40);
  2335  004E  3040               	movlw	64
  2336  004F  2238               	fcall	_SetLEDOff
  2337                           
  2338                           ;main.c: 333: SetLEDOn(0x20);
  2339  0050  3020               	movlw	32
  2340  0051  2231               	fcall	_SetLEDOn
  2341                           
  2342                           ;main.c: 334: SetLEDOff(0x10);
  2343  0052  3010               	movlw	16
  2344  0053  2238               	fcall	_SetLEDOff
  2345                           
  2346                           ;main.c: 335: break;
  2347  0054  2873               	goto	l1411
  2348  0055                     l1399:	
  2349                           ;main.c: 337: case 4:
  2350                           
  2351                           
  2352                           ;main.c: 338: SetLEDOff(0x80);
  2353  0055  3080               	movlw	128
  2354  0056  2238               	fcall	_SetLEDOff
  2355                           
  2356                           ;main.c: 339: SetLEDOff(0x40);
  2357  0057  3040               	movlw	64
  2358  0058  2238               	fcall	_SetLEDOff
  2359                           
  2360                           ;main.c: 340: SetLEDOff(0x20);
  2361  0059  3020               	movlw	32
  2362  005A  2238               	fcall	_SetLEDOff
  2363                           
  2364                           ;main.c: 341: SetLEDOn(0x10);
  2365  005B  3010               	movlw	16
  2366  005C  2231               	fcall	_SetLEDOn
  2367                           
  2368                           ;main.c: 342: break;
  2369  005D  2873               	goto	l1411
  2370  005E                     l1401:	
  2371                           ;main.c: 344: case 5:
  2372                           
  2373                           
  2374                           ;main.c: 345: SetLEDOff(0x80);
  2375  005E  3080               	movlw	128
  2376  005F  2238               	fcall	_SetLEDOff
  2377                           
  2378                           ;main.c: 346: SetLEDOff(0x40);
  2379  0060  3040               	movlw	64
  2380  0061  2238               	fcall	_SetLEDOff
  2381                           
  2382                           ;main.c: 347: SetLEDOff(0x20);
  2383  0062  3020               	movlw	32
  2384  0063  2238               	fcall	_SetLEDOff
  2385                           
  2386                           ;main.c: 348: SetLEDOff(0x10);
  2387  0064  3010               	movlw	16
  2388  0065  2238               	fcall	_SetLEDOff
  2389                           
  2390                           ;main.c: 349: PatternState[1] = 0;
  2391  0066  0020               	movlb	0	; select bank0
  2392  0067                     l1405:	
  2393                           ;main.c: 352: default:
  2394                           
  2395                           ;main.c: 350: break;
  2396                           
  2397                           
  2398                           ;main.c: 353: PatternState[1] = 0;
  2399  0067  01B1               	clrf	_PatternState+1	;volatile
  2400                           
  2401                           ;main.c: 355: }
  2402                           
  2403                           ;main.c: 354: break;
  2404  0068  2873               	goto	l1411
  2405  0069                     l1409:	
  2406  0069  0831               	movf	_PatternState+1,w	;volatile
  2407                           
  2408                           ; Switch size 1, requested type "space"
  2409                           ; Number of cases is 6, Range of values is 0 to 5
  2410                           ; switch strategies available:
  2411                           ; Name         Instructions Cycles
  2412                           ; direct_byte           18     6 (fixed)
  2413                           ; simple_byte           19    10 (average)
  2414                           ; jumptable            260     6 (fixed)
  2415                           ;	Chosen strategy is direct_byte
  2416  006A  0084               	movwf	4
  2417  006B  3006               	movlw	6
  2418  006C  0204               	subwf	4,w
  2419  006D  1803               	skipnc
  2420  006E  2867               	goto	l1405
  2421  006F  3182               	movlp	high S1531
  2422  0070  3071               	movlw	low S1531
  2423  0071  0704               	addwf	4,w
  2424  0072  0082               	movwf	2
  2425  0073                     l1411:	
  2426                           
  2427                           ;main.c: 358: if (PatternState[1] != 0)
  2428  0073  0020               	movlb	0	; select bank0
  2429  0074  0831               	movf	_PatternState+1,w	;volatile
  2430  0075  1903               	btfsc	3,2
  2431  0076  0008               	return
  2432                           
  2433                           ;main.c: 359: {
  2434                           ;main.c: 360: if ((PatternState[1] == 4) && LeftButtonPressed())
  2435  0077  3004               	movlw	4
  2436  0078  0631               	xorwf	_PatternState+1,w	;volatile
  2437  0079  1D03               	btfss	3,2
  2438  007A  2890               	goto	l1421
  2439  007B  2246               	fcall	_LeftButtonPressed
  2440  007C  3A00               	xorlw	0
  2441  007D  1903               	skipnz
  2442  007E  2890               	goto	l1421
  2443                           
  2444                           ;main.c: 361: {
  2445                           ;main.c: 362: PatternState[1] = 1;
  2446  007F  3001               	movlw	1
  2447  0080  0020               	movlb	0	; select bank0
  2448  0081  00D5               	movwf	??_RunLeftFlash
  2449  0082  0855               	movf	??_RunLeftFlash,w
  2450  0083  00B1               	movwf	_PatternState+1	;volatile
  2451                           
  2452                           ;main.c: 363: if (delay > 50)
  2453  0084  3000               	movlw	0
  2454  0085  024D               	subwf	RunLeftFlash@delay+1,w
  2455  0086  3033               	movlw	51
  2456  0087  1903               	skipnz
  2457  0088  024C               	subwf	RunLeftFlash@delay,w
  2458  0089  1C03               	skipc
  2459  008A  2895               	goto	l1423
  2460                           
  2461                           ;main.c: 364: {
  2462                           ;main.c: 365: delay -= 15;
  2463  008B  300F               	movlw	15
  2464  008C  02CC               	subwf	RunLeftFlash@delay,f
  2465  008D  3000               	movlw	0
  2466  008E  3BCD               	subwfb	RunLeftFlash@delay+1,f
  2467                           
  2468                           ;main.c: 366: }
  2469                           ;main.c: 367: }
  2470  008F  2895               	goto	l1423
  2471  0090                     l1421:	
  2472                           
  2473                           ;main.c: 368: else
  2474                           ;main.c: 369: {
  2475                           ;main.c: 370: PatternState[1]++;
  2476  0090  3001               	movlw	1
  2477  0091  0020               	movlb	0	; select bank0
  2478  0092  00D5               	movwf	??_RunLeftFlash
  2479  0093  0855               	movf	??_RunLeftFlash,w
  2480  0094  07B1               	addwf	_PatternState+1,f	;volatile
  2481  0095                     l1423:	
  2482                           
  2483                           ;main.c: 371: }
  2484                           ;main.c: 372: PatternDelay[1] = delay;
  2485  0095  084D               	movf	RunLeftFlash@delay+1,w
  2486  0096  00A3               	movwf	_PatternDelay+3	;volatile
  2487  0097  084C               	movf	RunLeftFlash@delay,w
  2488  0098  00A2               	movwf	_PatternDelay+2	;volatile
  2489  0099  0008               	return
  2490  009A                     __end_of_RunLeftFlash:	
  2491                           
  2492                           	psect	swtext2
  2493  0271                     __pswtext2:	
  2494  0271                     S1531:	
  2495  0271  2835               	ljmp	l1391
  2496  0272  283A               	ljmp	l1393
  2497  0273  2843               	ljmp	l1395
  2498  0274  284C               	ljmp	l1397
  2499  0275  2855               	ljmp	l1399
  2500  0276  285E               	ljmp	l1401
  2501                           
  2502                           	psect	text12
  2503  0231                     __ptext12:	
  2504 ;; *************** function _SetLEDOn *****************
  2505 ;; Defined at:
  2506 ;;		line 165 in file "main.c"
  2507 ;; Parameters:    Size  Location     Type
  2508 ;;  LED             1    wreg     unsigned char 
  2509 ;; Auto vars:     Size  Location     Type
  2510 ;;  LED             1    5[COMMON] unsigned char 
  2511 ;; Return value:  Size  Location     Type
  2512 ;;                  1    wreg      void 
  2513 ;; Registers used:
  2514 ;;		wreg, status,2, status,0
  2515 ;; Tracked objects:
  2516 ;;		On entry : 0/0
  2517 ;;		On exit  : 0/0
  2518 ;;		Unchanged: 0/0
  2519 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2520 ;;      Params:         0       0       0       0
  2521 ;;      Locals:         1       0       0       0
  2522 ;;      Temps:          1       0       0       0
  2523 ;;      Totals:         2       0       0       0
  2524 ;;Total ram usage:        2 bytes
  2525 ;; Hardware stack levels used:    1
  2526 ;; Hardware stack levels required when called:    4
  2527 ;; This function calls:
  2528 ;;		Nothing
  2529 ;; This function is called by:
  2530 ;;		_RunRightFlash
  2531 ;;		_RunLeftFlash
  2532 ;; This function uses a non-reentrant model
  2533 ;;
  2534                           
  2535                           
  2536                           ;psect for function _SetLEDOn
  2537  0231                     _SetLEDOn:	
  2538                           
  2539                           ;incstack = 0
  2540                           ; Regs used in _SetLEDOn: [wreg+status,2+status,0]
  2541                           ;SetLEDOn@LED stored from wreg
  2542  0231  00F5               	movwf	SetLEDOn@LED
  2543                           
  2544                           ;main.c: 167: LEDOns = (uint8_t)(LEDOns | LED);
  2545  0232  0878               	movf	_LEDOns,w	;volatile
  2546  0233  0475               	iorwf	SetLEDOn@LED,w
  2547  0234  00F4               	movwf	??_SetLEDOn
  2548  0235  0874               	movf	??_SetLEDOn,w
  2549  0236  00F8               	movwf	_LEDOns	;volatile
  2550  0237  0008               	return
  2551  0238                     __end_of_SetLEDOn:	
  2552                           
  2553                           	psect	text13
  2554  0238                     __ptext13:	
  2555 ;; *************** function _SetLEDOff *****************
  2556 ;; Defined at:
  2557 ;;		line 170 in file "main.c"
  2558 ;; Parameters:    Size  Location     Type
  2559 ;;  LED             1    wreg     unsigned char 
  2560 ;; Auto vars:     Size  Location     Type
  2561 ;;  LED             1    5[COMMON] unsigned char 
  2562 ;; Return value:  Size  Location     Type
  2563 ;;                  1    wreg      void 
  2564 ;; Registers used:
  2565 ;;		wreg, status,2, status,0
  2566 ;; Tracked objects:
  2567 ;;		On entry : 0/0
  2568 ;;		On exit  : 0/0
  2569 ;;		Unchanged: 0/0
  2570 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2571 ;;      Params:         0       0       0       0
  2572 ;;      Locals:         1       0       0       0
  2573 ;;      Temps:          1       0       0       0
  2574 ;;      Totals:         2       0       0       0
  2575 ;;Total ram usage:        2 bytes
  2576 ;; Hardware stack levels used:    1
  2577 ;; Hardware stack levels required when called:    4
  2578 ;; This function calls:
  2579 ;;		Nothing
  2580 ;; This function is called by:
  2581 ;;		_RunRightFlash
  2582 ;;		_RunLeftFlash
  2583 ;; This function uses a non-reentrant model
  2584 ;;
  2585                           
  2586                           
  2587                           ;psect for function _SetLEDOff
  2588  0238                     _SetLEDOff:	
  2589                           
  2590                           ;incstack = 0
  2591                           ; Regs used in _SetLEDOff: [wreg+status,2+status,0]
  2592                           ;SetLEDOff@LED stored from wreg
  2593  0238  00F5               	movwf	SetLEDOff@LED
  2594                           
  2595                           ;main.c: 172: LEDOns = (uint8_t)(LEDOns & ~LED);
  2596  0239  0975               	comf	SetLEDOff@LED,w
  2597  023A  0578               	andwf	_LEDOns,w	;volatile
  2598  023B  00F4               	movwf	??_SetLEDOff
  2599  023C  0874               	movf	??_SetLEDOff,w
  2600  023D  00F8               	movwf	_LEDOns	;volatile
  2601  023E  0008               	return
  2602  023F                     __end_of_SetLEDOff:	
  2603                           
  2604                           	psect	text14
  2605  01BA                     __ptext14:	
  2606 ;; *************** function _CheckForButtonPushes *****************
  2607 ;; Defined at:
  2608 ;;		line 377 in file "main.c"
  2609 ;; Parameters:    Size  Location     Type
  2610 ;;		None
  2611 ;; Auto vars:     Size  Location     Type
  2612 ;;		None
  2613 ;; Return value:  Size  Location     Type
  2614 ;;                  1    wreg      void 
  2615 ;; Registers used:
  2616 ;;		wreg, status,2, status,0, pclath, cstack
  2617 ;; Tracked objects:
  2618 ;;		On entry : 0/0
  2619 ;;		On exit  : 0/0
  2620 ;;		Unchanged: 0/0
  2621 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2622 ;;      Params:         0       0       0       0
  2623 ;;      Locals:         0       0       0       0
  2624 ;;      Temps:          1       0       0       0
  2625 ;;      Totals:         1       0       0       0
  2626 ;;Total ram usage:        1 bytes
  2627 ;; Hardware stack levels used:    1
  2628 ;; Hardware stack levels required when called:    5
  2629 ;; This function calls:
  2630 ;;		_LeftButtonPressed
  2631 ;;		_RightButtonPressed
  2632 ;; This function is called by:
  2633 ;;		_main
  2634 ;; This function uses a non-reentrant model
  2635 ;;
  2636                           
  2637                           
  2638                           ;psect for function _CheckForButtonPushes
  2639  01BA                     _CheckForButtonPushes:	
  2640                           
  2641                           ;main.c: 379: static bool LastLeftButtonState = 0;
  2642                           ;main.c: 380: static bool LastRightButtonState = 0;
  2643                           ;main.c: 383: if (LeftButtonPressed())
  2644                           
  2645                           ;incstack = 0
  2646                           ; Regs used in _CheckForButtonPushes: [wreg+status,2+status,0+pclath+cstack]
  2647  01BA  2246               	fcall	_LeftButtonPressed
  2648  01BB  3A00               	xorlw	0
  2649  01BC  1903               	skipnz
  2650  01BD  29C9               	goto	l1437
  2651                           
  2652                           ;main.c: 384: {
  2653                           ;main.c: 385: if (LastLeftButtonState == 0)
  2654  01BE  0877               	movf	CheckForButtonPushes@LastLeftButtonState,w
  2655  01BF  1D03               	btfss	3,2
  2656  01C0  29C6               	goto	l1435
  2657                           
  2658                           ;main.c: 386: {
  2659                           ;main.c: 387: PatternState[1] = 1;
  2660  01C1  3001               	movlw	1
  2661  01C2  00F4               	movwf	??_CheckForButtonPushes
  2662  01C3  0874               	movf	??_CheckForButtonPushes,w
  2663  01C4  0020               	movlb	0	; select bank0
  2664  01C5  00B1               	movwf	_PatternState+1	;volatile
  2665  01C6                     l1435:	
  2666                           
  2667                           ;main.c: 388: }
  2668                           ;main.c: 389: LastLeftButtonState = 1;
  2669  01C6  01F7               	clrf	CheckForButtonPushes@LastLeftButtonState
  2670  01C7  0AF7               	incf	CheckForButtonPushes@LastLeftButtonState,f
  2671                           
  2672                           ;main.c: 390: }
  2673  01C8  29CA               	goto	l1439
  2674  01C9                     l1437:	
  2675                           
  2676                           ;main.c: 391: else
  2677                           ;main.c: 392: {
  2678                           ;main.c: 393: LastLeftButtonState = 0;
  2679  01C9  01F7               	clrf	CheckForButtonPushes@LastLeftButtonState
  2680  01CA                     l1439:	
  2681                           
  2682                           ;main.c: 394: }
  2683                           ;main.c: 397: if (RightButtonPressed())
  2684  01CA  223F               	fcall	_RightButtonPressed
  2685  01CB  3A00               	xorlw	0
  2686  01CC  1903               	skipnz
  2687  01CD  29D9               	goto	l1447
  2688                           
  2689                           ;main.c: 398: {
  2690                           ;main.c: 399: if (LastRightButtonState == 0)
  2691  01CE  0876               	movf	CheckForButtonPushes@LastRightButtonState,w
  2692  01CF  1D03               	btfss	3,2
  2693  01D0  29D6               	goto	l1445
  2694                           
  2695                           ;main.c: 400: {
  2696                           ;main.c: 401: PatternState[0] = 1;
  2697  01D1  3001               	movlw	1
  2698  01D2  00F4               	movwf	??_CheckForButtonPushes
  2699  01D3  0874               	movf	??_CheckForButtonPushes,w
  2700  01D4  0020               	movlb	0	; select bank0
  2701  01D5  00B0               	movwf	_PatternState	;volatile
  2702  01D6                     l1445:	
  2703                           
  2704                           ;main.c: 402: }
  2705                           ;main.c: 403: LastRightButtonState = 1;
  2706  01D6  01F6               	clrf	CheckForButtonPushes@LastRightButtonState
  2707  01D7  0AF6               	incf	CheckForButtonPushes@LastRightButtonState,f
  2708                           
  2709                           ;main.c: 404: }
  2710  01D8  0008               	return
  2711  01D9                     l1447:	
  2712                           
  2713                           ;main.c: 405: else
  2714                           ;main.c: 406: {
  2715                           ;main.c: 407: LastRightButtonState = 0;
  2716  01D9  01F6               	clrf	CheckForButtonPushes@LastRightButtonState
  2717  01DA  0008               	return
  2718  01DB                     __end_of_CheckForButtonPushes:	
  2719                           
  2720                           	psect	text15
  2721  023F                     __ptext15:	
  2722 ;; *************** function _RightButtonPressed *****************
  2723 ;; Defined at:
  2724 ;;		line 223 in file "main.c"
  2725 ;; Parameters:    Size  Location     Type
  2726 ;;		None
  2727 ;; Auto vars:     Size  Location     Type
  2728 ;;		None
  2729 ;; Return value:  Size  Location     Type
  2730 ;;                  1    wreg      unsigned char 
  2731 ;; Registers used:
  2732 ;;		wreg, status,0
  2733 ;; Tracked objects:
  2734 ;;		On entry : 0/0
  2735 ;;		On exit  : 0/0
  2736 ;;		Unchanged: 0/0
  2737 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2738 ;;      Params:         0       0       0       0
  2739 ;;      Locals:         0       0       0       0
  2740 ;;      Temps:          0       0       0       0
  2741 ;;      Totals:         0       0       0       0
  2742 ;;Total ram usage:        0 bytes
  2743 ;; Hardware stack levels used:    1
  2744 ;; Hardware stack levels required when called:    4
  2745 ;; This function calls:
  2746 ;;		Nothing
  2747 ;; This function is called by:
  2748 ;;		_RunRightFlash
  2749 ;;		_CheckForButtonPushes
  2750 ;; This function uses a non-reentrant model
  2751 ;;
  2752                           
  2753                           
  2754                           ;psect for function _RightButtonPressed
  2755  023F                     _RightButtonPressed:	
  2756                           
  2757                           ;main.c: 225: return (PORTAbits.RA3 == 0);
  2758                           
  2759                           ;incstack = 0
  2760                           ; Regs used in _RightButtonPressed: [wreg+status,0]
  2761  023F  1003               	clrc
  2762  0240  0020               	movlb	0	; select bank0
  2763  0241  1D8C               	btfss	12,3	;volatile
  2764  0242  1403               	setc
  2765  0243  3000               	movlw	0
  2766  0244  3D09               	addwfc	9,w
  2767  0245  0008               	return
  2768  0246                     __end_of_RightButtonPressed:	
  2769                           
  2770                           	psect	text16
  2771  0246                     __ptext16:	
  2772 ;; *************** function _LeftButtonPressed *****************
  2773 ;; Defined at:
  2774 ;;		line 228 in file "main.c"
  2775 ;; Parameters:    Size  Location     Type
  2776 ;;		None
  2777 ;; Auto vars:     Size  Location     Type
  2778 ;;		None
  2779 ;; Return value:  Size  Location     Type
  2780 ;;                  1    wreg      unsigned char 
  2781 ;; Registers used:
  2782 ;;		wreg, status,0
  2783 ;; Tracked objects:
  2784 ;;		On entry : 0/0
  2785 ;;		On exit  : 0/0
  2786 ;;		Unchanged: 0/0
  2787 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2788 ;;      Params:         0       0       0       0
  2789 ;;      Locals:         0       0       0       0
  2790 ;;      Temps:          0       0       0       0
  2791 ;;      Totals:         0       0       0       0
  2792 ;;Total ram usage:        0 bytes
  2793 ;; Hardware stack levels used:    1
  2794 ;; Hardware stack levels required when called:    4
  2795 ;; This function calls:
  2796 ;;		Nothing
  2797 ;; This function is called by:
  2798 ;;		_RunLeftFlash
  2799 ;;		_CheckForButtonPushes
  2800 ;; This function uses a non-reentrant model
  2801 ;;
  2802                           
  2803                           
  2804                           ;psect for function _LeftButtonPressed
  2805  0246                     _LeftButtonPressed:	
  2806                           
  2807                           ;main.c: 230: return (PORTAbits.RA2 == 0);
  2808                           
  2809                           ;incstack = 0
  2810                           ; Regs used in _LeftButtonPressed: [wreg+status,0]
  2811  0246  1003               	clrc
  2812  0247  0020               	movlb	0	; select bank0
  2813  0248  1D0C               	btfss	12,2	;volatile
  2814  0249  1403               	setc
  2815  024A  3000               	movlw	0
  2816  024B  3D09               	addwfc	9,w
  2817  024C  0008               	return
  2818  024D                     __end_of_LeftButtonPressed:	
  2819                           
  2820                           	psect	intentry
  2821  0004                     __pintentry:	
  2822 ;; *************** function _INTERRUPT_InterruptManager *****************
  2823 ;; Defined at:
  2824 ;;		line 51 in file "mcc_generated_files/interrupt_manager.c"
  2825 ;; Parameters:    Size  Location     Type
  2826 ;;		None
  2827 ;; Auto vars:     Size  Location     Type
  2828 ;;		None
  2829 ;; Return value:  Size  Location     Type
  2830 ;;                  1    wreg      void 
  2831 ;; Registers used:
  2832 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2833 ;; Tracked objects:
  2834 ;;		On entry : 0/0
  2835 ;;		On exit  : 0/0
  2836 ;;		Unchanged: 0/0
  2837 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2838 ;;      Params:         0       0       0       0
  2839 ;;      Locals:         0       0       0       0
  2840 ;;      Temps:          1       0       0       0
  2841 ;;      Totals:         1       0       0       0
  2842 ;;Total ram usage:        1 bytes
  2843 ;; Hardware stack levels used:    1
  2844 ;; Hardware stack levels required when called:    3
  2845 ;; This function calls:
  2846 ;;		_PIN_MANAGER_IOC
  2847 ;;		_TMR0_ISR
  2848 ;; This function is called by:
  2849 ;;		Interrupt level 1
  2850 ;; This function uses a non-reentrant model
  2851 ;;
  2852                           
  2853  0004                     _INTERRUPT_InterruptManager:	
  2854                           
  2855                           ;incstack = 0
  2856  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  2857                           
  2858                           ; Regs used in _INTERRUPT_InterruptManager: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  2859  0005  3180               	pagesel	$
  2860  0006  0020               	movlb	0	; select bank0
  2861  0007  087F               	movf	127,w
  2862  0008  00F3               	movwf	??_INTERRUPT_InterruptManager
  2863                           
  2864                           ;interrupt_manager.c: 54: if(INTCONbits.TMR0IE == 1 && INTCONbits.TMR0IF == 1)
  2865  0009  1A8B               	btfsc	11,5	;volatile
  2866  000A  1D0B               	btfss	11,2	;volatile
  2867  000B  280E               	goto	i1l100
  2868                           
  2869                           ;interrupt_manager.c: 55: {
  2870                           ;interrupt_manager.c: 56: TMR0_ISR();
  2871  000C  2277               	fcall	_TMR0_ISR
  2872                           
  2873                           ;interrupt_manager.c: 57: }
  2874  000D  2812               	goto	i1l104
  2875  000E                     i1l100:	
  2876                           
  2877                           ;interrupt_manager.c: 58: else if(INTCONbits.IOCIE == 1 && INTCONbits.IOCIF == 1)
  2878  000E  198B               	btfsc	11,3	;volatile
  2879  000F  1C0B               	btfss	11,0	;volatile
  2880  0010  2812               	goto	i1l104
  2881                           
  2882                           ;interrupt_manager.c: 59: {
  2883                           ;interrupt_manager.c: 60: PIN_MANAGER_IOC();
  2884  0011  2221               	fcall	_PIN_MANAGER_IOC
  2885  0012                     i1l104:	
  2886                           ;interrupt_manager.c: 62: else
  2887                           ;interrupt_manager.c: 63: {
  2888                           
  2889                           ;interrupt_manager.c: 61: }
  2890                           
  2891  0012  0873               	movf	??_INTERRUPT_InterruptManager,w
  2892  0013  0020               	movlb	0	; select bank0
  2893  0014  00FF               	movwf	127
  2894  0015  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  2895  0016  0009               	retfie
  2896  0017                     __end_of_INTERRUPT_InterruptManager:	
  2897                           
  2898                           	psect	text18
  2899  0277                     __ptext18:	
  2900 ;; *************** function _TMR0_ISR *****************
  2901 ;; Defined at:
  2902 ;;		line 109 in file "mcc_generated_files/tmr0.c"
  2903 ;; Parameters:    Size  Location     Type
  2904 ;;		None
  2905 ;; Auto vars:     Size  Location     Type
  2906 ;;		None
  2907 ;; Return value:  Size  Location     Type
  2908 ;;                  1    wreg      void 
  2909 ;; Registers used:
  2910 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2911 ;; Tracked objects:
  2912 ;;		On entry : 0/0
  2913 ;;		On exit  : 0/0
  2914 ;;		Unchanged: 0/0
  2915 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2916 ;;      Params:         0       0       0       0
  2917 ;;      Locals:         0       0       0       0
  2918 ;;      Temps:          0       0       0       0
  2919 ;;      Totals:         0       0       0       0
  2920 ;;Total ram usage:        0 bytes
  2921 ;; Hardware stack levels used:    1
  2922 ;; Hardware stack levels required when called:    2
  2923 ;; This function calls:
  2924 ;;		_TMR0_CallBack
  2925 ;; This function is called by:
  2926 ;;		_INTERRUPT_InterruptManager
  2927 ;; This function uses a non-reentrant model
  2928 ;;
  2929                           
  2930                           
  2931                           ;psect for function _TMR0_ISR
  2932  0277                     _TMR0_ISR:	
  2933                           
  2934                           ;tmr0.c: 113: INTCONbits.TMR0IF = 0;
  2935                           
  2936                           ;incstack = 0
  2937                           ; Regs used in _TMR0_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2938  0277  110B               	bcf	11,2	;volatile
  2939                           
  2940                           ;tmr0.c: 115: TMR0 = timer0ReloadVal;
  2941  0278  0020               	movlb	0	; select bank0
  2942  0279  0854               	movf	_timer0ReloadVal,w	;volatile
  2943  027A  0095               	movwf	21	;volatile
  2944                           
  2945                           ;tmr0.c: 119: TMR0_CallBack();
  2946  027B  2216               	fcall	_TMR0_CallBack
  2947  027C  0008               	return
  2948  027D                     __end_of_TMR0_ISR:	
  2949                           
  2950                           	psect	text19
  2951  0216                     __ptext19:	
  2952 ;; *************** function _TMR0_CallBack *****************
  2953 ;; Defined at:
  2954 ;;		line 124 in file "mcc_generated_files/tmr0.c"
  2955 ;; Parameters:    Size  Location     Type
  2956 ;;		None
  2957 ;; Auto vars:     Size  Location     Type
  2958 ;;		None
  2959 ;; Return value:  Size  Location     Type
  2960 ;;                  1    wreg      void 
  2961 ;; Registers used:
  2962 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2963 ;; Tracked objects:
  2964 ;;		On entry : 0/0
  2965 ;;		On exit  : 0/0
  2966 ;;		Unchanged: 0/0
  2967 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2968 ;;      Params:         0       0       0       0
  2969 ;;      Locals:         0       0       0       0
  2970 ;;      Temps:          0       0       0       0
  2971 ;;      Totals:         0       0       0       0
  2972 ;;Total ram usage:        0 bytes
  2973 ;; Hardware stack levels used:    1
  2974 ;; Hardware stack levels required when called:    1
  2975 ;; This function calls:
  2976 ;;		Absolute function
  2977 ;;		_CharlieplexLEDs
  2978 ;; This function is called by:
  2979 ;;		_TMR0_ISR
  2980 ;; This function uses a non-reentrant model
  2981 ;;
  2982                           
  2983                           
  2984                           ;psect for function _TMR0_CallBack
  2985  0216                     _TMR0_CallBack:	
  2986                           
  2987                           ;tmr0.c: 128: if(TMR0_InterruptHandler)
  2988                           
  2989                           ;incstack = 0
  2990                           ; Regs used in _TMR0_CallBack: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2991  0216  0020               	movlb	0	; select bank0
  2992  0217  084E               	movf	_TMR0_InterruptHandler,w
  2993  0218  044F               	iorwf	_TMR0_InterruptHandler+1,w
  2994  0219  1903               	btfsc	3,2
  2995  021A  0008               	return
  2996                           
  2997                           ;tmr0.c: 129: {
  2998                           ;tmr0.c: 130: TMR0_InterruptHandler();
  2999  021B  084F               	movf	_TMR0_InterruptHandler+1,w
  3000  021C  008A               	movwf	10
  3001  021D  084E               	movf	_TMR0_InterruptHandler,w
  3002  021E  000A               	callw
  3003  021F  3182               	pagesel	$
  3004  0220  0008               	return
  3005  0221                     __end_of_TMR0_CallBack:	
  3006                           
  3007                           	psect	text20
  3008  00F8                     __ptext20:	
  3009 ;; *************** function _CharlieplexLEDs *****************
  3010 ;; Defined at:
  3011 ;;		line 181 in file "main.c"
  3012 ;; Parameters:    Size  Location     Type
  3013 ;;		None
  3014 ;; Auto vars:     Size  Location     Type
  3015 ;;  i               1    2[COMMON] unsigned char 
  3016 ;; Return value:  Size  Location     Type
  3017 ;;                  1    wreg      void 
  3018 ;; Registers used:
  3019 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  3020 ;; Tracked objects:
  3021 ;;		On entry : 0/0
  3022 ;;		On exit  : 0/0
  3023 ;;		Unchanged: 0/0
  3024 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3025 ;;      Params:         0       0       0       0
  3026 ;;      Locals:         1       0       0       0
  3027 ;;      Temps:          2       0       0       0
  3028 ;;      Totals:         3       0       0       0
  3029 ;;Total ram usage:        3 bytes
  3030 ;; Hardware stack levels used:    1
  3031 ;; This function calls:
  3032 ;;		Nothing
  3033 ;; This function is called by:
  3034 ;;		_main
  3035 ;;		_TMR0_CallBack
  3036 ;; This function uses a non-reentrant model
  3037 ;;
  3038                           
  3039                           
  3040                           ;psect for function _CharlieplexLEDs
  3041  00F8                     _CharlieplexLEDs:	
  3042                           
  3043                           ;main.c: 183: uint8_t i;
  3044                           ;main.c: 186: TRISA = 0xCC;
  3045                           
  3046                           ;incstack = 0
  3047                           ; Regs used in _CharlieplexLEDs: [wreg+fsr1l+fsr1h+status,2+status,0]
  3048  00F8  30CC               	movlw	204
  3049  00F9  0021               	movlb	1	; select bank1
  3050  00FA  008C               	movwf	12	;volatile
  3051                           
  3052                           ;main.c: 187: PORTA = 0x00;
  3053  00FB  0020               	movlb	0	; select bank0
  3054  00FC  018C               	clrf	12	;volatile
  3055                           
  3056                           ;main.c: 190: i = 1 << LEDState;
  3057  00FD  3001               	movlw	1
  3058  00FE  00F0               	movwf	??_CharlieplexLEDs
  3059  00FF  0A79               	incf	_LEDState,w
  3060  0100  2902               	goto	u35_24
  3061  0101                     u35_25:	
  3062  0101  35F0               	lslf	??_CharlieplexLEDs,f
  3063  0102                     u35_24:	
  3064  0102  0B89               	decfsz	9,f
  3065  0103  2901               	goto	u35_25
  3066  0104  0870               	movf	??_CharlieplexLEDs,w
  3067  0105  00F1               	movwf	??_CharlieplexLEDs+1
  3068  0106  0871               	movf	??_CharlieplexLEDs+1,w
  3069  0107  00F2               	movwf	CharlieplexLEDs@i
  3070                           
  3071                           ;main.c: 193: if (i & LEDOns)
  3072  0108  0872               	movf	CharlieplexLEDs@i,w
  3073  0109  0578               	andwf	_LEDOns,w	;volatile
  3074  010A  1903               	btfsc	3,2
  3075  010B  291A               	goto	i1l963
  3076                           
  3077                           ;main.c: 194: {
  3078                           ;main.c: 196: TRISA = TRISTable[LEDState];
  3079  010C  0879               	movf	_LEDState,w
  3080  010D  3E44               	addlw	(low (_TRISTable| 0))& (0+255)
  3081  010E  0086               	movwf	6
  3082  010F  0187               	clrf	7
  3083  0110  0801               	movf	1,w
  3084  0111  0021               	movlb	1	; select bank1
  3085  0112  008C               	movwf	12	;volatile
  3086                           
  3087                           ;main.c: 197: PORTA = PORTTable[LEDState];
  3088  0113  0879               	movf	_LEDState,w
  3089  0114  3E3C               	addlw	(low (_PORTTable| 0))& (0+255)
  3090  0115  0086               	movwf	6
  3091  0116  0187               	clrf	7
  3092  0117  0801               	movf	1,w
  3093  0118  0020               	movlb	0	; select bank0
  3094  0119  008C               	movwf	12	;volatile
  3095  011A                     i1l963:	
  3096                           
  3097                           ;main.c: 198: }
  3098                           ;main.c: 201: LEDState++;
  3099  011A  3001               	movlw	1
  3100  011B  00F0               	movwf	??_CharlieplexLEDs
  3101  011C  0870               	movf	??_CharlieplexLEDs,w
  3102  011D  07F9               	addwf	_LEDState,f
  3103                           
  3104                           ;main.c: 202: if (LEDState == 8)
  3105  011E  3008               	movlw	8
  3106  011F  0679               	xorwf	_LEDState,w
  3107  0120  1D03               	btfss	3,2
  3108  0121  0008               	return
  3109                           
  3110                           ;main.c: 203: {
  3111                           ;main.c: 208: WakeTimer++;
  3112  0122  3001               	movlw	1
  3113  0123  07B8               	addwf	_WakeTimer,f	;volatile
  3114  0124  3000               	movlw	0
  3115  0125  3DB9               	addwfc	_WakeTimer+1,f	;volatile
  3116  0126  3000               	movlw	0
  3117  0127  3DBA               	addwfc	_WakeTimer+2,f	;volatile
  3118  0128  3000               	movlw	0
  3119  0129  3DBB               	addwfc	_WakeTimer+3,f	;volatile
  3120                           
  3121                           ;main.c: 211: for (i=0; i < 8; i++)
  3122  012A  01F2               	clrf	CharlieplexLEDs@i
  3123  012B  3008               	movlw	8
  3124  012C  0272               	subwf	CharlieplexLEDs@i,w
  3125  012D  1803               	btfsc	3,0
  3126  012E  2949               	goto	i1l983
  3127  012F                     i1l975:	
  3128                           
  3129                           ;main.c: 212: {
  3130                           ;main.c: 213: if (PatternDelay[i])
  3131  012F  3572               	lslf	CharlieplexLEDs@i,w
  3132  0130  3E20               	addlw	(low (_PatternDelay| 0))& (0+255)
  3133  0131  0086               	movwf	6
  3134  0132  0187               	clrf	7
  3135  0133  0016               	moviw fsr1++
  3136  0134  0401               	iorwf	1,w
  3137  0135  1903               	btfsc	3,2
  3138  0136  2941               	goto	i1l979
  3139                           
  3140                           ;main.c: 214: {
  3141                           ;main.c: 215: PatternDelay[i]--;
  3142  0137  3572               	lslf	CharlieplexLEDs@i,w
  3143  0138  3E20               	addlw	(low (_PatternDelay| 0))& (0+255)
  3144  0139  0086               	movwf	6
  3145  013A  0187               	clrf	7
  3146  013B  3001               	movlw	1
  3147  013C  0281               	subwf	1,f
  3148  013D  3141               	addfsr 1,1
  3149  013E  3000               	movlw	0
  3150  013F  3B81               	subwfb	1,f
  3151  0140  317F               	addfsr 1,-1
  3152  0141                     i1l979:	
  3153  0141  3001               	movlw	1
  3154  0142  00F0               	movwf	??_CharlieplexLEDs
  3155  0143  0870               	movf	??_CharlieplexLEDs,w
  3156  0144  07F2               	addwf	CharlieplexLEDs@i,f
  3157  0145  3008               	movlw	8
  3158  0146  0272               	subwf	CharlieplexLEDs@i,w
  3159  0147  1C03               	skipc
  3160  0148  292F               	goto	i1l975
  3161  0149                     i1l983:	
  3162                           
  3163                           ;main.c: 216: }
  3164                           ;main.c: 217: }
  3165                           ;main.c: 219: LEDState = 0;
  3166  0149  01F9               	clrf	_LEDState
  3167  014A  0008               	return
  3168  014B                     __end_of_CharlieplexLEDs:	
  3169                           
  3170                           	psect	text21
  3171  0221                     __ptext21:	
  3172 ;; *************** function _PIN_MANAGER_IOC *****************
  3173 ;; Defined at:
  3174 ;;		line 110 in file "mcc_generated_files/pin_manager.c"
  3175 ;; Parameters:    Size  Location     Type
  3176 ;;		None
  3177 ;; Auto vars:     Size  Location     Type
  3178 ;;		None
  3179 ;; Return value:  Size  Location     Type
  3180 ;;                  1    wreg      void 
  3181 ;; Registers used:
  3182 ;;		wreg, status,2, status,0, pclath, cstack
  3183 ;; Tracked objects:
  3184 ;;		On entry : 0/0
  3185 ;;		On exit  : 0/0
  3186 ;;		Unchanged: 0/0
  3187 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3188 ;;      Params:         0       0       0       0
  3189 ;;      Locals:         0       0       0       0
  3190 ;;      Temps:          0       0       0       0
  3191 ;;      Totals:         0       0       0       0
  3192 ;;Total ram usage:        0 bytes
  3193 ;; Hardware stack levels used:    1
  3194 ;; Hardware stack levels required when called:    2
  3195 ;; This function calls:
  3196 ;;		_IOCAF2_ISR
  3197 ;;		_IOCAF3_ISR
  3198 ;; This function is called by:
  3199 ;;		_INTERRUPT_InterruptManager
  3200 ;; This function uses a non-reentrant model
  3201 ;;
  3202                           
  3203                           
  3204                           ;psect for function _PIN_MANAGER_IOC
  3205  0221                     _PIN_MANAGER_IOC:	
  3206                           
  3207                           ;pin_manager.c: 113: if(IOCAFbits.IOCAF2 == 1)
  3208                           
  3209                           ;incstack = 0
  3210                           ; Regs used in _PIN_MANAGER_IOC: [wreg+status,2+status,0+pclath+cstack]
  3211  0221  0027               	movlb	7	; select bank7
  3212  0222  1D13               	btfss	19,2	;volatile
  3213  0223  2A25               	goto	i1l1067
  3214                           
  3215                           ;pin_manager.c: 114: {
  3216                           ;pin_manager.c: 115: IOCAF2_ISR();
  3217  0224  2209               	fcall	_IOCAF2_ISR
  3218  0225                     i1l1067:	
  3219                           
  3220                           ;pin_manager.c: 116: }
  3221                           ;pin_manager.c: 119: if(IOCAFbits.IOCAF3 == 1)
  3222  0225  0027               	movlb	7	; select bank7
  3223  0226  1D93               	btfss	19,3	;volatile
  3224  0227  0008               	return
  3225                           
  3226                           ;pin_manager.c: 120: {
  3227                           ;pin_manager.c: 121: IOCAF3_ISR();
  3228  0228  21FC               	fcall	_IOCAF3_ISR
  3229  0229  0008               	return
  3230  022A                     __end_of_PIN_MANAGER_IOC:	
  3231                           
  3232                           	psect	text22
  3233  01FC                     __ptext22:	
  3234 ;; *************** function _IOCAF3_ISR *****************
  3235 ;; Defined at:
  3236 ;;		line 160 in file "mcc_generated_files/pin_manager.c"
  3237 ;; Parameters:    Size  Location     Type
  3238 ;;		None
  3239 ;; Auto vars:     Size  Location     Type
  3240 ;;		None
  3241 ;; Return value:  Size  Location     Type
  3242 ;;                  1    wreg      void 
  3243 ;; Registers used:
  3244 ;;		wreg, status,2, status,0, pclath, cstack
  3245 ;; Tracked objects:
  3246 ;;		On entry : 0/0
  3247 ;;		On exit  : 0/0
  3248 ;;		Unchanged: 0/0
  3249 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3250 ;;      Params:         0       0       0       0
  3251 ;;      Locals:         0       0       0       0
  3252 ;;      Temps:          0       0       0       0
  3253 ;;      Totals:         0       0       0       0
  3254 ;;Total ram usage:        0 bytes
  3255 ;; Hardware stack levels used:    1
  3256 ;; Hardware stack levels required when called:    1
  3257 ;; This function calls:
  3258 ;;		Absolute function
  3259 ;;		_IOCAF3_DefaultInterruptHandler
  3260 ;; This function is called by:
  3261 ;;		_PIN_MANAGER_IOC
  3262 ;; This function uses a non-reentrant model
  3263 ;;
  3264                           
  3265                           
  3266                           ;psect for function _IOCAF3_ISR
  3267  01FC                     _IOCAF3_ISR:	
  3268                           
  3269                           ;pin_manager.c: 165: if(IOCAF3_InterruptHandler)
  3270                           
  3271                           ;incstack = 0
  3272                           ; Regs used in _IOCAF3_ISR: [wreg+status,2+status,0+pclath+cstack]
  3273  01FC  0020               	movlb	0	; select bank0
  3274  01FD  0850               	movf	_IOCAF3_InterruptHandler,w
  3275  01FE  0451               	iorwf	_IOCAF3_InterruptHandler+1,w
  3276  01FF  1903               	btfsc	3,2
  3277  0200  2A06               	goto	i1l1027
  3278                           
  3279                           ;pin_manager.c: 166: {
  3280                           ;pin_manager.c: 167: IOCAF3_InterruptHandler();
  3281  0201  0851               	movf	_IOCAF3_InterruptHandler+1,w
  3282  0202  008A               	movwf	10
  3283  0203  0850               	movf	_IOCAF3_InterruptHandler,w
  3284  0204  000A               	callw
  3285  0205  3181               	pagesel	$
  3286  0206                     i1l1027:	
  3287                           
  3288                           ;pin_manager.c: 168: }
  3289                           ;pin_manager.c: 169: IOCAFbits.IOCAF3 = 0;
  3290  0206  0027               	movlb	7	; select bank7
  3291  0207  1193               	bcf	19,3	;volatile
  3292  0208  0008               	return
  3293  0209                     __end_of_IOCAF3_ISR:	
  3294                           
  3295                           	psect	text23
  3296  0288                     __ptext23:	
  3297 ;; *************** function _IOCAF3_DefaultInterruptHandler *****************
  3298 ;; Defined at:
  3299 ;;		line 182 in file "mcc_generated_files/pin_manager.c"
  3300 ;; Parameters:    Size  Location     Type
  3301 ;;		None
  3302 ;; Auto vars:     Size  Location     Type
  3303 ;;		None
  3304 ;; Return value:  Size  Location     Type
  3305 ;;                  1    wreg      void 
  3306 ;; Registers used:
  3307 ;;		None
  3308 ;; Tracked objects:
  3309 ;;		On entry : 0/0
  3310 ;;		On exit  : 0/0
  3311 ;;		Unchanged: 0/0
  3312 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3313 ;;      Params:         0       0       0       0
  3314 ;;      Locals:         0       0       0       0
  3315 ;;      Temps:          0       0       0       0
  3316 ;;      Totals:         0       0       0       0
  3317 ;;Total ram usage:        0 bytes
  3318 ;; Hardware stack levels used:    1
  3319 ;; This function calls:
  3320 ;;		Nothing
  3321 ;; This function is called by:
  3322 ;;		_PIN_MANAGER_Initialize
  3323 ;;		_IOCAF3_ISR
  3324 ;; This function uses a non-reentrant model
  3325 ;;
  3326                           
  3327                           
  3328                           ;psect for function _IOCAF3_DefaultInterruptHandler
  3329  0288                     _IOCAF3_DefaultInterruptHandler:	
  3330                           
  3331                           ;incstack = 0
  3332                           ; Regs used in _IOCAF3_DefaultInterruptHandler: []
  3333  0288  0008               	return
  3334  0289                     __end_of_IOCAF3_DefaultInterruptHandler:	
  3335                           
  3336                           	psect	text24
  3337  0209                     __ptext24:	
  3338 ;; *************** function _IOCAF2_ISR *****************
  3339 ;; Defined at:
  3340 ;;		line 130 in file "mcc_generated_files/pin_manager.c"
  3341 ;; Parameters:    Size  Location     Type
  3342 ;;		None
  3343 ;; Auto vars:     Size  Location     Type
  3344 ;;		None
  3345 ;; Return value:  Size  Location     Type
  3346 ;;                  1    wreg      void 
  3347 ;; Registers used:
  3348 ;;		wreg, status,2, status,0, pclath, cstack
  3349 ;; Tracked objects:
  3350 ;;		On entry : 0/0
  3351 ;;		On exit  : 0/0
  3352 ;;		Unchanged: 0/0
  3353 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3354 ;;      Params:         0       0       0       0
  3355 ;;      Locals:         0       0       0       0
  3356 ;;      Temps:          0       0       0       0
  3357 ;;      Totals:         0       0       0       0
  3358 ;;Total ram usage:        0 bytes
  3359 ;; Hardware stack levels used:    1
  3360 ;; Hardware stack levels required when called:    1
  3361 ;; This function calls:
  3362 ;;		Absolute function
  3363 ;;		_IOCAF2_DefaultInterruptHandler
  3364 ;; This function is called by:
  3365 ;;		_PIN_MANAGER_IOC
  3366 ;; This function uses a non-reentrant model
  3367 ;;
  3368                           
  3369                           
  3370                           ;psect for function _IOCAF2_ISR
  3371  0209                     _IOCAF2_ISR:	
  3372                           
  3373                           ;pin_manager.c: 135: if(IOCAF2_InterruptHandler)
  3374                           
  3375                           ;incstack = 0
  3376                           ; Regs used in _IOCAF2_ISR: [wreg+status,2+status,0+pclath+cstack]
  3377  0209  0020               	movlb	0	; select bank0
  3378  020A  0852               	movf	_IOCAF2_InterruptHandler,w
  3379  020B  0453               	iorwf	_IOCAF2_InterruptHandler+1,w
  3380  020C  1903               	btfsc	3,2
  3381  020D  2A13               	goto	i1l1021
  3382                           
  3383                           ;pin_manager.c: 136: {
  3384                           ;pin_manager.c: 137: IOCAF2_InterruptHandler();
  3385  020E  0853               	movf	_IOCAF2_InterruptHandler+1,w
  3386  020F  008A               	movwf	10
  3387  0210  0852               	movf	_IOCAF2_InterruptHandler,w
  3388  0211  000A               	callw
  3389  0212  3182               	pagesel	$
  3390  0213                     i1l1021:	
  3391                           
  3392                           ;pin_manager.c: 138: }
  3393                           ;pin_manager.c: 139: IOCAFbits.IOCAF2 = 0;
  3394  0213  0027               	movlb	7	; select bank7
  3395  0214  1113               	bcf	19,2	;volatile
  3396  0215  0008               	return
  3397  0216                     __end_of_IOCAF2_ISR:	
  3398                           
  3399                           	psect	text25
  3400  0289                     __ptext25:	
  3401 ;; *************** function _IOCAF2_DefaultInterruptHandler *****************
  3402 ;; Defined at:
  3403 ;;		line 152 in file "mcc_generated_files/pin_manager.c"
  3404 ;; Parameters:    Size  Location     Type
  3405 ;;		None
  3406 ;; Auto vars:     Size  Location     Type
  3407 ;;		None
  3408 ;; Return value:  Size  Location     Type
  3409 ;;                  1    wreg      void 
  3410 ;; Registers used:
  3411 ;;		None
  3412 ;; Tracked objects:
  3413 ;;		On entry : 0/0
  3414 ;;		On exit  : 0/0
  3415 ;;		Unchanged: 0/0
  3416 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3417 ;;      Params:         0       0       0       0
  3418 ;;      Locals:         0       0       0       0
  3419 ;;      Temps:          0       0       0       0
  3420 ;;      Totals:         0       0       0       0
  3421 ;;Total ram usage:        0 bytes
  3422 ;; Hardware stack levels used:    1
  3423 ;; This function calls:
  3424 ;;		Nothing
  3425 ;; This function is called by:
  3426 ;;		_PIN_MANAGER_Initialize
  3427 ;;		_IOCAF2_ISR
  3428 ;; This function uses a non-reentrant model
  3429 ;;
  3430                           
  3431                           
  3432                           ;psect for function _IOCAF2_DefaultInterruptHandler
  3433  0289                     _IOCAF2_DefaultInterruptHandler:	
  3434                           
  3435                           ;incstack = 0
  3436                           ; Regs used in _IOCAF2_DefaultInterruptHandler: []
  3437  0289  0008               	return
  3438  028A                     __end_of_IOCAF2_DefaultInterruptHandler:	
  3439  007E                     btemp	set	126	;btemp
  3440  007E                     int$flags	set	126
  3441  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        18
    BSS         32
    Persistent  7
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      10
    BANK0            80      4      57
    BANK1            80      0       0
    BANK2            80      0       0

Pointer List with Targets:

    TMR0_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> CharlieplexLEDs(), 

    TMR0_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> CharlieplexLEDs(), Absolute function(), 

    IOCAF3_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> IOCAF3_DefaultInterruptHandler(), 

    IOCAF3_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), IOCAF3_DefaultInterruptHandler(), 

    IOCAF2_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> IOCAF2_DefaultInterruptHandler(), 

    IOCAF2_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), IOCAF2_DefaultInterruptHandler(), 


Critical Paths under _main in COMMON

    _main->_TMR0_SetInterruptHandler
    _PIN_MANAGER_Initialize->_IOCAF2_SetInterruptHandler
    _PIN_MANAGER_Initialize->_IOCAF3_SetInterruptHandler
    _RunRightFlash->_SetLEDOff
    _RunRightFlash->_SetLEDOn
    _RunLeftFlash->_SetLEDOff
    _RunLeftFlash->_SetLEDOn

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _TMR0_CallBack->_CharlieplexLEDs

Critical Paths under _main in BANK0

    _main->_RunLeftFlash
    _main->_RunRightFlash

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0     551
                                              1 BANK0      3     3      0
               _CheckForButtonPushes
                       _RunLeftFlash
                      _RunRightFlash
                  _SYSTEM_Initialize
                      _SetAllLEDsOff
           _TMR0_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (1) _TMR0_SetInterruptHandler                             2     0      2      96
                                              4 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (1) _SetAllLEDsOff                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     192
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR0_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR0_Initialize                                      1     1      0       0
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0     192
         _IOCAF2_SetInterruptHandler
         _IOCAF3_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _IOCAF3_SetInterruptHandler                           2     0      2      96
                                              4 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (3) _IOCAF2_SetInterruptHandler                           2     0      2      96
                                              4 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _RunRightFlash                                        1     1      0      62
                                              0 BANK0      1     1      0
                 _RightButtonPressed
                          _SetLEDOff
                           _SetLEDOn
 ---------------------------------------------------------------------------------
 (1) _RunLeftFlash                                         1     1      0      62
                                              0 BANK0      1     1      0
                  _LeftButtonPressed
                          _SetLEDOff
                           _SetLEDOn
 ---------------------------------------------------------------------------------
 (2) _SetLEDOn                                             2     2      0      31
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (2) _SetLEDOff                                            2     2      0      31
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _CheckForButtonPushes                                 1     1      0       0
                                              4 COMMON     1     1      0
                  _LeftButtonPressed
                 _RightButtonPressed
 ---------------------------------------------------------------------------------
 (2) _RightButtonPressed                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _LeftButtonPressed                                    0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _INTERRUPT_InterruptManager                           1     1      0     113
                                              3 COMMON     1     1      0
                    _PIN_MANAGER_IOC
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (5) _TMR0_ISR                                             0     0      0     113
                      _TMR0_CallBack
 ---------------------------------------------------------------------------------
 (6) _TMR0_CallBack                                        0     0      0     113
                   Absolute function *
                    _CharlieplexLEDs *
 ---------------------------------------------------------------------------------
 (7) _CharlieplexLEDs                                      3     3      0     113
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (5) _PIN_MANAGER_IOC                                      0     0      0       0
                         _IOCAF2_ISR
                         _IOCAF3_ISR
 ---------------------------------------------------------------------------------
 (6) _IOCAF3_ISR                                           0     0      0       0
                   Absolute function *
     _IOCAF3_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (7) _IOCAF3_DefaultInterruptHandler                       0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _IOCAF2_ISR                                           0     0      0       0
                   Absolute function *
     _IOCAF2_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (7) _IOCAF2_DefaultInterruptHandler                       0     0      0       0
 ---------------------------------------------------------------------------------
 (7) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _CheckForButtonPushes
     _LeftButtonPressed
     _RightButtonPressed
   _RunLeftFlash
     _LeftButtonPressed
     _SetLEDOff
     _SetLEDOn
   _RunRightFlash
     _RightButtonPressed
     _SetLEDOff
     _SetLEDOn
   _SYSTEM_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
       _IOCAF2_SetInterruptHandler
       _IOCAF3_SetInterruptHandler
     _TMR0_Initialize
     _WDT_Initialize
   _SetAllLEDsOff
   _TMR0_SetInterruptHandler

 _INTERRUPT_InterruptManager (ROOT)
   _PIN_MANAGER_IOC
     _IOCAF2_ISR
       Absolute function(Fake) *
       _IOCAF2_DefaultInterruptHandler *
     _IOCAF3_ISR
       Absolute function(Fake) *
       _IOCAF3_DefaultInterruptHandler *
   _TMR0_ISR
     _TMR0_CallBack
       Absolute function(Fake) *
       _CharlieplexLEDs *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      6       A       2       71.4%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      43       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50      4      39       6       71.3%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
DATA                 0      0      43      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Thu May 17 09:00:26 2018

                           ??_RunRightFlash 0055                                           pc 0002  
                               __CFG_CP$OFF 0000                             _timer0ReloadVal 0054  
                                       l240 017E                                         u887 0185  
                              __CFG_BORV$LO 0000                                         wreg 0009  
        __end_of_IOCAF2_SetInterruptHandler 026B                  _IOCAF2_SetInterruptHandler 0265  
                          CharlieplexLEDs@i 0072                                        S1531 0271  
                                      S1529 026B                                __CFG_LVP$OFF 0000  
                                      l1401 005E                                        l1411 0073  
                                      l1421 0090                                        l1405 0067  
                                      l1423 0095                                        l1409 0069  
                                      l1361 00C7                                        l1353 00A3  
                                      l1435 01C6                                        l1355 00AC  
                                      l1371 00DC                                        l1445 01D6  
                                      l1437 01C9                                        l1381 00F3  
                                      l1365 00D0                                        l1357 00B5  
                                      l1447 01D9                                        l1439 01CA  
                                      l1391 0035                                        l1359 00BE  
                                      l1393 003A                                        l1369 00D2  
                                      l1473 0167                                        l1457 0155  
                                      l1395 0043                                        l1379 00EE  
                                      l1397 004C                                        l1477 016F  
                                      l1469 015E                                        l1399 0055  
                                      l1487 0194                                        _LATA 010C  
                     ?_CheckForButtonPushes 0070                                        _TMR0 0015  
                                      _WPUA 020C                                __CFG_WRT$OFF 0000  
                        _RightButtonPressed 023F                                        _main 014B  
                                      fsr0h 0005                                        fsr1h 0007  
                                      indf0 0000                                        fsr0l 0004  
                                      indf1 0001                                        fsr1l 0006  
                                      btemp 007E                           RunLeftFlash@delay 004C  
                                      start 0017                         ?_RightButtonPressed 0070  
                   __end_of_TMR0_Initialize 01FC              __size_of_OSCILLATOR_Initialize 0007  
                       __size_of_IOCAF2_ISR 000D                         __size_of_IOCAF3_ISR 000D  
             __end_of_OSCILLATOR_Initialize 0231                                       ?_main 0070  
                             __CFG_WDTE$OFF 0000                                       i1l100 000E  
                                     i1l104 0012                                       i1l963 011A  
                                     i1l983 0149                                       i1l975 012F  
                                     i1l979 0141                                       _PORTA 000C  
                                     u35_24 0102                                       u35_25 0101  
                                     _TRISA 008C           __size_of_TMR0_SetInterruptHandler 0006  
                 ?_TMR0_SetInterruptHandler 0074                        ??_RightButtonPressed 0074  
                          __end_of_TMR0_ISR 027D                     __end_of_PIN_MANAGER_IOC 022A  
                            _WDT_Initialize 0282                                       main@i 0058  
                            __CFG_BOREN$OFF 0000                                       pclath 000A  
                                     status 0003                                       wtemp0 007E  
                               SetLEDOn@LED 0075                              __CFG_MCLRE$OFF 0000  
                           __initialization 0018                                __end_of_main 0196  
                          __end_of_SetLEDOn 0238                 ?_INTERRUPT_InterruptManager 0070  
                                    ??_main 0056                              __CFG_PLLEN$OFF 0000  
                    __end_of_WDT_Initialize 0286                       main@APatternIsRunning 0057  
                    __size_of_SetAllLEDsOff 0002                ??_IOCAF3_SetInterruptHandler 0076  
                    ??_CheckForButtonPushes 0074                                      _APFCON 011D  
                                    _ANSELA 018C                                      _BORCON 0116  
                                    i1l1021 0213                                      i1l1027 0206  
                                    i1l1067 0225                                      _ODCONA 028C  
                                    _LEDOns 0078                                      _OSCCON 0099  
   CheckForButtonPushes@LastLeftButtonState 0077                                      _WDTCON 0097  
                        __size_of_SetLEDOff 0007                              __CFG_PWRTE$OFF 0000  
                            __CFG_STVREN$ON 0000                            ?_TMR0_Initialize 0070  
       __size_of_IOCAF3_SetInterruptHandler 0006                             ?_WDT_Initialize 0070  
                     __end_of_TMR0_CallBack 0221    TMR0_SetInterruptHandler@InterruptHandler 0074  
IOCAF3_SetInterruptHandler@InterruptHandler 0074  IOCAF2_SetInterruptHandler@InterruptHandler 0074  
                          ?_PIN_MANAGER_IOC 0070                                ??_IOCAF2_ISR 0070  
                              ??_IOCAF3_ISR 0070                           _SYSTEM_Initialize 027D  
                   __end_of__initialization 002C                          ?_SYSTEM_Initialize 0070  
                              SetLEDOff@LED 0075                               _SetAllLEDsOff 0286  
                            __pcstackCOMMON 0070                                __pidataBANK0 01DB  
                       ??_SYSTEM_Initialize 0076                                   ?_TMR0_ISR 0070  
                        __end_of_IOCAF2_ISR 0216                          __end_of_IOCAF3_ISR 0209  
                         __end_of_SetLEDOff 023F                              _OPTION_REGbits 0095  
               ?_IOCAF2_SetInterruptHandler 0074            ??_IOCAF2_DefaultInterruptHandler 0070  
           ?_IOCAF2_DefaultInterruptHandler 0070                   __end_of_SYSTEM_Initialize 0282  
                                __pbssBANK0 0020                                   ?_SetLEDOn 0070  
                  __size_of_CharlieplexLEDs 0053                              ?_SetAllLEDsOff 0070  
                                __pmaintext 014B            __end_of_TMR0_SetInterruptHandler 025F  
                                ??_TMR0_ISR 0073                                  __pintentry 0004  
                     __end_of_RunRightFlash 00F8          __end_of_IOCAF3_SetInterruptHandler 0265  
                _IOCAF3_SetInterruptHandler 025F                                     _OSCTUNE 0098  
                                ??_SetLEDOn 0074                               ?_RunLeftFlash 0070  
                                   __ptext1 0259                                     __ptext2 0286  
                                   __ptext3 027D                                     __ptext4 0282  
                                   __ptext5 01ED                                     __ptext6 0196  
                                   __ptext7 025F                                     __ptext8 0265  
                                   __ptext9 022A                       _OSCILLATOR_Initialize 022A  
                  ??_PIN_MANAGER_Initialize 0076                                   _IOCAFbits 0393  
                                 _IOCANbits 0392                                   _IOCAPbits 0391  
               __size_of_RightButtonPressed 0007                  __size_of_SYSTEM_Initialize 0005  
                                   clrloop0 0254                        end_of_initialization 002C  
                                   init_ram 024D                                     initloop 024E  
                           ??_SetAllLEDsOff 0074                              ??_RunLeftFlash 0055  
  CheckForButtonPushes@LastRightButtonState 0076                           ??_CharlieplexLEDs 0070  
                          ??_WDT_Initialize 0074                    _TMR0_SetInterruptHandler 0259  
                                 _PORTAbits 000C                                   _PORTTable 003C  
                          __CFG_FOSC$INTOSC 0000                           _LeftButtonPressed 0246  
                                 _TRISTable 0044                          ?_LeftButtonPressed 0070  
             __size_of_CheckForButtonPushes 0021                         ??_LeftButtonPressed 0074  
                         __size_of_TMR0_ISR 0006                      ?_OSCILLATOR_Initialize 0070  
                 __end_of_LeftButtonPressed 024D                         start_initialization 0018  
                  __size_of_TMR0_Initialize 000F             __size_of_PIN_MANAGER_Initialize 0024  
                                 _SetLEDOff 0238                    __size_of_PIN_MANAGER_IOC 0009  
                                 _WakeTimer 0038                           __size_of_SetLEDOn 0007  
    __end_of_IOCAF2_DefaultInterruptHandler 028A     __size_of_IOCAF2_DefaultInterruptHandler 0001  
            _IOCAF2_DefaultInterruptHandler 0289                            __CFG_LPBOREN$OFF 0000  
                    __size_of_TMR0_CallBack 000B                                 __pdataBANK0 003C  
                               __pbssCOMMON 0076                                   ___latbits 0000  
                             __pcstackBANK0 0055                 ?_IOCAF3_SetInterruptHandler 0074  
                      __end_of_RunLeftFlash 009A                                  ?_SetLEDOff 0070  
          ??_IOCAF3_DefaultInterruptHandler 0070             ?_IOCAF3_DefaultInterruptHandler 0070  
                     _TMR0_InterruptHandler 004E                                   __pnvBANK0 004E  
                    _PIN_MANAGER_Initialize 0196                ??_INTERRUPT_InterruptManager 0073  
                                 __pswtext1 026B                                   __pswtext2 0271  
                __size_of_LeftButtonPressed 0007                                _PatternDelay 0020  
                              _PatternState 0030                               _TMR0_CallBack 0216  
                    __size_of_RunRightFlash 005E                           ??_TMR0_Initialize 0074  
                           _CharlieplexLEDs 00F8                                    _LEDState 0079  
                                 clear_ram0 0253         __size_of_INTERRUPT_InterruptManager 0013  
                ??_TMR0_SetInterruptHandler 0076                                    _TMR0_ISR 0277  
                         ??_PIN_MANAGER_IOC 0070                  __end_of_RightButtonPressed 0246  
                               ??_SetLEDOff 0074                              ?_TMR0_CallBack 0070  
                                  _SetLEDOn 0231                       __end_of_SetAllLEDsOff 0288  
                   ??_OSCILLATOR_Initialize 0074                __end_of_CheckForButtonPushes 01DB  
                             _RunRightFlash 009A                       __size_of_RunLeftFlash 006B  
                   _IOCAF2_InterruptHandler 0052                     __end_of_CharlieplexLEDs 014B  
              ??_IOCAF2_SetInterruptHandler 0076                                    __ptext10 009A  
                                  __ptext11 002F                                    __ptext20 00F8  
                                  __ptext12 0231                                    __ptext21 0221  
                                  __ptext13 0238                                    __ptext22 01FC  
                                  __ptext14 01BA                                    __ptext23 0288  
                                  __ptext15 023F                                    __ptext24 0209  
                                  __ptext16 0246                                    __ptext25 0289  
                                  __ptext18 0277                                    __ptext19 0216  
                                _IOCAF2_ISR 0209                                  _IOCAF3_ISR 01FC  
                             __size_of_main 004B                                _RunLeftFlash 002F  
                                  int$flags 007E                              ?_RunRightFlash 0070  
        __end_of_INTERRUPT_InterruptManager 0017                  _INTERRUPT_InterruptManager 0004  
       __size_of_IOCAF2_SetInterruptHandler 0006                                  _INTCONbits 000B  
                           ??_TMR0_CallBack 0073                     __size_of_WDT_Initialize 0004  
                                  intlevel1 0000                     ?_PIN_MANAGER_Initialize 0070  
                         __CFG_CLKOUTEN$OFF 0000      __end_of_IOCAF3_DefaultInterruptHandler 0289  
   __size_of_IOCAF3_DefaultInterruptHandler 0001              _IOCAF3_DefaultInterruptHandler 0288  
                                _OPTION_REG 0095                             _TMR0_Initialize 01ED  
                               _VREGCONbits 0197                            ?_CharlieplexLEDs 0070  
                               ?_IOCAF2_ISR 0070                                 ?_IOCAF3_ISR 0070  
            __end_of_PIN_MANAGER_Initialize 01BA                        _CheckForButtonPushes 01BA  
                           _PIN_MANAGER_IOC 0221                     _IOCAF3_InterruptHandler 0050  
