

Microchip Technology PIC LITE Macro Assembler V1.45 build -152302408 
                                                                                               Sun Dec 04 12:24:13 2022

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	12F1572
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK1,global,class=CODE,delta=2
     6                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	inittext,global,class=CODE,delta=2
    13                           	psect	clrtext,global,class=CODE,delta=2
    14                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    16                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    17                           	psect	text1,local,class=CODE,merge=1,delta=2
    18                           	psect	text2,local,class=CODE,merge=1,delta=2
    19                           	psect	text3,local,class=CODE,merge=1,delta=2
    20                           	psect	text4,local,class=CODE,merge=1,delta=2
    21                           	psect	text5,local,class=CODE,merge=1,delta=2
    22                           	psect	text6,local,class=CODE,merge=1,delta=2
    23                           	psect	text7,local,class=CODE,merge=1,delta=2
    24                           	psect	text8,local,class=CODE,merge=1,delta=2
    25                           	psect	text9,local,class=CODE,merge=1,delta=2
    26                           	psect	text10,local,class=CODE,merge=1,delta=2
    27                           	psect	swtext1,local,class=CONST,delta=2
    28                           	psect	text11,local,class=CODE,merge=1,delta=2
    29                           	psect	swtext2,local,class=CONST,delta=2
    30                           	psect	text12,local,class=CODE,merge=1,delta=2,group=1
    31                           	psect	text13,local,class=CODE,merge=1,delta=2,group=1
    32                           	psect	text14,local,class=CODE,merge=1,delta=2
    33                           	psect	swtext3,local,class=CONST,delta=2
    34                           	psect	text15,local,class=CODE,merge=1,delta=2
    35                           	psect	text16,local,class=CODE,merge=1,delta=2
    36                           	psect	text17,local,class=CODE,merge=1,delta=2
    37                           	psect	text18,local,class=CODE,merge=1,delta=2
    38                           	psect	text19,local,class=CODE,merge=1,delta=2
    39                           	psect	text20,local,class=CODE,merge=1,delta=2
    40                           	psect	text21,local,class=CODE,merge=1,delta=2
    41                           	psect	intentry,global,class=CODE,delta=2
    42                           	psect	text23,local,class=CODE,merge=1,delta=2
    43                           	psect	text24,local,class=CODE,merge=1,delta=2
    44                           	psect	text25,local,class=CODE,merge=1,delta=2
    45                           	psect	text26,local,class=CODE,merge=1,delta=2
    46                           	psect	text27,local,class=CODE,merge=1,delta=2
    47                           	psect	text28,local,class=CODE,merge=1,delta=2
    48                           	psect	text29,local,class=CODE,merge=1,delta=2
    49                           	psect	text30,local,class=CODE,merge=1,delta=2
    50                           	dabs	1,0x7E,2
    51  0000                     
    52                           ; Version 1.45
    53                           ; Generated 16/11/2017 GMT
    54                           ; 
    55                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    56                           ; All rights reserved.
    57                           ; 
    58                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    59                           ; 
    60                           ; Redistribution and use in source and binary forms, with or without modification, are
    61                           ; permitted provided that the following conditions are met:
    62                           ; 
    63                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    64                           ;        conditions and the following disclaimer.
    65                           ; 
    66                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    67                           ;        of conditions and the following disclaimer in the documentation and/or other
    68                           ;        materials provided with the distribution.
    69                           ; 
    70                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    71                           ;        software without specific prior written permission.
    72                           ; 
    73                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    74                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    75                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    76                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    77                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    78                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    79                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    80                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    81                           ; 
    82                           ; 
    83                           ; Code-generator required, PIC12F1572 Definitions
    84                           ; 
    85                           ; SFR Addresses
    86  0000                     	;# 
    87  0001                     	;# 
    88  0002                     	;# 
    89  0003                     	;# 
    90  0004                     	;# 
    91  0005                     	;# 
    92  0006                     	;# 
    93  0007                     	;# 
    94  0008                     	;# 
    95  0009                     	;# 
    96  000A                     	;# 
    97  000B                     	;# 
    98  000C                     	;# 
    99  0011                     	;# 
   100  0012                     	;# 
   101  0013                     	;# 
   102  0015                     	;# 
   103  0016                     	;# 
   104  0016                     	;# 
   105  0017                     	;# 
   106  0018                     	;# 
   107  0019                     	;# 
   108  001A                     	;# 
   109  001B                     	;# 
   110  001C                     	;# 
   111  008C                     	;# 
   112  0091                     	;# 
   113  0092                     	;# 
   114  0093                     	;# 
   115  0095                     	;# 
   116  0096                     	;# 
   117  0097                     	;# 
   118  0098                     	;# 
   119  0099                     	;# 
   120  009A                     	;# 
   121  009B                     	;# 
   122  009B                     	;# 
   123  009C                     	;# 
   124  009D                     	;# 
   125  009E                     	;# 
   126  009F                     	;# 
   127  010C                     	;# 
   128  0111                     	;# 
   129  0112                     	;# 
   130  0115                     	;# 
   131  0116                     	;# 
   132  0117                     	;# 
   133  0118                     	;# 
   134  0119                     	;# 
   135  011D                     	;# 
   136  011D                     	;# 
   137  018C                     	;# 
   138  0191                     	;# 
   139  0191                     	;# 
   140  0192                     	;# 
   141  0193                     	;# 
   142  0193                     	;# 
   143  0194                     	;# 
   144  0195                     	;# 
   145  0196                     	;# 
   146  0197                     	;# 
   147  0199                     	;# 
   148  019A                     	;# 
   149  019B                     	;# 
   150  019B                     	;# 
   151  019C                     	;# 
   152  019D                     	;# 
   153  019E                     	;# 
   154  019F                     	;# 
   155  020C                     	;# 
   156  028C                     	;# 
   157  030C                     	;# 
   158  038C                     	;# 
   159  0391                     	;# 
   160  0392                     	;# 
   161  0393                     	;# 
   162  0691                     	;# 
   163  0692                     	;# 
   164  0693                     	;# 
   165  0694                     	;# 
   166  0695                     	;# 
   167  0D8E                     	;# 
   168  0D8F                     	;# 
   169  0D90                     	;# 
   170  0D91                     	;# 
   171  0D91                     	;# 
   172  0D92                     	;# 
   173  0D93                     	;# 
   174  0D93                     	;# 
   175  0D94                     	;# 
   176  0D95                     	;# 
   177  0D95                     	;# 
   178  0D96                     	;# 
   179  0D97                     	;# 
   180  0D97                     	;# 
   181  0D98                     	;# 
   182  0D99                     	;# 
   183  0D99                     	;# 
   184  0D9A                     	;# 
   185  0D9B                     	;# 
   186  0D9C                     	;# 
   187  0D9C                     	;# 
   188  0D9D                     	;# 
   189  0D9D                     	;# 
   190  0D9E                     	;# 
   191  0D9F                     	;# 
   192  0DA0                     	;# 
   193  0DA1                     	;# 
   194  0DA1                     	;# 
   195  0DA2                     	;# 
   196  0DA3                     	;# 
   197  0DA3                     	;# 
   198  0DA4                     	;# 
   199  0DA5                     	;# 
   200  0DA5                     	;# 
   201  0DA6                     	;# 
   202  0DA7                     	;# 
   203  0DA7                     	;# 
   204  0DA8                     	;# 
   205  0DA9                     	;# 
   206  0DA9                     	;# 
   207  0DAA                     	;# 
   208  0DAB                     	;# 
   209  0DAC                     	;# 
   210  0DAC                     	;# 
   211  0DAD                     	;# 
   212  0DAD                     	;# 
   213  0DAE                     	;# 
   214  0DAF                     	;# 
   215  0DB0                     	;# 
   216  0DB1                     	;# 
   217  0DB1                     	;# 
   218  0DB2                     	;# 
   219  0DB3                     	;# 
   220  0DB3                     	;# 
   221  0DB4                     	;# 
   222  0DB5                     	;# 
   223  0DB5                     	;# 
   224  0DB6                     	;# 
   225  0DB7                     	;# 
   226  0DB7                     	;# 
   227  0DB8                     	;# 
   228  0DB9                     	;# 
   229  0DB9                     	;# 
   230  0DBA                     	;# 
   231  0DBB                     	;# 
   232  0DBC                     	;# 
   233  0DBC                     	;# 
   234  0DBD                     	;# 
   235  0DBD                     	;# 
   236  0DBE                     	;# 
   237  0DBF                     	;# 
   238  0DC0                     	;# 
   239  0FE4                     	;# 
   240  0FE5                     	;# 
   241  0FE6                     	;# 
   242  0FE7                     	;# 
   243  0FE8                     	;# 
   244  0FE8                     	;# 
   245  0FE9                     	;# 
   246  0FEA                     	;# 
   247  0FEA                     	;# 
   248  0FEB                     	;# 
   249  0FED                     	;# 
   250  0FEE                     	;# 
   251  0FEE                     	;# 
   252  0FEF                     	;# 
   253  0000                     	;# 
   254  0001                     	;# 
   255  0002                     	;# 
   256  0003                     	;# 
   257  0004                     	;# 
   258  0005                     	;# 
   259  0006                     	;# 
   260  0007                     	;# 
   261  0008                     	;# 
   262  0009                     	;# 
   263  000A                     	;# 
   264  000B                     	;# 
   265  000C                     	;# 
   266  0011                     	;# 
   267  0012                     	;# 
   268  0013                     	;# 
   269  0015                     	;# 
   270  0016                     	;# 
   271  0016                     	;# 
   272  0017                     	;# 
   273  0018                     	;# 
   274  0019                     	;# 
   275  001A                     	;# 
   276  001B                     	;# 
   277  001C                     	;# 
   278  008C                     	;# 
   279  0091                     	;# 
   280  0092                     	;# 
   281  0093                     	;# 
   282  0095                     	;# 
   283  0096                     	;# 
   284  0097                     	;# 
   285  0098                     	;# 
   286  0099                     	;# 
   287  009A                     	;# 
   288  009B                     	;# 
   289  009B                     	;# 
   290  009C                     	;# 
   291  009D                     	;# 
   292  009E                     	;# 
   293  009F                     	;# 
   294  010C                     	;# 
   295  0111                     	;# 
   296  0112                     	;# 
   297  0115                     	;# 
   298  0116                     	;# 
   299  0117                     	;# 
   300  0118                     	;# 
   301  0119                     	;# 
   302  011D                     	;# 
   303  011D                     	;# 
   304  018C                     	;# 
   305  0191                     	;# 
   306  0191                     	;# 
   307  0192                     	;# 
   308  0193                     	;# 
   309  0193                     	;# 
   310  0194                     	;# 
   311  0195                     	;# 
   312  0196                     	;# 
   313  0197                     	;# 
   314  0199                     	;# 
   315  019A                     	;# 
   316  019B                     	;# 
   317  019B                     	;# 
   318  019C                     	;# 
   319  019D                     	;# 
   320  019E                     	;# 
   321  019F                     	;# 
   322  020C                     	;# 
   323  028C                     	;# 
   324  030C                     	;# 
   325  038C                     	;# 
   326  0391                     	;# 
   327  0392                     	;# 
   328  0393                     	;# 
   329  0691                     	;# 
   330  0692                     	;# 
   331  0693                     	;# 
   332  0694                     	;# 
   333  0695                     	;# 
   334  0D8E                     	;# 
   335  0D8F                     	;# 
   336  0D90                     	;# 
   337  0D91                     	;# 
   338  0D91                     	;# 
   339  0D92                     	;# 
   340  0D93                     	;# 
   341  0D93                     	;# 
   342  0D94                     	;# 
   343  0D95                     	;# 
   344  0D95                     	;# 
   345  0D96                     	;# 
   346  0D97                     	;# 
   347  0D97                     	;# 
   348  0D98                     	;# 
   349  0D99                     	;# 
   350  0D99                     	;# 
   351  0D9A                     	;# 
   352  0D9B                     	;# 
   353  0D9C                     	;# 
   354  0D9C                     	;# 
   355  0D9D                     	;# 
   356  0D9D                     	;# 
   357  0D9E                     	;# 
   358  0D9F                     	;# 
   359  0DA0                     	;# 
   360  0DA1                     	;# 
   361  0DA1                     	;# 
   362  0DA2                     	;# 
   363  0DA3                     	;# 
   364  0DA3                     	;# 
   365  0DA4                     	;# 
   366  0DA5                     	;# 
   367  0DA5                     	;# 
   368  0DA6                     	;# 
   369  0DA7                     	;# 
   370  0DA7                     	;# 
   371  0DA8                     	;# 
   372  0DA9                     	;# 
   373  0DA9                     	;# 
   374  0DAA                     	;# 
   375  0DAB                     	;# 
   376  0DAC                     	;# 
   377  0DAC                     	;# 
   378  0DAD                     	;# 
   379  0DAD                     	;# 
   380  0DAE                     	;# 
   381  0DAF                     	;# 
   382  0DB0                     	;# 
   383  0DB1                     	;# 
   384  0DB1                     	;# 
   385  0DB2                     	;# 
   386  0DB3                     	;# 
   387  0DB3                     	;# 
   388  0DB4                     	;# 
   389  0DB5                     	;# 
   390  0DB5                     	;# 
   391  0DB6                     	;# 
   392  0DB7                     	;# 
   393  0DB7                     	;# 
   394  0DB8                     	;# 
   395  0DB9                     	;# 
   396  0DB9                     	;# 
   397  0DBA                     	;# 
   398  0DBB                     	;# 
   399  0DBC                     	;# 
   400  0DBC                     	;# 
   401  0DBD                     	;# 
   402  0DBD                     	;# 
   403  0DBE                     	;# 
   404  0DBF                     	;# 
   405  0DC0                     	;# 
   406  0FE4                     	;# 
   407  0FE5                     	;# 
   408  0FE6                     	;# 
   409  0FE7                     	;# 
   410  0FE8                     	;# 
   411  0FE8                     	;# 
   412  0FE9                     	;# 
   413  0FEA                     	;# 
   414  0FEA                     	;# 
   415  0FEB                     	;# 
   416  0FED                     	;# 
   417  0FEE                     	;# 
   418  0FEE                     	;# 
   419  0FEF                     	;# 
   420  0000                     	;# 
   421  0001                     	;# 
   422  0002                     	;# 
   423  0003                     	;# 
   424  0004                     	;# 
   425  0005                     	;# 
   426  0006                     	;# 
   427  0007                     	;# 
   428  0008                     	;# 
   429  0009                     	;# 
   430  000A                     	;# 
   431  000B                     	;# 
   432  000C                     	;# 
   433  0011                     	;# 
   434  0012                     	;# 
   435  0013                     	;# 
   436  0015                     	;# 
   437  0016                     	;# 
   438  0016                     	;# 
   439  0017                     	;# 
   440  0018                     	;# 
   441  0019                     	;# 
   442  001A                     	;# 
   443  001B                     	;# 
   444  001C                     	;# 
   445  008C                     	;# 
   446  0091                     	;# 
   447  0092                     	;# 
   448  0093                     	;# 
   449  0095                     	;# 
   450  0096                     	;# 
   451  0097                     	;# 
   452  0098                     	;# 
   453  0099                     	;# 
   454  009A                     	;# 
   455  009B                     	;# 
   456  009B                     	;# 
   457  009C                     	;# 
   458  009D                     	;# 
   459  009E                     	;# 
   460  009F                     	;# 
   461  010C                     	;# 
   462  0111                     	;# 
   463  0112                     	;# 
   464  0115                     	;# 
   465  0116                     	;# 
   466  0117                     	;# 
   467  0118                     	;# 
   468  0119                     	;# 
   469  011D                     	;# 
   470  011D                     	;# 
   471  018C                     	;# 
   472  0191                     	;# 
   473  0191                     	;# 
   474  0192                     	;# 
   475  0193                     	;# 
   476  0193                     	;# 
   477  0194                     	;# 
   478  0195                     	;# 
   479  0196                     	;# 
   480  0197                     	;# 
   481  0199                     	;# 
   482  019A                     	;# 
   483  019B                     	;# 
   484  019B                     	;# 
   485  019C                     	;# 
   486  019D                     	;# 
   487  019E                     	;# 
   488  019F                     	;# 
   489  020C                     	;# 
   490  028C                     	;# 
   491  030C                     	;# 
   492  038C                     	;# 
   493  0391                     	;# 
   494  0392                     	;# 
   495  0393                     	;# 
   496  0691                     	;# 
   497  0692                     	;# 
   498  0693                     	;# 
   499  0694                     	;# 
   500  0695                     	;# 
   501  0D8E                     	;# 
   502  0D8F                     	;# 
   503  0D90                     	;# 
   504  0D91                     	;# 
   505  0D91                     	;# 
   506  0D92                     	;# 
   507  0D93                     	;# 
   508  0D93                     	;# 
   509  0D94                     	;# 
   510  0D95                     	;# 
   511  0D95                     	;# 
   512  0D96                     	;# 
   513  0D97                     	;# 
   514  0D97                     	;# 
   515  0D98                     	;# 
   516  0D99                     	;# 
   517  0D99                     	;# 
   518  0D9A                     	;# 
   519  0D9B                     	;# 
   520  0D9C                     	;# 
   521  0D9C                     	;# 
   522  0D9D                     	;# 
   523  0D9D                     	;# 
   524  0D9E                     	;# 
   525  0D9F                     	;# 
   526  0DA0                     	;# 
   527  0DA1                     	;# 
   528  0DA1                     	;# 
   529  0DA2                     	;# 
   530  0DA3                     	;# 
   531  0DA3                     	;# 
   532  0DA4                     	;# 
   533  0DA5                     	;# 
   534  0DA5                     	;# 
   535  0DA6                     	;# 
   536  0DA7                     	;# 
   537  0DA7                     	;# 
   538  0DA8                     	;# 
   539  0DA9                     	;# 
   540  0DA9                     	;# 
   541  0DAA                     	;# 
   542  0DAB                     	;# 
   543  0DAC                     	;# 
   544  0DAC                     	;# 
   545  0DAD                     	;# 
   546  0DAD                     	;# 
   547  0DAE                     	;# 
   548  0DAF                     	;# 
   549  0DB0                     	;# 
   550  0DB1                     	;# 
   551  0DB1                     	;# 
   552  0DB2                     	;# 
   553  0DB3                     	;# 
   554  0DB3                     	;# 
   555  0DB4                     	;# 
   556  0DB5                     	;# 
   557  0DB5                     	;# 
   558  0DB6                     	;# 
   559  0DB7                     	;# 
   560  0DB7                     	;# 
   561  0DB8                     	;# 
   562  0DB9                     	;# 
   563  0DB9                     	;# 
   564  0DBA                     	;# 
   565  0DBB                     	;# 
   566  0DBC                     	;# 
   567  0DBC                     	;# 
   568  0DBD                     	;# 
   569  0DBD                     	;# 
   570  0DBE                     	;# 
   571  0DBF                     	;# 
   572  0DC0                     	;# 
   573  0FE4                     	;# 
   574  0FE5                     	;# 
   575  0FE6                     	;# 
   576  0FE7                     	;# 
   577  0FE8                     	;# 
   578  0FE8                     	;# 
   579  0FE9                     	;# 
   580  0FEA                     	;# 
   581  0FEA                     	;# 
   582  0FEB                     	;# 
   583  0FED                     	;# 
   584  0FEE                     	;# 
   585  0FEE                     	;# 
   586  0FEF                     	;# 
   587  0000                     	;# 
   588  0001                     	;# 
   589  0002                     	;# 
   590  0003                     	;# 
   591  0004                     	;# 
   592  0005                     	;# 
   593  0006                     	;# 
   594  0007                     	;# 
   595  0008                     	;# 
   596  0009                     	;# 
   597  000A                     	;# 
   598  000B                     	;# 
   599  000C                     	;# 
   600  0011                     	;# 
   601  0012                     	;# 
   602  0013                     	;# 
   603  0015                     	;# 
   604  0016                     	;# 
   605  0016                     	;# 
   606  0017                     	;# 
   607  0018                     	;# 
   608  0019                     	;# 
   609  001A                     	;# 
   610  001B                     	;# 
   611  001C                     	;# 
   612  008C                     	;# 
   613  0091                     	;# 
   614  0092                     	;# 
   615  0093                     	;# 
   616  0095                     	;# 
   617  0096                     	;# 
   618  0097                     	;# 
   619  0098                     	;# 
   620  0099                     	;# 
   621  009A                     	;# 
   622  009B                     	;# 
   623  009B                     	;# 
   624  009C                     	;# 
   625  009D                     	;# 
   626  009E                     	;# 
   627  009F                     	;# 
   628  010C                     	;# 
   629  0111                     	;# 
   630  0112                     	;# 
   631  0115                     	;# 
   632  0116                     	;# 
   633  0117                     	;# 
   634  0118                     	;# 
   635  0119                     	;# 
   636  011D                     	;# 
   637  011D                     	;# 
   638  018C                     	;# 
   639  0191                     	;# 
   640  0191                     	;# 
   641  0192                     	;# 
   642  0193                     	;# 
   643  0193                     	;# 
   644  0194                     	;# 
   645  0195                     	;# 
   646  0196                     	;# 
   647  0197                     	;# 
   648  0199                     	;# 
   649  019A                     	;# 
   650  019B                     	;# 
   651  019B                     	;# 
   652  019C                     	;# 
   653  019D                     	;# 
   654  019E                     	;# 
   655  019F                     	;# 
   656  020C                     	;# 
   657  028C                     	;# 
   658  030C                     	;# 
   659  038C                     	;# 
   660  0391                     	;# 
   661  0392                     	;# 
   662  0393                     	;# 
   663  0691                     	;# 
   664  0692                     	;# 
   665  0693                     	;# 
   666  0694                     	;# 
   667  0695                     	;# 
   668  0D8E                     	;# 
   669  0D8F                     	;# 
   670  0D90                     	;# 
   671  0D91                     	;# 
   672  0D91                     	;# 
   673  0D92                     	;# 
   674  0D93                     	;# 
   675  0D93                     	;# 
   676  0D94                     	;# 
   677  0D95                     	;# 
   678  0D95                     	;# 
   679  0D96                     	;# 
   680  0D97                     	;# 
   681  0D97                     	;# 
   682  0D98                     	;# 
   683  0D99                     	;# 
   684  0D99                     	;# 
   685  0D9A                     	;# 
   686  0D9B                     	;# 
   687  0D9C                     	;# 
   688  0D9C                     	;# 
   689  0D9D                     	;# 
   690  0D9D                     	;# 
   691  0D9E                     	;# 
   692  0D9F                     	;# 
   693  0DA0                     	;# 
   694  0DA1                     	;# 
   695  0DA1                     	;# 
   696  0DA2                     	;# 
   697  0DA3                     	;# 
   698  0DA3                     	;# 
   699  0DA4                     	;# 
   700  0DA5                     	;# 
   701  0DA5                     	;# 
   702  0DA6                     	;# 
   703  0DA7                     	;# 
   704  0DA7                     	;# 
   705  0DA8                     	;# 
   706  0DA9                     	;# 
   707  0DA9                     	;# 
   708  0DAA                     	;# 
   709  0DAB                     	;# 
   710  0DAC                     	;# 
   711  0DAC                     	;# 
   712  0DAD                     	;# 
   713  0DAD                     	;# 
   714  0DAE                     	;# 
   715  0DAF                     	;# 
   716  0DB0                     	;# 
   717  0DB1                     	;# 
   718  0DB1                     	;# 
   719  0DB2                     	;# 
   720  0DB3                     	;# 
   721  0DB3                     	;# 
   722  0DB4                     	;# 
   723  0DB5                     	;# 
   724  0DB5                     	;# 
   725  0DB6                     	;# 
   726  0DB7                     	;# 
   727  0DB7                     	;# 
   728  0DB8                     	;# 
   729  0DB9                     	;# 
   730  0DB9                     	;# 
   731  0DBA                     	;# 
   732  0DBB                     	;# 
   733  0DBC                     	;# 
   734  0DBC                     	;# 
   735  0DBD                     	;# 
   736  0DBD                     	;# 
   737  0DBE                     	;# 
   738  0DBF                     	;# 
   739  0DC0                     	;# 
   740  0FE4                     	;# 
   741  0FE5                     	;# 
   742  0FE6                     	;# 
   743  0FE7                     	;# 
   744  0FE8                     	;# 
   745  0FE8                     	;# 
   746  0FE9                     	;# 
   747  0FEA                     	;# 
   748  0FEA                     	;# 
   749  0FEB                     	;# 
   750  0FED                     	;# 
   751  0FEE                     	;# 
   752  0FEE                     	;# 
   753  0FEF                     	;# 
   754  0000                     	;# 
   755  0001                     	;# 
   756  0002                     	;# 
   757  0003                     	;# 
   758  0004                     	;# 
   759  0005                     	;# 
   760  0006                     	;# 
   761  0007                     	;# 
   762  0008                     	;# 
   763  0009                     	;# 
   764  000A                     	;# 
   765  000B                     	;# 
   766  000C                     	;# 
   767  0011                     	;# 
   768  0012                     	;# 
   769  0013                     	;# 
   770  0015                     	;# 
   771  0016                     	;# 
   772  0016                     	;# 
   773  0017                     	;# 
   774  0018                     	;# 
   775  0019                     	;# 
   776  001A                     	;# 
   777  001B                     	;# 
   778  001C                     	;# 
   779  008C                     	;# 
   780  0091                     	;# 
   781  0092                     	;# 
   782  0093                     	;# 
   783  0095                     	;# 
   784  0096                     	;# 
   785  0097                     	;# 
   786  0098                     	;# 
   787  0099                     	;# 
   788  009A                     	;# 
   789  009B                     	;# 
   790  009B                     	;# 
   791  009C                     	;# 
   792  009D                     	;# 
   793  009E                     	;# 
   794  009F                     	;# 
   795  010C                     	;# 
   796  0111                     	;# 
   797  0112                     	;# 
   798  0115                     	;# 
   799  0116                     	;# 
   800  0117                     	;# 
   801  0118                     	;# 
   802  0119                     	;# 
   803  011D                     	;# 
   804  011D                     	;# 
   805  018C                     	;# 
   806  0191                     	;# 
   807  0191                     	;# 
   808  0192                     	;# 
   809  0193                     	;# 
   810  0193                     	;# 
   811  0194                     	;# 
   812  0195                     	;# 
   813  0196                     	;# 
   814  0197                     	;# 
   815  0199                     	;# 
   816  019A                     	;# 
   817  019B                     	;# 
   818  019B                     	;# 
   819  019C                     	;# 
   820  019D                     	;# 
   821  019E                     	;# 
   822  019F                     	;# 
   823  020C                     	;# 
   824  028C                     	;# 
   825  030C                     	;# 
   826  038C                     	;# 
   827  0391                     	;# 
   828  0392                     	;# 
   829  0393                     	;# 
   830  0691                     	;# 
   831  0692                     	;# 
   832  0693                     	;# 
   833  0694                     	;# 
   834  0695                     	;# 
   835  0D8E                     	;# 
   836  0D8F                     	;# 
   837  0D90                     	;# 
   838  0D91                     	;# 
   839  0D91                     	;# 
   840  0D92                     	;# 
   841  0D93                     	;# 
   842  0D93                     	;# 
   843  0D94                     	;# 
   844  0D95                     	;# 
   845  0D95                     	;# 
   846  0D96                     	;# 
   847  0D97                     	;# 
   848  0D97                     	;# 
   849  0D98                     	;# 
   850  0D99                     	;# 
   851  0D99                     	;# 
   852  0D9A                     	;# 
   853  0D9B                     	;# 
   854  0D9C                     	;# 
   855  0D9C                     	;# 
   856  0D9D                     	;# 
   857  0D9D                     	;# 
   858  0D9E                     	;# 
   859  0D9F                     	;# 
   860  0DA0                     	;# 
   861  0DA1                     	;# 
   862  0DA1                     	;# 
   863  0DA2                     	;# 
   864  0DA3                     	;# 
   865  0DA3                     	;# 
   866  0DA4                     	;# 
   867  0DA5                     	;# 
   868  0DA5                     	;# 
   869  0DA6                     	;# 
   870  0DA7                     	;# 
   871  0DA7                     	;# 
   872  0DA8                     	;# 
   873  0DA9                     	;# 
   874  0DA9                     	;# 
   875  0DAA                     	;# 
   876  0DAB                     	;# 
   877  0DAC                     	;# 
   878  0DAC                     	;# 
   879  0DAD                     	;# 
   880  0DAD                     	;# 
   881  0DAE                     	;# 
   882  0DAF                     	;# 
   883  0DB0                     	;# 
   884  0DB1                     	;# 
   885  0DB1                     	;# 
   886  0DB2                     	;# 
   887  0DB3                     	;# 
   888  0DB3                     	;# 
   889  0DB4                     	;# 
   890  0DB5                     	;# 
   891  0DB5                     	;# 
   892  0DB6                     	;# 
   893  0DB7                     	;# 
   894  0DB7                     	;# 
   895  0DB8                     	;# 
   896  0DB9                     	;# 
   897  0DB9                     	;# 
   898  0DBA                     	;# 
   899  0DBB                     	;# 
   900  0DBC                     	;# 
   901  0DBC                     	;# 
   902  0DBD                     	;# 
   903  0DBD                     	;# 
   904  0DBE                     	;# 
   905  0DBF                     	;# 
   906  0DC0                     	;# 
   907  0FE4                     	;# 
   908  0FE5                     	;# 
   909  0FE6                     	;# 
   910  0FE7                     	;# 
   911  0FE8                     	;# 
   912  0FE8                     	;# 
   913  0FE9                     	;# 
   914  0FEA                     	;# 
   915  0FEA                     	;# 
   916  0FEB                     	;# 
   917  0FED                     	;# 
   918  0FEE                     	;# 
   919  0FEE                     	;# 
   920  0FEF                     	;# 
   921                           
   922                           	psect	idataBANK0
   923  0651                     __pidataBANK0:	
   924                           
   925                           ;initializer for RunLeftFlash@left_delay
   926  0651  34FA               	retlw	250
   927  0652  3400               	retlw	0
   928                           
   929                           ;initializer for RunRightFlash@right_delay
   930  0653  34FA               	retlw	250
   931  0654  3400               	retlw	0
   932                           
   933                           ;initializer for RunGame@num_leds_lit
   934  0655  3401               	retlw	1
   935                           
   936                           	psect	idataBANK1
   937  058C                     __pidataBANK1:	
   938                           
   939                           ;initializer for _PORTTable
   940  058C  3401               	retlw	1
   941  058D  3402               	retlw	2
   942  058E  3410               	retlw	16
   943  058F  3420               	retlw	32
   944  0590  3420               	retlw	32
   945  0591  3401               	retlw	1
   946  0592  3410               	retlw	16
   947  0593  3402               	retlw	2
   948                           
   949                           ;initializer for _TRISTable
   950  0594  34FC               	retlw	252
   951  0595  34FC               	retlw	252
   952  0596  34CF               	retlw	207
   953  0597  34CF               	retlw	207
   954  0598  34DE               	retlw	222
   955  0599  34DE               	retlw	222
   956  059A  34ED               	retlw	237
   957  059B  34ED               	retlw	237
   958                           
   959                           	psect	nvBANK0
   960  0062                     __pnvBANK0:	
   961  0062                     _TMR0_InterruptHandler:	
   962  0062                     	ds	2
   963  0064                     _IOCAF3_InterruptHandler:	
   964  0064                     	ds	2
   965  0066                     _IOCAF2_InterruptHandler:	
   966  0066                     	ds	2
   967  0068                     _timer0ReloadVal:	
   968  0068                     	ds	1
   969  000C                     _PORTAbits	set	12
   970  000C                     _PORTA	set	12
   971  0015                     _TMR0	set	21
   972  000B                     _INTCONbits	set	11
   973  0095                     _OPTION_REG	set	149
   974  0097                     _WDTCON	set	151
   975  0098                     _OSCTUNE	set	152
   976  0099                     _OSCCON	set	153
   977  0095                     _OPTION_REGbits	set	149
   978  008C                     _TRISA	set	140
   979  0116                     _BORCON	set	278
   980  011D                     _APFCON	set	285
   981  010C                     _LATA	set	268
   982  0197                     _VREGCONbits	set	407
   983  018C                     _ANSELA	set	396
   984  020C                     _WPUA	set	524
   985  028C                     _ODCONA	set	652
   986  0391                     _IOCAPbits	set	913
   987  0392                     _IOCANbits	set	914
   988  0393                     _IOCAFbits	set	915
   989                           
   990                           ; #config settings
   991  0000                     
   992                           	psect	cinit
   993  0018                     start_initialization:	
   994  0018                     __initialization:	
   995                           
   996                           ; Initialize objects allocated to BANK0
   997  0018  3051               	movlw	low __pidataBANK0
   998  0019  0084               	movwf	4
   999  001A  3086               	movlw	(high __pidataBANK0)| (0+128)
  1000  001B  0085               	movwf	5
  1001  001C  3069               	movlw	low __pdataBANK0
  1002  001D  0086               	movwf	6
  1003  001E  3000               	movlw	high __pdataBANK0
  1004  001F  0087               	movwf	7
  1005  0020  3005               	movlw	5
  1006  0021  262D               	fcall	init_ram
  1007                           
  1008                           ; Initialize objects allocated to BANK1
  1009  0022  308C               	movlw	low __pidataBANK1
  1010  0023  0084               	movwf	4
  1011  0024  3085               	movlw	(high __pidataBANK1)| (0+128)
  1012  0025  0085               	movwf	5
  1013  0026  30A0               	movlw	low __pdataBANK1
  1014  0027  0086               	movwf	6
  1015  0028  3000               	movlw	high __pdataBANK1
  1016  0029  0087               	movwf	7
  1017  002A  3010               	movlw	16
  1018  002B  262D               	fcall	init_ram
  1019                           
  1020                           ; Clear objects allocated to COMMON
  1021  002C  01F6               	clrf	__pbssCOMMON& (0+127)
  1022  002D  01F7               	clrf	(__pbssCOMMON+1)& (0+127)
  1023  002E  01F8               	clrf	(__pbssCOMMON+2)& (0+127)
  1024  002F  01F9               	clrf	(__pbssCOMMON+3)& (0+127)
  1025                           
  1026                           ; Clear objects allocated to BANK0
  1027  0030  3020               	movlw	low __pbssBANK0
  1028  0031  0084               	movwf	4
  1029  0032  3000               	movlw	high __pbssBANK0
  1030  0033  0085               	movwf	5
  1031  0034  3032               	movlw	50
  1032  0035  2633               	fcall	clear_ram0
  1033  0036                     end_of_initialization:	
  1034                           ;End of C runtime variable initialization code
  1035                           
  1036  0036                     __end_of__initialization:	
  1037  0036  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  1038  0037  0020               	movlb	0
  1039  0038  2CB6               	ljmp	_main	;jump to C main() function
  1040                           
  1041                           	psect	bssCOMMON
  1042  0076                     __pbssCOMMON:	
  1043  0076                     _RightButtonState:	
  1044  0076                     	ds	1
  1045  0077                     _LeftButtonState:	
  1046  0077                     	ds	1
  1047  0078                     _RightDebounceTimer:	
  1048  0078                     	ds	1
  1049  0079                     _LeftDebounceTimer:	
  1050  0079                     	ds	1
  1051                           
  1052                           	psect	bssBANK0
  1053  0020                     __pbssBANK0:	
  1054  0020                     _PatternDelay:	
  1055  0020                     	ds	16
  1056  0030                     _PatternState:	
  1057  0030                     	ds	8
  1058  0038                     RunGame@next_decrement_time:	
  1059  0038                     	ds	4
  1060  003C                     RunGame@last_button_press_time:	
  1061  003C                     	ds	4
  1062  0040                     _LastLeftButtonPressTime:	
  1063  0040                     	ds	4
  1064  0044                     _LastRightButtonPressTime:	
  1065  0044                     	ds	4
  1066  0048                     _WakeTimer:	
  1067  0048                     	ds	4
  1068  004C                     CheckForButtonPushes@LeftButtonQuickPressCount:	
  1069  004C                     	ds	1
  1070  004D                     CheckForButtonPushes@LastRightButtonState:	
  1071  004D                     	ds	1
  1072  004E                     CheckForButtonPushes@LastLeftButtonState:	
  1073  004E                     	ds	1
  1074  004F                     _ShutdownDelayTimer:	
  1075  004F                     	ds	1
  1076  0050                     _LEDOns:	
  1077  0050                     	ds	1
  1078  0051                     _LEDState:	
  1079  0051                     	ds	1
  1080                           
  1081                           	psect	dataBANK0
  1082  0069                     __pdataBANK0:	
  1083  0069                     RunLeftFlash@left_delay:	
  1084  0069                     	ds	2
  1085  006B                     RunRightFlash@right_delay:	
  1086  006B                     	ds	2
  1087  006D                     RunGame@num_leds_lit:	
  1088  006D                     	ds	1
  1089                           
  1090                           	psect	dataBANK1
  1091  00A0                     __pdataBANK1:	
  1092  00A0                     _PORTTable:	
  1093  00A0                     	ds	8
  1094  00A8                     _TRISTable:	
  1095  00A8                     	ds	8
  1096                           
  1097                           	psect	inittext
  1098  062D                     init_ram:	
  1099  062D  00FE               	movwf	126
  1100  062E                     initloop:	
  1101  062E  0012               	moviw fsr0++
  1102  062F  001E               	movwi fsr1++
  1103  0630  0BFE               	decfsz	126,f
  1104  0631  2E2E               	goto	initloop
  1105  0632  3400               	retlw	0
  1106                           
  1107                           	psect	clrtext
  1108  0633                     clear_ram0:	
  1109                           ;	Called with FSR0 containing the base address, and
  1110                           ;	WREG with the size to clear
  1111                           
  1112  0633  0064               	clrwdt	;clear the watchdog before getting into this loop
  1113  0634                     clrloop0:	
  1114  0634  0180               	clrf	0	;clear RAM location pointed to by FSR
  1115  0635  3101               	addfsr 0,1
  1116  0636  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  1117  0637  2E34               	goto	clrloop0	;have we reached the end yet?
  1118  0638  3400               	retlw	0	;all done for this memory range, return
  1119                           
  1120                           	psect	cstackCOMMON
  1121  0070                     __pcstackCOMMON:	
  1122  0070                     ?_IOCAF2_DefaultInterruptHandler:	
  1123  0070                     ??_IOCAF2_DefaultInterruptHandler:	
  1124                           ; 1 bytes @ 0x0
  1125                           
  1126  0070                     ?_IOCAF3_DefaultInterruptHandler:	
  1127                           ; 1 bytes @ 0x0
  1128                           
  1129  0070                     ??_IOCAF3_DefaultInterruptHandler:	
  1130                           ; 1 bytes @ 0x0
  1131                           
  1132  0070                     ?_IOCAF2_ISR:	
  1133                           ; 1 bytes @ 0x0
  1134                           
  1135  0070                     ??_IOCAF2_ISR:	
  1136                           ; 1 bytes @ 0x0
  1137                           
  1138  0070                     ?_IOCAF3_ISR:	
  1139                           ; 1 bytes @ 0x0
  1140                           
  1141  0070                     ??_IOCAF3_ISR:	
  1142                           ; 1 bytes @ 0x0
  1143                           
  1144  0070                     ?_OSCILLATOR_Initialize:	
  1145                           ; 1 bytes @ 0x0
  1146                           
  1147  0070                     ?_WDT_Initialize:	
  1148                           ; 1 bytes @ 0x0
  1149                           
  1150  0070                     ?_TMR0_Initialize:	
  1151                           ; 1 bytes @ 0x0
  1152                           
  1153  0070                     ?_TMR0_ISR:	
  1154                           ; 1 bytes @ 0x0
  1155                           
  1156  0070                     ?_TMR0_CallBack:	
  1157                           ; 1 bytes @ 0x0
  1158                           
  1159  0070                     ?_PIN_MANAGER_Initialize:	
  1160                           ; 1 bytes @ 0x0
  1161                           
  1162  0070                     ?_PIN_MANAGER_IOC:	
  1163                           ; 1 bytes @ 0x0
  1164                           
  1165  0070                     ??_PIN_MANAGER_IOC:	
  1166                           ; 1 bytes @ 0x0
  1167                           
  1168  0070                     ?_SYSTEM_Initialize:	
  1169                           ; 1 bytes @ 0x0
  1170                           
  1171  0070                     ?_INTERRUPT_InterruptManager:	
  1172                           ; 1 bytes @ 0x0
  1173                           
  1174  0070                     ?_SetLEDOn:	
  1175                           ; 1 bytes @ 0x0
  1176                           
  1177  0070                     ?_SetLEDOff:	
  1178                           ; 1 bytes @ 0x0
  1179                           
  1180  0070                     ?_SetAllLEDsOff:	
  1181                           ; 1 bytes @ 0x0
  1182                           
  1183  0070                     ?_TMR0_Callback:	
  1184                           ; 1 bytes @ 0x0
  1185                           
  1186  0070                     ??_TMR0_Callback:	
  1187                           ; 1 bytes @ 0x0
  1188                           
  1189  0070                     ?_RightButtonPressedRaw:	
  1190                           ; 1 bytes @ 0x0
  1191                           
  1192  0070                     ?_LeftButtonPressedRaw:	
  1193                           ; 1 bytes @ 0x0
  1194                           
  1195  0070                     ?_RightButtonPressed:	
  1196                           ; 1 bytes @ 0x0
  1197                           
  1198  0070                     ?_LeftButtonPressed:	
  1199                           ; 1 bytes @ 0x0
  1200                           
  1201  0070                     ?_RunRightFlash:	
  1202                           ; 1 bytes @ 0x0
  1203                           
  1204  0070                     ?_RunLeftFlash:	
  1205                           ; 1 bytes @ 0x0
  1206                           
  1207  0070                     ?_RunGame:	
  1208                           ; 1 bytes @ 0x0
  1209                           
  1210  0070                     ?_CheckForButtonPushes:	
  1211                           ; 1 bytes @ 0x0
  1212                           
  1213  0070                     ?_main:	
  1214                           ; 1 bytes @ 0x0
  1215                           
  1216                           
  1217                           ; 1 bytes @ 0x0
  1218  0070                     	ds	2
  1219  0072                     TMR0_Callback@i:	
  1220                           
  1221                           ; 1 bytes @ 0x2
  1222  0072                     	ds	1
  1223  0073                     ??_TMR0_ISR:	
  1224  0073                     ??_TMR0_CallBack:	
  1225                           ; 1 bytes @ 0x3
  1226                           
  1227  0073                     ??_INTERRUPT_InterruptManager:	
  1228                           ; 1 bytes @ 0x3
  1229                           
  1230                           
  1231                           ; 1 bytes @ 0x3
  1232  0073                     	ds	1
  1233  0074                     ?_IOCAF2_SetInterruptHandler:	
  1234  0074                     ?_IOCAF3_SetInterruptHandler:	
  1235                           ; 1 bytes @ 0x4
  1236                           
  1237  0074                     ??_OSCILLATOR_Initialize:	
  1238                           ; 1 bytes @ 0x4
  1239                           
  1240  0074                     ??_WDT_Initialize:	
  1241                           ; 1 bytes @ 0x4
  1242                           
  1243  0074                     ??_TMR0_Initialize:	
  1244                           ; 1 bytes @ 0x4
  1245                           
  1246  0074                     ?_TMR0_SetInterruptHandler:	
  1247                           ; 1 bytes @ 0x4
  1248                           
  1249  0074                     ??_SetLEDOn:	
  1250                           ; 1 bytes @ 0x4
  1251                           
  1252  0074                     ??_SetLEDOff:	
  1253                           ; 1 bytes @ 0x4
  1254                           
  1255  0074                     ??_SetAllLEDsOff:	
  1256                           ; 1 bytes @ 0x4
  1257                           
  1258  0074                     ??_RightButtonPressedRaw:	
  1259                           ; 1 bytes @ 0x4
  1260                           
  1261  0074                     ??_LeftButtonPressedRaw:	
  1262                           ; 1 bytes @ 0x4
  1263                           
  1264  0074                     ??_RightButtonPressed:	
  1265                           ; 1 bytes @ 0x4
  1266                           
  1267  0074                     ??_LeftButtonPressed:	
  1268                           ; 1 bytes @ 0x4
  1269                           
  1270  0074                     ??___wmul:	
  1271                           ; 1 bytes @ 0x4
  1272                           
  1273  0074                     _CheckForButtonPushes$440:	
  1274                           ; 1 bytes @ 0x4
  1275                           
  1276  0074                     IOCAF2_SetInterruptHandler@InterruptHandler:	
  1277                           ; 1 bytes @ 0x4
  1278                           
  1279  0074                     IOCAF3_SetInterruptHandler@InterruptHandler:	
  1280                           ; 2 bytes @ 0x4
  1281                           
  1282  0074                     TMR0_SetInterruptHandler@InterruptHandler:	
  1283                           ; 2 bytes @ 0x4
  1284                           
  1285  0074                     ___wmul@product:	
  1286                           ; 2 bytes @ 0x4
  1287                           
  1288                           
  1289                           ; 2 bytes @ 0x4
  1290  0074                     	ds	1
  1291  0075                     SetLEDOn@LED:	
  1292  0075                     SetLEDOff@LED:	
  1293                           ; 1 bytes @ 0x5
  1294                           
  1295                           
  1296                           ; 1 bytes @ 0x5
  1297  0075                     	ds	1
  1298  0076                     ??_IOCAF2_SetInterruptHandler:	
  1299  0076                     ??_IOCAF3_SetInterruptHandler:	
  1300                           ; 1 bytes @ 0x6
  1301                           
  1302  0076                     ??_PIN_MANAGER_Initialize:	
  1303                           ; 1 bytes @ 0x6
  1304                           
  1305  0076                     ??_SYSTEM_Initialize:	
  1306                           ; 1 bytes @ 0x6
  1307                           
  1308  0076                     ??_TMR0_SetInterruptHandler:	
  1309                           ; 1 bytes @ 0x6
  1310                           
  1311                           
  1312                           	psect	cstackBANK0
  1313  0052                     __pcstackBANK0:	
  1314                           ; 1 bytes @ 0x6
  1315                           
  1316  0052                     ??_RunGame:	
  1317  0052                     ??_CheckForButtonPushes:	
  1318                           ; 1 bytes @ 0x0
  1319                           
  1320  0052                     ?___wmul:	
  1321                           ; 1 bytes @ 0x0
  1322                           
  1323  0052                     ___wmul@multiplier:	
  1324                           ; 2 bytes @ 0x0
  1325                           
  1326                           
  1327                           ; 2 bytes @ 0x0
  1328  0052                     	ds	2
  1329  0054                     ___wmul@multiplicand:	
  1330                           
  1331                           ; 2 bytes @ 0x2
  1332  0054                     	ds	2
  1333  0056                     ?___lwdiv:	
  1334  0056                     ___lwdiv@divisor:	
  1335                           ; 2 bytes @ 0x4
  1336                           
  1337                           
  1338                           ; 2 bytes @ 0x4
  1339  0056                     	ds	2
  1340  0058                     ___lwdiv@dividend:	
  1341                           
  1342                           ; 2 bytes @ 0x6
  1343  0058                     	ds	2
  1344  005A                     ??___lwdiv:	
  1345                           
  1346                           ; 1 bytes @ 0x8
  1347  005A                     	ds	1
  1348  005B                     ___lwdiv@quotient:	
  1349                           
  1350                           ; 2 bytes @ 0x9
  1351  005B                     	ds	2
  1352  005D                     ___lwdiv@counter:	
  1353                           
  1354                           ; 1 bytes @ 0xB
  1355  005D                     	ds	1
  1356  005E                     ??_RunRightFlash:	
  1357  005E                     ??_RunLeftFlash:	
  1358                           ; 1 bytes @ 0xC
  1359                           
  1360                           
  1361                           ; 1 bytes @ 0xC
  1362  005E                     	ds	1
  1363  005F                     ??_main:	
  1364                           
  1365                           ; 1 bytes @ 0xD
  1366  005F                     	ds	1
  1367  0060                     main@APatternIsRunning:	
  1368                           
  1369                           ; 1 bytes @ 0xE
  1370  0060                     	ds	1
  1371  0061                     main@i:	
  1372                           
  1373                           ; 1 bytes @ 0xF
  1374  0061                     	ds	1
  1375                           
  1376                           	psect	maintext
  1377  04B6                     __pmaintext:	
  1378 ;;
  1379 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  1380 ;;
  1381 ;; *************** function _main *****************
  1382 ;; Defined at:
  1383 ;;		line 879 in file "main.c"
  1384 ;; Parameters:    Size  Location     Type
  1385 ;;		None
  1386 ;; Auto vars:     Size  Location     Type
  1387 ;;  i               1   15[BANK0 ] unsigned char 
  1388 ;;  APatternIsRu    1   14[BANK0 ] unsigned char 
  1389 ;; Return value:  Size  Location     Type
  1390 ;;                  1    wreg      void 
  1391 ;; Registers used:
  1392 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1393 ;; Tracked objects:
  1394 ;;		On entry : B1F/0
  1395 ;;		On exit  : 0/0
  1396 ;;		Unchanged: 0/0
  1397 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1398 ;;      Params:         0       0       0       0
  1399 ;;      Locals:         0       2       0       0
  1400 ;;      Temps:          0       1       0       0
  1401 ;;      Totals:         0       3       0       0
  1402 ;;Total ram usage:        3 bytes
  1403 ;; Hardware stack levels required when called:    7
  1404 ;; This function calls:
  1405 ;;		_CheckForButtonPushes
  1406 ;;		_RunGame
  1407 ;;		_RunLeftFlash
  1408 ;;		_RunRightFlash
  1409 ;;		_SYSTEM_Initialize
  1410 ;;		_SetAllLEDsOff
  1411 ;;		_TMR0_SetInterruptHandler
  1412 ;; This function is called by:
  1413 ;;		Startup code after reset
  1414 ;; This function uses a non-reentrant model
  1415 ;;
  1416                           
  1417                           
  1418                           ;psect for function _main
  1419  04B6                     _main:	
  1420                           
  1421                           ;main.c: 882: SYSTEM_Initialize();
  1422                           
  1423                           ;incstack = 0
  1424                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1425  04B6  2656               	fcall	_SYSTEM_Initialize
  1426                           
  1427                           ;main.c: 884: TMR0_SetInterruptHandler(TMR0_Callback);
  1428  04B7  3053               	movlw	low _TMR0_Callback
  1429  04B8  00F4               	movwf	TMR0_SetInterruptHandler@InterruptHandler
  1430  04B9  3004               	movlw	high _TMR0_Callback
  1431  04BA  00F5               	movwf	TMR0_SetInterruptHandler@InterruptHandler+1
  1432  04BB  2639               	fcall	_TMR0_SetInterruptHandler
  1433                           
  1434                           ;main.c: 890: (INTCONbits.GIE = 1);
  1435  04BC  178B               	bsf	11,7	;volatile
  1436                           
  1437                           ;main.c: 893: (INTCONbits.PEIE = 1);
  1438  04BD  170B               	bsf	11,6	;volatile
  1439                           
  1440                           ;main.c: 901: uint8_t i;
  1441                           ;main.c: 902: bool APatternIsRunning = 0;
  1442  04BE  0020               	movlb	0	; select bank0
  1443  04BF  01E0               	clrf	main@APatternIsRunning
  1444  04C0                     l2348:	
  1445                           ;main.c: 904: while (1)
  1446                           
  1447                           
  1448                           ;main.c: 905: {
  1449                           ;main.c: 906: RunRightFlash();
  1450  04C0  21C6               	fcall	_RunRightFlash
  1451                           
  1452                           ;main.c: 907: RunLeftFlash();
  1453  04C1  22AA               	fcall	_RunLeftFlash
  1454                           
  1455                           ;main.c: 908: RunGame();
  1456  04C2  2039               	fcall	_RunGame
  1457                           
  1458                           ;main.c: 910: APatternIsRunning = 0;
  1459  04C3  0020               	movlb	0	; select bank0
  1460  04C4  01E0               	clrf	main@APatternIsRunning
  1461                           
  1462                           ;main.c: 911: for (i=0; i < 8; i++)
  1463  04C5  01E1               	clrf	main@i
  1464  04C6  3008               	movlw	8
  1465  04C7  0261               	subwf	main@i,w
  1466  04C8  1803               	btfsc	3,0
  1467  04C9  2CDB               	goto	l2370
  1468  04CA                     l2362:	
  1469                           
  1470                           ;main.c: 912: {
  1471                           ;main.c: 913: if (PatternState[i] != 0)
  1472  04CA  0861               	movf	main@i,w
  1473  04CB  3E30               	addlw	(low (_PatternState| 0))& (0+255)
  1474  04CC  0086               	movwf	6
  1475  04CD  0187               	clrf	7
  1476  04CE  0801               	movf	1,w
  1477  04CF  1903               	btfsc	3,2
  1478  04D0  2CD3               	goto	l2366
  1479                           
  1480                           ;main.c: 914: {
  1481                           ;main.c: 915: APatternIsRunning = 1;
  1482  04D1  01E0               	clrf	main@APatternIsRunning
  1483  04D2  0AE0               	incf	main@APatternIsRunning,f
  1484  04D3                     l2366:	
  1485  04D3  3001               	movlw	1
  1486  04D4  00DF               	movwf	??_main
  1487  04D5  085F               	movf	??_main,w
  1488  04D6  07E1               	addwf	main@i,f
  1489  04D7  3008               	movlw	8
  1490  04D8  0261               	subwf	main@i,w
  1491  04D9  1C03               	skipc
  1492  04DA  2CCA               	goto	l2362
  1493  04DB                     l2370:	
  1494                           
  1495                           ;main.c: 916: }
  1496                           ;main.c: 917: }
  1497                           ;main.c: 918: if ((!APatternIsRunning && RightDebounceTimer == 0 && LeftDebounceTimer ==
      +                           0) || (WakeTimer > (5UL * 60UL * 1000UL)))
  1498  04DB  0860               	movf	main@APatternIsRunning,w
  1499  04DC  1D03               	btfss	3,2
  1500  04DD  2CE3               	goto	l2376
  1501  04DE  0878               	movf	_RightDebounceTimer,w	;volatile
  1502  04DF  1903               	btfsc	3,2
  1503  04E0  0879               	movf	_LeftDebounceTimer,w	;volatile
  1504  04E1  1903               	btfsc	3,2
  1505  04E2  2CEE               	goto	l2378
  1506  04E3                     l2376:	
  1507  04E3  084B               	movf	_WakeTimer+3,w	;volatile
  1508  04E4  1D03               	btfss	3,2
  1509  04E5  2CEE               	goto	l2378
  1510  04E6  30E1               	movlw	225
  1511  04E7  0248               	subwf	_WakeTimer,w	;volatile
  1512  04E8  3093               	movlw	147
  1513  04E9  3B49               	subwfb	_WakeTimer+1,w	;volatile
  1514  04EA  3004               	movlw	4
  1515  04EB  3B4A               	subwfb	_WakeTimer+2,w	;volatile
  1516  04EC  1C03               	btfss	3,0
  1517  04ED  2D15               	goto	l2394
  1518  04EE                     l2378:	
  1519                           
  1520                           ;main.c: 919: {
  1521                           ;main.c: 920: SetAllLEDsOff();
  1522  04EE  265F               	fcall	_SetAllLEDsOff
  1523                           
  1524                           ;main.c: 922: _delay((unsigned long)((5)*(16000000/4000.0)));
  1525  04EF  301A               	movlw	26
  1526  04F0  0020               	movlb	0	; select bank0
  1527  04F1  00DF               	movwf	??_main
  1528  04F2  30F8               	movlw	248
  1529  04F3                     u2397:	
  1530  04F3  0B89               	decfsz	9,f
  1531  04F4  2CF3               	goto	u2397
  1532  04F5  0BDF               	decfsz	??_main,f
  1533  04F6  2CF3               	goto	u2397
  1534  04F7  0000               	nop
  1535                           
  1536                           ;main.c: 924: ShutdownDelayTimer = 100;
  1537  04F8  3064               	movlw	100
  1538  04F9  0020               	movlb	0	; select bank0
  1539  04FA  00DF               	movwf	??_main
  1540  04FB  085F               	movf	??_main,w
  1541  04FC  00CF               	movwf	_ShutdownDelayTimer	;volatile
  1542  04FD                     l2384:	
  1543                           ;main.c: 927: {
  1544                           
  1545                           ;main.c: 926: while (ShutdownDelayTimer && !CheckForButtonPushes())
  1546                           
  1547  04FD  0020               	movlb	0	; select bank0
  1548  04FE  084F               	movf	_ShutdownDelayTimer,w	;volatile
  1549  04FF  1903               	btfsc	3,2
  1550  0500  2D05               	goto	l2388
  1551  0501  238E               	fcall	_CheckForButtonPushes
  1552  0502  3A00               	xorlw	0
  1553  0503  1903               	skipnz
  1554  0504  2CFD               	goto	l2384
  1555  0505                     l2388:	
  1556                           
  1557                           ;main.c: 928: }
  1558                           ;main.c: 930: if (ShutdownDelayTimer == 0)
  1559  0505  0020               	movlb	0	; select bank0
  1560  0506  084F               	movf	_ShutdownDelayTimer,w	;volatile
  1561  0507  1D03               	btfss	3,2
  1562  0508  2D15               	goto	l2394
  1563                           
  1564                           ;main.c: 931: {
  1565                           ;main.c: 933: VREGCONbits.VREGPM = 1;
  1566  0509  0023               	movlb	3	; select bank3
  1567  050A  1497               	bsf	23,1	;volatile
  1568  050B  0063               	sleep	;# 
  1569                           
  1570                           ;main.c: 938: WakeTimer = 0;
  1571  050C  3000               	movlw	0
  1572  050D  0020               	movlb	0	; select bank0
  1573  050E  00CB               	movwf	_WakeTimer+3	;volatile
  1574  050F  3000               	movlw	0
  1575  0510  00CA               	movwf	_WakeTimer+2	;volatile
  1576  0511  3000               	movlw	0
  1577  0512  00C9               	movwf	_WakeTimer+1	;volatile
  1578  0513  3000               	movlw	0
  1579  0514  00C8               	movwf	_WakeTimer	;volatile
  1580  0515                     l2394:	
  1581                           
  1582                           ;main.c: 939: }
  1583                           ;main.c: 940: }
  1584                           ;main.c: 942: CheckForButtonPushes();
  1585  0515  238E               	fcall	_CheckForButtonPushes
  1586  0516  2CC0               	goto	l2348
  1587  0517                     __end_of_main:	
  1588                           
  1589                           	psect	text1
  1590  0639                     __ptext1:	
  1591 ;; *************** function _TMR0_SetInterruptHandler *****************
  1592 ;; Defined at:
  1593 ;;		line 133 in file "mcc_generated_files/tmr0.c"
  1594 ;; Parameters:    Size  Location     Type
  1595 ;;  InterruptHan    2    4[COMMON] PTR FTN()void 
  1596 ;;		 -> TMR0_Callback(1), 
  1597 ;; Auto vars:     Size  Location     Type
  1598 ;;		None
  1599 ;; Return value:  Size  Location     Type
  1600 ;;                  1    wreg      void 
  1601 ;; Registers used:
  1602 ;;		wreg
  1603 ;; Tracked objects:
  1604 ;;		On entry : 0/0
  1605 ;;		On exit  : 0/0
  1606 ;;		Unchanged: 0/0
  1607 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1608 ;;      Params:         2       0       0       0
  1609 ;;      Locals:         0       0       0       0
  1610 ;;      Temps:          0       0       0       0
  1611 ;;      Totals:         2       0       0       0
  1612 ;;Total ram usage:        2 bytes
  1613 ;; Hardware stack levels used:    1
  1614 ;; Hardware stack levels required when called:    4
  1615 ;; This function calls:
  1616 ;;		Nothing
  1617 ;; This function is called by:
  1618 ;;		_main
  1619 ;; This function uses a non-reentrant model
  1620 ;;
  1621                           
  1622                           
  1623                           ;psect for function _TMR0_SetInterruptHandler
  1624  0639                     _TMR0_SetInterruptHandler:	
  1625                           
  1626                           ;tmr0.c: 134: TMR0_InterruptHandler = InterruptHandler;
  1627                           
  1628                           ;incstack = 0
  1629                           ; Regs used in _TMR0_SetInterruptHandler: [wreg]
  1630  0639  0875               	movf	TMR0_SetInterruptHandler@InterruptHandler+1,w
  1631  063A  0020               	movlb	0	; select bank0
  1632  063B  00E3               	movwf	_TMR0_InterruptHandler+1
  1633  063C  0874               	movf	TMR0_SetInterruptHandler@InterruptHandler,w
  1634  063D  00E2               	movwf	_TMR0_InterruptHandler
  1635  063E  0008               	return
  1636  063F                     __end_of_TMR0_SetInterruptHandler:	
  1637                           
  1638                           	psect	text2
  1639  065F                     __ptext2:	
  1640 ;; *************** function _SetAllLEDsOff *****************
  1641 ;; Defined at:
  1642 ;;		line 212 in file "main.c"
  1643 ;; Parameters:    Size  Location     Type
  1644 ;;		None
  1645 ;; Auto vars:     Size  Location     Type
  1646 ;;		None
  1647 ;; Return value:  Size  Location     Type
  1648 ;;                  1    wreg      void 
  1649 ;; Registers used:
  1650 ;;		status,2
  1651 ;; Tracked objects:
  1652 ;;		On entry : 0/0
  1653 ;;		On exit  : 0/0
  1654 ;;		Unchanged: 0/0
  1655 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1656 ;;      Params:         0       0       0       0
  1657 ;;      Locals:         0       0       0       0
  1658 ;;      Temps:          0       0       0       0
  1659 ;;      Totals:         0       0       0       0
  1660 ;;Total ram usage:        0 bytes
  1661 ;; Hardware stack levels used:    1
  1662 ;; Hardware stack levels required when called:    4
  1663 ;; This function calls:
  1664 ;;		Nothing
  1665 ;; This function is called by:
  1666 ;;		_main
  1667 ;; This function uses a non-reentrant model
  1668 ;;
  1669                           
  1670                           
  1671                           ;psect for function _SetAllLEDsOff
  1672  065F                     _SetAllLEDsOff:	
  1673                           
  1674                           ;main.c: 214: LEDOns = 0;
  1675                           
  1676                           ;incstack = 0
  1677                           ; Regs used in _SetAllLEDsOff: [status,2]
  1678  065F  0020               	movlb	0	; select bank0
  1679  0660  01D0               	clrf	_LEDOns	;volatile
  1680  0661  0008               	return
  1681  0662                     __end_of_SetAllLEDsOff:	
  1682                           
  1683                           	psect	text3
  1684  0656                     __ptext3:	
  1685 ;; *************** function _SYSTEM_Initialize *****************
  1686 ;; Defined at:
  1687 ;;		line 68 in file "mcc_generated_files/mcc.c"
  1688 ;; Parameters:    Size  Location     Type
  1689 ;;		None
  1690 ;; Auto vars:     Size  Location     Type
  1691 ;;		None
  1692 ;; Return value:  Size  Location     Type
  1693 ;;                  1    wreg      void 
  1694 ;; Registers used:
  1695 ;;		wreg, status,2, status,0, pclath, cstack
  1696 ;; Tracked objects:
  1697 ;;		On entry : 0/0
  1698 ;;		On exit  : 0/0
  1699 ;;		Unchanged: 0/0
  1700 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1701 ;;      Params:         0       0       0       0
  1702 ;;      Locals:         0       0       0       0
  1703 ;;      Temps:          0       0       0       0
  1704 ;;      Totals:         0       0       0       0
  1705 ;;Total ram usage:        0 bytes
  1706 ;; Hardware stack levels used:    1
  1707 ;; Hardware stack levels required when called:    6
  1708 ;; This function calls:
  1709 ;;		_OSCILLATOR_Initialize
  1710 ;;		_PIN_MANAGER_Initialize
  1711 ;;		_TMR0_Initialize
  1712 ;;		_WDT_Initialize
  1713 ;; This function is called by:
  1714 ;;		_main
  1715 ;; This function uses a non-reentrant model
  1716 ;;
  1717                           
  1718                           
  1719                           ;psect for function _SYSTEM_Initialize
  1720  0656                     _SYSTEM_Initialize:	
  1721                           
  1722                           ;mcc.c: 71: PIN_MANAGER_Initialize();
  1723                           
  1724                           ;incstack = 0
  1725                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  1726  0656  254C               	fcall	_PIN_MANAGER_Initialize
  1727                           
  1728                           ;mcc.c: 72: OSCILLATOR_Initialize();
  1729  0657  2618               	fcall	_OSCILLATOR_Initialize
  1730                           
  1731                           ;mcc.c: 73: WDT_Initialize();
  1732  0658  265B               	fcall	_WDT_Initialize
  1733                           
  1734                           ;mcc.c: 74: TMR0_Initialize();
  1735  0659  259C               	fcall	_TMR0_Initialize
  1736  065A  0008               	return
  1737  065B                     __end_of_SYSTEM_Initialize:	
  1738                           
  1739                           	psect	text4
  1740  065B                     __ptext4:	
  1741 ;; *************** function _WDT_Initialize *****************
  1742 ;; Defined at:
  1743 ;;		line 87 in file "mcc_generated_files/mcc.c"
  1744 ;; Parameters:    Size  Location     Type
  1745 ;;		None
  1746 ;; Auto vars:     Size  Location     Type
  1747 ;;		None
  1748 ;; Return value:  Size  Location     Type
  1749 ;;                  1    wreg      void 
  1750 ;; Registers used:
  1751 ;;		wreg
  1752 ;; Tracked objects:
  1753 ;;		On entry : 0/0
  1754 ;;		On exit  : 0/0
  1755 ;;		Unchanged: 0/0
  1756 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1757 ;;      Params:         0       0       0       0
  1758 ;;      Locals:         0       0       0       0
  1759 ;;      Temps:          0       0       0       0
  1760 ;;      Totals:         0       0       0       0
  1761 ;;Total ram usage:        0 bytes
  1762 ;; Hardware stack levels used:    1
  1763 ;; Hardware stack levels required when called:    4
  1764 ;; This function calls:
  1765 ;;		Nothing
  1766 ;; This function is called by:
  1767 ;;		_SYSTEM_Initialize
  1768 ;; This function uses a non-reentrant model
  1769 ;;
  1770                           
  1771                           
  1772                           ;psect for function _WDT_Initialize
  1773  065B                     _WDT_Initialize:	
  1774                           
  1775                           ;mcc.c: 90: WDTCON = 0x16;
  1776                           
  1777                           ;incstack = 0
  1778                           ; Regs used in _WDT_Initialize: [wreg]
  1779  065B  3016               	movlw	22
  1780  065C  0021               	movlb	1	; select bank1
  1781  065D  0097               	movwf	23	;volatile
  1782  065E  0008               	return
  1783  065F                     __end_of_WDT_Initialize:	
  1784                           
  1785                           	psect	text5
  1786  059C                     __ptext5:	
  1787 ;; *************** function _TMR0_Initialize *****************
  1788 ;; Defined at:
  1789 ;;		line 65 in file "mcc_generated_files/tmr0.c"
  1790 ;; Parameters:    Size  Location     Type
  1791 ;;		None
  1792 ;; Auto vars:     Size  Location     Type
  1793 ;;		None
  1794 ;; Return value:  Size  Location     Type
  1795 ;;                  1    wreg      void 
  1796 ;; Registers used:
  1797 ;;		wreg, status,2
  1798 ;; Tracked objects:
  1799 ;;		On entry : 0/0
  1800 ;;		On exit  : 0/0
  1801 ;;		Unchanged: 0/0
  1802 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1803 ;;      Params:         0       0       0       0
  1804 ;;      Locals:         0       0       0       0
  1805 ;;      Temps:          1       0       0       0
  1806 ;;      Totals:         1       0       0       0
  1807 ;;Total ram usage:        1 bytes
  1808 ;; Hardware stack levels used:    1
  1809 ;; Hardware stack levels required when called:    4
  1810 ;; This function calls:
  1811 ;;		Nothing
  1812 ;; This function is called by:
  1813 ;;		_SYSTEM_Initialize
  1814 ;; This function uses a non-reentrant model
  1815 ;;
  1816                           
  1817                           
  1818                           ;psect for function _TMR0_Initialize
  1819  059C                     _TMR0_Initialize:	
  1820                           
  1821                           ;tmr0.c: 70: OPTION_REG = (uint8_t)((OPTION_REG & 0xC0) | 0xD1 & 0x3F);
  1822                           
  1823                           ;incstack = 0
  1824                           ; Regs used in _TMR0_Initialize: [wreg+status,2]
  1825  059C  0021               	movlb	1	; select bank1
  1826  059D  0815               	movf	21,w	;volatile
  1827  059E  39C0               	andlw	192
  1828  059F  3811               	iorlw	17
  1829  05A0  0095               	movwf	21	;volatile
  1830                           
  1831                           ;tmr0.c: 73: TMR0 = 0x87;
  1832  05A1  3087               	movlw	135
  1833  05A2  0020               	movlb	0	; select bank0
  1834  05A3  0095               	movwf	21	;volatile
  1835                           
  1836                           ;tmr0.c: 76: timer0ReloadVal= 0x87;
  1837  05A4  3087               	movlw	135
  1838  05A5  00F4               	movwf	??_TMR0_Initialize
  1839  05A6  0874               	movf	??_TMR0_Initialize,w
  1840  05A7  00E8               	movwf	_timer0ReloadVal	;volatile
  1841                           
  1842                           ;tmr0.c: 79: INTCONbits.TMR0IF = 0;
  1843  05A8  110B               	bcf	11,2	;volatile
  1844                           
  1845                           ;tmr0.c: 82: INTCONbits.TMR0IE = 1;
  1846  05A9  168B               	bsf	11,5	;volatile
  1847  05AA  0008               	return
  1848  05AB                     __end_of_TMR0_Initialize:	
  1849                           
  1850                           	psect	text6
  1851  054C                     __ptext6:	
  1852 ;; *************** function _PIN_MANAGER_Initialize *****************
  1853 ;; Defined at:
  1854 ;;		line 55 in file "mcc_generated_files/pin_manager.c"
  1855 ;; Parameters:    Size  Location     Type
  1856 ;;		None
  1857 ;; Auto vars:     Size  Location     Type
  1858 ;;		None
  1859 ;; Return value:  Size  Location     Type
  1860 ;;                  1    wreg      void 
  1861 ;; Registers used:
  1862 ;;		wreg, status,2, status,0, pclath, cstack
  1863 ;; Tracked objects:
  1864 ;;		On entry : 0/0
  1865 ;;		On exit  : 0/0
  1866 ;;		Unchanged: 0/0
  1867 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1868 ;;      Params:         0       0       0       0
  1869 ;;      Locals:         0       0       0       0
  1870 ;;      Temps:          0       0       0       0
  1871 ;;      Totals:         0       0       0       0
  1872 ;;Total ram usage:        0 bytes
  1873 ;; Hardware stack levels used:    1
  1874 ;; Hardware stack levels required when called:    5
  1875 ;; This function calls:
  1876 ;;		_IOCAF2_SetInterruptHandler
  1877 ;;		_IOCAF3_SetInterruptHandler
  1878 ;; This function is called by:
  1879 ;;		_SYSTEM_Initialize
  1880 ;; This function uses a non-reentrant model
  1881 ;;
  1882                           
  1883                           
  1884                           ;psect for function _PIN_MANAGER_Initialize
  1885  054C                     _PIN_MANAGER_Initialize:	
  1886                           
  1887                           ;pin_manager.c: 60: LATA = 0x00;
  1888                           
  1889                           ;incstack = 0
  1890                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2+status,0+pclath+cstack]
  1891  054C  0022               	movlb	2	; select bank2
  1892  054D  018C               	clrf	12	;volatile
  1893                           
  1894                           ;pin_manager.c: 65: TRISA = 0x3F;
  1895  054E  303F               	movlw	63
  1896  054F  0021               	movlb	1	; select bank1
  1897  0550  008C               	movwf	12	;volatile
  1898                           
  1899                           ;pin_manager.c: 70: ANSELA = 0x13;
  1900  0551  3013               	movlw	19
  1901  0552  0023               	movlb	3	; select bank3
  1902  0553  008C               	movwf	12	;volatile
  1903                           
  1904                           ;pin_manager.c: 75: WPUA = 0x0C;
  1905  0554  300C               	movlw	12
  1906  0555  0024               	movlb	4	; select bank4
  1907  0556  008C               	movwf	12	;volatile
  1908                           
  1909                           ;pin_manager.c: 76: OPTION_REGbits.nWPUEN = 0;
  1910  0557  0021               	movlb	1	; select bank1
  1911  0558  1395               	bcf	21,7	;volatile
  1912                           
  1913                           ;pin_manager.c: 81: ODCONA = 0x00;
  1914  0559  0025               	movlb	5	; select bank5
  1915  055A  018C               	clrf	12	;volatile
  1916                           
  1917                           ;pin_manager.c: 86: APFCON = 0x00;
  1918  055B  0022               	movlb	2	; select bank2
  1919  055C  019D               	clrf	29	;volatile
  1920                           
  1921                           ;pin_manager.c: 92: IOCAFbits.IOCAF2 = 0;
  1922  055D  0027               	movlb	7	; select bank7
  1923  055E  1113               	bcf	19,2	;volatile
  1924                           
  1925                           ;pin_manager.c: 93: IOCAFbits.IOCAF3 = 0;
  1926  055F  1193               	bcf	19,3	;volatile
  1927                           
  1928                           ;pin_manager.c: 95: IOCANbits.IOCAN2 = 1;
  1929  0560  1512               	bsf	18,2	;volatile
  1930                           
  1931                           ;pin_manager.c: 96: IOCANbits.IOCAN3 = 1;
  1932  0561  1592               	bsf	18,3	;volatile
  1933                           
  1934                           ;pin_manager.c: 98: IOCAPbits.IOCAP2 = 1;
  1935  0562  1511               	bsf	17,2	;volatile
  1936                           
  1937                           ;pin_manager.c: 99: IOCAPbits.IOCAP3 = 1;
  1938  0563  1591               	bsf	17,3	;volatile
  1939                           
  1940                           ;pin_manager.c: 102: IOCAF2_SetInterruptHandler(IOCAF2_DefaultInterruptHandler);
  1941  0564  3063               	movlw	low _IOCAF2_DefaultInterruptHandler
  1942  0565  00F4               	movwf	IOCAF2_SetInterruptHandler@InterruptHandler
  1943  0566  3006               	movlw	high _IOCAF2_DefaultInterruptHandler
  1944  0567  00F5               	movwf	IOCAF2_SetInterruptHandler@InterruptHandler+1
  1945  0568  2645               	fcall	_IOCAF2_SetInterruptHandler
  1946                           
  1947                           ;pin_manager.c: 103: IOCAF3_SetInterruptHandler(IOCAF3_DefaultInterruptHandler);
  1948  0569  3062               	movlw	low _IOCAF3_DefaultInterruptHandler
  1949  056A  00F4               	movwf	IOCAF3_SetInterruptHandler@InterruptHandler
  1950  056B  3006               	movlw	high _IOCAF3_DefaultInterruptHandler
  1951  056C  00F5               	movwf	IOCAF3_SetInterruptHandler@InterruptHandler+1
  1952  056D  263F               	fcall	_IOCAF3_SetInterruptHandler
  1953                           
  1954                           ;pin_manager.c: 106: INTCONbits.IOCIE = 1;
  1955  056E  158B               	bsf	11,3	;volatile
  1956  056F  0008               	return
  1957  0570                     __end_of_PIN_MANAGER_Initialize:	
  1958                           
  1959                           	psect	text7
  1960  063F                     __ptext7:	
  1961 ;; *************** function _IOCAF3_SetInterruptHandler *****************
  1962 ;; Defined at:
  1963 ;;		line 175 in file "mcc_generated_files/pin_manager.c"
  1964 ;; Parameters:    Size  Location     Type
  1965 ;;  InterruptHan    2    4[COMMON] PTR FTN()void 
  1966 ;;		 -> IOCAF3_DefaultInterruptHandler(1), 
  1967 ;; Auto vars:     Size  Location     Type
  1968 ;;		None
  1969 ;; Return value:  Size  Location     Type
  1970 ;;                  1    wreg      void 
  1971 ;; Registers used:
  1972 ;;		wreg
  1973 ;; Tracked objects:
  1974 ;;		On entry : 0/0
  1975 ;;		On exit  : 0/0
  1976 ;;		Unchanged: 0/0
  1977 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1978 ;;      Params:         2       0       0       0
  1979 ;;      Locals:         0       0       0       0
  1980 ;;      Temps:          0       0       0       0
  1981 ;;      Totals:         2       0       0       0
  1982 ;;Total ram usage:        2 bytes
  1983 ;; Hardware stack levels used:    1
  1984 ;; Hardware stack levels required when called:    4
  1985 ;; This function calls:
  1986 ;;		Nothing
  1987 ;; This function is called by:
  1988 ;;		_PIN_MANAGER_Initialize
  1989 ;; This function uses a non-reentrant model
  1990 ;;
  1991                           
  1992                           
  1993                           ;psect for function _IOCAF3_SetInterruptHandler
  1994  063F                     _IOCAF3_SetInterruptHandler:	
  1995                           
  1996                           ;pin_manager.c: 176: IOCAF3_InterruptHandler = InterruptHandler;
  1997                           
  1998                           ;incstack = 0
  1999                           ; Regs used in _IOCAF3_SetInterruptHandler: [wreg]
  2000  063F  0875               	movf	IOCAF3_SetInterruptHandler@InterruptHandler+1,w
  2001  0640  0020               	movlb	0	; select bank0
  2002  0641  00E5               	movwf	_IOCAF3_InterruptHandler+1
  2003  0642  0874               	movf	IOCAF3_SetInterruptHandler@InterruptHandler,w
  2004  0643  00E4               	movwf	_IOCAF3_InterruptHandler
  2005  0644  0008               	return
  2006  0645                     __end_of_IOCAF3_SetInterruptHandler:	
  2007                           
  2008                           	psect	text8
  2009  0645                     __ptext8:	
  2010 ;; *************** function _IOCAF2_SetInterruptHandler *****************
  2011 ;; Defined at:
  2012 ;;		line 145 in file "mcc_generated_files/pin_manager.c"
  2013 ;; Parameters:    Size  Location     Type
  2014 ;;  InterruptHan    2    4[COMMON] PTR FTN()void 
  2015 ;;		 -> IOCAF2_DefaultInterruptHandler(1), 
  2016 ;; Auto vars:     Size  Location     Type
  2017 ;;		None
  2018 ;; Return value:  Size  Location     Type
  2019 ;;                  1    wreg      void 
  2020 ;; Registers used:
  2021 ;;		wreg
  2022 ;; Tracked objects:
  2023 ;;		On entry : 0/0
  2024 ;;		On exit  : 0/0
  2025 ;;		Unchanged: 0/0
  2026 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2027 ;;      Params:         2       0       0       0
  2028 ;;      Locals:         0       0       0       0
  2029 ;;      Temps:          0       0       0       0
  2030 ;;      Totals:         2       0       0       0
  2031 ;;Total ram usage:        2 bytes
  2032 ;; Hardware stack levels used:    1
  2033 ;; Hardware stack levels required when called:    4
  2034 ;; This function calls:
  2035 ;;		Nothing
  2036 ;; This function is called by:
  2037 ;;		_PIN_MANAGER_Initialize
  2038 ;; This function uses a non-reentrant model
  2039 ;;
  2040                           
  2041                           
  2042                           ;psect for function _IOCAF2_SetInterruptHandler
  2043  0645                     _IOCAF2_SetInterruptHandler:	
  2044                           
  2045                           ;pin_manager.c: 146: IOCAF2_InterruptHandler = InterruptHandler;
  2046                           
  2047                           ;incstack = 0
  2048                           ; Regs used in _IOCAF2_SetInterruptHandler: [wreg]
  2049  0645  0875               	movf	IOCAF2_SetInterruptHandler@InterruptHandler+1,w
  2050  0646  0020               	movlb	0	; select bank0
  2051  0647  00E7               	movwf	_IOCAF2_InterruptHandler+1
  2052  0648  0874               	movf	IOCAF2_SetInterruptHandler@InterruptHandler,w
  2053  0649  00E6               	movwf	_IOCAF2_InterruptHandler
  2054  064A  0008               	return
  2055  064B                     __end_of_IOCAF2_SetInterruptHandler:	
  2056                           
  2057                           	psect	text9
  2058  0618                     __ptext9:	
  2059 ;; *************** function _OSCILLATOR_Initialize *****************
  2060 ;; Defined at:
  2061 ;;		line 77 in file "mcc_generated_files/mcc.c"
  2062 ;; Parameters:    Size  Location     Type
  2063 ;;		None
  2064 ;; Auto vars:     Size  Location     Type
  2065 ;;		None
  2066 ;; Return value:  Size  Location     Type
  2067 ;;                  1    wreg      void 
  2068 ;; Registers used:
  2069 ;;		wreg, status,2
  2070 ;; Tracked objects:
  2071 ;;		On entry : 0/0
  2072 ;;		On exit  : 0/0
  2073 ;;		Unchanged: 0/0
  2074 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2075 ;;      Params:         0       0       0       0
  2076 ;;      Locals:         0       0       0       0
  2077 ;;      Temps:          0       0       0       0
  2078 ;;      Totals:         0       0       0       0
  2079 ;;Total ram usage:        0 bytes
  2080 ;; Hardware stack levels used:    1
  2081 ;; Hardware stack levels required when called:    4
  2082 ;; This function calls:
  2083 ;;		Nothing
  2084 ;; This function is called by:
  2085 ;;		_SYSTEM_Initialize
  2086 ;; This function uses a non-reentrant model
  2087 ;;
  2088                           
  2089                           
  2090                           ;psect for function _OSCILLATOR_Initialize
  2091  0618                     _OSCILLATOR_Initialize:	
  2092                           
  2093                           ;mcc.c: 80: OSCCON = 0x78;
  2094                           
  2095                           ;incstack = 0
  2096                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  2097  0618  3078               	movlw	120
  2098  0619  0021               	movlb	1	; select bank1
  2099  061A  0099               	movwf	25	;volatile
  2100                           
  2101                           ;mcc.c: 82: OSCTUNE = 0x00;
  2102  061B  0198               	clrf	24	;volatile
  2103                           
  2104                           ;mcc.c: 84: BORCON = 0x00;
  2105  061C  0022               	movlb	2	; select bank2
  2106  061D  0196               	clrf	22	;volatile
  2107  061E  0008               	return
  2108  061F                     __end_of_OSCILLATOR_Initialize:	
  2109                           
  2110                           	psect	text10
  2111  01C6                     __ptext10:	
  2112 ;; *************** function _RunRightFlash *****************
  2113 ;; Defined at:
  2114 ;;		line 303 in file "main.c"
  2115 ;; Parameters:    Size  Location     Type
  2116 ;;		None
  2117 ;; Auto vars:     Size  Location     Type
  2118 ;;		None
  2119 ;; Return value:  Size  Location     Type
  2120 ;;                  1    wreg      void 
  2121 ;; Registers used:
  2122 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2123 ;; Tracked objects:
  2124 ;;		On entry : 0/0
  2125 ;;		On exit  : 0/0
  2126 ;;		Unchanged: 0/0
  2127 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2128 ;;      Params:         0       0       0       0
  2129 ;;      Locals:         0       0       0       0
  2130 ;;      Temps:          0       1       0       0
  2131 ;;      Totals:         0       1       0       0
  2132 ;;Total ram usage:        1 bytes
  2133 ;; Hardware stack levels used:    1
  2134 ;; Hardware stack levels required when called:    5
  2135 ;; This function calls:
  2136 ;;		_RightButtonPressed
  2137 ;;		_SetLEDOff
  2138 ;;		_SetLEDOn
  2139 ;;		___lwdiv
  2140 ;;		___wmul
  2141 ;; This function is called by:
  2142 ;;		_main
  2143 ;; This function uses a non-reentrant model
  2144 ;;
  2145                           
  2146                           
  2147                           ;psect for function _RunRightFlash
  2148  01C6                     _RunRightFlash:	
  2149                           
  2150                           ;main.c: 305: static uint16_t right_delay = 250;
  2151                           ;main.c: 307: if (PatternDelay[0] == 0)
  2152                           
  2153                           ;incstack = 0
  2154                           ; Regs used in _RunRightFlash: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2155  01C6  0020               	movlb	0	; select bank0
  2156  01C7  0820               	movf	_PatternDelay,w	;volatile
  2157  01C8  0421               	iorwf	_PatternDelay+1,w	;volatile
  2158  01C9  1D03               	btfss	3,2
  2159  01CA  0008               	return
  2160  01CB  2A2D               	goto	l2054
  2161  01CC                     l2026:	
  2162                           ;main.c: 310: {
  2163                           ;main.c: 311: case 0:
  2164                           
  2165                           ;main.c: 308: {
  2166                           ;main.c: 309: switch(PatternState[0])
  2167                           
  2168                           
  2169                           ;main.c: 313: right_delay = 250;
  2170  01CC  30FA               	movlw	250
  2171  01CD  00EB               	movwf	RunRightFlash@right_delay
  2172  01CE  3000               	movlw	0
  2173  01CF  00EC               	movwf	RunRightFlash@right_delay+1
  2174                           
  2175                           ;main.c: 314: break;
  2176  01D0  2A37               	goto	l2056
  2177  01D1                     l2028:	
  2178                           ;main.c: 316: case 1:
  2179                           
  2180                           
  2181                           ;main.c: 317: SetLEDOn(0x01);
  2182  01D1  3001               	movlw	1
  2183  01D2  25F8               	fcall	_SetLEDOn
  2184                           
  2185                           ;main.c: 318: SetLEDOff(0x02);
  2186  01D3  3002               	movlw	2
  2187  01D4  2600               	fcall	_SetLEDOff
  2188                           
  2189                           ;main.c: 319: SetLEDOff(0x04);
  2190  01D5  3004               	movlw	4
  2191  01D6  2600               	fcall	_SetLEDOff
  2192                           
  2193                           ;main.c: 320: SetLEDOff(0x08);
  2194  01D7  3008               	movlw	8
  2195  01D8  2600               	fcall	_SetLEDOff
  2196                           
  2197                           ;main.c: 321: break;
  2198  01D9  2A37               	goto	l2056
  2199  01DA                     l2030:	
  2200                           ;main.c: 323: case 2:
  2201                           
  2202                           
  2203                           ;main.c: 324: SetLEDOff(0x01);
  2204  01DA  3001               	movlw	1
  2205  01DB  2600               	fcall	_SetLEDOff
  2206                           
  2207                           ;main.c: 325: SetLEDOn(0x02);
  2208  01DC  3002               	movlw	2
  2209  01DD  25F8               	fcall	_SetLEDOn
  2210                           
  2211                           ;main.c: 326: SetLEDOff(0x04);
  2212  01DE  3004               	movlw	4
  2213  01DF  2600               	fcall	_SetLEDOff
  2214                           
  2215                           ;main.c: 327: SetLEDOff(0x08);
  2216  01E0  3008               	movlw	8
  2217  01E1  2600               	fcall	_SetLEDOff
  2218                           
  2219                           ;main.c: 328: break;
  2220  01E2  2A37               	goto	l2056
  2221  01E3                     l2032:	
  2222                           ;main.c: 330: case 3:
  2223                           
  2224                           
  2225                           ;main.c: 331: SetLEDOff(0x01);
  2226  01E3  3001               	movlw	1
  2227  01E4  2600               	fcall	_SetLEDOff
  2228                           
  2229                           ;main.c: 332: SetLEDOff(0x02);
  2230  01E5  3002               	movlw	2
  2231  01E6  2600               	fcall	_SetLEDOff
  2232                           
  2233                           ;main.c: 333: SetLEDOn(0x04);
  2234  01E7  3004               	movlw	4
  2235  01E8  25F8               	fcall	_SetLEDOn
  2236                           
  2237                           ;main.c: 334: SetLEDOff(0x08);
  2238  01E9  3008               	movlw	8
  2239  01EA  2600               	fcall	_SetLEDOff
  2240                           
  2241                           ;main.c: 335: break;
  2242  01EB  2A37               	goto	l2056
  2243  01EC                     l2034:	
  2244                           ;main.c: 337: case 4:
  2245                           
  2246                           
  2247                           ;main.c: 338: SetLEDOff(0x01);
  2248  01EC  3001               	movlw	1
  2249  01ED  2600               	fcall	_SetLEDOff
  2250                           
  2251                           ;main.c: 339: SetLEDOff(0x02);
  2252  01EE  3002               	movlw	2
  2253  01EF  2600               	fcall	_SetLEDOff
  2254                           
  2255                           ;main.c: 340: SetLEDOff(0x04);
  2256  01F0  3004               	movlw	4
  2257  01F1  2600               	fcall	_SetLEDOff
  2258                           
  2259                           ;main.c: 341: SetLEDOn(0x08);
  2260  01F2  3008               	movlw	8
  2261  01F3  25F8               	fcall	_SetLEDOn
  2262                           
  2263                           ;main.c: 342: break;
  2264  01F4  2A37               	goto	l2056
  2265  01F5                     l2036:	
  2266                           ;main.c: 344: case 5:
  2267                           
  2268                           
  2269                           ;main.c: 345: SetLEDOff(0x01);
  2270  01F5  3001               	movlw	1
  2271  01F6  2600               	fcall	_SetLEDOff
  2272                           
  2273                           ;main.c: 346: SetLEDOff(0x02);
  2274  01F7  3002               	movlw	2
  2275  01F8  2600               	fcall	_SetLEDOff
  2276                           
  2277                           ;main.c: 347: SetLEDOn(0x04);
  2278  01F9  3004               	movlw	4
  2279  01FA  25F8               	fcall	_SetLEDOn
  2280                           
  2281                           ;main.c: 348: SetLEDOff(0x08);
  2282  01FB  3008               	movlw	8
  2283  01FC  2600               	fcall	_SetLEDOff
  2284                           
  2285                           ;main.c: 349: break;
  2286  01FD  2A37               	goto	l2056
  2287  01FE                     l2038:	
  2288                           ;main.c: 351: case 6:
  2289                           
  2290                           
  2291                           ;main.c: 352: SetLEDOff(0x01);
  2292  01FE  3001               	movlw	1
  2293  01FF  2600               	fcall	_SetLEDOff
  2294                           
  2295                           ;main.c: 353: SetLEDOn(0x02);
  2296  0200  3002               	movlw	2
  2297  0201  25F8               	fcall	_SetLEDOn
  2298                           
  2299                           ;main.c: 354: SetLEDOff(0x04);
  2300  0202  3004               	movlw	4
  2301  0203  2600               	fcall	_SetLEDOff
  2302                           
  2303                           ;main.c: 355: SetLEDOff(0x08);
  2304  0204  3008               	movlw	8
  2305  0205  2600               	fcall	_SetLEDOff
  2306                           
  2307                           ;main.c: 356: break;
  2308  0206  2A37               	goto	l2056
  2309  0207                     l2040:	
  2310                           ;main.c: 358: case 7:
  2311                           
  2312                           
  2313                           ;main.c: 359: SetLEDOn(0x01);
  2314  0207  3001               	movlw	1
  2315  0208  25F8               	fcall	_SetLEDOn
  2316                           
  2317                           ;main.c: 360: SetLEDOff(0x02);
  2318  0209  3002               	movlw	2
  2319  020A  2600               	fcall	_SetLEDOff
  2320                           
  2321                           ;main.c: 361: SetLEDOff(0x04);
  2322  020B  3004               	movlw	4
  2323  020C  2600               	fcall	_SetLEDOff
  2324                           
  2325                           ;main.c: 362: SetLEDOff(0x08);
  2326  020D  3008               	movlw	8
  2327  020E  2600               	fcall	_SetLEDOff
  2328                           
  2329                           ;main.c: 363: break;
  2330  020F  2A37               	goto	l2056
  2331  0210                     l2042:	
  2332                           ;main.c: 365: case 8:
  2333                           
  2334                           
  2335                           ;main.c: 366: SetLEDOn(0x01);
  2336  0210  3001               	movlw	1
  2337  0211  25F8               	fcall	_SetLEDOn
  2338                           
  2339                           ;main.c: 367: SetLEDOn(0x02);
  2340  0212  3002               	movlw	2
  2341  0213  25F8               	fcall	_SetLEDOn
  2342                           
  2343                           ;main.c: 368: SetLEDOn(0x04);
  2344  0214  3004               	movlw	4
  2345  0215  25F8               	fcall	_SetLEDOn
  2346                           
  2347                           ;main.c: 369: SetLEDOn(0x08);
  2348  0216  3008               	movlw	8
  2349  0217  25F8               	fcall	_SetLEDOn
  2350                           
  2351                           ;main.c: 370: break;
  2352  0218  2A37               	goto	l2056
  2353  0219                     l2044:	
  2354                           ;main.c: 372: case 9:
  2355                           
  2356                           
  2357                           ;main.c: 373: SetLEDOff(0x01);
  2358  0219  3001               	movlw	1
  2359  021A  2600               	fcall	_SetLEDOff
  2360                           
  2361                           ;main.c: 374: SetLEDOff(0x02);
  2362  021B  3002               	movlw	2
  2363  021C  2600               	fcall	_SetLEDOff
  2364                           
  2365                           ;main.c: 375: SetLEDOff(0x04);
  2366  021D  3004               	movlw	4
  2367  021E  2600               	fcall	_SetLEDOff
  2368                           
  2369                           ;main.c: 376: SetLEDOff(0x08);
  2370  021F  3008               	movlw	8
  2371  0220  2600               	fcall	_SetLEDOff
  2372                           
  2373                           ;main.c: 377: break;
  2374  0221  2A37               	goto	l2056
  2375  0222                     l2046:	
  2376                           ;main.c: 379: case 10:
  2377                           
  2378                           
  2379                           ;main.c: 380: SetLEDOff(0x01);
  2380  0222  3001               	movlw	1
  2381  0223  2600               	fcall	_SetLEDOff
  2382                           
  2383                           ;main.c: 381: SetLEDOff(0x02);
  2384  0224  3002               	movlw	2
  2385  0225  2600               	fcall	_SetLEDOff
  2386                           
  2387                           ;main.c: 382: SetLEDOff(0x04);
  2388  0226  3004               	movlw	4
  2389  0227  2600               	fcall	_SetLEDOff
  2390                           
  2391                           ;main.c: 383: SetLEDOff(0x08);
  2392  0228  3008               	movlw	8
  2393  0229  2600               	fcall	_SetLEDOff
  2394                           
  2395                           ;main.c: 384: PatternState[0] = 0;
  2396  022A  0020               	movlb	0	; select bank0
  2397  022B                     l2050:	
  2398                           ;main.c: 387: default:
  2399                           
  2400                           ;main.c: 385: break;
  2401                           
  2402                           
  2403                           ;main.c: 388: PatternState[0] = 0;
  2404  022B  01B0               	clrf	_PatternState	;volatile
  2405                           
  2406                           ;main.c: 390: }
  2407                           
  2408                           ;main.c: 389: break;
  2409  022C  2A37               	goto	l2056
  2410  022D                     l2054:	
  2411  022D  0830               	movf	_PatternState,w	;volatile
  2412                           
  2413                           ; Switch size 1, requested type "space"
  2414                           ; Number of cases is 11, Range of values is 0 to 10
  2415                           ; switch strategies available:
  2416                           ; Name         Instructions Cycles
  2417                           ; direct_byte           28     6 (fixed)
  2418                           ; simple_byte           34    18 (average)
  2419                           ; jumptable            260     6 (fixed)
  2420                           ;	Chosen strategy is direct_byte
  2421  022E  0084               	movwf	4
  2422  022F  300B               	movlw	11
  2423  0230  0204               	subwf	4,w
  2424  0231  1803               	skipnc
  2425  0232  2A2B               	goto	l2050
  2426  0233  3185               	movlp	high S2456
  2427  0234  30C5               	movlw	low S2456
  2428  0235  0704               	addwf	4,w
  2429  0236  0082               	movwf	2
  2430  0237                     l2056:	
  2431                           
  2432                           ;main.c: 393: if (PatternState[0] != 0)
  2433  0237  0020               	movlb	0	; select bank0
  2434  0238  0830               	movf	_PatternState,w	;volatile
  2435  0239  1903               	btfsc	3,2
  2436  023A  0008               	return
  2437                           
  2438                           ;main.c: 394: {
  2439                           ;main.c: 396: if (PatternState[0] == 7)
  2440  023B  3007               	movlw	7
  2441  023C  0630               	xorwf	_PatternState,w	;volatile
  2442  023D  1D03               	btfss	3,2
  2443  023E  2A6A               	goto	l2072
  2444                           
  2445                           ;main.c: 397: {
  2446                           ;main.c: 399: if (RightButtonPressed())
  2447  023F  2608               	fcall	_RightButtonPressed
  2448  0240  3A00               	xorlw	0
  2449  0241  1903               	skipnz
  2450  0242  2A67               	goto	l2070
  2451                           
  2452                           ;main.c: 400: {
  2453                           ;main.c: 402: if (right_delay > 3)
  2454  0243  3000               	movlw	0
  2455  0244  0020               	movlb	0	; select bank0
  2456  0245  026C               	subwf	RunRightFlash@right_delay+1,w
  2457  0246  3004               	movlw	4
  2458  0247  1903               	skipnz
  2459  0248  026B               	subwf	RunRightFlash@right_delay,w
  2460  0249  1C03               	skipc
  2461  024A  2A65               	goto	l2068
  2462                           
  2463                           ;main.c: 403: {
  2464                           ;main.c: 406: right_delay = ((right_delay * 80)/100);
  2465  024B  3064               	movlw	100
  2466  024C  00D6               	movwf	___lwdiv@divisor
  2467  024D  3000               	movlw	0
  2468  024E  00D7               	movwf	___lwdiv@divisor+1
  2469  024F  086C               	movf	RunRightFlash@right_delay+1,w
  2470  0250  00D3               	movwf	___wmul@multiplier+1
  2471  0251  086B               	movf	RunRightFlash@right_delay,w
  2472  0252  00D2               	movwf	___wmul@multiplier
  2473  0253  3050               	movlw	80
  2474  0254  00D4               	movwf	___wmul@multiplicand
  2475  0255  3000               	movlw	0
  2476  0256  00D5               	movwf	___wmul@multiplicand+1
  2477  0257  2570               	fcall	___wmul
  2478  0258  0020               	movlb	0	; select bank0
  2479  0259  0853               	movf	?___wmul+1,w
  2480  025A  00D9               	movwf	___lwdiv@dividend+1
  2481  025B  0852               	movf	?___wmul,w
  2482  025C  00D8               	movwf	___lwdiv@dividend
  2483  025D  2517               	fcall	___lwdiv
  2484  025E  0020               	movlb	0	; select bank0
  2485  025F  0857               	movf	?___lwdiv+1,w
  2486  0260  00EC               	movwf	RunRightFlash@right_delay+1
  2487  0261  0856               	movf	?___lwdiv,w
  2488  0262  00EB               	movwf	RunRightFlash@right_delay
  2489                           
  2490                           ;main.c: 407: PatternState[0] = 2;
  2491  0263  3002               	movlw	2
  2492  0264  2A93               	goto	L3
  2493  0265                     l2068:	
  2494                           ;main.c: 408: }
  2495                           
  2496                           
  2497                           ;main.c: 409: else
  2498                           ;main.c: 410: {
  2499                           ;main.c: 413: PatternState[0] = 8;
  2500  0265  3008               	movlw	8
  2501  0266  2A98               	goto	L2
  2502  0267                     l2070:	
  2503                           ;main.c: 415: }
  2504                           ;main.c: 416: }
  2505                           
  2506                           ;main.c: 414: right_delay = 250;
  2507                           
  2508                           
  2509                           ;main.c: 417: else
  2510                           ;main.c: 418: {
  2511                           ;main.c: 420: PatternState[0] = 10;
  2512  0267  300A               	movlw	10
  2513  0268  0020               	movlb	0	; select bank0
  2514  0269  2A93               	goto	L3
  2515  026A                     l2072:	
  2516                           ;main.c: 421: }
  2517                           ;main.c: 422: }
  2518                           
  2519                           
  2520                           ;main.c: 424: else if ((PatternState[0] == 9) && RightButtonPressed())
  2521  026A  3009               	movlw	9
  2522  026B  0630               	xorwf	_PatternState,w	;volatile
  2523  026C  1D03               	btfss	3,2
  2524  026D  2AA0               	goto	l2084
  2525  026E  2608               	fcall	_RightButtonPressed
  2526  026F  3A00               	xorlw	0
  2527  0270  1903               	skipnz
  2528  0271  2AA0               	goto	l2084
  2529                           
  2530                           ;main.c: 425: {
  2531                           ;main.c: 427: if (right_delay > 10)
  2532  0272  3000               	movlw	0
  2533  0273  0020               	movlb	0	; select bank0
  2534  0274  026C               	subwf	RunRightFlash@right_delay+1,w
  2535  0275  300B               	movlw	11
  2536  0276  1903               	skipnz
  2537  0277  026B               	subwf	RunRightFlash@right_delay,w
  2538  0278  1C03               	skipc
  2539  0279  2A97               	goto	l2082
  2540                           
  2541                           ;main.c: 428: {
  2542                           ;main.c: 430: right_delay = ((right_delay * 95)/100);
  2543  027A  3064               	movlw	100
  2544  027B  00D6               	movwf	___lwdiv@divisor
  2545  027C  3000               	movlw	0
  2546  027D  00D7               	movwf	___lwdiv@divisor+1
  2547  027E  086C               	movf	RunRightFlash@right_delay+1,w
  2548  027F  00D3               	movwf	___wmul@multiplier+1
  2549  0280  086B               	movf	RunRightFlash@right_delay,w
  2550  0281  00D2               	movwf	___wmul@multiplier
  2551  0282  305F               	movlw	95
  2552  0283  00D4               	movwf	___wmul@multiplicand
  2553  0284  3000               	movlw	0
  2554  0285  00D5               	movwf	___wmul@multiplicand+1
  2555  0286  2570               	fcall	___wmul
  2556  0287  0020               	movlb	0	; select bank0
  2557  0288  0853               	movf	?___wmul+1,w
  2558  0289  00D9               	movwf	___lwdiv@dividend+1
  2559  028A  0852               	movf	?___wmul,w
  2560  028B  00D8               	movwf	___lwdiv@dividend
  2561  028C  2517               	fcall	___lwdiv
  2562  028D  0020               	movlb	0	; select bank0
  2563  028E  0857               	movf	?___lwdiv+1,w
  2564  028F  00EC               	movwf	RunRightFlash@right_delay+1
  2565  0290  0856               	movf	?___lwdiv,w
  2566  0291  00EB               	movwf	RunRightFlash@right_delay
  2567                           
  2568                           ;main.c: 431: PatternState[0] = 8;
  2569  0292  3008               	movlw	8
  2570  0293                     L3:	
  2571  0293  00DE               	movwf	??_RunRightFlash
  2572  0294  085E               	movf	??_RunRightFlash,w
  2573  0295  00B0               	movwf	_PatternState	;volatile
  2574                           
  2575                           ;main.c: 432: }
  2576  0296  2AA5               	goto	l2086
  2577  0297                     l2082:	
  2578                           
  2579                           ;main.c: 433: else
  2580                           ;main.c: 434: {
  2581                           ;main.c: 437: PatternState[0] = 1;
  2582  0297  3001               	movlw	1
  2583  0298                     L2:	
  2584  0298  00DE               	movwf	??_RunRightFlash
  2585  0299  085E               	movf	??_RunRightFlash,w
  2586  029A  00B0               	movwf	_PatternState	;volatile
  2587                           
  2588                           ;main.c: 438: right_delay = 250;
  2589  029B  30FA               	movlw	250
  2590  029C  00EB               	movwf	RunRightFlash@right_delay
  2591  029D  3000               	movlw	0
  2592  029E  00EC               	movwf	RunRightFlash@right_delay+1
  2593                           
  2594                           ;main.c: 439: }
  2595                           ;main.c: 440: }
  2596  029F  2AA5               	goto	l2086
  2597  02A0                     l2084:	
  2598                           
  2599                           ;main.c: 441: else
  2600                           ;main.c: 442: {
  2601                           ;main.c: 444: PatternState[0]++;
  2602  02A0  3001               	movlw	1
  2603  02A1  0020               	movlb	0	; select bank0
  2604  02A2  00DE               	movwf	??_RunRightFlash
  2605  02A3  085E               	movf	??_RunRightFlash,w
  2606  02A4  07B0               	addwf	_PatternState,f	;volatile
  2607  02A5                     l2086:	
  2608                           
  2609                           ;main.c: 445: }
  2610                           ;main.c: 446: PatternDelay[0] = right_delay;
  2611  02A5  086C               	movf	RunRightFlash@right_delay+1,w
  2612  02A6  00A1               	movwf	_PatternDelay+1	;volatile
  2613  02A7  086B               	movf	RunRightFlash@right_delay,w
  2614  02A8  00A0               	movwf	_PatternDelay	;volatile
  2615  02A9  0008               	return
  2616  02AA                     __end_of_RunRightFlash:	
  2617                           
  2618                           	psect	swtext1
  2619  05C5                     __pswtext1:	
  2620  05C5                     S2456:	
  2621  05C5  29CC               	ljmp	l2026
  2622  05C6  29D1               	ljmp	l2028
  2623  05C7  29DA               	ljmp	l2030
  2624  05C8  29E3               	ljmp	l2032
  2625  05C9  29EC               	ljmp	l2034
  2626  05CA  29F5               	ljmp	l2036
  2627  05CB  29FE               	ljmp	l2038
  2628  05CC  2A07               	ljmp	l2040
  2629  05CD  2A10               	ljmp	l2042
  2630  05CE  2A19               	ljmp	l2044
  2631  05CF  2A22               	ljmp	l2046
  2632                           
  2633                           	psect	text11
  2634  02AA                     __ptext11:	
  2635 ;; *************** function _RunLeftFlash *****************
  2636 ;; Defined at:
  2637 ;;		line 451 in file "main.c"
  2638 ;; Parameters:    Size  Location     Type
  2639 ;;		None
  2640 ;; Auto vars:     Size  Location     Type
  2641 ;;		None
  2642 ;; Return value:  Size  Location     Type
  2643 ;;                  1    wreg      void 
  2644 ;; Registers used:
  2645 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2646 ;; Tracked objects:
  2647 ;;		On entry : 0/0
  2648 ;;		On exit  : 0/0
  2649 ;;		Unchanged: 0/0
  2650 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2651 ;;      Params:         0       0       0       0
  2652 ;;      Locals:         0       0       0       0
  2653 ;;      Temps:          0       1       0       0
  2654 ;;      Totals:         0       1       0       0
  2655 ;;Total ram usage:        1 bytes
  2656 ;; Hardware stack levels used:    1
  2657 ;; Hardware stack levels required when called:    5
  2658 ;; This function calls:
  2659 ;;		_LeftButtonPressed
  2660 ;;		_SetLEDOff
  2661 ;;		_SetLEDOn
  2662 ;;		___lwdiv
  2663 ;;		___wmul
  2664 ;; This function is called by:
  2665 ;;		_main
  2666 ;; This function uses a non-reentrant model
  2667 ;;
  2668                           
  2669                           
  2670                           ;psect for function _RunLeftFlash
  2671  02AA                     _RunLeftFlash:	
  2672                           
  2673                           ;main.c: 453: static uint16_t left_delay = 250;
  2674                           ;main.c: 455: if (PatternDelay[1] == 0)
  2675                           
  2676                           ;incstack = 0
  2677                           ; Regs used in _RunLeftFlash: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2678  02AA  0020               	movlb	0	; select bank0
  2679  02AB  0822               	movf	_PatternDelay+2,w	;volatile
  2680  02AC  0423               	iorwf	_PatternDelay+3,w	;volatile
  2681  02AD  1D03               	btfss	3,2
  2682  02AE  0008               	return
  2683  02AF  2B11               	goto	l2124
  2684  02B0                     l2096:	
  2685                           ;main.c: 458: {
  2686                           ;main.c: 459: case 0:
  2687                           
  2688                           ;main.c: 456: {
  2689                           ;main.c: 457: switch(PatternState[1])
  2690                           
  2691                           
  2692                           ;main.c: 461: left_delay = 250;
  2693  02B0  30FA               	movlw	250
  2694  02B1  00E9               	movwf	RunLeftFlash@left_delay
  2695  02B2  3000               	movlw	0
  2696  02B3  00EA               	movwf	RunLeftFlash@left_delay+1
  2697                           
  2698                           ;main.c: 462: break;
  2699  02B4  2B1B               	goto	l2126
  2700  02B5                     l2098:	
  2701                           ;main.c: 464: case 1:
  2702                           
  2703                           
  2704                           ;main.c: 465: SetLEDOn(0x80);
  2705  02B5  3080               	movlw	128
  2706  02B6  25F8               	fcall	_SetLEDOn
  2707                           
  2708                           ;main.c: 466: SetLEDOff(0x40);
  2709  02B7  3040               	movlw	64
  2710  02B8  2600               	fcall	_SetLEDOff
  2711                           
  2712                           ;main.c: 467: SetLEDOff(0x20);
  2713  02B9  3020               	movlw	32
  2714  02BA  2600               	fcall	_SetLEDOff
  2715                           
  2716                           ;main.c: 468: SetLEDOff(0x10);
  2717  02BB  3010               	movlw	16
  2718  02BC  2600               	fcall	_SetLEDOff
  2719                           
  2720                           ;main.c: 469: break;
  2721  02BD  2B1B               	goto	l2126
  2722  02BE                     l2100:	
  2723                           ;main.c: 471: case 2:
  2724                           
  2725                           
  2726                           ;main.c: 472: SetLEDOff(0x80);
  2727  02BE  3080               	movlw	128
  2728  02BF  2600               	fcall	_SetLEDOff
  2729                           
  2730                           ;main.c: 473: SetLEDOn(0x40);
  2731  02C0  3040               	movlw	64
  2732  02C1  25F8               	fcall	_SetLEDOn
  2733                           
  2734                           ;main.c: 474: SetLEDOff(0x20);
  2735  02C2  3020               	movlw	32
  2736  02C3  2600               	fcall	_SetLEDOff
  2737                           
  2738                           ;main.c: 475: SetLEDOff(0x10);
  2739  02C4  3010               	movlw	16
  2740  02C5  2600               	fcall	_SetLEDOff
  2741                           
  2742                           ;main.c: 476: break;
  2743  02C6  2B1B               	goto	l2126
  2744  02C7                     l2102:	
  2745                           ;main.c: 478: case 3:
  2746                           
  2747                           
  2748                           ;main.c: 479: SetLEDOff(0x80);
  2749  02C7  3080               	movlw	128
  2750  02C8  2600               	fcall	_SetLEDOff
  2751                           
  2752                           ;main.c: 480: SetLEDOff(0x40);
  2753  02C9  3040               	movlw	64
  2754  02CA  2600               	fcall	_SetLEDOff
  2755                           
  2756                           ;main.c: 481: SetLEDOn(0x20);
  2757  02CB  3020               	movlw	32
  2758  02CC  25F8               	fcall	_SetLEDOn
  2759                           
  2760                           ;main.c: 482: SetLEDOff(0x10);
  2761  02CD  3010               	movlw	16
  2762  02CE  2600               	fcall	_SetLEDOff
  2763                           
  2764                           ;main.c: 483: break;
  2765  02CF  2B1B               	goto	l2126
  2766  02D0                     l2104:	
  2767                           ;main.c: 485: case 4:
  2768                           
  2769                           
  2770                           ;main.c: 486: SetLEDOff(0x80);
  2771  02D0  3080               	movlw	128
  2772  02D1  2600               	fcall	_SetLEDOff
  2773                           
  2774                           ;main.c: 487: SetLEDOff(0x40);
  2775  02D2  3040               	movlw	64
  2776  02D3  2600               	fcall	_SetLEDOff
  2777                           
  2778                           ;main.c: 488: SetLEDOff(0x20);
  2779  02D4  3020               	movlw	32
  2780  02D5  2600               	fcall	_SetLEDOff
  2781                           
  2782                           ;main.c: 489: SetLEDOn(0x10);
  2783  02D6  3010               	movlw	16
  2784  02D7  25F8               	fcall	_SetLEDOn
  2785                           
  2786                           ;main.c: 490: break;
  2787  02D8  2B1B               	goto	l2126
  2788  02D9                     l2106:	
  2789                           ;main.c: 492: case 5:
  2790                           
  2791                           
  2792                           ;main.c: 493: SetLEDOff(0x80);
  2793  02D9  3080               	movlw	128
  2794  02DA  2600               	fcall	_SetLEDOff
  2795                           
  2796                           ;main.c: 494: SetLEDOff(0x40);
  2797  02DB  3040               	movlw	64
  2798  02DC  2600               	fcall	_SetLEDOff
  2799                           
  2800                           ;main.c: 495: SetLEDOn(0x20);
  2801  02DD  3020               	movlw	32
  2802  02DE  25F8               	fcall	_SetLEDOn
  2803                           
  2804                           ;main.c: 496: SetLEDOff(0x10);
  2805  02DF  3010               	movlw	16
  2806  02E0  2600               	fcall	_SetLEDOff
  2807                           
  2808                           ;main.c: 497: break;
  2809  02E1  2B1B               	goto	l2126
  2810  02E2                     l2108:	
  2811                           ;main.c: 499: case 6:
  2812                           
  2813                           
  2814                           ;main.c: 500: SetLEDOff(0x80);
  2815  02E2  3080               	movlw	128
  2816  02E3  2600               	fcall	_SetLEDOff
  2817                           
  2818                           ;main.c: 501: SetLEDOn(0x40);
  2819  02E4  3040               	movlw	64
  2820  02E5  25F8               	fcall	_SetLEDOn
  2821                           
  2822                           ;main.c: 502: SetLEDOff(0x20);
  2823  02E6  3020               	movlw	32
  2824  02E7  2600               	fcall	_SetLEDOff
  2825                           
  2826                           ;main.c: 503: SetLEDOff(0x10);
  2827  02E8  3010               	movlw	16
  2828  02E9  2600               	fcall	_SetLEDOff
  2829                           
  2830                           ;main.c: 504: break;
  2831  02EA  2B1B               	goto	l2126
  2832  02EB                     l2110:	
  2833                           ;main.c: 506: case 7:
  2834                           
  2835                           
  2836                           ;main.c: 507: SetLEDOn(0x80);
  2837  02EB  3080               	movlw	128
  2838  02EC  25F8               	fcall	_SetLEDOn
  2839                           
  2840                           ;main.c: 508: SetLEDOff(0x40);
  2841  02ED  3040               	movlw	64
  2842  02EE  2600               	fcall	_SetLEDOff
  2843                           
  2844                           ;main.c: 509: SetLEDOff(0x20);
  2845  02EF  3020               	movlw	32
  2846  02F0  2600               	fcall	_SetLEDOff
  2847                           
  2848                           ;main.c: 510: SetLEDOff(0x10);
  2849  02F1  3010               	movlw	16
  2850  02F2  2600               	fcall	_SetLEDOff
  2851                           
  2852                           ;main.c: 511: break;
  2853  02F3  2B1B               	goto	l2126
  2854  02F4                     l2112:	
  2855                           ;main.c: 513: case 8:
  2856                           
  2857                           
  2858                           ;main.c: 514: SetLEDOn(0x80);
  2859  02F4  3080               	movlw	128
  2860  02F5  25F8               	fcall	_SetLEDOn
  2861                           
  2862                           ;main.c: 515: SetLEDOn(0x40);
  2863  02F6  3040               	movlw	64
  2864  02F7  25F8               	fcall	_SetLEDOn
  2865                           
  2866                           ;main.c: 516: SetLEDOn(0x20);
  2867  02F8  3020               	movlw	32
  2868  02F9  25F8               	fcall	_SetLEDOn
  2869                           
  2870                           ;main.c: 517: SetLEDOn(0x10);
  2871  02FA  3010               	movlw	16
  2872  02FB  25F8               	fcall	_SetLEDOn
  2873                           
  2874                           ;main.c: 518: break;
  2875  02FC  2B1B               	goto	l2126
  2876  02FD                     l2114:	
  2877                           ;main.c: 520: case 9:
  2878                           
  2879                           
  2880                           ;main.c: 521: SetLEDOff(0x80);
  2881  02FD  3080               	movlw	128
  2882  02FE  2600               	fcall	_SetLEDOff
  2883                           
  2884                           ;main.c: 522: SetLEDOff(0x40);
  2885  02FF  3040               	movlw	64
  2886  0300  2600               	fcall	_SetLEDOff
  2887                           
  2888                           ;main.c: 523: SetLEDOff(0x20);
  2889  0301  3020               	movlw	32
  2890  0302  2600               	fcall	_SetLEDOff
  2891                           
  2892                           ;main.c: 524: SetLEDOff(0x10);
  2893  0303  3010               	movlw	16
  2894  0304  2600               	fcall	_SetLEDOff
  2895                           
  2896                           ;main.c: 525: break;
  2897  0305  2B1B               	goto	l2126
  2898  0306                     l2116:	
  2899                           ;main.c: 527: case 10:
  2900                           
  2901                           
  2902                           ;main.c: 528: SetLEDOff(0x80);
  2903  0306  3080               	movlw	128
  2904  0307  2600               	fcall	_SetLEDOff
  2905                           
  2906                           ;main.c: 529: SetLEDOff(0x40);
  2907  0308  3040               	movlw	64
  2908  0309  2600               	fcall	_SetLEDOff
  2909                           
  2910                           ;main.c: 530: SetLEDOff(0x20);
  2911  030A  3020               	movlw	32
  2912  030B  2600               	fcall	_SetLEDOff
  2913                           
  2914                           ;main.c: 531: SetLEDOff(0x10);
  2915  030C  3010               	movlw	16
  2916  030D  2600               	fcall	_SetLEDOff
  2917                           
  2918                           ;main.c: 532: PatternState[1] = 0;
  2919  030E  0020               	movlb	0	; select bank0
  2920  030F                     l2120:	
  2921                           ;main.c: 535: default:
  2922                           
  2923                           ;main.c: 533: break;
  2924                           
  2925                           
  2926                           ;main.c: 536: PatternState[1] = 0;
  2927  030F  01B1               	clrf	_PatternState+1	;volatile
  2928                           
  2929                           ;main.c: 538: }
  2930                           
  2931                           ;main.c: 537: break;
  2932  0310  2B1B               	goto	l2126
  2933  0311                     l2124:	
  2934  0311  0831               	movf	_PatternState+1,w	;volatile
  2935                           
  2936                           ; Switch size 1, requested type "space"
  2937                           ; Number of cases is 11, Range of values is 0 to 10
  2938                           ; switch strategies available:
  2939                           ; Name         Instructions Cycles
  2940                           ; direct_byte           28     6 (fixed)
  2941                           ; simple_byte           34    18 (average)
  2942                           ; jumptable            260     6 (fixed)
  2943                           ;	Chosen strategy is direct_byte
  2944  0312  0084               	movwf	4
  2945  0313  300B               	movlw	11
  2946  0314  0204               	subwf	4,w
  2947  0315  1803               	skipnc
  2948  0316  2B0F               	goto	l2120
  2949  0317  3185               	movlp	high S2458
  2950  0318  30D0               	movlw	low S2458
  2951  0319  0704               	addwf	4,w
  2952  031A  0082               	movwf	2
  2953  031B                     l2126:	
  2954                           
  2955                           ;main.c: 541: if (PatternState[1] != 0)
  2956  031B  0020               	movlb	0	; select bank0
  2957  031C  0831               	movf	_PatternState+1,w	;volatile
  2958  031D  1903               	btfsc	3,2
  2959  031E  0008               	return
  2960                           
  2961                           ;main.c: 542: {
  2962                           ;main.c: 543: if (PatternState[1] == 7)
  2963  031F  3007               	movlw	7
  2964  0320  0631               	xorwf	_PatternState+1,w	;volatile
  2965  0321  1D03               	btfss	3,2
  2966  0322  2B4E               	goto	l2142
  2967                           
  2968                           ;main.c: 544: {
  2969                           ;main.c: 545: if (LeftButtonPressed())
  2970  0323  2610               	fcall	_LeftButtonPressed
  2971  0324  3A00               	xorlw	0
  2972  0325  1903               	skipnz
  2973  0326  2B4B               	goto	l2140
  2974                           
  2975                           ;main.c: 546: {
  2976                           ;main.c: 547: if (left_delay > 3)
  2977  0327  3000               	movlw	0
  2978  0328  0020               	movlb	0	; select bank0
  2979  0329  026A               	subwf	RunLeftFlash@left_delay+1,w
  2980  032A  3004               	movlw	4
  2981  032B  1903               	skipnz
  2982  032C  0269               	subwf	RunLeftFlash@left_delay,w
  2983  032D  1C03               	skipc
  2984  032E  2B49               	goto	l2138
  2985                           
  2986                           ;main.c: 548: {
  2987                           ;main.c: 549: left_delay = ((left_delay * 80)/100);
  2988  032F  3064               	movlw	100
  2989  0330  00D6               	movwf	___lwdiv@divisor
  2990  0331  3000               	movlw	0
  2991  0332  00D7               	movwf	___lwdiv@divisor+1
  2992  0333  086A               	movf	RunLeftFlash@left_delay+1,w
  2993  0334  00D3               	movwf	___wmul@multiplier+1
  2994  0335  0869               	movf	RunLeftFlash@left_delay,w
  2995  0336  00D2               	movwf	___wmul@multiplier
  2996  0337  3050               	movlw	80
  2997  0338  00D4               	movwf	___wmul@multiplicand
  2998  0339  3000               	movlw	0
  2999  033A  00D5               	movwf	___wmul@multiplicand+1
  3000  033B  2570               	fcall	___wmul
  3001  033C  0020               	movlb	0	; select bank0
  3002  033D  0853               	movf	?___wmul+1,w
  3003  033E  00D9               	movwf	___lwdiv@dividend+1
  3004  033F  0852               	movf	?___wmul,w
  3005  0340  00D8               	movwf	___lwdiv@dividend
  3006  0341  2517               	fcall	___lwdiv
  3007  0342  0020               	movlb	0	; select bank0
  3008  0343  0857               	movf	?___lwdiv+1,w
  3009  0344  00EA               	movwf	RunLeftFlash@left_delay+1
  3010  0345  0856               	movf	?___lwdiv,w
  3011  0346  00E9               	movwf	RunLeftFlash@left_delay
  3012                           
  3013                           ;main.c: 550: PatternState[1] = 2;
  3014  0347  3002               	movlw	2
  3015  0348  2B77               	goto	L6
  3016  0349                     l2138:	
  3017                           ;main.c: 551: }
  3018                           
  3019                           
  3020                           ;main.c: 552: else
  3021                           ;main.c: 553: {
  3022                           ;main.c: 554: PatternState[1] = 8;
  3023  0349  3008               	movlw	8
  3024  034A  2B7C               	goto	L5
  3025  034B                     l2140:	
  3026                           ;main.c: 556: }
  3027                           ;main.c: 557: }
  3028                           
  3029                           ;main.c: 555: left_delay = 250;
  3030                           
  3031                           
  3032                           ;main.c: 558: else
  3033                           ;main.c: 559: {
  3034                           ;main.c: 560: PatternState[1] = 10;
  3035  034B  300A               	movlw	10
  3036  034C  0020               	movlb	0	; select bank0
  3037  034D  2B77               	goto	L6
  3038  034E                     l2142:	
  3039                           ;main.c: 561: }
  3040                           ;main.c: 562: }
  3041                           
  3042                           
  3043                           ;main.c: 563: else if ((PatternState[1] == 9) && LeftButtonPressed())
  3044  034E  3009               	movlw	9
  3045  034F  0631               	xorwf	_PatternState+1,w	;volatile
  3046  0350  1D03               	btfss	3,2
  3047  0351  2B84               	goto	l2154
  3048  0352  2610               	fcall	_LeftButtonPressed
  3049  0353  3A00               	xorlw	0
  3050  0354  1903               	skipnz
  3051  0355  2B84               	goto	l2154
  3052                           
  3053                           ;main.c: 564: {
  3054                           ;main.c: 565: if (left_delay > 10)
  3055  0356  3000               	movlw	0
  3056  0357  0020               	movlb	0	; select bank0
  3057  0358  026A               	subwf	RunLeftFlash@left_delay+1,w
  3058  0359  300B               	movlw	11
  3059  035A  1903               	skipnz
  3060  035B  0269               	subwf	RunLeftFlash@left_delay,w
  3061  035C  1C03               	skipc
  3062  035D  2B7B               	goto	l2152
  3063                           
  3064                           ;main.c: 566: {
  3065                           ;main.c: 567: left_delay = ((left_delay * 95)/100);
  3066  035E  3064               	movlw	100
  3067  035F  00D6               	movwf	___lwdiv@divisor
  3068  0360  3000               	movlw	0
  3069  0361  00D7               	movwf	___lwdiv@divisor+1
  3070  0362  086A               	movf	RunLeftFlash@left_delay+1,w
  3071  0363  00D3               	movwf	___wmul@multiplier+1
  3072  0364  0869               	movf	RunLeftFlash@left_delay,w
  3073  0365  00D2               	movwf	___wmul@multiplier
  3074  0366  305F               	movlw	95
  3075  0367  00D4               	movwf	___wmul@multiplicand
  3076  0368  3000               	movlw	0
  3077  0369  00D5               	movwf	___wmul@multiplicand+1
  3078  036A  2570               	fcall	___wmul
  3079  036B  0020               	movlb	0	; select bank0
  3080  036C  0853               	movf	?___wmul+1,w
  3081  036D  00D9               	movwf	___lwdiv@dividend+1
  3082  036E  0852               	movf	?___wmul,w
  3083  036F  00D8               	movwf	___lwdiv@dividend
  3084  0370  2517               	fcall	___lwdiv
  3085  0371  0020               	movlb	0	; select bank0
  3086  0372  0857               	movf	?___lwdiv+1,w
  3087  0373  00EA               	movwf	RunLeftFlash@left_delay+1
  3088  0374  0856               	movf	?___lwdiv,w
  3089  0375  00E9               	movwf	RunLeftFlash@left_delay
  3090                           
  3091                           ;main.c: 568: PatternState[1] = 8;
  3092  0376  3008               	movlw	8
  3093  0377                     L6:	
  3094  0377  00DE               	movwf	??_RunLeftFlash
  3095  0378  085E               	movf	??_RunLeftFlash,w
  3096  0379  00B1               	movwf	_PatternState+1	;volatile
  3097                           
  3098                           ;main.c: 569: }
  3099  037A  2B89               	goto	l2156
  3100  037B                     l2152:	
  3101                           
  3102                           ;main.c: 570: else
  3103                           ;main.c: 571: {
  3104                           ;main.c: 572: PatternState[1] = 1;
  3105  037B  3001               	movlw	1
  3106  037C                     L5:	
  3107  037C  00DE               	movwf	??_RunLeftFlash
  3108  037D  085E               	movf	??_RunLeftFlash,w
  3109  037E  00B1               	movwf	_PatternState+1	;volatile
  3110                           
  3111                           ;main.c: 573: left_delay = 250;
  3112  037F  30FA               	movlw	250
  3113  0380  00E9               	movwf	RunLeftFlash@left_delay
  3114  0381  3000               	movlw	0
  3115  0382  00EA               	movwf	RunLeftFlash@left_delay+1
  3116                           
  3117                           ;main.c: 574: }
  3118                           ;main.c: 575: }
  3119  0383  2B89               	goto	l2156
  3120  0384                     l2154:	
  3121                           
  3122                           ;main.c: 576: else
  3123                           ;main.c: 577: {
  3124                           ;main.c: 578: PatternState[1]++;
  3125  0384  3001               	movlw	1
  3126  0385  0020               	movlb	0	; select bank0
  3127  0386  00DE               	movwf	??_RunLeftFlash
  3128  0387  085E               	movf	??_RunLeftFlash,w
  3129  0388  07B1               	addwf	_PatternState+1,f	;volatile
  3130  0389                     l2156:	
  3131                           
  3132                           ;main.c: 579: }
  3133                           ;main.c: 580: PatternDelay[1] = left_delay;
  3134  0389  086A               	movf	RunLeftFlash@left_delay+1,w
  3135  038A  00A3               	movwf	_PatternDelay+3	;volatile
  3136  038B  0869               	movf	RunLeftFlash@left_delay,w
  3137  038C  00A2               	movwf	_PatternDelay+2	;volatile
  3138  038D  0008               	return
  3139  038E                     __end_of_RunLeftFlash:	
  3140                           
  3141                           	psect	swtext2
  3142  05D0                     __pswtext2:	
  3143  05D0                     S2458:	
  3144  05D0  2AB0               	ljmp	l2096
  3145  05D1  2AB5               	ljmp	l2098
  3146  05D2  2ABE               	ljmp	l2100
  3147  05D3  2AC7               	ljmp	l2102
  3148  05D4  2AD0               	ljmp	l2104
  3149  05D5  2AD9               	ljmp	l2106
  3150  05D6  2AE2               	ljmp	l2108
  3151  05D7  2AEB               	ljmp	l2110
  3152  05D8  2AF4               	ljmp	l2112
  3153  05D9  2AFD               	ljmp	l2114
  3154  05DA  2B06               	ljmp	l2116
  3155                           
  3156                           	psect	text12
  3157  0570                     __ptext12:	
  3158 ;; *************** function ___wmul *****************
  3159 ;; Defined at:
  3160 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
  3161 ;; Parameters:    Size  Location     Type
  3162 ;;  multiplier      2    0[BANK0 ] unsigned int 
  3163 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  3164 ;; Auto vars:     Size  Location     Type
  3165 ;;  product         2    4[COMMON] unsigned int 
  3166 ;; Return value:  Size  Location     Type
  3167 ;;                  2    0[BANK0 ] unsigned int 
  3168 ;; Registers used:
  3169 ;;		wreg, status,2, status,0
  3170 ;; Tracked objects:
  3171 ;;		On entry : 0/0
  3172 ;;		On exit  : 0/0
  3173 ;;		Unchanged: 0/0
  3174 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3175 ;;      Params:         0       4       0       0
  3176 ;;      Locals:         2       0       0       0
  3177 ;;      Temps:          0       0       0       0
  3178 ;;      Totals:         2       4       0       0
  3179 ;;Total ram usage:        6 bytes
  3180 ;; Hardware stack levels used:    1
  3181 ;; Hardware stack levels required when called:    4
  3182 ;; This function calls:
  3183 ;;		Nothing
  3184 ;; This function is called by:
  3185 ;;		_RunRightFlash
  3186 ;;		_RunLeftFlash
  3187 ;; This function uses a non-reentrant model
  3188 ;;
  3189                           
  3190                           
  3191                           ;psect for function ___wmul
  3192  0570                     ___wmul:	
  3193                           
  3194                           ;incstack = 0
  3195                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  3196  0570  01F4               	clrf	___wmul@product
  3197  0571  01F5               	clrf	___wmul@product+1
  3198  0572                     l2010:	
  3199  0572  0020               	movlb	0	; select bank0
  3200  0573  1C52               	btfss	___wmul@multiplier,0
  3201  0574  2D79               	goto	l364
  3202  0575  0854               	movf	___wmul@multiplicand,w
  3203  0576  07F4               	addwf	___wmul@product,f
  3204  0577  0855               	movf	___wmul@multiplicand+1,w
  3205  0578  3DF5               	addwfc	___wmul@product+1,f
  3206  0579                     l364:	
  3207  0579  3001               	movlw	1
  3208  057A                     u1805:	
  3209  057A  35D4               	lslf	___wmul@multiplicand,f
  3210  057B  0DD5               	rlf	___wmul@multiplicand+1,f
  3211  057C  0B89               	decfsz	9,f
  3212  057D  2D7A               	goto	u1805
  3213  057E  3001               	movlw	1
  3214  057F                     u1815:	
  3215  057F  36D3               	lsrf	___wmul@multiplier+1,f
  3216  0580  0CD2               	rrf	___wmul@multiplier,f
  3217  0581  0B89               	decfsz	9,f
  3218  0582  2D7F               	goto	u1815
  3219  0583  0852               	movf	___wmul@multiplier,w
  3220  0584  0453               	iorwf	___wmul@multiplier+1,w
  3221  0585  1D03               	btfss	3,2
  3222  0586  2D72               	goto	l2010
  3223  0587  0875               	movf	___wmul@product+1,w
  3224  0588  00D3               	movwf	?___wmul+1
  3225  0589  0874               	movf	___wmul@product,w
  3226  058A  00D2               	movwf	?___wmul
  3227  058B  0008               	return
  3228  058C                     __end_of___wmul:	
  3229                           
  3230                           	psect	text13
  3231  0517                     __ptext13:	
  3232 ;; *************** function ___lwdiv *****************
  3233 ;; Defined at:
  3234 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwdiv.c"
  3235 ;; Parameters:    Size  Location     Type
  3236 ;;  divisor         2    4[BANK0 ] unsigned int 
  3237 ;;  dividend        2    6[BANK0 ] unsigned int 
  3238 ;; Auto vars:     Size  Location     Type
  3239 ;;  quotient        2    9[BANK0 ] unsigned int 
  3240 ;;  counter         1   11[BANK0 ] unsigned char 
  3241 ;; Return value:  Size  Location     Type
  3242 ;;                  2    4[BANK0 ] unsigned int 
  3243 ;; Registers used:
  3244 ;;		wreg, status,2, status,0
  3245 ;; Tracked objects:
  3246 ;;		On entry : 0/0
  3247 ;;		On exit  : 0/0
  3248 ;;		Unchanged: 0/0
  3249 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3250 ;;      Params:         0       4       0       0
  3251 ;;      Locals:         0       3       0       0
  3252 ;;      Temps:          0       1       0       0
  3253 ;;      Totals:         0       8       0       0
  3254 ;;Total ram usage:        8 bytes
  3255 ;; Hardware stack levels used:    1
  3256 ;; Hardware stack levels required when called:    4
  3257 ;; This function calls:
  3258 ;;		Nothing
  3259 ;; This function is called by:
  3260 ;;		_RunRightFlash
  3261 ;;		_RunLeftFlash
  3262 ;; This function uses a non-reentrant model
  3263 ;;
  3264                           
  3265                           
  3266                           ;psect for function ___lwdiv
  3267  0517                     ___lwdiv:	
  3268                           
  3269                           ;incstack = 0
  3270                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  3271  0517  0020               	movlb	0	; select bank0
  3272  0518  01DB               	clrf	___lwdiv@quotient
  3273  0519  01DC               	clrf	___lwdiv@quotient+1
  3274  051A  0856               	movf	___lwdiv@divisor,w
  3275  051B  0457               	iorwf	___lwdiv@divisor+1,w
  3276  051C  1903               	btfsc	3,2
  3277  051D  2D47               	goto	l1540
  3278  051E  01DD               	clrf	___lwdiv@counter
  3279  051F  0ADD               	incf	___lwdiv@counter,f
  3280  0520                     l1528:	
  3281  0520  1BD7               	btfsc	___lwdiv@divisor+1,7
  3282  0521  2D2C               	goto	l1530
  3283  0522  3001               	movlw	1
  3284  0523                     u1115:	
  3285  0523  35D6               	lslf	___lwdiv@divisor,f
  3286  0524  0DD7               	rlf	___lwdiv@divisor+1,f
  3287  0525  0B89               	decfsz	9,f
  3288  0526  2D23               	goto	u1115
  3289  0527  3001               	movlw	1
  3290  0528  00DA               	movwf	??___lwdiv
  3291  0529  085A               	movf	??___lwdiv,w
  3292  052A  07DD               	addwf	___lwdiv@counter,f
  3293  052B  2D20               	goto	l1528
  3294  052C                     l1530:	
  3295  052C  3001               	movlw	1
  3296  052D                     u1135:	
  3297  052D  35DB               	lslf	___lwdiv@quotient,f
  3298  052E  0DDC               	rlf	___lwdiv@quotient+1,f
  3299  052F  0B89               	decfsz	9,f
  3300  0530  2D2D               	goto	u1135
  3301  0531  0857               	movf	___lwdiv@divisor+1,w
  3302  0532  0259               	subwf	___lwdiv@dividend+1,w
  3303  0533  1D03               	skipz
  3304  0534  2D37               	goto	u1145
  3305  0535  0856               	movf	___lwdiv@divisor,w
  3306  0536  0258               	subwf	___lwdiv@dividend,w
  3307  0537                     u1145:	
  3308  0537  1C03               	skipc
  3309  0538  2D3E               	goto	l1536
  3310  0539  0856               	movf	___lwdiv@divisor,w
  3311  053A  02D8               	subwf	___lwdiv@dividend,f
  3312  053B  0857               	movf	___lwdiv@divisor+1,w
  3313  053C  3BD9               	subwfb	___lwdiv@dividend+1,f
  3314  053D  145B               	bsf	___lwdiv@quotient,0
  3315  053E                     l1536:	
  3316  053E  3001               	movlw	1
  3317  053F                     u1155:	
  3318  053F  36D7               	lsrf	___lwdiv@divisor+1,f
  3319  0540  0CD6               	rrf	___lwdiv@divisor,f
  3320  0541  0B89               	decfsz	9,f
  3321  0542  2D3F               	goto	u1155
  3322  0543  3001               	movlw	1
  3323  0544  02DD               	subwf	___lwdiv@counter,f
  3324  0545  1D03               	btfss	3,2
  3325  0546  2D2C               	goto	l1530
  3326  0547                     l1540:	
  3327  0547  085C               	movf	___lwdiv@quotient+1,w
  3328  0548  00D7               	movwf	?___lwdiv+1
  3329  0549  085B               	movf	___lwdiv@quotient,w
  3330  054A  00D6               	movwf	?___lwdiv
  3331  054B  0008               	return
  3332  054C                     __end_of___lwdiv:	
  3333                           
  3334                           	psect	text14
  3335  0039                     __ptext14:	
  3336 ;; *************** function _RunGame *****************
  3337 ;; Defined at:
  3338 ;;		line 585 in file "main.c"
  3339 ;; Parameters:    Size  Location     Type
  3340 ;;		None
  3341 ;; Auto vars:     Size  Location     Type
  3342 ;;		None
  3343 ;; Return value:  Size  Location     Type
  3344 ;;                  1    wreg      void 
  3345 ;; Registers used:
  3346 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3347 ;; Tracked objects:
  3348 ;;		On entry : 0/0
  3349 ;;		On exit  : 0/0
  3350 ;;		Unchanged: 0/0
  3351 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3352 ;;      Params:         0       0       0       0
  3353 ;;      Locals:         0       0       0       0
  3354 ;;      Temps:          0       4       0       0
  3355 ;;      Totals:         0       4       0       0
  3356 ;;Total ram usage:        4 bytes
  3357 ;; Hardware stack levels used:    1
  3358 ;; Hardware stack levels required when called:    5
  3359 ;; This function calls:
  3360 ;;		_SetLEDOff
  3361 ;;		_SetLEDOn
  3362 ;; This function is called by:
  3363 ;;		_main
  3364 ;; This function uses a non-reentrant model
  3365 ;;
  3366                           
  3367                           
  3368                           ;psect for function _RunGame
  3369  0039                     _RunGame:	
  3370                           
  3371                           ;main.c: 587: static uint8_t num_leds_lit = 1;
  3372                           ;main.c: 588: static uint32_t last_button_press_time = 0;
  3373                           ;main.c: 589: static uint32_t next_decrement_time = 0;
  3374                           ;main.c: 591: if (PatternDelay[2] == 0)
  3375                           
  3376                           ;incstack = 0
  3377                           ; Regs used in _RunGame: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3378  0039  0020               	movlb	0	; select bank0
  3379  003A  0824               	movf	_PatternDelay+4,w	;volatile
  3380  003B  0425               	iorwf	_PatternDelay+5,w	;volatile
  3381  003C  1D03               	btfss	3,2
  3382  003D  0008               	return
  3383                           
  3384                           ;main.c: 592: {
  3385                           ;main.c: 593: if (PatternState[2])
  3386  003E  0832               	movf	_PatternState+2,w	;volatile
  3387  003F  1903               	btfsc	3,2
  3388  0040  0008               	return
  3389  0041  28CA               	goto	l2186
  3390  0042                     l2168:	
  3391                           ;main.c: 601: case 1:
  3392                           
  3393                           ;main.c: 599: break;
  3394                           
  3395                           ;main.c: 596: {
  3396                           ;main.c: 597: case 0:
  3397                           
  3398                           ;main.c: 594: {
  3399                           ;main.c: 595: switch(num_leds_lit)
  3400                           
  3401                           
  3402                           ;main.c: 602: SetLEDOn(0x01);
  3403  0042  3001               	movlw	1
  3404  0043  25F8               	fcall	_SetLEDOn
  3405                           
  3406                           ;main.c: 603: SetLEDOff(0x02);
  3407  0044  3002               	movlw	2
  3408  0045  2600               	fcall	_SetLEDOff
  3409                           
  3410                           ;main.c: 604: SetLEDOff(0x04);
  3411  0046  3004               	movlw	4
  3412  0047  2600               	fcall	_SetLEDOff
  3413                           
  3414                           ;main.c: 605: SetLEDOff(0x08);
  3415  0048  3008               	movlw	8
  3416  0049  2600               	fcall	_SetLEDOff
  3417                           
  3418                           ;main.c: 606: SetLEDOff(0x10);
  3419  004A  3010               	movlw	16
  3420  004B  2600               	fcall	_SetLEDOff
  3421                           
  3422                           ;main.c: 607: SetLEDOff(0x20);
  3423  004C  3020               	movlw	32
  3424  004D  2600               	fcall	_SetLEDOff
  3425                           
  3426                           ;main.c: 608: SetLEDOff(0x40);
  3427  004E  3040               	movlw	64
  3428  004F  2600               	fcall	_SetLEDOff
  3429                           
  3430                           ;main.c: 609: SetLEDOff(0x80);
  3431  0050  3080               	movlw	128
  3432  0051  2600               	fcall	_SetLEDOff
  3433                           
  3434                           ;main.c: 610: break;
  3435  0052  28D5               	goto	l2188
  3436  0053                     l2170:	
  3437                           ;main.c: 612: case 2:
  3438                           
  3439                           
  3440                           ;main.c: 613: SetLEDOn(0x01);
  3441  0053  3001               	movlw	1
  3442  0054  25F8               	fcall	_SetLEDOn
  3443                           
  3444                           ;main.c: 614: SetLEDOn(0x02);
  3445  0055  3002               	movlw	2
  3446  0056  25F8               	fcall	_SetLEDOn
  3447                           
  3448                           ;main.c: 615: SetLEDOff(0x04);
  3449  0057  3004               	movlw	4
  3450  0058  2600               	fcall	_SetLEDOff
  3451                           
  3452                           ;main.c: 616: SetLEDOff(0x08);
  3453  0059  3008               	movlw	8
  3454  005A  2600               	fcall	_SetLEDOff
  3455                           
  3456                           ;main.c: 617: SetLEDOff(0x10);
  3457  005B  3010               	movlw	16
  3458  005C  2600               	fcall	_SetLEDOff
  3459                           
  3460                           ;main.c: 618: SetLEDOff(0x20);
  3461  005D  3020               	movlw	32
  3462  005E  2600               	fcall	_SetLEDOff
  3463                           
  3464                           ;main.c: 619: SetLEDOff(0x40);
  3465  005F  3040               	movlw	64
  3466  0060  2600               	fcall	_SetLEDOff
  3467                           
  3468                           ;main.c: 620: SetLEDOff(0x80);
  3469  0061  3080               	movlw	128
  3470  0062  2600               	fcall	_SetLEDOff
  3471                           
  3472                           ;main.c: 621: break;
  3473  0063  28D5               	goto	l2188
  3474  0064                     l2172:	
  3475                           ;main.c: 623: case 3:
  3476                           
  3477                           
  3478                           ;main.c: 624: SetLEDOn(0x01);
  3479  0064  3001               	movlw	1
  3480  0065  25F8               	fcall	_SetLEDOn
  3481                           
  3482                           ;main.c: 625: SetLEDOn(0x02);
  3483  0066  3002               	movlw	2
  3484  0067  25F8               	fcall	_SetLEDOn
  3485                           
  3486                           ;main.c: 626: SetLEDOn(0x04);
  3487  0068  3004               	movlw	4
  3488  0069  25F8               	fcall	_SetLEDOn
  3489                           
  3490                           ;main.c: 627: SetLEDOff(0x08);
  3491  006A  3008               	movlw	8
  3492  006B  2600               	fcall	_SetLEDOff
  3493                           
  3494                           ;main.c: 628: SetLEDOff(0x10);
  3495  006C  3010               	movlw	16
  3496  006D  2600               	fcall	_SetLEDOff
  3497                           
  3498                           ;main.c: 629: SetLEDOff(0x20);
  3499  006E  3020               	movlw	32
  3500  006F  2600               	fcall	_SetLEDOff
  3501                           
  3502                           ;main.c: 630: SetLEDOff(0x40);
  3503  0070  3040               	movlw	64
  3504  0071  2600               	fcall	_SetLEDOff
  3505                           
  3506                           ;main.c: 631: SetLEDOff(0x80);
  3507  0072  3080               	movlw	128
  3508  0073  2600               	fcall	_SetLEDOff
  3509                           
  3510                           ;main.c: 632: break;
  3511  0074  28D5               	goto	l2188
  3512  0075                     l2174:	
  3513                           ;main.c: 634: case 4:
  3514                           
  3515                           
  3516                           ;main.c: 635: SetLEDOn(0x01);
  3517  0075  3001               	movlw	1
  3518  0076  25F8               	fcall	_SetLEDOn
  3519                           
  3520                           ;main.c: 636: SetLEDOn(0x02);
  3521  0077  3002               	movlw	2
  3522  0078  25F8               	fcall	_SetLEDOn
  3523                           
  3524                           ;main.c: 637: SetLEDOn(0x04);
  3525  0079  3004               	movlw	4
  3526  007A  25F8               	fcall	_SetLEDOn
  3527                           
  3528                           ;main.c: 638: SetLEDOn(0x08);
  3529  007B  3008               	movlw	8
  3530  007C  25F8               	fcall	_SetLEDOn
  3531                           
  3532                           ;main.c: 639: SetLEDOff(0x10);
  3533  007D  3010               	movlw	16
  3534  007E  2600               	fcall	_SetLEDOff
  3535                           
  3536                           ;main.c: 640: SetLEDOff(0x20);
  3537  007F  3020               	movlw	32
  3538  0080  2600               	fcall	_SetLEDOff
  3539                           
  3540                           ;main.c: 641: SetLEDOff(0x40);
  3541  0081  3040               	movlw	64
  3542  0082  2600               	fcall	_SetLEDOff
  3543                           
  3544                           ;main.c: 642: SetLEDOff(0x80);
  3545  0083  3080               	movlw	128
  3546  0084  2600               	fcall	_SetLEDOff
  3547                           
  3548                           ;main.c: 643: break;
  3549  0085  28D5               	goto	l2188
  3550  0086                     l2176:	
  3551                           ;main.c: 645: case 5:
  3552                           
  3553                           
  3554                           ;main.c: 646: SetLEDOn(0x01);
  3555  0086  3001               	movlw	1
  3556  0087  25F8               	fcall	_SetLEDOn
  3557                           
  3558                           ;main.c: 647: SetLEDOn(0x02);
  3559  0088  3002               	movlw	2
  3560  0089  25F8               	fcall	_SetLEDOn
  3561                           
  3562                           ;main.c: 648: SetLEDOn(0x04);
  3563  008A  3004               	movlw	4
  3564  008B  25F8               	fcall	_SetLEDOn
  3565                           
  3566                           ;main.c: 649: SetLEDOn(0x08);
  3567  008C  3008               	movlw	8
  3568  008D  25F8               	fcall	_SetLEDOn
  3569                           
  3570                           ;main.c: 650: SetLEDOn(0x10);
  3571  008E  3010               	movlw	16
  3572  008F  25F8               	fcall	_SetLEDOn
  3573                           
  3574                           ;main.c: 651: SetLEDOff(0x20);
  3575  0090  3020               	movlw	32
  3576  0091  2600               	fcall	_SetLEDOff
  3577                           
  3578                           ;main.c: 652: SetLEDOff(0x40);
  3579  0092  3040               	movlw	64
  3580  0093  2600               	fcall	_SetLEDOff
  3581                           
  3582                           ;main.c: 653: SetLEDOff(0x80);
  3583  0094  3080               	movlw	128
  3584  0095  2600               	fcall	_SetLEDOff
  3585                           
  3586                           ;main.c: 654: break;
  3587  0096  28D5               	goto	l2188
  3588  0097                     l2178:	
  3589                           ;main.c: 656: case 6:
  3590                           
  3591                           
  3592                           ;main.c: 657: SetLEDOn(0x01);
  3593  0097  3001               	movlw	1
  3594  0098  25F8               	fcall	_SetLEDOn
  3595                           
  3596                           ;main.c: 658: SetLEDOn(0x02);
  3597  0099  3002               	movlw	2
  3598  009A  25F8               	fcall	_SetLEDOn
  3599                           
  3600                           ;main.c: 659: SetLEDOn(0x04);
  3601  009B  3004               	movlw	4
  3602  009C  25F8               	fcall	_SetLEDOn
  3603                           
  3604                           ;main.c: 660: SetLEDOn(0x08);
  3605  009D  3008               	movlw	8
  3606  009E  25F8               	fcall	_SetLEDOn
  3607                           
  3608                           ;main.c: 661: SetLEDOn(0x10);
  3609  009F  3010               	movlw	16
  3610  00A0  25F8               	fcall	_SetLEDOn
  3611                           
  3612                           ;main.c: 662: SetLEDOn(0x20);
  3613  00A1  3020               	movlw	32
  3614  00A2  25F8               	fcall	_SetLEDOn
  3615                           
  3616                           ;main.c: 663: SetLEDOff(0x40);
  3617  00A3  3040               	movlw	64
  3618  00A4  2600               	fcall	_SetLEDOff
  3619                           
  3620                           ;main.c: 664: SetLEDOff(0x80);
  3621  00A5  3080               	movlw	128
  3622  00A6  2600               	fcall	_SetLEDOff
  3623                           
  3624                           ;main.c: 665: break;
  3625  00A7  28D5               	goto	l2188
  3626  00A8                     l2180:	
  3627                           ;main.c: 667: case 7:
  3628                           
  3629                           
  3630                           ;main.c: 668: SetLEDOn(0x01);
  3631  00A8  3001               	movlw	1
  3632  00A9  25F8               	fcall	_SetLEDOn
  3633                           
  3634                           ;main.c: 669: SetLEDOn(0x02);
  3635  00AA  3002               	movlw	2
  3636  00AB  25F8               	fcall	_SetLEDOn
  3637                           
  3638                           ;main.c: 670: SetLEDOn(0x04);
  3639  00AC  3004               	movlw	4
  3640  00AD  25F8               	fcall	_SetLEDOn
  3641                           
  3642                           ;main.c: 671: SetLEDOn(0x08);
  3643  00AE  3008               	movlw	8
  3644  00AF  25F8               	fcall	_SetLEDOn
  3645                           
  3646                           ;main.c: 672: SetLEDOn(0x10);
  3647  00B0  3010               	movlw	16
  3648  00B1  25F8               	fcall	_SetLEDOn
  3649                           
  3650                           ;main.c: 673: SetLEDOn(0x20);
  3651  00B2  3020               	movlw	32
  3652  00B3  25F8               	fcall	_SetLEDOn
  3653                           
  3654                           ;main.c: 674: SetLEDOn(0x40);
  3655  00B4  3040               	movlw	64
  3656  00B5  25F8               	fcall	_SetLEDOn
  3657                           
  3658                           ;main.c: 675: SetLEDOff(0x80);
  3659  00B6  3080               	movlw	128
  3660  00B7  2600               	fcall	_SetLEDOff
  3661                           
  3662                           ;main.c: 676: break;
  3663  00B8  28D5               	goto	l2188
  3664  00B9                     l2182:	
  3665                           ;main.c: 678: case 8:
  3666                           
  3667                           
  3668                           ;main.c: 679: SetLEDOn(0x01);
  3669  00B9  3001               	movlw	1
  3670  00BA  25F8               	fcall	_SetLEDOn
  3671                           
  3672                           ;main.c: 680: SetLEDOn(0x02);
  3673  00BB  3002               	movlw	2
  3674  00BC  25F8               	fcall	_SetLEDOn
  3675                           
  3676                           ;main.c: 681: SetLEDOn(0x04);
  3677  00BD  3004               	movlw	4
  3678  00BE  25F8               	fcall	_SetLEDOn
  3679                           
  3680                           ;main.c: 682: SetLEDOn(0x08);
  3681  00BF  3008               	movlw	8
  3682  00C0  25F8               	fcall	_SetLEDOn
  3683                           
  3684                           ;main.c: 683: SetLEDOn(0x10);
  3685  00C1  3010               	movlw	16
  3686  00C2  25F8               	fcall	_SetLEDOn
  3687                           
  3688                           ;main.c: 684: SetLEDOn(0x20);
  3689  00C3  3020               	movlw	32
  3690  00C4  25F8               	fcall	_SetLEDOn
  3691                           
  3692                           ;main.c: 685: SetLEDOn(0x40);
  3693  00C5  3040               	movlw	64
  3694  00C6  25F8               	fcall	_SetLEDOn
  3695                           
  3696                           ;main.c: 686: SetLEDOn(0x80);
  3697  00C7  3080               	movlw	128
  3698  00C8  25F8               	fcall	_SetLEDOn
  3699                           
  3700                           ;main.c: 691: }
  3701                           
  3702                           ;main.c: 690: break;
  3703                           
  3704                           ;main.c: 689: default:
  3705                           
  3706                           ;main.c: 687: break;
  3707  00C9  28D5               	goto	l2188
  3708  00CA                     l2186:	
  3709  00CA  0020               	movlb	0	; select bank0
  3710  00CB  086D               	movf	RunGame@num_leds_lit,w
  3711                           
  3712                           ; Switch size 1, requested type "space"
  3713                           ; Number of cases is 9, Range of values is 0 to 8
  3714                           ; switch strategies available:
  3715                           ; Name         Instructions Cycles
  3716                           ; direct_byte           24     6 (fixed)
  3717                           ; simple_byte           28    15 (average)
  3718                           ; jumptable            260     6 (fixed)
  3719                           ;	Chosen strategy is direct_byte
  3720  00CC  0084               	movwf	4
  3721  00CD  3009               	movlw	9
  3722  00CE  0204               	subwf	4,w
  3723  00CF  1803               	skipnc
  3724  00D0  28D5               	goto	l2188
  3725  00D1  3185               	movlp	high S2460
  3726  00D2  30E6               	movlw	low S2460
  3727  00D3  0704               	addwf	4,w
  3728  00D4  0082               	movwf	2
  3729  00D5                     l2188:	
  3730                           
  3731                           ;main.c: 694: if (last_button_press_time != LastRightButtonPressTime)
  3732  00D5  0020               	movlb	0	; select bank0
  3733  00D6  0847               	movf	_LastRightButtonPressTime+3,w	;volatile
  3734  00D7  063F               	xorwf	RunGame@last_button_press_time+3,w
  3735  00D8  1D03               	skipz
  3736  00D9  28E4               	goto	u2015
  3737  00DA  0846               	movf	_LastRightButtonPressTime+2,w	;volatile
  3738  00DB  063E               	xorwf	RunGame@last_button_press_time+2,w
  3739  00DC  1D03               	skipz
  3740  00DD  28E4               	goto	u2015
  3741  00DE  0845               	movf	_LastRightButtonPressTime+1,w	;volatile
  3742  00DF  063D               	xorwf	RunGame@last_button_press_time+1,w
  3743  00E0  1D03               	skipz
  3744  00E1  28E4               	goto	u2015
  3745  00E2  0844               	movf	_LastRightButtonPressTime,w	;volatile
  3746  00E3  063C               	xorwf	RunGame@last_button_press_time,w
  3747  00E4                     u2015:	
  3748  00E4  1903               	skipnz
  3749  00E5  29A4               	goto	l2240
  3750                           
  3751                           ;main.c: 695: {
  3752                           ;main.c: 696: if (LastRightButtonPressTime < (last_button_press_time + 150))
  3753  00E6  3096               	movlw	150
  3754  00E7  00D2               	movwf	??_RunGame
  3755  00E8  3000               	movlw	0
  3756  00E9  00D3               	movwf	??_RunGame+1
  3757  00EA  3000               	movlw	0
  3758  00EB  00D4               	movwf	??_RunGame+2
  3759  00EC  3000               	movlw	0
  3760  00ED  00D5               	movwf	??_RunGame+3
  3761  00EE  083C               	movf	RunGame@last_button_press_time,w
  3762  00EF  07D2               	addwf	??_RunGame,f
  3763  00F0  083D               	movf	RunGame@last_button_press_time+1,w
  3764  00F1  3DD3               	addwfc	??_RunGame+1,f
  3765  00F2  083E               	movf	RunGame@last_button_press_time+2,w
  3766  00F3  3DD4               	addwfc	??_RunGame+2,f
  3767  00F4  083F               	movf	RunGame@last_button_press_time+3,w
  3768  00F5  3DD5               	addwfc	??_RunGame+3,f
  3769  00F6  0855               	movf	??_RunGame+3,w
  3770  00F7  0247               	subwf	_LastRightButtonPressTime+3,w	;volatile
  3771  00F8  1D03               	skipz
  3772  00F9  2904               	goto	u2025
  3773  00FA  0854               	movf	??_RunGame+2,w
  3774  00FB  0246               	subwf	_LastRightButtonPressTime+2,w	;volatile
  3775  00FC  1D03               	skipz
  3776  00FD  2904               	goto	u2025
  3777  00FE  0853               	movf	??_RunGame+1,w
  3778  00FF  0245               	subwf	_LastRightButtonPressTime+1,w	;volatile
  3779  0100  1D03               	skipz
  3780  0101  2904               	goto	u2025
  3781  0102  0852               	movf	??_RunGame,w
  3782  0103  0244               	subwf	_LastRightButtonPressTime,w	;volatile
  3783  0104                     u2025:	
  3784  0104  1803               	skipnc
  3785  0105  299B               	goto	l2238
  3786                           
  3787                           ;main.c: 697: {
  3788                           ;main.c: 698: num_leds_lit++;
  3789  0106  3001               	movlw	1
  3790  0107  00D2               	movwf	??_RunGame
  3791  0108  0852               	movf	??_RunGame,w
  3792  0109  07ED               	addwf	RunGame@num_leds_lit,f
  3793                           
  3794                           ;main.c: 700: if (num_leds_lit > 8)
  3795  010A  3009               	movlw	9
  3796  010B  026D               	subwf	RunGame@num_leds_lit,w
  3797  010C  1C03               	skipc
  3798  010D  299B               	goto	l2238
  3799                           
  3800                           ;main.c: 701: {
  3801                           ;main.c: 702: num_leds_lit = 0;
  3802  010E  01ED               	clrf	RunGame@num_leds_lit
  3803                           
  3804                           ;main.c: 704: SetLEDOn(0xFF);
  3805  010F  30FF               	movlw	255
  3806  0110  25F8               	fcall	_SetLEDOn
  3807                           
  3808                           ;main.c: 705: _delay((unsigned long)((100)*(16000000/4000.0)));
  3809  0111  3003               	movlw	3
  3810  0112  0020               	movlb	0	; select bank0
  3811  0113  00D3               	movwf	??_RunGame+1
  3812  0114  3008               	movlw	8
  3813  0115  00D2               	movwf	??_RunGame
  3814  0116  3077               	movlw	119
  3815  0117                     u2407:	
  3816  0117  0B89               	decfsz	9,f
  3817  0118  2917               	goto	u2407
  3818  0119  0BD2               	decfsz	??_RunGame,f
  3819  011A  2917               	goto	u2407
  3820  011B  0BD3               	decfsz	??_RunGame+1,f
  3821  011C  2917               	goto	u2407
  3822                           
  3823                           ;main.c: 706: SetLEDOff(0xFF);
  3824  011D  30FF               	movlw	255
  3825  011E  2600               	fcall	_SetLEDOff
  3826                           
  3827                           ;main.c: 707: _delay((unsigned long)((100)*(16000000/4000.0)));
  3828  011F  3003               	movlw	3
  3829  0120  0020               	movlb	0	; select bank0
  3830  0121  00D3               	movwf	??_RunGame+1
  3831  0122  3008               	movlw	8
  3832  0123  00D2               	movwf	??_RunGame
  3833  0124  3077               	movlw	119
  3834  0125                     u2417:	
  3835  0125  0B89               	decfsz	9,f
  3836  0126  2925               	goto	u2417
  3837  0127  0BD2               	decfsz	??_RunGame,f
  3838  0128  2925               	goto	u2417
  3839  0129  0BD3               	decfsz	??_RunGame+1,f
  3840  012A  2925               	goto	u2417
  3841                           
  3842                           ;main.c: 708: SetLEDOn(0xFF);
  3843  012B  30FF               	movlw	255
  3844  012C  25F8               	fcall	_SetLEDOn
  3845                           
  3846                           ;main.c: 709: _delay((unsigned long)((100)*(16000000/4000.0)));
  3847  012D  3003               	movlw	3
  3848  012E  0020               	movlb	0	; select bank0
  3849  012F  00D3               	movwf	??_RunGame+1
  3850  0130  3008               	movlw	8
  3851  0131  00D2               	movwf	??_RunGame
  3852  0132  3077               	movlw	119
  3853  0133                     u2427:	
  3854  0133  0B89               	decfsz	9,f
  3855  0134  2933               	goto	u2427
  3856  0135  0BD2               	decfsz	??_RunGame,f
  3857  0136  2933               	goto	u2427
  3858  0137  0BD3               	decfsz	??_RunGame+1,f
  3859  0138  2933               	goto	u2427
  3860                           
  3861                           ;main.c: 710: SetLEDOff(0xFF);
  3862  0139  30FF               	movlw	255
  3863  013A  2600               	fcall	_SetLEDOff
  3864                           
  3865                           ;main.c: 711: _delay((unsigned long)((100)*(16000000/4000.0)));
  3866  013B  3003               	movlw	3
  3867  013C  0020               	movlb	0	; select bank0
  3868  013D  00D3               	movwf	??_RunGame+1
  3869  013E  3008               	movlw	8
  3870  013F  00D2               	movwf	??_RunGame
  3871  0140  3077               	movlw	119
  3872  0141                     u2437:	
  3873  0141  0B89               	decfsz	9,f
  3874  0142  2941               	goto	u2437
  3875  0143  0BD2               	decfsz	??_RunGame,f
  3876  0144  2941               	goto	u2437
  3877  0145  0BD3               	decfsz	??_RunGame+1,f
  3878  0146  2941               	goto	u2437
  3879                           
  3880                           ;main.c: 712: SetLEDOn(0xFF);
  3881  0147  30FF               	movlw	255
  3882  0148  25F8               	fcall	_SetLEDOn
  3883                           
  3884                           ;main.c: 713: _delay((unsigned long)((100)*(16000000/4000.0)));
  3885  0149  3003               	movlw	3
  3886  014A  0020               	movlb	0	; select bank0
  3887  014B  00D3               	movwf	??_RunGame+1
  3888  014C  3008               	movlw	8
  3889  014D  00D2               	movwf	??_RunGame
  3890  014E  3077               	movlw	119
  3891  014F                     u2447:	
  3892  014F  0B89               	decfsz	9,f
  3893  0150  294F               	goto	u2447
  3894  0151  0BD2               	decfsz	??_RunGame,f
  3895  0152  294F               	goto	u2447
  3896  0153  0BD3               	decfsz	??_RunGame+1,f
  3897  0154  294F               	goto	u2447
  3898                           
  3899                           ;main.c: 714: SetLEDOff(0xFF);
  3900  0155  30FF               	movlw	255
  3901  0156  2600               	fcall	_SetLEDOff
  3902                           
  3903                           ;main.c: 715: _delay((unsigned long)((100)*(16000000/4000.0)));
  3904  0157  3003               	movlw	3
  3905  0158  0020               	movlb	0	; select bank0
  3906  0159  00D3               	movwf	??_RunGame+1
  3907  015A  3008               	movlw	8
  3908  015B  00D2               	movwf	??_RunGame
  3909  015C  3077               	movlw	119
  3910  015D                     u2457:	
  3911  015D  0B89               	decfsz	9,f
  3912  015E  295D               	goto	u2457
  3913  015F  0BD2               	decfsz	??_RunGame,f
  3914  0160  295D               	goto	u2457
  3915  0161  0BD3               	decfsz	??_RunGame+1,f
  3916  0162  295D               	goto	u2457
  3917                           
  3918                           ;main.c: 716: SetLEDOn(0xFF);
  3919  0163  30FF               	movlw	255
  3920  0164  25F8               	fcall	_SetLEDOn
  3921                           
  3922                           ;main.c: 717: _delay((unsigned long)((100)*(16000000/4000.0)));
  3923  0165  3003               	movlw	3
  3924  0166  0020               	movlb	0	; select bank0
  3925  0167  00D3               	movwf	??_RunGame+1
  3926  0168  3008               	movlw	8
  3927  0169  00D2               	movwf	??_RunGame
  3928  016A  3077               	movlw	119
  3929  016B                     u2467:	
  3930  016B  0B89               	decfsz	9,f
  3931  016C  296B               	goto	u2467
  3932  016D  0BD2               	decfsz	??_RunGame,f
  3933  016E  296B               	goto	u2467
  3934  016F  0BD3               	decfsz	??_RunGame+1,f
  3935  0170  296B               	goto	u2467
  3936                           
  3937                           ;main.c: 718: SetLEDOff(0xFF);
  3938  0171  30FF               	movlw	255
  3939  0172  2600               	fcall	_SetLEDOff
  3940                           
  3941                           ;main.c: 719: _delay((unsigned long)((100)*(16000000/4000.0)));
  3942  0173  3003               	movlw	3
  3943  0174  0020               	movlb	0	; select bank0
  3944  0175  00D3               	movwf	??_RunGame+1
  3945  0176  3008               	movlw	8
  3946  0177  00D2               	movwf	??_RunGame
  3947  0178  3077               	movlw	119
  3948  0179                     u2477:	
  3949  0179  0B89               	decfsz	9,f
  3950  017A  2979               	goto	u2477
  3951  017B  0BD2               	decfsz	??_RunGame,f
  3952  017C  2979               	goto	u2477
  3953  017D  0BD3               	decfsz	??_RunGame+1,f
  3954  017E  2979               	goto	u2477
  3955                           
  3956                           ;main.c: 720: SetLEDOn(0xFF);
  3957  017F  30FF               	movlw	255
  3958  0180  25F8               	fcall	_SetLEDOn
  3959                           
  3960                           ;main.c: 721: _delay((unsigned long)((100)*(16000000/4000.0)));
  3961  0181  3003               	movlw	3
  3962  0182  0020               	movlb	0	; select bank0
  3963  0183  00D3               	movwf	??_RunGame+1
  3964  0184  3008               	movlw	8
  3965  0185  00D2               	movwf	??_RunGame
  3966  0186  3077               	movlw	119
  3967  0187                     u2487:	
  3968  0187  0B89               	decfsz	9,f
  3969  0188  2987               	goto	u2487
  3970  0189  0BD2               	decfsz	??_RunGame,f
  3971  018A  2987               	goto	u2487
  3972  018B  0BD3               	decfsz	??_RunGame+1,f
  3973  018C  2987               	goto	u2487
  3974                           
  3975                           ;main.c: 722: SetLEDOff(0xFF);
  3976  018D  30FF               	movlw	255
  3977  018E  2600               	fcall	_SetLEDOff
  3978                           
  3979                           ;main.c: 723: _delay((unsigned long)((100)*(16000000/4000.0)));
  3980  018F  3003               	movlw	3
  3981  0190  0020               	movlb	0	; select bank0
  3982  0191  00D3               	movwf	??_RunGame+1
  3983  0192  3008               	movlw	8
  3984  0193  00D2               	movwf	??_RunGame
  3985  0194  3077               	movlw	119
  3986  0195                     u2497:	
  3987  0195  0B89               	decfsz	9,f
  3988  0196  2995               	goto	u2497
  3989  0197  0BD2               	decfsz	??_RunGame,f
  3990  0198  2995               	goto	u2497
  3991  0199  0BD3               	decfsz	??_RunGame+1,f
  3992  019A  2995               	goto	u2497
  3993  019B                     l2238:	
  3994                           
  3995                           ;main.c: 724: }
  3996                           ;main.c: 725: }
  3997                           ;main.c: 726: last_button_press_time = LastRightButtonPressTime;
  3998  019B  0020               	movlb	0	; select bank0
  3999  019C  0847               	movf	_LastRightButtonPressTime+3,w	;volatile
  4000  019D  00BF               	movwf	RunGame@last_button_press_time+3
  4001  019E  0846               	movf	_LastRightButtonPressTime+2,w	;volatile
  4002  019F  00BE               	movwf	RunGame@last_button_press_time+2
  4003  01A0  0845               	movf	_LastRightButtonPressTime+1,w	;volatile
  4004  01A1  00BD               	movwf	RunGame@last_button_press_time+1
  4005  01A2  0844               	movf	_LastRightButtonPressTime,w	;volatile
  4006  01A3  00BC               	movwf	RunGame@last_button_press_time
  4007  01A4                     l2240:	
  4008                           
  4009                           ;main.c: 727: }
  4010                           ;main.c: 730: if (WakeTimer > next_decrement_time)
  4011  01A4  084B               	movf	_WakeTimer+3,w	;volatile
  4012  01A5  023B               	subwf	RunGame@next_decrement_time+3,w
  4013  01A6  1D03               	skipz
  4014  01A7  29B2               	goto	u2045
  4015  01A8  084A               	movf	_WakeTimer+2,w	;volatile
  4016  01A9  023A               	subwf	RunGame@next_decrement_time+2,w
  4017  01AA  1D03               	skipz
  4018  01AB  29B2               	goto	u2045
  4019  01AC  0849               	movf	_WakeTimer+1,w	;volatile
  4020  01AD  0239               	subwf	RunGame@next_decrement_time+1,w
  4021  01AE  1D03               	skipz
  4022  01AF  29B2               	goto	u2045
  4023  01B0  0848               	movf	_WakeTimer,w	;volatile
  4024  01B1  0238               	subwf	RunGame@next_decrement_time,w
  4025  01B2                     u2045:	
  4026  01B2  1803               	skipnc
  4027  01B3  0008               	return
  4028                           
  4029                           ;main.c: 731: {
  4030                           ;main.c: 732: next_decrement_time = WakeTimer + 160;
  4031  01B4  30A0               	movlw	160
  4032  01B5  0748               	addwf	_WakeTimer,w	;volatile
  4033  01B6  00B8               	movwf	RunGame@next_decrement_time
  4034  01B7  3000               	movlw	0
  4035  01B8  3D49               	addwfc	_WakeTimer+1,w	;volatile
  4036  01B9  00B9               	movwf	RunGame@next_decrement_time+1
  4037  01BA  3000               	movlw	0
  4038  01BB  3D4A               	addwfc	_WakeTimer+2,w	;volatile
  4039  01BC  00BA               	movwf	RunGame@next_decrement_time+2
  4040  01BD  3000               	movlw	0
  4041  01BE  3D4B               	addwfc	_WakeTimer+3,w	;volatile
  4042  01BF  00BB               	movwf	RunGame@next_decrement_time+3
  4043                           
  4044                           ;main.c: 733: if (num_leds_lit)
  4045  01C0  086D               	movf	RunGame@num_leds_lit,w
  4046  01C1  1903               	btfsc	3,2
  4047  01C2  0008               	return
  4048                           
  4049                           ;main.c: 734: {
  4050                           ;main.c: 735: num_leds_lit--;
  4051  01C3  3001               	movlw	1
  4052  01C4  02ED               	subwf	RunGame@num_leds_lit,f
  4053  01C5  0008               	return
  4054  01C6                     __end_of_RunGame:	
  4055                           
  4056                           	psect	swtext3
  4057  05E6                     __pswtext3:	
  4058  05E6                     S2460:	
  4059  05E6  28D5               	ljmp	l2188
  4060  05E7  2842               	ljmp	l2168
  4061  05E8  2853               	ljmp	l2170
  4062  05E9  2864               	ljmp	l2172
  4063  05EA  2875               	ljmp	l2174
  4064  05EB  2886               	ljmp	l2176
  4065  05EC  2897               	ljmp	l2178
  4066  05ED  28A8               	ljmp	l2180
  4067  05EE  28B9               	ljmp	l2182
  4068                           
  4069                           	psect	text15
  4070  05F8                     __ptext15:	
  4071 ;; *************** function _SetLEDOn *****************
  4072 ;; Defined at:
  4073 ;;		line 202 in file "main.c"
  4074 ;; Parameters:    Size  Location     Type
  4075 ;;  LED             1    wreg     unsigned char 
  4076 ;; Auto vars:     Size  Location     Type
  4077 ;;  LED             1    5[COMMON] unsigned char 
  4078 ;; Return value:  Size  Location     Type
  4079 ;;                  1    wreg      void 
  4080 ;; Registers used:
  4081 ;;		wreg, status,2, status,0
  4082 ;; Tracked objects:
  4083 ;;		On entry : 0/0
  4084 ;;		On exit  : 0/0
  4085 ;;		Unchanged: 0/0
  4086 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4087 ;;      Params:         0       0       0       0
  4088 ;;      Locals:         1       0       0       0
  4089 ;;      Temps:          1       0       0       0
  4090 ;;      Totals:         2       0       0       0
  4091 ;;Total ram usage:        2 bytes
  4092 ;; Hardware stack levels used:    1
  4093 ;; Hardware stack levels required when called:    4
  4094 ;; This function calls:
  4095 ;;		Nothing
  4096 ;; This function is called by:
  4097 ;;		_RunRightFlash
  4098 ;;		_RunLeftFlash
  4099 ;;		_RunGame
  4100 ;; This function uses a non-reentrant model
  4101 ;;
  4102                           
  4103                           
  4104                           ;psect for function _SetLEDOn
  4105  05F8                     _SetLEDOn:	
  4106                           
  4107                           ;incstack = 0
  4108                           ; Regs used in _SetLEDOn: [wreg+status,2+status,0]
  4109                           ;SetLEDOn@LED stored from wreg
  4110  05F8  00F5               	movwf	SetLEDOn@LED
  4111                           
  4112                           ;main.c: 204: LEDOns = (uint8_t)(LEDOns | LED);
  4113  05F9  0020               	movlb	0	; select bank0
  4114  05FA  0850               	movf	_LEDOns,w	;volatile
  4115  05FB  0475               	iorwf	SetLEDOn@LED,w
  4116  05FC  00F4               	movwf	??_SetLEDOn
  4117  05FD  0874               	movf	??_SetLEDOn,w
  4118  05FE  00D0               	movwf	_LEDOns	;volatile
  4119  05FF  0008               	return
  4120  0600                     __end_of_SetLEDOn:	
  4121                           
  4122                           	psect	text16
  4123  0600                     __ptext16:	
  4124 ;; *************** function _SetLEDOff *****************
  4125 ;; Defined at:
  4126 ;;		line 207 in file "main.c"
  4127 ;; Parameters:    Size  Location     Type
  4128 ;;  LED             1    wreg     unsigned char 
  4129 ;; Auto vars:     Size  Location     Type
  4130 ;;  LED             1    5[COMMON] unsigned char 
  4131 ;; Return value:  Size  Location     Type
  4132 ;;                  1    wreg      void 
  4133 ;; Registers used:
  4134 ;;		wreg, status,2, status,0
  4135 ;; Tracked objects:
  4136 ;;		On entry : 0/0
  4137 ;;		On exit  : 0/0
  4138 ;;		Unchanged: 0/0
  4139 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4140 ;;      Params:         0       0       0       0
  4141 ;;      Locals:         1       0       0       0
  4142 ;;      Temps:          1       0       0       0
  4143 ;;      Totals:         2       0       0       0
  4144 ;;Total ram usage:        2 bytes
  4145 ;; Hardware stack levels used:    1
  4146 ;; Hardware stack levels required when called:    4
  4147 ;; This function calls:
  4148 ;;		Nothing
  4149 ;; This function is called by:
  4150 ;;		_RunRightFlash
  4151 ;;		_RunLeftFlash
  4152 ;;		_RunGame
  4153 ;; This function uses a non-reentrant model
  4154 ;;
  4155                           
  4156                           
  4157                           ;psect for function _SetLEDOff
  4158  0600                     _SetLEDOff:	
  4159                           
  4160                           ;incstack = 0
  4161                           ; Regs used in _SetLEDOff: [wreg+status,2+status,0]
  4162                           ;SetLEDOff@LED stored from wreg
  4163  0600  00F5               	movwf	SetLEDOff@LED
  4164                           
  4165                           ;main.c: 209: LEDOns = (uint8_t)(LEDOns & ~LED);
  4166  0601  0975               	comf	SetLEDOff@LED,w
  4167  0602  0020               	movlb	0	; select bank0
  4168  0603  0550               	andwf	_LEDOns,w	;volatile
  4169  0604  00F4               	movwf	??_SetLEDOff
  4170  0605  0874               	movf	??_SetLEDOff,w
  4171  0606  00D0               	movwf	_LEDOns	;volatile
  4172  0607  0008               	return
  4173  0608                     __end_of_SetLEDOff:	
  4174                           
  4175                           	psect	text17
  4176  038E                     __ptext17:	
  4177 ;; *************** function _CheckForButtonPushes *****************
  4178 ;; Defined at:
  4179 ;;		line 743 in file "main.c"
  4180 ;; Parameters:    Size  Location     Type
  4181 ;;		None
  4182 ;; Auto vars:     Size  Location     Type
  4183 ;;		None
  4184 ;; Return value:  Size  Location     Type
  4185 ;;                  1    wreg      unsigned char 
  4186 ;; Registers used:
  4187 ;;		wreg, status,2, status,0, pclath, cstack
  4188 ;; Tracked objects:
  4189 ;;		On entry : 0/0
  4190 ;;		On exit  : 0/0
  4191 ;;		Unchanged: 0/0
  4192 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4193 ;;      Params:         0       0       0       0
  4194 ;;      Locals:         1       0       0       0
  4195 ;;      Temps:          0       4       0       0
  4196 ;;      Totals:         1       4       0       0
  4197 ;;Total ram usage:        5 bytes
  4198 ;; Hardware stack levels used:    1
  4199 ;; Hardware stack levels required when called:    5
  4200 ;; This function calls:
  4201 ;;		_LeftButtonPressed
  4202 ;;		_LeftButtonPressedRaw
  4203 ;;		_RightButtonPressed
  4204 ;;		_RightButtonPressedRaw
  4205 ;; This function is called by:
  4206 ;;		_main
  4207 ;; This function uses a non-reentrant model
  4208 ;;
  4209                           
  4210                           
  4211                           ;psect for function _CheckForButtonPushes
  4212  038E                     _CheckForButtonPushes:	
  4213                           
  4214                           ;main.c: 745: static bool LastLeftButtonState = 0;
  4215                           ;main.c: 746: static bool LastRightButtonState = 0;
  4216                           ;main.c: 747: static uint8_t LeftButtonQuickPressCount = 0;
  4217                           ;main.c: 750: if (LeftButtonPressedRaw())
  4218                           
  4219                           ;incstack = 0
  4220                           ; Regs used in _CheckForButtonPushes: [wreg+status,2+status,0+pclath+cstack]
  4221  038E  2626               	fcall	_LeftButtonPressedRaw
  4222  038F  3A00               	xorlw	0
  4223  0390  1903               	skipnz
  4224  0391  2BA0               	goto	l2262
  4225                           
  4226                           ;main.c: 751: {
  4227                           ;main.c: 752: if (LeftButtonState == BUTTON_STATE_PRESSED_TIMING)
  4228  0392  0377               	decf	_LeftButtonState,w	;volatile
  4229  0393  1D03               	btfss	3,2
  4230  0394  2B9A               	goto	l2258
  4231                           
  4232                           ;main.c: 753: {
  4233                           ;main.c: 754: if (LeftDebounceTimer == 0)
  4234  0395  0879               	movf	_LeftDebounceTimer,w	;volatile
  4235  0396  1D03               	btfss	3,2
  4236  0397  2BBA               	goto	l2272
  4237                           
  4238                           ;main.c: 755: {
  4239                           ;main.c: 756: LeftButtonState = BUTTON_STATE_PRESSED;
  4240  0398  3002               	movlw	2
  4241  0399  2BA8               	goto	L7
  4242  039A                     l2258:	
  4243                           ;main.c: 757: }
  4244                           ;main.c: 758: }
  4245                           
  4246                           
  4247                           ;main.c: 759: else if (LeftButtonState != BUTTON_STATE_PRESSED)
  4248  039A  3002               	movlw	2
  4249  039B  0677               	xorwf	_LeftButtonState,w	;volatile
  4250  039C  1903               	btfsc	3,2
  4251  039D  2BBA               	goto	l2272
  4252                           
  4253                           ;main.c: 760: {
  4254                           ;main.c: 761: LeftButtonState = BUTTON_STATE_PRESSED_TIMING;
  4255  039E  3001               	movlw	1
  4256  039F  2BB2               	goto	L8
  4257  03A0                     l2262:	
  4258                           ;main.c: 763: }
  4259                           ;main.c: 764: }
  4260                           
  4261                           ;main.c: 762: LeftDebounceTimer = 20;
  4262                           
  4263                           
  4264                           ;main.c: 765: else
  4265                           ;main.c: 766: {
  4266                           ;main.c: 767: if (LeftButtonState == BUTTON_STATE_RELEASED_TIMING)
  4267  03A0  3003               	movlw	3
  4268  03A1  0677               	xorwf	_LeftButtonState,w	;volatile
  4269  03A2  1D03               	btfss	3,2
  4270  03A3  2BAD               	goto	l2268
  4271                           
  4272                           ;main.c: 768: {
  4273                           ;main.c: 769: if (LeftDebounceTimer == 0)
  4274  03A4  0879               	movf	_LeftDebounceTimer,w	;volatile
  4275  03A5  1D03               	btfss	3,2
  4276  03A6  2BBA               	goto	l2272
  4277                           
  4278                           ;main.c: 770: {
  4279                           ;main.c: 771: LeftButtonState = BUTTON_STATE_RELEASED;
  4280  03A7  3004               	movlw	4
  4281  03A8                     L7:	
  4282  03A8  0020               	movlb	0	; select bank0
  4283  03A9  00D2               	movwf	??_CheckForButtonPushes
  4284  03AA  0852               	movf	??_CheckForButtonPushes,w
  4285  03AB  00F7               	movwf	_LeftButtonState	;volatile
  4286                           
  4287                           ;main.c: 772: }
  4288                           ;main.c: 773: }
  4289  03AC  2BBA               	goto	l2272
  4290  03AD                     l2268:	
  4291                           
  4292                           ;main.c: 774: else if (LeftButtonState != BUTTON_STATE_RELEASED)
  4293  03AD  3004               	movlw	4
  4294  03AE  0677               	xorwf	_LeftButtonState,w	;volatile
  4295  03AF  1903               	btfsc	3,2
  4296  03B0  2BBA               	goto	l2272
  4297                           
  4298                           ;main.c: 775: {
  4299                           ;main.c: 776: LeftButtonState = BUTTON_STATE_RELEASED_TIMING;
  4300  03B1  3003               	movlw	3
  4301  03B2                     L8:	
  4302  03B2  0020               	movlb	0	; select bank0
  4303  03B3  00D2               	movwf	??_CheckForButtonPushes
  4304  03B4  0852               	movf	??_CheckForButtonPushes,w
  4305  03B5  00F7               	movwf	_LeftButtonState	;volatile
  4306                           
  4307                           ;main.c: 777: LeftDebounceTimer = 20;
  4308  03B6  3014               	movlw	20
  4309  03B7  00D2               	movwf	??_CheckForButtonPushes
  4310  03B8  0852               	movf	??_CheckForButtonPushes,w
  4311  03B9  00F9               	movwf	_LeftDebounceTimer	;volatile
  4312  03BA                     l2272:	
  4313                           
  4314                           ;main.c: 778: }
  4315                           ;main.c: 779: }
  4316                           ;main.c: 782: if (RightButtonPressedRaw())
  4317  03BA  261F               	fcall	_RightButtonPressedRaw
  4318  03BB  3A00               	xorlw	0
  4319  03BC  1903               	skipnz
  4320  03BD  2BCC               	goto	l2284
  4321                           
  4322                           ;main.c: 783: {
  4323                           ;main.c: 784: if (RightButtonState == BUTTON_STATE_PRESSED_TIMING)
  4324  03BE  0376               	decf	_RightButtonState,w	;volatile
  4325  03BF  1D03               	btfss	3,2
  4326  03C0  2BC6               	goto	l2280
  4327                           
  4328                           ;main.c: 785: {
  4329                           ;main.c: 786: if (RightDebounceTimer == 0)
  4330  03C1  0878               	movf	_RightDebounceTimer,w	;volatile
  4331  03C2  1D03               	btfss	3,2
  4332  03C3  2BE6               	goto	l2294
  4333                           
  4334                           ;main.c: 787: {
  4335                           ;main.c: 788: RightButtonState = BUTTON_STATE_PRESSED;
  4336  03C4  3002               	movlw	2
  4337  03C5  2BD4               	goto	L9
  4338  03C6                     l2280:	
  4339                           ;main.c: 789: }
  4340                           ;main.c: 790: }
  4341                           
  4342                           
  4343                           ;main.c: 791: else if (RightButtonState != BUTTON_STATE_PRESSED)
  4344  03C6  3002               	movlw	2
  4345  03C7  0676               	xorwf	_RightButtonState,w	;volatile
  4346  03C8  1903               	btfsc	3,2
  4347  03C9  2BE6               	goto	l2294
  4348                           
  4349                           ;main.c: 792: {
  4350                           ;main.c: 793: RightButtonState = BUTTON_STATE_PRESSED_TIMING;
  4351  03CA  3001               	movlw	1
  4352  03CB  2BDE               	goto	L10
  4353  03CC                     l2284:	
  4354                           ;main.c: 795: }
  4355                           ;main.c: 796: }
  4356                           
  4357                           ;main.c: 794: RightDebounceTimer = 20;
  4358                           
  4359                           
  4360                           ;main.c: 797: else
  4361                           ;main.c: 798: {
  4362                           ;main.c: 799: if (RightButtonState == BUTTON_STATE_RELEASED_TIMING)
  4363  03CC  3003               	movlw	3
  4364  03CD  0676               	xorwf	_RightButtonState,w	;volatile
  4365  03CE  1D03               	btfss	3,2
  4366  03CF  2BD9               	goto	l2290
  4367                           
  4368                           ;main.c: 800: {
  4369                           ;main.c: 801: if (RightDebounceTimer == 0)
  4370  03D0  0878               	movf	_RightDebounceTimer,w	;volatile
  4371  03D1  1D03               	btfss	3,2
  4372  03D2  2BE6               	goto	l2294
  4373                           
  4374                           ;main.c: 802: {
  4375                           ;main.c: 803: RightButtonState = BUTTON_STATE_RELEASED;
  4376  03D3  3004               	movlw	4
  4377  03D4                     L9:	
  4378  03D4  0020               	movlb	0	; select bank0
  4379  03D5  00D2               	movwf	??_CheckForButtonPushes
  4380  03D6  0852               	movf	??_CheckForButtonPushes,w
  4381  03D7  00F6               	movwf	_RightButtonState	;volatile
  4382                           
  4383                           ;main.c: 804: }
  4384                           ;main.c: 805: }
  4385  03D8  2BE6               	goto	l2294
  4386  03D9                     l2290:	
  4387                           
  4388                           ;main.c: 806: else if (RightButtonState != BUTTON_STATE_RELEASED)
  4389  03D9  3004               	movlw	4
  4390  03DA  0676               	xorwf	_RightButtonState,w	;volatile
  4391  03DB  1903               	btfsc	3,2
  4392  03DC  2BE6               	goto	l2294
  4393                           
  4394                           ;main.c: 807: {
  4395                           ;main.c: 808: RightButtonState = BUTTON_STATE_RELEASED_TIMING;
  4396  03DD  3003               	movlw	3
  4397  03DE                     L10:	
  4398  03DE  0020               	movlb	0	; select bank0
  4399  03DF  00D2               	movwf	??_CheckForButtonPushes
  4400  03E0  0852               	movf	??_CheckForButtonPushes,w
  4401  03E1  00F6               	movwf	_RightButtonState	;volatile
  4402                           
  4403                           ;main.c: 809: RightDebounceTimer = 20;
  4404  03E2  3014               	movlw	20
  4405  03E3  00D2               	movwf	??_CheckForButtonPushes
  4406  03E4  0852               	movf	??_CheckForButtonPushes,w
  4407  03E5  00F8               	movwf	_RightDebounceTimer	;volatile
  4408  03E6                     l2294:	
  4409                           
  4410                           ;main.c: 810: }
  4411                           ;main.c: 811: }
  4412                           ;main.c: 813: if (LeftButtonPressed())
  4413  03E6  2610               	fcall	_LeftButtonPressed
  4414  03E7  3A00               	xorlw	0
  4415  03E8  1903               	skipnz
  4416  03E9  2BF5               	goto	l2302
  4417                           
  4418                           ;main.c: 814: {
  4419                           ;main.c: 815: if (LastLeftButtonState == 0)
  4420  03EA  0020               	movlb	0	; select bank0
  4421  03EB  084E               	movf	CheckForButtonPushes@LastLeftButtonState,w
  4422  03EC  1D03               	btfss	3,2
  4423  03ED  2BF2               	goto	l2300
  4424                           
  4425                           ;main.c: 816: {
  4426                           ;main.c: 817: PatternState[1] = 1;
  4427  03EE  3001               	movlw	1
  4428  03EF  00D2               	movwf	??_CheckForButtonPushes
  4429  03F0  0852               	movf	??_CheckForButtonPushes,w
  4430  03F1  00B1               	movwf	_PatternState+1	;volatile
  4431  03F2                     l2300:	
  4432                           
  4433                           ;main.c: 818: }
  4434                           ;main.c: 819: LastLeftButtonState = 1;
  4435  03F2  01CE               	clrf	CheckForButtonPushes@LastLeftButtonState
  4436  03F3  0ACE               	incf	CheckForButtonPushes@LastLeftButtonState,f
  4437                           
  4438                           ;main.c: 820: }
  4439  03F4  2BF7               	goto	l2304
  4440  03F5                     l2302:	
  4441                           
  4442                           ;main.c: 821: else
  4443                           ;main.c: 822: {
  4444                           ;main.c: 823: LastLeftButtonState = 0;
  4445  03F5  0020               	movlb	0	; select bank0
  4446  03F6  01CE               	clrf	CheckForButtonPushes@LastLeftButtonState
  4447  03F7                     l2304:	
  4448                           
  4449                           ;main.c: 824: }
  4450                           ;main.c: 827: if (RightButtonPressed())
  4451  03F7  2608               	fcall	_RightButtonPressed
  4452  03F8  3A00               	xorlw	0
  4453  03F9  1903               	skipnz
  4454  03FA  2C44               	goto	l2326
  4455                           
  4456                           ;main.c: 828: {
  4457                           ;main.c: 829: if (LastRightButtonState == 0)
  4458  03FB  0020               	movlb	0	; select bank0
  4459  03FC  084D               	movf	CheckForButtonPushes@LastRightButtonState,w
  4460  03FD  1D03               	btfss	3,2
  4461  03FE  2C41               	goto	l2324
  4462                           
  4463                           ;main.c: 830: {
  4464                           ;main.c: 831: PatternState[0] = 1;
  4465  03FF  3001               	movlw	1
  4466  0400  00D2               	movwf	??_CheckForButtonPushes
  4467  0401  0852               	movf	??_CheckForButtonPushes,w
  4468  0402  00B0               	movwf	_PatternState	;volatile
  4469                           
  4470                           ;main.c: 834: if (LeftButtonPressed())
  4471  0403  2610               	fcall	_LeftButtonPressed
  4472  0404  3A00               	xorlw	0
  4473  0405  1903               	skipnz
  4474  0406  2C38               	goto	l2322
  4475                           
  4476                           ;main.c: 835: {
  4477                           ;main.c: 836: if (WakeTimer < (LastRightButtonPressTime + 250))
  4478  0407  30FA               	movlw	250
  4479  0408  0020               	movlb	0	; select bank0
  4480  0409  00D2               	movwf	??_CheckForButtonPushes
  4481  040A  3000               	movlw	0
  4482  040B  00D3               	movwf	??_CheckForButtonPushes+1
  4483  040C  3000               	movlw	0
  4484  040D  00D4               	movwf	??_CheckForButtonPushes+2
  4485  040E  3000               	movlw	0
  4486  040F  00D5               	movwf	??_CheckForButtonPushes+3
  4487  0410  0844               	movf	_LastRightButtonPressTime,w	;volatile
  4488  0411  07D2               	addwf	??_CheckForButtonPushes,f
  4489  0412  0845               	movf	_LastRightButtonPressTime+1,w	;volatile
  4490  0413  3DD3               	addwfc	??_CheckForButtonPushes+1,f
  4491  0414  0846               	movf	_LastRightButtonPressTime+2,w	;volatile
  4492  0415  3DD4               	addwfc	??_CheckForButtonPushes+2,f
  4493  0416  0847               	movf	_LastRightButtonPressTime+3,w	;volatile
  4494  0417  3DD5               	addwfc	??_CheckForButtonPushes+3,f
  4495  0418  0855               	movf	??_CheckForButtonPushes+3,w
  4496  0419  024B               	subwf	_WakeTimer+3,w	;volatile
  4497  041A  1D03               	skipz
  4498  041B  2C26               	goto	u2255
  4499  041C  0854               	movf	??_CheckForButtonPushes+2,w
  4500  041D  024A               	subwf	_WakeTimer+2,w	;volatile
  4501  041E  1D03               	skipz
  4502  041F  2C26               	goto	u2255
  4503  0420  0853               	movf	??_CheckForButtonPushes+1,w
  4504  0421  0249               	subwf	_WakeTimer+1,w	;volatile
  4505  0422  1D03               	skipz
  4506  0423  2C26               	goto	u2255
  4507  0424  0852               	movf	??_CheckForButtonPushes,w
  4508  0425  0248               	subwf	_WakeTimer,w	;volatile
  4509  0426                     u2255:	
  4510  0426  1803               	skipnc
  4511  0427  2C37               	goto	l2320
  4512                           
  4513                           ;main.c: 837: {
  4514                           ;main.c: 838: LeftButtonQuickPressCount++;
  4515  0428  3001               	movlw	1
  4516  0429  00D2               	movwf	??_CheckForButtonPushes
  4517  042A  0852               	movf	??_CheckForButtonPushes,w
  4518  042B  07CC               	addwf	CheckForButtonPushes@LeftButtonQuickPressCount,f
  4519                           
  4520                           ;main.c: 840: if (LeftButtonQuickPressCount == 4)
  4521  042C  3004               	movlw	4
  4522  042D  064C               	xorwf	CheckForButtonPushes@LeftButtonQuickPressCount,w
  4523  042E  1D03               	btfss	3,2
  4524  042F  2C38               	goto	l2322
  4525                           
  4526                           ;main.c: 841: {
  4527                           ;main.c: 843: PatternState[0] = 0;
  4528  0430  01B0               	clrf	_PatternState	;volatile
  4529                           
  4530                           ;main.c: 844: PatternState[1] = 0;
  4531  0431  01B1               	clrf	_PatternState+1	;volatile
  4532                           
  4533                           ;main.c: 845: PatternState[2] = 1;
  4534  0432  3001               	movlw	1
  4535  0433  00D2               	movwf	??_CheckForButtonPushes
  4536  0434  0852               	movf	??_CheckForButtonPushes,w
  4537  0435  00B2               	movwf	_PatternState+2	;volatile
  4538                           
  4539                           ;main.c: 857: }
  4540                           ;main.c: 858: }
  4541  0436  2C38               	goto	l2322
  4542  0437                     l2320:	
  4543                           
  4544                           ;main.c: 859: else
  4545                           ;main.c: 860: {
  4546                           ;main.c: 861: LeftButtonQuickPressCount = 0;
  4547  0437  01CC               	clrf	CheckForButtonPushes@LeftButtonQuickPressCount
  4548  0438                     l2322:	
  4549                           
  4550                           ;main.c: 862: }
  4551                           ;main.c: 863: }
  4552                           ;main.c: 864: LastRightButtonPressTime = WakeTimer;
  4553  0438  0020               	movlb	0	; select bank0
  4554  0439  084B               	movf	_WakeTimer+3,w	;volatile
  4555  043A  00C7               	movwf	_LastRightButtonPressTime+3	;volatile
  4556  043B  084A               	movf	_WakeTimer+2,w	;volatile
  4557  043C  00C6               	movwf	_LastRightButtonPressTime+2	;volatile
  4558  043D  0849               	movf	_WakeTimer+1,w	;volatile
  4559  043E  00C5               	movwf	_LastRightButtonPressTime+1	;volatile
  4560  043F  0848               	movf	_WakeTimer,w	;volatile
  4561  0440  00C4               	movwf	_LastRightButtonPressTime	;volatile
  4562  0441                     l2324:	
  4563                           
  4564                           ;main.c: 865: }
  4565                           ;main.c: 866: LastRightButtonState = 1;
  4566  0441  01CD               	clrf	CheckForButtonPushes@LastRightButtonState
  4567  0442  0ACD               	incf	CheckForButtonPushes@LastRightButtonState,f
  4568                           
  4569                           ;main.c: 867: }
  4570  0443  2C46               	goto	l2328
  4571  0444                     l2326:	
  4572                           
  4573                           ;main.c: 868: else
  4574                           ;main.c: 869: {
  4575                           ;main.c: 870: LastRightButtonState = 0;
  4576  0444  0020               	movlb	0	; select bank0
  4577  0445  01CD               	clrf	CheckForButtonPushes@LastRightButtonState
  4578  0446                     l2328:	
  4579                           
  4580                           ;main.c: 871: }
  4581                           ;main.c: 873: return ((bool)(LeftButtonPressedRaw() || RightButtonPressedRaw()));
  4582  0446  01F4               	clrf	_CheckForButtonPushes$440
  4583  0447  0AF4               	incf	_CheckForButtonPushes$440,f
  4584  0448  2626               	fcall	_LeftButtonPressedRaw
  4585  0449  3A00               	xorlw	0
  4586  044A  1D03               	skipz
  4587  044B  2C51               	goto	l2336
  4588  044C  261F               	fcall	_RightButtonPressedRaw
  4589  044D  3A00               	xorlw	0
  4590  044E  1D03               	skipz
  4591  044F  2C51               	goto	l2336
  4592  0450  01F4               	clrf	_CheckForButtonPushes$440
  4593  0451                     l2336:	
  4594  0451  0874               	movf	_CheckForButtonPushes$440,w
  4595  0452  0008               	return
  4596  0453                     __end_of_CheckForButtonPushes:	
  4597                           
  4598                           	psect	text18
  4599  061F                     __ptext18:	
  4600 ;; *************** function _RightButtonPressedRaw *****************
  4601 ;; Defined at:
  4602 ;;		line 280 in file "main.c"
  4603 ;; Parameters:    Size  Location     Type
  4604 ;;		None
  4605 ;; Auto vars:     Size  Location     Type
  4606 ;;		None
  4607 ;; Return value:  Size  Location     Type
  4608 ;;                  1    wreg      unsigned char 
  4609 ;; Registers used:
  4610 ;;		wreg, status,0
  4611 ;; Tracked objects:
  4612 ;;		On entry : 0/0
  4613 ;;		On exit  : 0/0
  4614 ;;		Unchanged: 0/0
  4615 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4616 ;;      Params:         0       0       0       0
  4617 ;;      Locals:         0       0       0       0
  4618 ;;      Temps:          0       0       0       0
  4619 ;;      Totals:         0       0       0       0
  4620 ;;Total ram usage:        0 bytes
  4621 ;; Hardware stack levels used:    1
  4622 ;; Hardware stack levels required when called:    4
  4623 ;; This function calls:
  4624 ;;		Nothing
  4625 ;; This function is called by:
  4626 ;;		_CheckForButtonPushes
  4627 ;; This function uses a non-reentrant model
  4628 ;;
  4629                           
  4630                           
  4631                           ;psect for function _RightButtonPressedRaw
  4632  061F                     _RightButtonPressedRaw:	
  4633                           
  4634                           ;main.c: 282: return (uint8_t)(PORTAbits.RA3 == 0);
  4635                           
  4636                           ;incstack = 0
  4637                           ; Regs used in _RightButtonPressedRaw: [wreg+status,0]
  4638  061F  1003               	clrc
  4639  0620  0020               	movlb	0	; select bank0
  4640  0621  1D8C               	btfss	12,3	;volatile
  4641  0622  1403               	setc
  4642  0623  3000               	movlw	0
  4643  0624  3D09               	addwfc	9,w
  4644  0625  0008               	return
  4645  0626                     __end_of_RightButtonPressedRaw:	
  4646                           
  4647                           	psect	text19
  4648  0608                     __ptext19:	
  4649 ;; *************** function _RightButtonPressed *****************
  4650 ;; Defined at:
  4651 ;;		line 292 in file "main.c"
  4652 ;; Parameters:    Size  Location     Type
  4653 ;;		None
  4654 ;; Auto vars:     Size  Location     Type
  4655 ;;		None
  4656 ;; Return value:  Size  Location     Type
  4657 ;;                  1    wreg      unsigned char 
  4658 ;; Registers used:
  4659 ;;		wreg, status,2, status,0
  4660 ;; Tracked objects:
  4661 ;;		On entry : 0/0
  4662 ;;		On exit  : 0/0
  4663 ;;		Unchanged: 0/0
  4664 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4665 ;;      Params:         0       0       0       0
  4666 ;;      Locals:         0       0       0       0
  4667 ;;      Temps:          0       0       0       0
  4668 ;;      Totals:         0       0       0       0
  4669 ;;Total ram usage:        0 bytes
  4670 ;; Hardware stack levels used:    1
  4671 ;; Hardware stack levels required when called:    4
  4672 ;; This function calls:
  4673 ;;		Nothing
  4674 ;; This function is called by:
  4675 ;;		_RunRightFlash
  4676 ;;		_CheckForButtonPushes
  4677 ;; This function uses a non-reentrant model
  4678 ;;
  4679                           
  4680                           
  4681                           ;psect for function _RightButtonPressed
  4682  0608                     _RightButtonPressed:	
  4683                           
  4684                           ;main.c: 294: return (RightButtonState == BUTTON_STATE_PRESSED);
  4685                           
  4686                           ;incstack = 0
  4687                           ; Regs used in _RightButtonPressed: [wreg+status,2+status,0]
  4688  0608  3002               	movlw	2
  4689  0609  0676               	xorwf	_RightButtonState,w	;volatile
  4690  060A  1D03               	btfss	3,2
  4691  060B  2E0E               	goto	u1020
  4692  060C  3001               	movlw	1
  4693  060D  0008               	return
  4694  060E                     u1020:	
  4695  060E  3000               	movlw	0
  4696  060F  0008               	return
  4697  0610                     __end_of_RightButtonPressed:	
  4698                           
  4699                           	psect	text20
  4700  0626                     __ptext20:	
  4701 ;; *************** function _LeftButtonPressedRaw *****************
  4702 ;; Defined at:
  4703 ;;		line 286 in file "main.c"
  4704 ;; Parameters:    Size  Location     Type
  4705 ;;		None
  4706 ;; Auto vars:     Size  Location     Type
  4707 ;;		None
  4708 ;; Return value:  Size  Location     Type
  4709 ;;                  1    wreg      unsigned char 
  4710 ;; Registers used:
  4711 ;;		wreg, status,0
  4712 ;; Tracked objects:
  4713 ;;		On entry : 0/0
  4714 ;;		On exit  : 0/0
  4715 ;;		Unchanged: 0/0
  4716 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4717 ;;      Params:         0       0       0       0
  4718 ;;      Locals:         0       0       0       0
  4719 ;;      Temps:          0       0       0       0
  4720 ;;      Totals:         0       0       0       0
  4721 ;;Total ram usage:        0 bytes
  4722 ;; Hardware stack levels used:    1
  4723 ;; Hardware stack levels required when called:    4
  4724 ;; This function calls:
  4725 ;;		Nothing
  4726 ;; This function is called by:
  4727 ;;		_CheckForButtonPushes
  4728 ;; This function uses a non-reentrant model
  4729 ;;
  4730                           
  4731                           
  4732                           ;psect for function _LeftButtonPressedRaw
  4733  0626                     _LeftButtonPressedRaw:	
  4734                           
  4735                           ;main.c: 288: return (uint8_t)(PORTAbits.RA2 == 0);
  4736                           
  4737                           ;incstack = 0
  4738                           ; Regs used in _LeftButtonPressedRaw: [wreg+status,0]
  4739  0626  1003               	clrc
  4740  0627  0020               	movlb	0	; select bank0
  4741  0628  1D0C               	btfss	12,2	;volatile
  4742  0629  1403               	setc
  4743  062A  3000               	movlw	0
  4744  062B  3D09               	addwfc	9,w
  4745  062C  0008               	return
  4746  062D                     __end_of_LeftButtonPressedRaw:	
  4747                           
  4748                           	psect	text21
  4749  0610                     __ptext21:	
  4750 ;; *************** function _LeftButtonPressed *****************
  4751 ;; Defined at:
  4752 ;;		line 298 in file "main.c"
  4753 ;; Parameters:    Size  Location     Type
  4754 ;;		None
  4755 ;; Auto vars:     Size  Location     Type
  4756 ;;		None
  4757 ;; Return value:  Size  Location     Type
  4758 ;;                  1    wreg      unsigned char 
  4759 ;; Registers used:
  4760 ;;		wreg, status,2, status,0
  4761 ;; Tracked objects:
  4762 ;;		On entry : 0/0
  4763 ;;		On exit  : 0/0
  4764 ;;		Unchanged: 0/0
  4765 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4766 ;;      Params:         0       0       0       0
  4767 ;;      Locals:         0       0       0       0
  4768 ;;      Temps:          0       0       0       0
  4769 ;;      Totals:         0       0       0       0
  4770 ;;Total ram usage:        0 bytes
  4771 ;; Hardware stack levels used:    1
  4772 ;; Hardware stack levels required when called:    4
  4773 ;; This function calls:
  4774 ;;		Nothing
  4775 ;; This function is called by:
  4776 ;;		_RunLeftFlash
  4777 ;;		_CheckForButtonPushes
  4778 ;; This function uses a non-reentrant model
  4779 ;;
  4780                           
  4781                           
  4782                           ;psect for function _LeftButtonPressed
  4783  0610                     _LeftButtonPressed:	
  4784                           
  4785                           ;main.c: 300: return (LeftButtonState == BUTTON_STATE_PRESSED);
  4786                           
  4787                           ;incstack = 0
  4788                           ; Regs used in _LeftButtonPressed: [wreg+status,2+status,0]
  4789  0610  3002               	movlw	2
  4790  0611  0677               	xorwf	_LeftButtonState,w	;volatile
  4791  0612  1D03               	btfss	3,2
  4792  0613  2E16               	goto	u1040
  4793  0614  3001               	movlw	1
  4794  0615  0008               	return
  4795  0616                     u1040:	
  4796  0616  3000               	movlw	0
  4797  0617  0008               	return
  4798  0618                     __end_of_LeftButtonPressed:	
  4799                           
  4800                           	psect	intentry
  4801  0004                     __pintentry:	
  4802 ;; *************** function _INTERRUPT_InterruptManager *****************
  4803 ;; Defined at:
  4804 ;;		line 51 in file "mcc_generated_files/interrupt_manager.c"
  4805 ;; Parameters:    Size  Location     Type
  4806 ;;		None
  4807 ;; Auto vars:     Size  Location     Type
  4808 ;;		None
  4809 ;; Return value:  Size  Location     Type
  4810 ;;                  1    wreg      void 
  4811 ;; Registers used:
  4812 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4813 ;; Tracked objects:
  4814 ;;		On entry : 0/0
  4815 ;;		On exit  : 0/0
  4816 ;;		Unchanged: 0/0
  4817 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4818 ;;      Params:         0       0       0       0
  4819 ;;      Locals:         0       0       0       0
  4820 ;;      Temps:          1       0       0       0
  4821 ;;      Totals:         1       0       0       0
  4822 ;;Total ram usage:        1 bytes
  4823 ;; Hardware stack levels used:    1
  4824 ;; Hardware stack levels required when called:    3
  4825 ;; This function calls:
  4826 ;;		_PIN_MANAGER_IOC
  4827 ;;		_TMR0_ISR
  4828 ;; This function is called by:
  4829 ;;		Interrupt level 1
  4830 ;; This function uses a non-reentrant model
  4831 ;;
  4832                           
  4833  0004                     _INTERRUPT_InterruptManager:	
  4834                           
  4835                           ;incstack = 0
  4836  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  4837                           
  4838                           ; Regs used in _INTERRUPT_InterruptManager: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  4839  0005  3180               	pagesel	$
  4840  0006  0020               	movlb	0	; select bank0
  4841  0007  087F               	movf	127,w
  4842  0008  00F3               	movwf	??_INTERRUPT_InterruptManager
  4843                           
  4844                           ;interrupt_manager.c: 54: if(INTCONbits.TMR0IE == 1 && INTCONbits.TMR0IF == 1)
  4845  0009  1A8B               	btfsc	11,5	;volatile
  4846  000A  1D0B               	btfss	11,2	;volatile
  4847  000B  280E               	goto	i1l102
  4848                           
  4849                           ;interrupt_manager.c: 55: {
  4850                           ;interrupt_manager.c: 56: TMR0_ISR();
  4851  000C  264B               	fcall	_TMR0_ISR
  4852                           
  4853                           ;interrupt_manager.c: 57: }
  4854  000D  2812               	goto	i1l106
  4855  000E                     i1l102:	
  4856                           
  4857                           ;interrupt_manager.c: 58: else if(INTCONbits.IOCIE == 1 && INTCONbits.IOCIF == 1)
  4858  000E  198B               	btfsc	11,3	;volatile
  4859  000F  1C0B               	btfss	11,0	;volatile
  4860  0010  2812               	goto	i1l106
  4861                           
  4862                           ;interrupt_manager.c: 59: {
  4863                           ;interrupt_manager.c: 60: PIN_MANAGER_IOC();
  4864  0011  25EF               	fcall	_PIN_MANAGER_IOC
  4865  0012                     i1l106:	
  4866                           ;interrupt_manager.c: 62: else
  4867                           ;interrupt_manager.c: 63: {
  4868                           
  4869                           ;interrupt_manager.c: 61: }
  4870                           
  4871  0012  0873               	movf	??_INTERRUPT_InterruptManager,w
  4872  0013  0020               	movlb	0	; select bank0
  4873  0014  00FF               	movwf	127
  4874  0015  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  4875  0016  0009               	retfie
  4876  0017                     __end_of_INTERRUPT_InterruptManager:	
  4877                           
  4878                           	psect	text23
  4879  064B                     __ptext23:	
  4880 ;; *************** function _TMR0_ISR *****************
  4881 ;; Defined at:
  4882 ;;		line 108 in file "mcc_generated_files/tmr0.c"
  4883 ;; Parameters:    Size  Location     Type
  4884 ;;		None
  4885 ;; Auto vars:     Size  Location     Type
  4886 ;;		None
  4887 ;; Return value:  Size  Location     Type
  4888 ;;                  1    wreg      void 
  4889 ;; Registers used:
  4890 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4891 ;; Tracked objects:
  4892 ;;		On entry : 0/0
  4893 ;;		On exit  : 0/0
  4894 ;;		Unchanged: 0/0
  4895 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4896 ;;      Params:         0       0       0       0
  4897 ;;      Locals:         0       0       0       0
  4898 ;;      Temps:          0       0       0       0
  4899 ;;      Totals:         0       0       0       0
  4900 ;;Total ram usage:        0 bytes
  4901 ;; Hardware stack levels used:    1
  4902 ;; Hardware stack levels required when called:    2
  4903 ;; This function calls:
  4904 ;;		_TMR0_CallBack
  4905 ;; This function is called by:
  4906 ;;		_INTERRUPT_InterruptManager
  4907 ;; This function uses a non-reentrant model
  4908 ;;
  4909                           
  4910                           
  4911                           ;psect for function _TMR0_ISR
  4912  064B                     _TMR0_ISR:	
  4913                           
  4914                           ;tmr0.c: 112: INTCONbits.TMR0IF = 0;
  4915                           
  4916                           ;incstack = 0
  4917                           ; Regs used in _TMR0_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4918  064B  110B               	bcf	11,2	;volatile
  4919                           
  4920                           ;tmr0.c: 114: TMR0 = timer0ReloadVal;
  4921  064C  0020               	movlb	0	; select bank0
  4922  064D  0868               	movf	_timer0ReloadVal,w	;volatile
  4923  064E  0095               	movwf	21	;volatile
  4924                           
  4925                           ;tmr0.c: 118: TMR0_CallBack();
  4926  064F  25DB               	fcall	_TMR0_CallBack
  4927  0650  0008               	return
  4928  0651                     __end_of_TMR0_ISR:	
  4929                           
  4930                           	psect	text24
  4931  05DB                     __ptext24:	
  4932 ;; *************** function _TMR0_CallBack *****************
  4933 ;; Defined at:
  4934 ;;		line 123 in file "mcc_generated_files/tmr0.c"
  4935 ;; Parameters:    Size  Location     Type
  4936 ;;		None
  4937 ;; Auto vars:     Size  Location     Type
  4938 ;;		None
  4939 ;; Return value:  Size  Location     Type
  4940 ;;                  1    wreg      void 
  4941 ;; Registers used:
  4942 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4943 ;; Tracked objects:
  4944 ;;		On entry : 0/0
  4945 ;;		On exit  : 0/0
  4946 ;;		Unchanged: 0/0
  4947 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4948 ;;      Params:         0       0       0       0
  4949 ;;      Locals:         0       0       0       0
  4950 ;;      Temps:          0       0       0       0
  4951 ;;      Totals:         0       0       0       0
  4952 ;;Total ram usage:        0 bytes
  4953 ;; Hardware stack levels used:    1
  4954 ;; Hardware stack levels required when called:    1
  4955 ;; This function calls:
  4956 ;;		Absolute function
  4957 ;;		_TMR0_Callback
  4958 ;; This function is called by:
  4959 ;;		_TMR0_ISR
  4960 ;; This function uses a non-reentrant model
  4961 ;;
  4962                           
  4963                           
  4964                           ;psect for function _TMR0_CallBack
  4965  05DB                     _TMR0_CallBack:	
  4966                           
  4967                           ;tmr0.c: 127: if(TMR0_InterruptHandler)
  4968                           
  4969                           ;incstack = 0
  4970                           ; Regs used in _TMR0_CallBack: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4971  05DB  0020               	movlb	0	; select bank0
  4972  05DC  0862               	movf	_TMR0_InterruptHandler,w
  4973  05DD  0463               	iorwf	_TMR0_InterruptHandler+1,w
  4974  05DE  1903               	btfsc	3,2
  4975  05DF  0008               	return
  4976                           
  4977                           ;tmr0.c: 128: {
  4978                           ;tmr0.c: 129: TMR0_InterruptHandler();
  4979  05E0  0863               	movf	_TMR0_InterruptHandler+1,w
  4980  05E1  008A               	movwf	10
  4981  05E2  0862               	movf	_TMR0_InterruptHandler,w
  4982  05E3  000A               	callw
  4983  05E4  3185               	pagesel	$
  4984  05E5  0008               	return
  4985  05E6                     __end_of_TMR0_CallBack:	
  4986                           
  4987                           	psect	text25
  4988  0453                     __ptext25:	
  4989 ;; *************** function _TMR0_Callback *****************
  4990 ;; Defined at:
  4991 ;;		line 221 in file "main.c"
  4992 ;; Parameters:    Size  Location     Type
  4993 ;;		None
  4994 ;; Auto vars:     Size  Location     Type
  4995 ;;  i               1    2[COMMON] unsigned char 
  4996 ;; Return value:  Size  Location     Type
  4997 ;;                  1    wreg      void 
  4998 ;; Registers used:
  4999 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5000 ;; Tracked objects:
  5001 ;;		On entry : 0/0
  5002 ;;		On exit  : 0/0
  5003 ;;		Unchanged: 0/0
  5004 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5005 ;;      Params:         0       0       0       0
  5006 ;;      Locals:         1       0       0       0
  5007 ;;      Temps:          2       0       0       0
  5008 ;;      Totals:         3       0       0       0
  5009 ;;Total ram usage:        3 bytes
  5010 ;; Hardware stack levels used:    1
  5011 ;; This function calls:
  5012 ;;		Nothing
  5013 ;; This function is called by:
  5014 ;;		_main
  5015 ;;		_TMR0_CallBack
  5016 ;; This function uses a non-reentrant model
  5017 ;;
  5018                           
  5019                           
  5020                           ;psect for function _TMR0_Callback
  5021  0453                     _TMR0_Callback:	
  5022                           
  5023                           ;main.c: 223: uint8_t i;
  5024                           ;main.c: 226: TRISA = 0xCC;
  5025                           
  5026                           ;incstack = 0
  5027                           ; Regs used in _TMR0_Callback: [wreg+fsr1l+fsr1h+status,2+status,0]
  5028  0453  30CC               	movlw	204
  5029  0454  0021               	movlb	1	; select bank1
  5030  0455  008C               	movwf	12	;volatile
  5031                           
  5032                           ;main.c: 227: PORTA = 0x00;
  5033  0456  0020               	movlb	0	; select bank0
  5034  0457  018C               	clrf	12	;volatile
  5035                           
  5036                           ;main.c: 230: i = (uint8_t)(1 << LEDState);
  5037  0458  3001               	movlw	1
  5038  0459  00F0               	movwf	??_TMR0_Callback
  5039  045A  0A51               	incf	_LEDState,w
  5040  045B  2C5D               	goto	u90_24
  5041  045C                     u90_25:	
  5042  045C  35F0               	lslf	??_TMR0_Callback,f
  5043  045D                     u90_24:	
  5044  045D  0B89               	decfsz	9,f
  5045  045E  2C5C               	goto	u90_25
  5046  045F  0870               	movf	??_TMR0_Callback,w
  5047  0460  00F1               	movwf	??_TMR0_Callback+1
  5048  0461  0871               	movf	??_TMR0_Callback+1,w
  5049  0462  00F2               	movwf	TMR0_Callback@i
  5050                           
  5051                           ;main.c: 233: if (i & LEDOns)
  5052  0463  0872               	movf	TMR0_Callback@i,w
  5053  0464  0550               	andwf	_LEDOns,w	;volatile
  5054  0465  1903               	btfsc	3,2
  5055  0466  2C75               	goto	i1l1388
  5056                           
  5057                           ;main.c: 234: {
  5058                           ;main.c: 236: TRISA = TRISTable[LEDState];
  5059  0467  0851               	movf	_LEDState,w
  5060  0468  3EA8               	addlw	(low (_TRISTable| 0))& (0+255)
  5061  0469  0086               	movwf	6
  5062  046A  0187               	clrf	7
  5063  046B  0801               	movf	1,w
  5064  046C  0021               	movlb	1	; select bank1
  5065  046D  008C               	movwf	12	;volatile
  5066                           
  5067                           ;main.c: 237: PORTA = PORTTable[LEDState];
  5068  046E  0020               	movlb	0	; select bank0
  5069  046F  0851               	movf	_LEDState,w
  5070  0470  3EA0               	addlw	(low (_PORTTable| 0))& (0+255)
  5071  0471  0086               	movwf	6
  5072  0472  0187               	clrf	7
  5073  0473  0801               	movf	1,w
  5074  0474  008C               	movwf	12	;volatile
  5075  0475                     i1l1388:	
  5076                           
  5077                           ;main.c: 238: }
  5078                           ;main.c: 241: LEDState++;
  5079  0475  3001               	movlw	1
  5080  0476  00F0               	movwf	??_TMR0_Callback
  5081  0477  0870               	movf	??_TMR0_Callback,w
  5082  0478  07D1               	addwf	_LEDState,f
  5083                           
  5084                           ;main.c: 242: if (LEDState == 8)
  5085  0479  3008               	movlw	8
  5086  047A  0651               	xorwf	_LEDState,w
  5087  047B  1D03               	btfss	3,2
  5088  047C  0008               	return
  5089                           
  5090                           ;main.c: 243: {
  5091                           ;main.c: 248: WakeTimer++;
  5092  047D  3001               	movlw	1
  5093  047E  07C8               	addwf	_WakeTimer,f	;volatile
  5094  047F  3000               	movlw	0
  5095  0480  3DC9               	addwfc	_WakeTimer+1,f	;volatile
  5096  0481  3000               	movlw	0
  5097  0482  3DCA               	addwfc	_WakeTimer+2,f	;volatile
  5098  0483  3000               	movlw	0
  5099  0484  3DCB               	addwfc	_WakeTimer+3,f	;volatile
  5100                           
  5101                           ;main.c: 251: for (i=0; i < 8; i++)
  5102  0485  01F2               	clrf	TMR0_Callback@i
  5103  0486  3008               	movlw	8
  5104  0487  0272               	subwf	TMR0_Callback@i,w
  5105  0488  1803               	btfsc	3,0
  5106  0489  2CA4               	goto	i1l1408
  5107  048A                     i1l1400:	
  5108                           
  5109                           ;main.c: 252: {
  5110                           ;main.c: 253: if (PatternDelay[i])
  5111  048A  3572               	lslf	TMR0_Callback@i,w
  5112  048B  3E20               	addlw	(low (_PatternDelay| 0))& (0+255)
  5113  048C  0086               	movwf	6
  5114  048D  0187               	clrf	7
  5115  048E  0016               	moviw fsr1++
  5116  048F  0401               	iorwf	1,w
  5117  0490  1903               	btfsc	3,2
  5118  0491  2C9C               	goto	i1l1404
  5119                           
  5120                           ;main.c: 254: {
  5121                           ;main.c: 255: PatternDelay[i]--;
  5122  0492  3572               	lslf	TMR0_Callback@i,w
  5123  0493  3E20               	addlw	(low (_PatternDelay| 0))& (0+255)
  5124  0494  0086               	movwf	6
  5125  0495  0187               	clrf	7
  5126  0496  3001               	movlw	1
  5127  0497  0281               	subwf	1,f
  5128  0498  3141               	addfsr 1,1
  5129  0499  3000               	movlw	0
  5130  049A  3B81               	subwfb	1,f
  5131  049B  317F               	addfsr 1,-1
  5132  049C                     i1l1404:	
  5133  049C  3001               	movlw	1
  5134  049D  00F0               	movwf	??_TMR0_Callback
  5135  049E  0870               	movf	??_TMR0_Callback,w
  5136  049F  07F2               	addwf	TMR0_Callback@i,f
  5137  04A0  3008               	movlw	8
  5138  04A1  0272               	subwf	TMR0_Callback@i,w
  5139  04A2  1C03               	skipc
  5140  04A3  2C8A               	goto	i1l1400
  5141  04A4                     i1l1408:	
  5142                           
  5143                           ;main.c: 256: }
  5144                           ;main.c: 257: }
  5145                           ;main.c: 259: LEDState = 0;
  5146  04A4  0020               	movlb	0	; select bank0
  5147  04A5  01D1               	clrf	_LEDState
  5148                           
  5149                           ;main.c: 262: if (LeftDebounceTimer)
  5150  04A6  0879               	movf	_LeftDebounceTimer,w	;volatile
  5151  04A7  1903               	btfsc	3,2
  5152  04A8  2CAB               	goto	i1l192
  5153                           
  5154                           ;main.c: 263: {
  5155                           ;main.c: 264: LeftDebounceTimer--;
  5156  04A9  3001               	movlw	1
  5157  04AA  02F9               	subwf	_LeftDebounceTimer,f	;volatile
  5158  04AB                     i1l192:	
  5159                           
  5160                           ;main.c: 265: }
  5161                           ;main.c: 267: if (RightDebounceTimer)
  5162  04AB  0878               	movf	_RightDebounceTimer,w	;volatile
  5163  04AC  1903               	btfsc	3,2
  5164  04AD  2CB0               	goto	i1l193
  5165                           
  5166                           ;main.c: 268: {
  5167                           ;main.c: 269: RightDebounceTimer--;
  5168  04AE  3001               	movlw	1
  5169  04AF  02F8               	subwf	_RightDebounceTimer,f	;volatile
  5170  04B0                     i1l193:	
  5171                           
  5172                           ;main.c: 270: }
  5173                           ;main.c: 272: if (ShutdownDelayTimer)
  5174  04B0  084F               	movf	_ShutdownDelayTimer,w	;volatile
  5175  04B1  1903               	btfsc	3,2
  5176  04B2  0008               	return
  5177                           
  5178                           ;main.c: 273: {
  5179                           ;main.c: 274: ShutdownDelayTimer--;
  5180  04B3  3001               	movlw	1
  5181  04B4  02CF               	subwf	_ShutdownDelayTimer,f	;volatile
  5182  04B5  0008               	return
  5183  04B6                     __end_of_TMR0_Callback:	
  5184                           
  5185                           	psect	text26
  5186  05EF                     __ptext26:	
  5187 ;; *************** function _PIN_MANAGER_IOC *****************
  5188 ;; Defined at:
  5189 ;;		line 110 in file "mcc_generated_files/pin_manager.c"
  5190 ;; Parameters:    Size  Location     Type
  5191 ;;		None
  5192 ;; Auto vars:     Size  Location     Type
  5193 ;;		None
  5194 ;; Return value:  Size  Location     Type
  5195 ;;                  1    wreg      void 
  5196 ;; Registers used:
  5197 ;;		wreg, status,2, status,0, pclath, cstack
  5198 ;; Tracked objects:
  5199 ;;		On entry : 0/0
  5200 ;;		On exit  : 0/0
  5201 ;;		Unchanged: 0/0
  5202 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5203 ;;      Params:         0       0       0       0
  5204 ;;      Locals:         0       0       0       0
  5205 ;;      Temps:          0       0       0       0
  5206 ;;      Totals:         0       0       0       0
  5207 ;;Total ram usage:        0 bytes
  5208 ;; Hardware stack levels used:    1
  5209 ;; Hardware stack levels required when called:    2
  5210 ;; This function calls:
  5211 ;;		_IOCAF2_ISR
  5212 ;;		_IOCAF3_ISR
  5213 ;; This function is called by:
  5214 ;;		_INTERRUPT_InterruptManager
  5215 ;; This function uses a non-reentrant model
  5216 ;;
  5217                           
  5218                           
  5219                           ;psect for function _PIN_MANAGER_IOC
  5220  05EF                     _PIN_MANAGER_IOC:	
  5221                           
  5222                           ;pin_manager.c: 113: if(IOCAFbits.IOCAF2 == 1)
  5223                           
  5224                           ;incstack = 0
  5225                           ; Regs used in _PIN_MANAGER_IOC: [wreg+status,2+status,0+pclath+cstack]
  5226  05EF  0027               	movlb	7	; select bank7
  5227  05F0  1D13               	btfss	19,2	;volatile
  5228  05F1  2DF3               	goto	i1l1548
  5229                           
  5230                           ;pin_manager.c: 114: {
  5231                           ;pin_manager.c: 115: IOCAF2_ISR();
  5232  05F2  25B8               	fcall	_IOCAF2_ISR
  5233  05F3                     i1l1548:	
  5234                           
  5235                           ;pin_manager.c: 116: }
  5236                           ;pin_manager.c: 119: if(IOCAFbits.IOCAF3 == 1)
  5237  05F3  0027               	movlb	7	; select bank7
  5238  05F4  1D93               	btfss	19,3	;volatile
  5239  05F5  0008               	return
  5240                           
  5241                           ;pin_manager.c: 120: {
  5242                           ;pin_manager.c: 121: IOCAF3_ISR();
  5243  05F6  25AB               	fcall	_IOCAF3_ISR
  5244  05F7  0008               	return
  5245  05F8                     __end_of_PIN_MANAGER_IOC:	
  5246                           
  5247                           	psect	text27
  5248  05AB                     __ptext27:	
  5249 ;; *************** function _IOCAF3_ISR *****************
  5250 ;; Defined at:
  5251 ;;		line 160 in file "mcc_generated_files/pin_manager.c"
  5252 ;; Parameters:    Size  Location     Type
  5253 ;;		None
  5254 ;; Auto vars:     Size  Location     Type
  5255 ;;		None
  5256 ;; Return value:  Size  Location     Type
  5257 ;;                  1    wreg      void 
  5258 ;; Registers used:
  5259 ;;		wreg, status,2, status,0, pclath, cstack
  5260 ;; Tracked objects:
  5261 ;;		On entry : 0/0
  5262 ;;		On exit  : 0/0
  5263 ;;		Unchanged: 0/0
  5264 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5265 ;;      Params:         0       0       0       0
  5266 ;;      Locals:         0       0       0       0
  5267 ;;      Temps:          0       0       0       0
  5268 ;;      Totals:         0       0       0       0
  5269 ;;Total ram usage:        0 bytes
  5270 ;; Hardware stack levels used:    1
  5271 ;; Hardware stack levels required when called:    1
  5272 ;; This function calls:
  5273 ;;		Absolute function
  5274 ;;		_IOCAF3_DefaultInterruptHandler
  5275 ;; This function is called by:
  5276 ;;		_PIN_MANAGER_IOC
  5277 ;; This function uses a non-reentrant model
  5278 ;;
  5279                           
  5280                           
  5281                           ;psect for function _IOCAF3_ISR
  5282  05AB                     _IOCAF3_ISR:	
  5283                           
  5284                           ;pin_manager.c: 165: if(IOCAF3_InterruptHandler)
  5285                           
  5286                           ;incstack = 0
  5287                           ; Regs used in _IOCAF3_ISR: [wreg+status,2+status,0+pclath+cstack]
  5288  05AB  0020               	movlb	0	; select bank0
  5289  05AC  0864               	movf	_IOCAF3_InterruptHandler,w
  5290  05AD  0465               	iorwf	_IOCAF3_InterruptHandler+1,w
  5291  05AE  1903               	btfsc	3,2
  5292  05AF  2DB5               	goto	i1l1460
  5293                           
  5294                           ;pin_manager.c: 166: {
  5295                           ;pin_manager.c: 167: IOCAF3_InterruptHandler();
  5296  05B0  0865               	movf	_IOCAF3_InterruptHandler+1,w
  5297  05B1  008A               	movwf	10
  5298  05B2  0864               	movf	_IOCAF3_InterruptHandler,w
  5299  05B3  000A               	callw
  5300  05B4  3185               	pagesel	$
  5301  05B5                     i1l1460:	
  5302                           
  5303                           ;pin_manager.c: 168: }
  5304                           ;pin_manager.c: 169: IOCAFbits.IOCAF3 = 0;
  5305  05B5  0027               	movlb	7	; select bank7
  5306  05B6  1193               	bcf	19,3	;volatile
  5307  05B7  0008               	return
  5308  05B8                     __end_of_IOCAF3_ISR:	
  5309                           
  5310                           	psect	text28
  5311  0662                     __ptext28:	
  5312 ;; *************** function _IOCAF3_DefaultInterruptHandler *****************
  5313 ;; Defined at:
  5314 ;;		line 182 in file "mcc_generated_files/pin_manager.c"
  5315 ;; Parameters:    Size  Location     Type
  5316 ;;		None
  5317 ;; Auto vars:     Size  Location     Type
  5318 ;;		None
  5319 ;; Return value:  Size  Location     Type
  5320 ;;                  1    wreg      void 
  5321 ;; Registers used:
  5322 ;;		None
  5323 ;; Tracked objects:
  5324 ;;		On entry : 0/0
  5325 ;;		On exit  : 0/0
  5326 ;;		Unchanged: 0/0
  5327 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5328 ;;      Params:         0       0       0       0
  5329 ;;      Locals:         0       0       0       0
  5330 ;;      Temps:          0       0       0       0
  5331 ;;      Totals:         0       0       0       0
  5332 ;;Total ram usage:        0 bytes
  5333 ;; Hardware stack levels used:    1
  5334 ;; This function calls:
  5335 ;;		Nothing
  5336 ;; This function is called by:
  5337 ;;		_PIN_MANAGER_Initialize
  5338 ;;		_IOCAF3_ISR
  5339 ;; This function uses a non-reentrant model
  5340 ;;
  5341                           
  5342                           
  5343                           ;psect for function _IOCAF3_DefaultInterruptHandler
  5344  0662                     _IOCAF3_DefaultInterruptHandler:	
  5345                           
  5346                           ;incstack = 0
  5347                           ; Regs used in _IOCAF3_DefaultInterruptHandler: []
  5348  0662  0008               	return
  5349  0663                     __end_of_IOCAF3_DefaultInterruptHandler:	
  5350                           
  5351                           	psect	text29
  5352  05B8                     __ptext29:	
  5353 ;; *************** function _IOCAF2_ISR *****************
  5354 ;; Defined at:
  5355 ;;		line 130 in file "mcc_generated_files/pin_manager.c"
  5356 ;; Parameters:    Size  Location     Type
  5357 ;;		None
  5358 ;; Auto vars:     Size  Location     Type
  5359 ;;		None
  5360 ;; Return value:  Size  Location     Type
  5361 ;;                  1    wreg      void 
  5362 ;; Registers used:
  5363 ;;		wreg, status,2, status,0, pclath, cstack
  5364 ;; Tracked objects:
  5365 ;;		On entry : 0/0
  5366 ;;		On exit  : 0/0
  5367 ;;		Unchanged: 0/0
  5368 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5369 ;;      Params:         0       0       0       0
  5370 ;;      Locals:         0       0       0       0
  5371 ;;      Temps:          0       0       0       0
  5372 ;;      Totals:         0       0       0       0
  5373 ;;Total ram usage:        0 bytes
  5374 ;; Hardware stack levels used:    1
  5375 ;; Hardware stack levels required when called:    1
  5376 ;; This function calls:
  5377 ;;		Absolute function
  5378 ;;		_IOCAF2_DefaultInterruptHandler
  5379 ;; This function is called by:
  5380 ;;		_PIN_MANAGER_IOC
  5381 ;; This function uses a non-reentrant model
  5382 ;;
  5383                           
  5384                           
  5385                           ;psect for function _IOCAF2_ISR
  5386  05B8                     _IOCAF2_ISR:	
  5387                           
  5388                           ;pin_manager.c: 135: if(IOCAF2_InterruptHandler)
  5389                           
  5390                           ;incstack = 0
  5391                           ; Regs used in _IOCAF2_ISR: [wreg+status,2+status,0+pclath+cstack]
  5392  05B8  0020               	movlb	0	; select bank0
  5393  05B9  0866               	movf	_IOCAF2_InterruptHandler,w
  5394  05BA  0467               	iorwf	_IOCAF2_InterruptHandler+1,w
  5395  05BB  1903               	btfsc	3,2
  5396  05BC  2DC2               	goto	i1l1454
  5397                           
  5398                           ;pin_manager.c: 136: {
  5399                           ;pin_manager.c: 137: IOCAF2_InterruptHandler();
  5400  05BD  0867               	movf	_IOCAF2_InterruptHandler+1,w
  5401  05BE  008A               	movwf	10
  5402  05BF  0866               	movf	_IOCAF2_InterruptHandler,w
  5403  05C0  000A               	callw
  5404  05C1  3185               	pagesel	$
  5405  05C2                     i1l1454:	
  5406                           
  5407                           ;pin_manager.c: 138: }
  5408                           ;pin_manager.c: 139: IOCAFbits.IOCAF2 = 0;
  5409  05C2  0027               	movlb	7	; select bank7
  5410  05C3  1113               	bcf	19,2	;volatile
  5411  05C4  0008               	return
  5412  05C5                     __end_of_IOCAF2_ISR:	
  5413                           
  5414                           	psect	text30
  5415  0663                     __ptext30:	
  5416 ;; *************** function _IOCAF2_DefaultInterruptHandler *****************
  5417 ;; Defined at:
  5418 ;;		line 152 in file "mcc_generated_files/pin_manager.c"
  5419 ;; Parameters:    Size  Location     Type
  5420 ;;		None
  5421 ;; Auto vars:     Size  Location     Type
  5422 ;;		None
  5423 ;; Return value:  Size  Location     Type
  5424 ;;                  1    wreg      void 
  5425 ;; Registers used:
  5426 ;;		None
  5427 ;; Tracked objects:
  5428 ;;		On entry : 0/0
  5429 ;;		On exit  : 0/0
  5430 ;;		Unchanged: 0/0
  5431 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5432 ;;      Params:         0       0       0       0
  5433 ;;      Locals:         0       0       0       0
  5434 ;;      Temps:          0       0       0       0
  5435 ;;      Totals:         0       0       0       0
  5436 ;;Total ram usage:        0 bytes
  5437 ;; Hardware stack levels used:    1
  5438 ;; This function calls:
  5439 ;;		Nothing
  5440 ;; This function is called by:
  5441 ;;		_PIN_MANAGER_Initialize
  5442 ;;		_IOCAF2_ISR
  5443 ;; This function uses a non-reentrant model
  5444 ;;
  5445                           
  5446                           
  5447                           ;psect for function _IOCAF2_DefaultInterruptHandler
  5448  0663                     _IOCAF2_DefaultInterruptHandler:	
  5449                           
  5450                           ;incstack = 0
  5451                           ; Regs used in _IOCAF2_DefaultInterruptHandler: []
  5452  0663  0008               	return
  5453  0664                     __end_of_IOCAF2_DefaultInterruptHandler:	
  5454  007E                     btemp	set	126	;btemp
  5455  007E                     int$flags	set	126
  5456  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        21
    BSS         54
    Persistent  7
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      10
    BANK0            80     16      78
    BANK1            80      0      16
    BANK2            80      0       0

Pointer List with Targets:

    TMR0_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR0_Callback(), 

    TMR0_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR0_Callback(), Absolute function(), 

    IOCAF3_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> IOCAF3_DefaultInterruptHandler(), 

    IOCAF3_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), IOCAF3_DefaultInterruptHandler(), 

    IOCAF2_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> IOCAF2_DefaultInterruptHandler(), 

    IOCAF2_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), IOCAF2_DefaultInterruptHandler(), 


Critical Paths under _main in COMMON

    _main->_TMR0_SetInterruptHandler
    _PIN_MANAGER_Initialize->_IOCAF2_SetInterruptHandler
    _PIN_MANAGER_Initialize->_IOCAF3_SetInterruptHandler
    _RunRightFlash->_SetLEDOff
    _RunRightFlash->_SetLEDOn
    _RunRightFlash->___wmul
    _RunLeftFlash->_SetLEDOff
    _RunLeftFlash->_SetLEDOn
    _RunLeftFlash->___wmul
    ___lwdiv->___wmul
    _RunGame->_SetLEDOff
    _RunGame->_SetLEDOn

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _TMR0_CallBack->_TMR0_Callback

Critical Paths under _main in BANK0

    _main->_RunLeftFlash
    _main->_RunRightFlash
    _RunRightFlash->___lwdiv
    _RunLeftFlash->___lwdiv
    ___lwdiv->___wmul

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0    3017
                                             13 BANK0      3     3      0
               _CheckForButtonPushes
                            _RunGame
                       _RunLeftFlash
                      _RunRightFlash
                  _SYSTEM_Initialize
                      _SetAllLEDsOff
           _TMR0_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (1) _TMR0_SetInterruptHandler                             2     0      2      75
                                              4 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (1) _SetAllLEDsOff                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     150
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR0_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR0_Initialize                                      1     1      0       0
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0     150
         _IOCAF2_SetInterruptHandler
         _IOCAF3_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _IOCAF3_SetInterruptHandler                           2     0      2      75
                                              4 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (3) _IOCAF2_SetInterruptHandler                           2     0      2      75
                                              4 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _RunRightFlash                                        1     1      0    1286
                                             12 BANK0      1     1      0
                 _RightButtonPressed
                          _SetLEDOff
                           _SetLEDOn
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _RunLeftFlash                                         1     1      0    1286
                                             12 BANK0      1     1      0
                  _LeftButtonPressed
                          _SetLEDOff
                           _SetLEDOn
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     656
                                              4 COMMON     2     2      0
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     586
                                              4 BANK0      8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _RunGame                                              4     4      0      44
                                              0 BANK0      4     4      0
                          _SetLEDOff
                           _SetLEDOn
 ---------------------------------------------------------------------------------
 (2) _SetLEDOn                                             2     2      0      22
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (2) _SetLEDOff                                            2     2      0      22
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _CheckForButtonPushes                                 5     5      0      37
                                              4 COMMON     1     1      0
                                              0 BANK0      4     4      0
                  _LeftButtonPressed
               _LeftButtonPressedRaw
                 _RightButtonPressed
              _RightButtonPressedRaw
 ---------------------------------------------------------------------------------
 (2) _RightButtonPressedRaw                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _RightButtonPressed                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _LeftButtonPressedRaw                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _LeftButtonPressed                                    0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _INTERRUPT_InterruptManager                           1     1      0     113
                                              3 COMMON     1     1      0
                    _PIN_MANAGER_IOC
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (5) _TMR0_ISR                                             0     0      0     113
                      _TMR0_CallBack
 ---------------------------------------------------------------------------------
 (6) _TMR0_CallBack                                        0     0      0     113
                   Absolute function *
                      _TMR0_Callback *
 ---------------------------------------------------------------------------------
 (7) _TMR0_Callback                                        3     3      0     113
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (5) _PIN_MANAGER_IOC                                      0     0      0       0
                         _IOCAF2_ISR
                         _IOCAF3_ISR
 ---------------------------------------------------------------------------------
 (6) _IOCAF3_ISR                                           0     0      0       0
                   Absolute function *
     _IOCAF3_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (7) _IOCAF3_DefaultInterruptHandler                       0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _IOCAF2_ISR                                           0     0      0       0
                   Absolute function *
     _IOCAF2_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (7) _IOCAF2_DefaultInterruptHandler                       0     0      0       0
 ---------------------------------------------------------------------------------
 (7) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _CheckForButtonPushes
     _LeftButtonPressed
     _LeftButtonPressedRaw
     _RightButtonPressed
     _RightButtonPressedRaw
   _RunGame
     _SetLEDOff
     _SetLEDOn
   _RunLeftFlash
     _LeftButtonPressed
     _SetLEDOff
     _SetLEDOn
     ___lwdiv
       ___wmul (ARG)
     ___wmul
   _RunRightFlash
     _RightButtonPressed
     _SetLEDOff
     _SetLEDOn
     ___lwdiv
       ___wmul (ARG)
     ___wmul
   _SYSTEM_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
       _IOCAF2_SetInterruptHandler
       _IOCAF3_SetInterruptHandler
     _TMR0_Initialize
     _WDT_Initialize
   _SetAllLEDsOff
   _TMR0_SetInterruptHandler

 _INTERRUPT_InterruptManager (ROOT)
   _PIN_MANAGER_IOC
     _IOCAF2_ISR
       Absolute function(Fake) *
       _IOCAF2_DefaultInterruptHandler *
     _IOCAF3_ISR
       Absolute function(Fake) *
       _IOCAF3_DefaultInterruptHandler *
   _TMR0_ISR
     _TMR0_CallBack
       Absolute function(Fake) *
       _TMR0_Callback *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      6       A       2       71.4%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      68       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     10      4E       6       97.5%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      0      10       8       20.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
DATA                 0      0      68      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Sun Dec 04 12:24:13 2022

                              ??_RunRightFlash 005E                                              pc 0002  
                                  __CFG_CP$OFF 0000                            ___wmul@multiplicand 0054  
                              _timer0ReloadVal 0068                                            l364 0579  
                                 __CFG_BORV$LO 0000                                            wreg 0009  
           __end_of_IOCAF2_SetInterruptHandler 064B                     _IOCAF2_SetInterruptHandler 0645  
                                         S2460 05E6                                           S2456 05C5  
                                         S2458 05D0                                   __CFG_LVP$OFF 0000  
                                         l2010 0572                                           l2100 02BE  
                                         l2110 02EB                                           l2102 02C7  
                                         l2030 01DA                                           l2120 030F  
                                         l2112 02F4                                           l2104 02D0  
                                         l2040 0207                                           l2032 01E3  
                                         l2114 02FD                                           l2106 02D9  
                                         l2050 022B                                           l2042 0210  
                                         l2034 01EC                                           l2026 01CC  
                                         l2300 03F2                                           l2140 034B  
                                         l2116 0306                                           l2108 02E2  
                                         l2124 0311                                           l2044 0219  
                                         l2036 01F5                                           l2028 01D1  
                                         l2302 03F5                                           l2142 034E  
                                         l2126 031B                                           l2070 0267  
                                         l2046 0222                                           l2038 01FE  
                                         l2054 022D                                           l2320 0437  
                                         l2304 03F7                                           l2240 01A4  
                                         l2152 037B                                           l2072 026A  
                                         l2056 0237                                           l2322 0438  
                                         l2170 0053                                           l1530 052C  
                                         l2154 0384                                           l2138 0349  
                                         l2082 0297                                           l2324 0441  
                                         l2180 00A8                                           l2172 0064  
                                         l1540 0547                                           l2156 0389  
                                         l2084 02A0                                           l2068 0265  
                                         l2326 0444                                           l2262 03A0  
                                         l2238 019B                                           l2182 00B9  
                                         l2174 0075                                           l2086 02A5  
                                         l2336 0451                                           l2328 0446  
                                         l2280 03C6                                           l2272 03BA  
                                         l2176 0086                                           l2168 0042  
                                         l1536 053E                                           l1528 0520  
                                         l2096 02B0                                           l2290 03D9  
                                         l2258 039A                                           l2178 0097  
                                         l2186 00CA                                           l2098 02B5  
                                         l2370 04DB                                           l2362 04CA  
                                         l2284 03CC                                           l2268 03AD  
                                         l2188 00D5                                           l2348 04C0  
                                         l2294 03E6                                           l2366 04D3  
                                         l2384 04FD                                           l2376 04E3  
                                         l2394 0515                                           l2378 04EE  
                                         l2388 0505                                           u1020 060E  
                                         u1040 0616                                           u1115 0523  
                                         u2015 00E4                                           u1135 052D  
                                         u2025 0104                                           u1145 0537  
                                         u1155 053F                                           u2045 01B2  
                                         _LATA 010C                                           u2255 0426  
                                         u2407 0117                                           u2417 0125  
                                         u2427 0133                                           u2437 0141  
                                         u1805 057A                                           u2447 014F  
                                         u1815 057F                                           u2457 015D  
                                         u2467 016B                                           u2477 0179  
                                         u2397 04F3                                           u2487 0187  
                                         u2497 0195                          ?_CheckForButtonPushes 0070  
                                         _TMR0 0015                                           _WPUA 020C  
                                 __CFG_WRT$OFF 0000                          ?_LeftButtonPressedRaw 0070  
                           _RightButtonPressed 0608                                           _main 04B6  
                                         fsr0h 0005                                           fsr1h 0007  
                                         indf0 0000                                           fsr0l 0004  
                                         indf1 0001                                           fsr1l 0006  
                                         btemp 007E  CheckForButtonPushes@LeftButtonQuickPressCount 004C  
                                         start 0017                            ?_RightButtonPressed 0070  
               __size_of_RightButtonPressedRaw 0007                  __end_of_RightButtonPressedRaw 0626  
                      __end_of_TMR0_Initialize 05AB                                __end_of_RunGame 01C6  
               __size_of_OSCILLATOR_Initialize 0007                            __size_of_IOCAF2_ISR 000D  
                          __size_of_IOCAF3_ISR 000D                  __end_of_OSCILLATOR_Initialize 061F  
                                        ?_main 0070                                  __CFG_WDTE$OFF 0000  
                              __end_of___lwdiv 054C                                          i1l102 000E  
                                        i1l106 0012                                          i1l192 04AB  
                                        i1l193 04B0                                          _PORTA 000C  
                                        _TRISA 008C                                          u90_24 045D  
                                        u90_25 045C              __size_of_TMR0_SetInterruptHandler 0006  
                    ?_TMR0_SetInterruptHandler 0074                           ??_RightButtonPressed 0074  
                             __end_of_TMR0_ISR 0651                        __end_of_PIN_MANAGER_IOC 05F8  
                               _WDT_Initialize 065B                                          main@i 0061  
                               __CFG_BOREN$OFF 0000                                          pclath 000A  
                                        status 0003                                          wtemp0 007E  
                                  SetLEDOn@LED 0075                                 __CFG_MCLRE$OFF 0000  
                              __initialization 0018                                   __end_of_main 0517  
                             __end_of_SetLEDOn 0600                    ?_INTERRUPT_InterruptManager 0070  
                                       ??_main 005F                                 __CFG_PLLEN$OFF 0000  
                       __end_of_WDT_Initialize 065F                          main@APatternIsRunning 0060  
                       __size_of_SetAllLEDsOff 0003                   ??_IOCAF3_SetInterruptHandler 0076  
                       ??_CheckForButtonPushes 0052                                         _APFCON 011D  
                                       _ANSELA 018C                                         _BORCON 0116  
                       ??_LeftButtonPressedRaw 0074                                         i1l1400 048A  
                                       i1l1404 049C                                         i1l1408 04A4  
                                       _ODCONA 028C                                         i1l1460 05B5  
                                       i1l1454 05C2                                         i1l1548 05F3  
                                       i1l1388 0475                                         _LEDOns 0050  
                                       _OSCCON 0099        CheckForButtonPushes@LastLeftButtonState 004E  
                                       _WDTCON 0097                             __size_of_SetLEDOff 0008  
                               __CFG_PWRTE$OFF 0000                                      ??_RunGame 0052  
                                       ___wmul 0570                                 __CFG_STVREN$ON 0000  
                                    ??___lwdiv 005A                               ?_TMR0_Initialize 0070  
          __size_of_IOCAF3_SetInterruptHandler 0006                                ?_WDT_Initialize 0070  
                        __end_of_TMR0_CallBack 05E6       TMR0_SetInterruptHandler@InterruptHandler 0074  
   IOCAF3_SetInterruptHandler@InterruptHandler 0074     IOCAF2_SetInterruptHandler@InterruptHandler 0074  
                             ?_PIN_MANAGER_IOC 0070                          __end_of_TMR0_Callback 04B6  
                                 ??_IOCAF2_ISR 0070                                   ??_IOCAF3_ISR 0070  
                            _SYSTEM_Initialize 0656                        __end_of__initialization 0036  
                           ?_SYSTEM_Initialize 0070                                   SetLEDOff@LED 0075  
                                _SetAllLEDsOff 065F                                 __pcstackCOMMON 0070  
                                 __pidataBANK0 0651                                   __pidataBANK1 058C  
                          ??_SYSTEM_Initialize 0076                                      ?_TMR0_ISR 0070  
                           __end_of_IOCAF2_ISR 05C5                             __end_of_IOCAF3_ISR 05B8  
                            __end_of_SetLEDOff 0608                                 _OPTION_REGbits 0095  
                  ?_IOCAF2_SetInterruptHandler 0074               ??_IOCAF2_DefaultInterruptHandler 0070  
              ?_IOCAF2_DefaultInterruptHandler 0070                      __end_of_SYSTEM_Initialize 065B  
                                   __pbssBANK0 0020                                      ?_SetLEDOn 0070  
                               ?_SetAllLEDsOff 0070                             _RightDebounceTimer 0078  
                                   __pmaintext 04B6               __end_of_TMR0_SetInterruptHandler 063F  
                                      ?___wmul 0052                                     ??_TMR0_ISR 0073  
                                   __pintentry 0004                          __end_of_RunRightFlash 02AA  
                      _LastLeftButtonPressTime 0040             __end_of_IOCAF3_SetInterruptHandler 0645  
                   _IOCAF3_SetInterruptHandler 063F                                        _OSCTUNE 0098  
                           _ShutdownDelayTimer 004F                                     ??_SetLEDOn 0074  
                               TMR0_Callback@i 0072                                        _RunGame 0039  
                                ?_RunLeftFlash 0070                                __size_of___wmul 001C  
                                      ___lwdiv 0517                          _RightButtonPressedRaw 061F  
                                      __ptext1 0639                                        __ptext2 065F  
                                      __ptext3 0656                                        __ptext4 065B  
                                      __ptext5 059C                                        __ptext6 054C  
                                      __ptext7 063F                                        __ptext8 0645  
                                      __ptext9 0618                          _OSCILLATOR_Initialize 0618  
                     ??_PIN_MANAGER_Initialize 0076                                      _IOCAFbits 0393  
                                    _IOCANbits 0392                                      _IOCAPbits 0391  
                  __size_of_RightButtonPressed 0008                     __size_of_SYSTEM_Initialize 0005  
                                      clrloop0 0634                           end_of_initialization 0036  
                                      init_ram 062D                                        initloop 062E  
                              ??_SetAllLEDsOff 0074                                 ??_RunLeftFlash 005E  
     CheckForButtonPushes@LastRightButtonState 004D                     RunGame@next_decrement_time 0038  
                             ??_WDT_Initialize 0074                       _TMR0_SetInterruptHandler 0639  
                                    _PORTAbits 000C                                      _PORTTable 00A0  
                             __CFG_FOSC$INTOSC 0000                              _LeftButtonPressed 0610  
                                    _TRISTable 00A8                             ?_LeftButtonPressed 0070  
                          RunGame@num_leds_lit 006D                  __size_of_CheckForButtonPushes 00C5  
                __size_of_LeftButtonPressedRaw 0007                            ??_LeftButtonPressed 0074  
                       ?_RightButtonPressedRaw 0070                                 __end_of___wmul 058C  
                            __size_of_TMR0_ISR 0006                         ?_OSCILLATOR_Initialize 0070  
                    __end_of_LeftButtonPressed 0618                            start_initialization 0018  
                     __size_of_TMR0_Initialize 000F                __size_of_PIN_MANAGER_Initialize 0024  
                                    _SetLEDOff 0600                       __size_of_PIN_MANAGER_IOC 0009  
                                    _WakeTimer 0048                              __size_of_SetLEDOn 0008  
       __end_of_IOCAF2_DefaultInterruptHandler 0664        __size_of_IOCAF2_DefaultInterruptHandler 0001  
               _IOCAF2_DefaultInterruptHandler 0663                               __CFG_LPBOREN$OFF 0000  
                                     ??___wmul 0074                         __size_of_TMR0_CallBack 000B  
                                  __pdataBANK0 0069                                    __pdataBANK1 00A0  
                       __size_of_TMR0_Callback 0063                                _LeftButtonState 0077  
                                  __pbssCOMMON 0076                                      ___latbits 0000  
                                __pcstackBANK0 0052                    ?_IOCAF3_SetInterruptHandler 0074  
                         __end_of_RunLeftFlash 038E                                     ?_SetLEDOff 0070  
             ??_IOCAF3_DefaultInterruptHandler 0070                ?_IOCAF3_DefaultInterruptHandler 0070  
                        _TMR0_InterruptHandler 0062                                      __pnvBANK0 0062  
                             ___lwdiv@dividend 0058                         _PIN_MANAGER_Initialize 054C  
                                     ?_RunGame 0070                                       ?___lwdiv 0056  
                 ??_INTERRUPT_InterruptManager 0073                                      __pswtext1 05C5  
                                    __pswtext2 05D0                                      __pswtext3 05E6  
                   __size_of_LeftButtonPressed 0008                                   _PatternDelay 0020  
                     _CheckForButtonPushes$440 0074                                   _PatternState 0030  
                             ___lwdiv@quotient 005B                                  _TMR0_CallBack 05DB  
                                _TMR0_Callback 0453                         __size_of_RunRightFlash 00E4  
                            ??_TMR0_Initialize 0074                                 ___wmul@product 0074  
                                     _LEDState 0051                                      clear_ram0 0633  
          __size_of_INTERRUPT_InterruptManager 0013                     ??_TMR0_SetInterruptHandler 0076  
                                     _TMR0_ISR 064B                              ??_PIN_MANAGER_IOC 0070  
                            ___wmul@multiplier 0052                     __end_of_RightButtonPressed 0610  
                             _RightButtonState 0076                                    ??_SetLEDOff 0074  
                               ?_TMR0_CallBack 0070                                 ?_TMR0_Callback 0070  
                            _LeftDebounceTimer 0079                                       _SetLEDOn 05F8  
                        __end_of_SetAllLEDsOff 0662                        ??_RightButtonPressedRaw 0074  
                             __size_of_RunGame 018D                        ??_OSCILLATOR_Initialize 0074  
                 __end_of_CheckForButtonPushes 0453                                  _RunRightFlash 01C6  
                             __size_of___lwdiv 0035                   __end_of_LeftButtonPressedRaw 062D  
                        __size_of_RunLeftFlash 00E4                        _IOCAF2_InterruptHandler 0066  
                              ___lwdiv@divisor 0056                                ___lwdiv@counter 005D  
                 ??_IOCAF2_SetInterruptHandler 0076                                       __ptext10 01C6  
                                     __ptext11 02AA                                       __ptext20 0626  
                                     __ptext12 0570                                       __ptext21 0610  
                                     __ptext13 0517                                       __ptext30 0663  
                                     __ptext14 0039                                       __ptext23 064B  
                                     __ptext15 05F8                                       __ptext24 05DB  
                                     __ptext16 0600                                       __ptext25 0453  
                                     __ptext17 038E                                       __ptext26 05EF  
                                     __ptext18 061F                                       __ptext27 05AB  
                                     __ptext19 0608                                       __ptext28 0662  
                                     __ptext29 05B8                                     _IOCAF2_ISR 05B8  
                                   _IOCAF3_ISR 05AB                                  __size_of_main 0061  
                       RunLeftFlash@left_delay 0069                                   _RunLeftFlash 02AA  
                                     int$flags 007E                                 ?_RunRightFlash 0070  
           __end_of_INTERRUPT_InterruptManager 0017                     _INTERRUPT_InterruptManager 0004  
          __size_of_IOCAF2_SetInterruptHandler 0006                                     _INTCONbits 000B  
                              ??_TMR0_CallBack 0073                                ??_TMR0_Callback 0070  
                      __size_of_WDT_Initialize 0004                                       intlevel1 0000  
                      ?_PIN_MANAGER_Initialize 0070                              __CFG_CLKOUTEN$OFF 0000  
                RunGame@last_button_press_time 003C         __end_of_IOCAF3_DefaultInterruptHandler 0663  
      __size_of_IOCAF3_DefaultInterruptHandler 0001                 _IOCAF3_DefaultInterruptHandler 0662  
                     _LastRightButtonPressTime 0044                                     _OPTION_REG 0095  
                              _TMR0_Initialize 059C                                    _VREGCONbits 0197  
                     RunRightFlash@right_delay 006B                                    ?_IOCAF2_ISR 0070  
                                  ?_IOCAF3_ISR 0070                 __end_of_PIN_MANAGER_Initialize 0570  
                         _CheckForButtonPushes 038E                           _LeftButtonPressedRaw 0626  
                              _PIN_MANAGER_IOC 05EF                        _IOCAF3_InterruptHandler 0064  
