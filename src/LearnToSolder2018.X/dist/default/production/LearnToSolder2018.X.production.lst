

Microchip Technology PIC PRO Macro Assembler V1.45 build -152302408 
                                                                                               Thu May 10 21:09:00 2018

Microchip Technology Omniscient Code Generator v1.45 (PRO mode) build 201711160504
     1                           	processor	12F1572
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	nvCOMMON,global,class=COMMON,space=1,delta=1
     6                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	inittext,global,class=CODE,delta=2
    12                           	psect	clrtext,global,class=CODE,delta=2
    13                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    16                           	psect	text1,local,class=CODE,merge=1,delta=2
    17                           	psect	text2,local,class=CODE,merge=1,delta=2
    18                           	psect	text3,local,class=CODE,merge=1,delta=2
    19                           	psect	text4,local,class=CODE,merge=1,delta=2
    20                           	psect	text5,local,class=CODE,merge=1,delta=2
    21                           	psect	text6,local,class=CODE,merge=1,delta=2
    22                           	psect	text7,local,class=CODE,merge=1,delta=2
    23                           	psect	text8,local,class=CODE,merge=1,delta=2
    24                           	psect	text9,local,class=CODE,merge=1,delta=2
    25                           	psect	text10,local,class=CODE,merge=1,delta=2
    26                           	psect	swtext1,local,class=CONST,delta=2
    27                           	psect	text11,local,class=CODE,merge=1,delta=2
    28                           	psect	swtext2,local,class=CONST,delta=2
    29                           	psect	text12,local,class=CODE,merge=1,delta=2
    30                           	psect	text13,local,class=CODE,merge=1,delta=2
    31                           	psect	text14,local,class=CODE,merge=1,delta=2
    32                           	psect	text15,local,class=CODE,merge=1,delta=2
    33                           	psect	text16,local,class=CODE,merge=1,delta=2
    34                           	psect	intentry,global,class=CODE,delta=2
    35                           	psect	text18,local,class=CODE,merge=1,delta=2
    36                           	psect	text19,local,class=CODE,merge=1,delta=2
    37                           	psect	text20,local,class=CODE,merge=1,delta=2
    38                           	psect	text21,local,class=CODE,merge=1,delta=2
    39                           	psect	text22,local,class=CODE,merge=1,delta=2
    40                           	psect	text23,local,class=CODE,merge=1,delta=2
    41                           	psect	text24,local,class=CODE,merge=1,delta=2
    42                           	psect	text25,local,class=CODE,merge=1,delta=2
    43                           	psect	pa_nodes0,global,class=CODE,delta=2
    44                           	dabs	1,0x7E,2
    45  0000                     
    46                           ; Version 1.45
    47                           ; Generated 16/11/2017 GMT
    48                           ; 
    49                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    50                           ; All rights reserved.
    51                           ; 
    52                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    53                           ; 
    54                           ; Redistribution and use in source and binary forms, with or without modification, are
    55                           ; permitted provided that the following conditions are met:
    56                           ; 
    57                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    58                           ;        conditions and the following disclaimer.
    59                           ; 
    60                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    61                           ;        of conditions and the following disclaimer in the documentation and/or other
    62                           ;        materials provided with the distribution.
    63                           ; 
    64                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    65                           ;        software without specific prior written permission.
    66                           ; 
    67                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    68                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    69                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    70                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    71                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    72                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    73                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    74                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    75                           ; 
    76                           ; 
    77                           ; Code-generator required, PIC12F1572 Definitions
    78                           ; 
    79                           ; SFR Addresses
    80  0000                     	;# 
    81  0001                     	;# 
    82  0002                     	;# 
    83  0003                     	;# 
    84  0004                     	;# 
    85  0005                     	;# 
    86  0006                     	;# 
    87  0007                     	;# 
    88  0008                     	;# 
    89  0009                     	;# 
    90  000A                     	;# 
    91  000B                     	;# 
    92  000C                     	;# 
    93  0011                     	;# 
    94  0012                     	;# 
    95  0013                     	;# 
    96  0015                     	;# 
    97  0016                     	;# 
    98  0016                     	;# 
    99  0017                     	;# 
   100  0018                     	;# 
   101  0019                     	;# 
   102  001A                     	;# 
   103  001B                     	;# 
   104  001C                     	;# 
   105  008C                     	;# 
   106  0091                     	;# 
   107  0092                     	;# 
   108  0093                     	;# 
   109  0095                     	;# 
   110  0096                     	;# 
   111  0097                     	;# 
   112  0098                     	;# 
   113  0099                     	;# 
   114  009A                     	;# 
   115  009B                     	;# 
   116  009B                     	;# 
   117  009C                     	;# 
   118  009D                     	;# 
   119  009E                     	;# 
   120  009F                     	;# 
   121  010C                     	;# 
   122  0111                     	;# 
   123  0112                     	;# 
   124  0115                     	;# 
   125  0116                     	;# 
   126  0117                     	;# 
   127  0118                     	;# 
   128  0119                     	;# 
   129  011D                     	;# 
   130  011D                     	;# 
   131  018C                     	;# 
   132  0191                     	;# 
   133  0191                     	;# 
   134  0192                     	;# 
   135  0193                     	;# 
   136  0193                     	;# 
   137  0194                     	;# 
   138  0195                     	;# 
   139  0196                     	;# 
   140  0197                     	;# 
   141  0199                     	;# 
   142  019A                     	;# 
   143  019B                     	;# 
   144  019B                     	;# 
   145  019C                     	;# 
   146  019D                     	;# 
   147  019E                     	;# 
   148  019F                     	;# 
   149  020C                     	;# 
   150  028C                     	;# 
   151  030C                     	;# 
   152  038C                     	;# 
   153  0391                     	;# 
   154  0392                     	;# 
   155  0393                     	;# 
   156  0691                     	;# 
   157  0692                     	;# 
   158  0693                     	;# 
   159  0694                     	;# 
   160  0695                     	;# 
   161  0D8E                     	;# 
   162  0D8F                     	;# 
   163  0D90                     	;# 
   164  0D91                     	;# 
   165  0D91                     	;# 
   166  0D92                     	;# 
   167  0D93                     	;# 
   168  0D93                     	;# 
   169  0D94                     	;# 
   170  0D95                     	;# 
   171  0D95                     	;# 
   172  0D96                     	;# 
   173  0D97                     	;# 
   174  0D97                     	;# 
   175  0D98                     	;# 
   176  0D99                     	;# 
   177  0D99                     	;# 
   178  0D9A                     	;# 
   179  0D9B                     	;# 
   180  0D9C                     	;# 
   181  0D9C                     	;# 
   182  0D9D                     	;# 
   183  0D9D                     	;# 
   184  0D9E                     	;# 
   185  0D9F                     	;# 
   186  0DA0                     	;# 
   187  0DA1                     	;# 
   188  0DA1                     	;# 
   189  0DA2                     	;# 
   190  0DA3                     	;# 
   191  0DA3                     	;# 
   192  0DA4                     	;# 
   193  0DA5                     	;# 
   194  0DA5                     	;# 
   195  0DA6                     	;# 
   196  0DA7                     	;# 
   197  0DA7                     	;# 
   198  0DA8                     	;# 
   199  0DA9                     	;# 
   200  0DA9                     	;# 
   201  0DAA                     	;# 
   202  0DAB                     	;# 
   203  0DAC                     	;# 
   204  0DAC                     	;# 
   205  0DAD                     	;# 
   206  0DAD                     	;# 
   207  0DAE                     	;# 
   208  0DAF                     	;# 
   209  0DB0                     	;# 
   210  0DB1                     	;# 
   211  0DB1                     	;# 
   212  0DB2                     	;# 
   213  0DB3                     	;# 
   214  0DB3                     	;# 
   215  0DB4                     	;# 
   216  0DB5                     	;# 
   217  0DB5                     	;# 
   218  0DB6                     	;# 
   219  0DB7                     	;# 
   220  0DB7                     	;# 
   221  0DB8                     	;# 
   222  0DB9                     	;# 
   223  0DB9                     	;# 
   224  0DBA                     	;# 
   225  0DBB                     	;# 
   226  0DBC                     	;# 
   227  0DBC                     	;# 
   228  0DBD                     	;# 
   229  0DBD                     	;# 
   230  0DBE                     	;# 
   231  0DBF                     	;# 
   232  0DC0                     	;# 
   233  0FE4                     	;# 
   234  0FE5                     	;# 
   235  0FE6                     	;# 
   236  0FE7                     	;# 
   237  0FE8                     	;# 
   238  0FE8                     	;# 
   239  0FE9                     	;# 
   240  0FEA                     	;# 
   241  0FEA                     	;# 
   242  0FEB                     	;# 
   243  0FED                     	;# 
   244  0FEE                     	;# 
   245  0FEE                     	;# 
   246  0FEF                     	;# 
   247  0000                     	;# 
   248  0001                     	;# 
   249  0002                     	;# 
   250  0003                     	;# 
   251  0004                     	;# 
   252  0005                     	;# 
   253  0006                     	;# 
   254  0007                     	;# 
   255  0008                     	;# 
   256  0009                     	;# 
   257  000A                     	;# 
   258  000B                     	;# 
   259  000C                     	;# 
   260  0011                     	;# 
   261  0012                     	;# 
   262  0013                     	;# 
   263  0015                     	;# 
   264  0016                     	;# 
   265  0016                     	;# 
   266  0017                     	;# 
   267  0018                     	;# 
   268  0019                     	;# 
   269  001A                     	;# 
   270  001B                     	;# 
   271  001C                     	;# 
   272  008C                     	;# 
   273  0091                     	;# 
   274  0092                     	;# 
   275  0093                     	;# 
   276  0095                     	;# 
   277  0096                     	;# 
   278  0097                     	;# 
   279  0098                     	;# 
   280  0099                     	;# 
   281  009A                     	;# 
   282  009B                     	;# 
   283  009B                     	;# 
   284  009C                     	;# 
   285  009D                     	;# 
   286  009E                     	;# 
   287  009F                     	;# 
   288  010C                     	;# 
   289  0111                     	;# 
   290  0112                     	;# 
   291  0115                     	;# 
   292  0116                     	;# 
   293  0117                     	;# 
   294  0118                     	;# 
   295  0119                     	;# 
   296  011D                     	;# 
   297  011D                     	;# 
   298  018C                     	;# 
   299  0191                     	;# 
   300  0191                     	;# 
   301  0192                     	;# 
   302  0193                     	;# 
   303  0193                     	;# 
   304  0194                     	;# 
   305  0195                     	;# 
   306  0196                     	;# 
   307  0197                     	;# 
   308  0199                     	;# 
   309  019A                     	;# 
   310  019B                     	;# 
   311  019B                     	;# 
   312  019C                     	;# 
   313  019D                     	;# 
   314  019E                     	;# 
   315  019F                     	;# 
   316  020C                     	;# 
   317  028C                     	;# 
   318  030C                     	;# 
   319  038C                     	;# 
   320  0391                     	;# 
   321  0392                     	;# 
   322  0393                     	;# 
   323  0691                     	;# 
   324  0692                     	;# 
   325  0693                     	;# 
   326  0694                     	;# 
   327  0695                     	;# 
   328  0D8E                     	;# 
   329  0D8F                     	;# 
   330  0D90                     	;# 
   331  0D91                     	;# 
   332  0D91                     	;# 
   333  0D92                     	;# 
   334  0D93                     	;# 
   335  0D93                     	;# 
   336  0D94                     	;# 
   337  0D95                     	;# 
   338  0D95                     	;# 
   339  0D96                     	;# 
   340  0D97                     	;# 
   341  0D97                     	;# 
   342  0D98                     	;# 
   343  0D99                     	;# 
   344  0D99                     	;# 
   345  0D9A                     	;# 
   346  0D9B                     	;# 
   347  0D9C                     	;# 
   348  0D9C                     	;# 
   349  0D9D                     	;# 
   350  0D9D                     	;# 
   351  0D9E                     	;# 
   352  0D9F                     	;# 
   353  0DA0                     	;# 
   354  0DA1                     	;# 
   355  0DA1                     	;# 
   356  0DA2                     	;# 
   357  0DA3                     	;# 
   358  0DA3                     	;# 
   359  0DA4                     	;# 
   360  0DA5                     	;# 
   361  0DA5                     	;# 
   362  0DA6                     	;# 
   363  0DA7                     	;# 
   364  0DA7                     	;# 
   365  0DA8                     	;# 
   366  0DA9                     	;# 
   367  0DA9                     	;# 
   368  0DAA                     	;# 
   369  0DAB                     	;# 
   370  0DAC                     	;# 
   371  0DAC                     	;# 
   372  0DAD                     	;# 
   373  0DAD                     	;# 
   374  0DAE                     	;# 
   375  0DAF                     	;# 
   376  0DB0                     	;# 
   377  0DB1                     	;# 
   378  0DB1                     	;# 
   379  0DB2                     	;# 
   380  0DB3                     	;# 
   381  0DB3                     	;# 
   382  0DB4                     	;# 
   383  0DB5                     	;# 
   384  0DB5                     	;# 
   385  0DB6                     	;# 
   386  0DB7                     	;# 
   387  0DB7                     	;# 
   388  0DB8                     	;# 
   389  0DB9                     	;# 
   390  0DB9                     	;# 
   391  0DBA                     	;# 
   392  0DBB                     	;# 
   393  0DBC                     	;# 
   394  0DBC                     	;# 
   395  0DBD                     	;# 
   396  0DBD                     	;# 
   397  0DBE                     	;# 
   398  0DBF                     	;# 
   399  0DC0                     	;# 
   400  0FE4                     	;# 
   401  0FE5                     	;# 
   402  0FE6                     	;# 
   403  0FE7                     	;# 
   404  0FE8                     	;# 
   405  0FE8                     	;# 
   406  0FE9                     	;# 
   407  0FEA                     	;# 
   408  0FEA                     	;# 
   409  0FEB                     	;# 
   410  0FED                     	;# 
   411  0FEE                     	;# 
   412  0FEE                     	;# 
   413  0FEF                     	;# 
   414  0000                     	;# 
   415  0001                     	;# 
   416  0002                     	;# 
   417  0003                     	;# 
   418  0004                     	;# 
   419  0005                     	;# 
   420  0006                     	;# 
   421  0007                     	;# 
   422  0008                     	;# 
   423  0009                     	;# 
   424  000A                     	;# 
   425  000B                     	;# 
   426  000C                     	;# 
   427  0011                     	;# 
   428  0012                     	;# 
   429  0013                     	;# 
   430  0015                     	;# 
   431  0016                     	;# 
   432  0016                     	;# 
   433  0017                     	;# 
   434  0018                     	;# 
   435  0019                     	;# 
   436  001A                     	;# 
   437  001B                     	;# 
   438  001C                     	;# 
   439  008C                     	;# 
   440  0091                     	;# 
   441  0092                     	;# 
   442  0093                     	;# 
   443  0095                     	;# 
   444  0096                     	;# 
   445  0097                     	;# 
   446  0098                     	;# 
   447  0099                     	;# 
   448  009A                     	;# 
   449  009B                     	;# 
   450  009B                     	;# 
   451  009C                     	;# 
   452  009D                     	;# 
   453  009E                     	;# 
   454  009F                     	;# 
   455  010C                     	;# 
   456  0111                     	;# 
   457  0112                     	;# 
   458  0115                     	;# 
   459  0116                     	;# 
   460  0117                     	;# 
   461  0118                     	;# 
   462  0119                     	;# 
   463  011D                     	;# 
   464  011D                     	;# 
   465  018C                     	;# 
   466  0191                     	;# 
   467  0191                     	;# 
   468  0192                     	;# 
   469  0193                     	;# 
   470  0193                     	;# 
   471  0194                     	;# 
   472  0195                     	;# 
   473  0196                     	;# 
   474  0197                     	;# 
   475  0199                     	;# 
   476  019A                     	;# 
   477  019B                     	;# 
   478  019B                     	;# 
   479  019C                     	;# 
   480  019D                     	;# 
   481  019E                     	;# 
   482  019F                     	;# 
   483  020C                     	;# 
   484  028C                     	;# 
   485  030C                     	;# 
   486  038C                     	;# 
   487  0391                     	;# 
   488  0392                     	;# 
   489  0393                     	;# 
   490  0691                     	;# 
   491  0692                     	;# 
   492  0693                     	;# 
   493  0694                     	;# 
   494  0695                     	;# 
   495  0D8E                     	;# 
   496  0D8F                     	;# 
   497  0D90                     	;# 
   498  0D91                     	;# 
   499  0D91                     	;# 
   500  0D92                     	;# 
   501  0D93                     	;# 
   502  0D93                     	;# 
   503  0D94                     	;# 
   504  0D95                     	;# 
   505  0D95                     	;# 
   506  0D96                     	;# 
   507  0D97                     	;# 
   508  0D97                     	;# 
   509  0D98                     	;# 
   510  0D99                     	;# 
   511  0D99                     	;# 
   512  0D9A                     	;# 
   513  0D9B                     	;# 
   514  0D9C                     	;# 
   515  0D9C                     	;# 
   516  0D9D                     	;# 
   517  0D9D                     	;# 
   518  0D9E                     	;# 
   519  0D9F                     	;# 
   520  0DA0                     	;# 
   521  0DA1                     	;# 
   522  0DA1                     	;# 
   523  0DA2                     	;# 
   524  0DA3                     	;# 
   525  0DA3                     	;# 
   526  0DA4                     	;# 
   527  0DA5                     	;# 
   528  0DA5                     	;# 
   529  0DA6                     	;# 
   530  0DA7                     	;# 
   531  0DA7                     	;# 
   532  0DA8                     	;# 
   533  0DA9                     	;# 
   534  0DA9                     	;# 
   535  0DAA                     	;# 
   536  0DAB                     	;# 
   537  0DAC                     	;# 
   538  0DAC                     	;# 
   539  0DAD                     	;# 
   540  0DAD                     	;# 
   541  0DAE                     	;# 
   542  0DAF                     	;# 
   543  0DB0                     	;# 
   544  0DB1                     	;# 
   545  0DB1                     	;# 
   546  0DB2                     	;# 
   547  0DB3                     	;# 
   548  0DB3                     	;# 
   549  0DB4                     	;# 
   550  0DB5                     	;# 
   551  0DB5                     	;# 
   552  0DB6                     	;# 
   553  0DB7                     	;# 
   554  0DB7                     	;# 
   555  0DB8                     	;# 
   556  0DB9                     	;# 
   557  0DB9                     	;# 
   558  0DBA                     	;# 
   559  0DBB                     	;# 
   560  0DBC                     	;# 
   561  0DBC                     	;# 
   562  0DBD                     	;# 
   563  0DBD                     	;# 
   564  0DBE                     	;# 
   565  0DBF                     	;# 
   566  0DC0                     	;# 
   567  0FE4                     	;# 
   568  0FE5                     	;# 
   569  0FE6                     	;# 
   570  0FE7                     	;# 
   571  0FE8                     	;# 
   572  0FE8                     	;# 
   573  0FE9                     	;# 
   574  0FEA                     	;# 
   575  0FEA                     	;# 
   576  0FEB                     	;# 
   577  0FED                     	;# 
   578  0FEE                     	;# 
   579  0FEE                     	;# 
   580  0FEF                     	;# 
   581  0000                     	;# 
   582  0001                     	;# 
   583  0002                     	;# 
   584  0003                     	;# 
   585  0004                     	;# 
   586  0005                     	;# 
   587  0006                     	;# 
   588  0007                     	;# 
   589  0008                     	;# 
   590  0009                     	;# 
   591  000A                     	;# 
   592  000B                     	;# 
   593  000C                     	;# 
   594  0011                     	;# 
   595  0012                     	;# 
   596  0013                     	;# 
   597  0015                     	;# 
   598  0016                     	;# 
   599  0016                     	;# 
   600  0017                     	;# 
   601  0018                     	;# 
   602  0019                     	;# 
   603  001A                     	;# 
   604  001B                     	;# 
   605  001C                     	;# 
   606  008C                     	;# 
   607  0091                     	;# 
   608  0092                     	;# 
   609  0093                     	;# 
   610  0095                     	;# 
   611  0096                     	;# 
   612  0097                     	;# 
   613  0098                     	;# 
   614  0099                     	;# 
   615  009A                     	;# 
   616  009B                     	;# 
   617  009B                     	;# 
   618  009C                     	;# 
   619  009D                     	;# 
   620  009E                     	;# 
   621  009F                     	;# 
   622  010C                     	;# 
   623  0111                     	;# 
   624  0112                     	;# 
   625  0115                     	;# 
   626  0116                     	;# 
   627  0117                     	;# 
   628  0118                     	;# 
   629  0119                     	;# 
   630  011D                     	;# 
   631  011D                     	;# 
   632  018C                     	;# 
   633  0191                     	;# 
   634  0191                     	;# 
   635  0192                     	;# 
   636  0193                     	;# 
   637  0193                     	;# 
   638  0194                     	;# 
   639  0195                     	;# 
   640  0196                     	;# 
   641  0197                     	;# 
   642  0199                     	;# 
   643  019A                     	;# 
   644  019B                     	;# 
   645  019B                     	;# 
   646  019C                     	;# 
   647  019D                     	;# 
   648  019E                     	;# 
   649  019F                     	;# 
   650  020C                     	;# 
   651  028C                     	;# 
   652  030C                     	;# 
   653  038C                     	;# 
   654  0391                     	;# 
   655  0392                     	;# 
   656  0393                     	;# 
   657  0691                     	;# 
   658  0692                     	;# 
   659  0693                     	;# 
   660  0694                     	;# 
   661  0695                     	;# 
   662  0D8E                     	;# 
   663  0D8F                     	;# 
   664  0D90                     	;# 
   665  0D91                     	;# 
   666  0D91                     	;# 
   667  0D92                     	;# 
   668  0D93                     	;# 
   669  0D93                     	;# 
   670  0D94                     	;# 
   671  0D95                     	;# 
   672  0D95                     	;# 
   673  0D96                     	;# 
   674  0D97                     	;# 
   675  0D97                     	;# 
   676  0D98                     	;# 
   677  0D99                     	;# 
   678  0D99                     	;# 
   679  0D9A                     	;# 
   680  0D9B                     	;# 
   681  0D9C                     	;# 
   682  0D9C                     	;# 
   683  0D9D                     	;# 
   684  0D9D                     	;# 
   685  0D9E                     	;# 
   686  0D9F                     	;# 
   687  0DA0                     	;# 
   688  0DA1                     	;# 
   689  0DA1                     	;# 
   690  0DA2                     	;# 
   691  0DA3                     	;# 
   692  0DA3                     	;# 
   693  0DA4                     	;# 
   694  0DA5                     	;# 
   695  0DA5                     	;# 
   696  0DA6                     	;# 
   697  0DA7                     	;# 
   698  0DA7                     	;# 
   699  0DA8                     	;# 
   700  0DA9                     	;# 
   701  0DA9                     	;# 
   702  0DAA                     	;# 
   703  0DAB                     	;# 
   704  0DAC                     	;# 
   705  0DAC                     	;# 
   706  0DAD                     	;# 
   707  0DAD                     	;# 
   708  0DAE                     	;# 
   709  0DAF                     	;# 
   710  0DB0                     	;# 
   711  0DB1                     	;# 
   712  0DB1                     	;# 
   713  0DB2                     	;# 
   714  0DB3                     	;# 
   715  0DB3                     	;# 
   716  0DB4                     	;# 
   717  0DB5                     	;# 
   718  0DB5                     	;# 
   719  0DB6                     	;# 
   720  0DB7                     	;# 
   721  0DB7                     	;# 
   722  0DB8                     	;# 
   723  0DB9                     	;# 
   724  0DB9                     	;# 
   725  0DBA                     	;# 
   726  0DBB                     	;# 
   727  0DBC                     	;# 
   728  0DBC                     	;# 
   729  0DBD                     	;# 
   730  0DBD                     	;# 
   731  0DBE                     	;# 
   732  0DBF                     	;# 
   733  0DC0                     	;# 
   734  0FE4                     	;# 
   735  0FE5                     	;# 
   736  0FE6                     	;# 
   737  0FE7                     	;# 
   738  0FE8                     	;# 
   739  0FE8                     	;# 
   740  0FE9                     	;# 
   741  0FEA                     	;# 
   742  0FEA                     	;# 
   743  0FEB                     	;# 
   744  0FED                     	;# 
   745  0FEE                     	;# 
   746  0FEE                     	;# 
   747  0FEF                     	;# 
   748  0000                     	;# 
   749  0001                     	;# 
   750  0002                     	;# 
   751  0003                     	;# 
   752  0004                     	;# 
   753  0005                     	;# 
   754  0006                     	;# 
   755  0007                     	;# 
   756  0008                     	;# 
   757  0009                     	;# 
   758  000A                     	;# 
   759  000B                     	;# 
   760  000C                     	;# 
   761  0011                     	;# 
   762  0012                     	;# 
   763  0013                     	;# 
   764  0015                     	;# 
   765  0016                     	;# 
   766  0016                     	;# 
   767  0017                     	;# 
   768  0018                     	;# 
   769  0019                     	;# 
   770  001A                     	;# 
   771  001B                     	;# 
   772  001C                     	;# 
   773  008C                     	;# 
   774  0091                     	;# 
   775  0092                     	;# 
   776  0093                     	;# 
   777  0095                     	;# 
   778  0096                     	;# 
   779  0097                     	;# 
   780  0098                     	;# 
   781  0099                     	;# 
   782  009A                     	;# 
   783  009B                     	;# 
   784  009B                     	;# 
   785  009C                     	;# 
   786  009D                     	;# 
   787  009E                     	;# 
   788  009F                     	;# 
   789  010C                     	;# 
   790  0111                     	;# 
   791  0112                     	;# 
   792  0115                     	;# 
   793  0116                     	;# 
   794  0117                     	;# 
   795  0118                     	;# 
   796  0119                     	;# 
   797  011D                     	;# 
   798  011D                     	;# 
   799  018C                     	;# 
   800  0191                     	;# 
   801  0191                     	;# 
   802  0192                     	;# 
   803  0193                     	;# 
   804  0193                     	;# 
   805  0194                     	;# 
   806  0195                     	;# 
   807  0196                     	;# 
   808  0197                     	;# 
   809  0199                     	;# 
   810  019A                     	;# 
   811  019B                     	;# 
   812  019B                     	;# 
   813  019C                     	;# 
   814  019D                     	;# 
   815  019E                     	;# 
   816  019F                     	;# 
   817  020C                     	;# 
   818  028C                     	;# 
   819  030C                     	;# 
   820  038C                     	;# 
   821  0391                     	;# 
   822  0392                     	;# 
   823  0393                     	;# 
   824  0691                     	;# 
   825  0692                     	;# 
   826  0693                     	;# 
   827  0694                     	;# 
   828  0695                     	;# 
   829  0D8E                     	;# 
   830  0D8F                     	;# 
   831  0D90                     	;# 
   832  0D91                     	;# 
   833  0D91                     	;# 
   834  0D92                     	;# 
   835  0D93                     	;# 
   836  0D93                     	;# 
   837  0D94                     	;# 
   838  0D95                     	;# 
   839  0D95                     	;# 
   840  0D96                     	;# 
   841  0D97                     	;# 
   842  0D97                     	;# 
   843  0D98                     	;# 
   844  0D99                     	;# 
   845  0D99                     	;# 
   846  0D9A                     	;# 
   847  0D9B                     	;# 
   848  0D9C                     	;# 
   849  0D9C                     	;# 
   850  0D9D                     	;# 
   851  0D9D                     	;# 
   852  0D9E                     	;# 
   853  0D9F                     	;# 
   854  0DA0                     	;# 
   855  0DA1                     	;# 
   856  0DA1                     	;# 
   857  0DA2                     	;# 
   858  0DA3                     	;# 
   859  0DA3                     	;# 
   860  0DA4                     	;# 
   861  0DA5                     	;# 
   862  0DA5                     	;# 
   863  0DA6                     	;# 
   864  0DA7                     	;# 
   865  0DA7                     	;# 
   866  0DA8                     	;# 
   867  0DA9                     	;# 
   868  0DA9                     	;# 
   869  0DAA                     	;# 
   870  0DAB                     	;# 
   871  0DAC                     	;# 
   872  0DAC                     	;# 
   873  0DAD                     	;# 
   874  0DAD                     	;# 
   875  0DAE                     	;# 
   876  0DAF                     	;# 
   877  0DB0                     	;# 
   878  0DB1                     	;# 
   879  0DB1                     	;# 
   880  0DB2                     	;# 
   881  0DB3                     	;# 
   882  0DB3                     	;# 
   883  0DB4                     	;# 
   884  0DB5                     	;# 
   885  0DB5                     	;# 
   886  0DB6                     	;# 
   887  0DB7                     	;# 
   888  0DB7                     	;# 
   889  0DB8                     	;# 
   890  0DB9                     	;# 
   891  0DB9                     	;# 
   892  0DBA                     	;# 
   893  0DBB                     	;# 
   894  0DBC                     	;# 
   895  0DBC                     	;# 
   896  0DBD                     	;# 
   897  0DBD                     	;# 
   898  0DBE                     	;# 
   899  0DBF                     	;# 
   900  0DC0                     	;# 
   901  0FE4                     	;# 
   902  0FE5                     	;# 
   903  0FE6                     	;# 
   904  0FE7                     	;# 
   905  0FE8                     	;# 
   906  0FE8                     	;# 
   907  0FE9                     	;# 
   908  0FEA                     	;# 
   909  0FEA                     	;# 
   910  0FEB                     	;# 
   911  0FED                     	;# 
   912  0FEE                     	;# 
   913  0FEE                     	;# 
   914  0FEF                     	;# 
   915                           
   916                           	psect	idataBANK0
   917  018D                     __pidataBANK0:	
   918                           
   919                           ;initializer for _PORTTable
   920  018D  3401               	retlw	1
   921  018E  3402               	retlw	2
   922  018F  3410               	retlw	16
   923  0190  3420               	retlw	32
   924  0191  3420               	retlw	32
   925  0192  3401               	retlw	1
   926  0193  3410               	retlw	16
   927  0194  3402               	retlw	2
   928                           
   929                           ;initializer for _TRISTable
   930  0195  34FC               	retlw	252
   931  0196  34FC               	retlw	252
   932  0197  34CF               	retlw	207
   933  0198  34CF               	retlw	207
   934  0199  34DE               	retlw	222
   935  019A  34DE               	retlw	222
   936  019B  34ED               	retlw	237
   937  019C  34ED               	retlw	237
   938                           
   939                           ;initializer for RunLeftFlash@delay
   940  019D  34E8               	retlw	232
   941  019E  3403               	retlw	3
   942                           
   943                           	psect	nvCOMMON
   944  0079                     __pnvCOMMON:	
   945  0079                     _timer0ReloadVal:	
   946  0079                     	ds	1
   947                           
   948                           	psect	nvBANK0
   949  004A                     __pnvBANK0:	
   950  004A                     _TMR0_InterruptHandler:	
   951  004A                     	ds	2
   952  004C                     _IOCAF3_InterruptHandler:	
   953  004C                     	ds	2
   954  004E                     _IOCAF2_InterruptHandler:	
   955  004E                     	ds	2
   956  000C                     _PORTAbits	set	12
   957  000C                     _PORTA	set	12
   958  0015                     _TMR0	set	21
   959  000B                     _INTCONbits	set	11
   960  0095                     _OPTION_REG	set	149
   961  0097                     _WDTCON	set	151
   962  0098                     _OSCTUNE	set	152
   963  0099                     _OSCCON	set	153
   964  0095                     _OPTION_REGbits	set	149
   965  008C                     _TRISA	set	140
   966  0116                     _BORCON	set	278
   967  011D                     _APFCON	set	285
   968  010C                     _LATA	set	268
   969  0197                     _VREGCONbits	set	407
   970  018C                     _ANSELA	set	396
   971  020C                     _WPUA	set	524
   972  028C                     _ODCONA	set	652
   973  0391                     _IOCAPbits	set	913
   974  0392                     _IOCANbits	set	914
   975  0393                     _IOCAFbits	set	915
   976                           
   977                           ; #config settings
   978  0000                     
   979                           	psect	cinit
   980  0012                     start_initialization:	
   981  0012                     __initialization:	
   982                           
   983                           ; Initialize objects allocated to BANK0
   984  0012  308D               	movlw	low __pidataBANK0
   985  0013  0084               	movwf	4
   986  0014  3081               	movlw	(high __pidataBANK0)| (0+128)
   987  0015  0085               	movwf	5
   988  0016  3038               	movlw	low __pdataBANK0
   989  0017  0086               	movwf	6
   990  0018  3000               	movlw	high __pdataBANK0
   991  0019  0087               	movwf	7
   992  001A  3012               	movlw	18
   993  001B  21E3               	fcall	init_ram
   994  001C  3020               	movlw	low __pbssBANK0
   995                           
   996                           ; Clear objects allocated to COMMON
   997  001D  01F5               	clrf	__pbssCOMMON& (0+127)
   998  001E  01F6               	clrf	(__pbssCOMMON+1)& (0+127)
   999  001F  01F7               	clrf	(__pbssCOMMON+2)& (0+127)
  1000  0020  01F8               	clrf	(__pbssCOMMON+3)& (0+127)
  1001                           
  1002                           ; Clear objects allocated to BANK0
  1003  0021  0084               	movwf	4
  1004  0022  3000               	movlw	high __pbssBANK0
  1005  0023  0085               	movwf	5
  1006  0024  3018               	movlw	24
  1007  0025  21E9               	fcall	clear_ram0
  1008  0026                     end_of_initialization:	
  1009                           ;End of C runtime variable initialization code
  1010                           
  1011  0026                     __end_of__initialization:	
  1012  0026  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  1013  0027  0020               	movlb	0
  1014  0028  291E               	ljmp	_main	;jump to C main() function
  1015                           
  1016                           	psect	bssCOMMON
  1017  0075                     __pbssCOMMON:	
  1018  0075                     CheckForButtonPushes@LastRightButtonState:	
  1019  0075                     	ds	1
  1020  0076                     CheckForButtonPushes@LastLeftButtonState:	
  1021  0076                     	ds	1
  1022  0077                     _LEDOns:	
  1023  0077                     	ds	1
  1024  0078                     _LEDState:	
  1025  0078                     	ds	1
  1026                           
  1027                           	psect	bssBANK0
  1028  0020                     __pbssBANK0:	
  1029  0020                     _PatternDelay:	
  1030  0020                     	ds	16
  1031  0030                     _PatternState:	
  1032  0030                     	ds	8
  1033                           
  1034                           	psect	dataBANK0
  1035  0038                     __pdataBANK0:	
  1036  0038                     _PORTTable:	
  1037  0038                     	ds	8
  1038  0040                     _TRISTable:	
  1039  0040                     	ds	8
  1040  0048                     RunLeftFlash@delay:	
  1041  0048                     	ds	2
  1042                           
  1043                           	psect	inittext
  1044  01E3                     init_ram:	
  1045  01E3  00FE               	movwf	126
  1046  01E4                     initloop:	
  1047  01E4  0012               	moviw fsr0++
  1048  01E5  001E               	movwi fsr1++
  1049  01E6  0BFE               	decfsz	126,f
  1050  01E7  29E4               	goto	initloop
  1051  01E8  3400               	retlw	0
  1052                           
  1053                           	psect	clrtext
  1054  01E9                     clear_ram0:	
  1055                           ;	Called with FSR0 containing the base address, and
  1056                           ;	WREG with the size to clear
  1057                           
  1058  01E9  0064               	clrwdt	;clear the watchdog before getting into this loop
  1059  01EA                     clrloop0:	
  1060  01EA  0180               	clrf	0	;clear RAM location pointed to by FSR
  1061  01EB  3101               	addfsr 0,1
  1062  01EC  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  1063  01ED  29EA               	goto	clrloop0	;have we reached the end yet?
  1064  01EE  3400               	retlw	0	;all done for this memory range, return
  1065                           
  1066                           	psect	cstackCOMMON
  1067  0070                     __pcstackCOMMON:	
  1068  0070                     ?_IOCAF2_DefaultInterruptHandler:	
  1069  0070                     ??_IOCAF2_DefaultInterruptHandler:	
  1070                           ; 1 bytes @ 0x0
  1071                           
  1072  0070                     ?_IOCAF3_DefaultInterruptHandler:	
  1073                           ; 1 bytes @ 0x0
  1074                           
  1075  0070                     ??_IOCAF3_DefaultInterruptHandler:	
  1076                           ; 1 bytes @ 0x0
  1077                           
  1078  0070                     ?_IOCAF2_ISR:	
  1079                           ; 1 bytes @ 0x0
  1080                           
  1081  0070                     ??_IOCAF2_ISR:	
  1082                           ; 1 bytes @ 0x0
  1083                           
  1084  0070                     ?_IOCAF3_ISR:	
  1085                           ; 1 bytes @ 0x0
  1086                           
  1087  0070                     ??_IOCAF3_ISR:	
  1088                           ; 1 bytes @ 0x0
  1089                           
  1090  0070                     ?_OSCILLATOR_Initialize:	
  1091                           ; 1 bytes @ 0x0
  1092                           
  1093  0070                     ?_WDT_Initialize:	
  1094                           ; 1 bytes @ 0x0
  1095                           
  1096  0070                     ?_TMR0_Initialize:	
  1097                           ; 1 bytes @ 0x0
  1098                           
  1099  0070                     ?_TMR0_ISR:	
  1100                           ; 1 bytes @ 0x0
  1101                           
  1102  0070                     ?_TMR0_CallBack:	
  1103                           ; 1 bytes @ 0x0
  1104                           
  1105  0070                     ?_PIN_MANAGER_Initialize:	
  1106                           ; 1 bytes @ 0x0
  1107                           
  1108  0070                     ?_PIN_MANAGER_IOC:	
  1109                           ; 1 bytes @ 0x0
  1110                           
  1111  0070                     ??_PIN_MANAGER_IOC:	
  1112                           ; 1 bytes @ 0x0
  1113                           
  1114  0070                     ?_SYSTEM_Initialize:	
  1115                           ; 1 bytes @ 0x0
  1116                           
  1117  0070                     ?_INTERRUPT_InterruptManager:	
  1118                           ; 1 bytes @ 0x0
  1119                           
  1120  0070                     ?_SetLEDOn:	
  1121                           ; 1 bytes @ 0x0
  1122                           
  1123  0070                     ?_SetLEDOff:	
  1124                           ; 1 bytes @ 0x0
  1125                           
  1126  0070                     ?_SetAllLEDsOff:	
  1127                           ; 1 bytes @ 0x0
  1128                           
  1129  0070                     ?_CharlieplexLEDs:	
  1130                           ; 1 bytes @ 0x0
  1131                           
  1132  0070                     ??_CharlieplexLEDs:	
  1133                           ; 1 bytes @ 0x0
  1134                           
  1135  0070                     ?_RightButtonPressed:	
  1136                           ; 1 bytes @ 0x0
  1137                           
  1138  0070                     ?_LeftButtonPressed:	
  1139                           ; 1 bytes @ 0x0
  1140                           
  1141  0070                     ?_RunRightFlash:	
  1142                           ; 1 bytes @ 0x0
  1143                           
  1144  0070                     ?_RunLeftFlash:	
  1145                           ; 1 bytes @ 0x0
  1146                           
  1147  0070                     ?_CheckForButtonPushes:	
  1148                           ; 1 bytes @ 0x0
  1149                           
  1150  0070                     ?_main:	
  1151                           ; 1 bytes @ 0x0
  1152                           
  1153                           
  1154                           ; 1 bytes @ 0x0
  1155  0070                     	ds	2
  1156  0072                     CharlieplexLEDs@i:	
  1157                           
  1158                           ; 1 bytes @ 0x2
  1159  0072                     	ds	1
  1160  0073                     ?_IOCAF2_SetInterruptHandler:	
  1161  0073                     ?_IOCAF3_SetInterruptHandler:	
  1162                           ; 1 bytes @ 0x3
  1163                           
  1164  0073                     ??_OSCILLATOR_Initialize:	
  1165                           ; 1 bytes @ 0x3
  1166                           
  1167  0073                     ??_WDT_Initialize:	
  1168                           ; 1 bytes @ 0x3
  1169                           
  1170  0073                     ??_TMR0_Initialize:	
  1171                           ; 1 bytes @ 0x3
  1172                           
  1173  0073                     ??_TMR0_ISR:	
  1174                           ; 1 bytes @ 0x3
  1175                           
  1176  0073                     ??_TMR0_CallBack:	
  1177                           ; 1 bytes @ 0x3
  1178                           
  1179  0073                     ??_INTERRUPT_InterruptManager:	
  1180                           ; 1 bytes @ 0x3
  1181                           
  1182  0073                     ?_TMR0_SetInterruptHandler:	
  1183                           ; 1 bytes @ 0x3
  1184                           
  1185  0073                     ??_SetLEDOn:	
  1186                           ; 1 bytes @ 0x3
  1187                           
  1188  0073                     ??_SetLEDOff:	
  1189                           ; 1 bytes @ 0x3
  1190                           
  1191  0073                     ??_SetAllLEDsOff:	
  1192                           ; 1 bytes @ 0x3
  1193                           
  1194  0073                     ??_RightButtonPressed:	
  1195                           ; 1 bytes @ 0x3
  1196                           
  1197  0073                     ??_LeftButtonPressed:	
  1198                           ; 1 bytes @ 0x3
  1199                           
  1200  0073                     ??_CheckForButtonPushes:	
  1201                           ; 1 bytes @ 0x3
  1202                           
  1203  0073                     SetLEDOn@LED:	
  1204                           ; 1 bytes @ 0x3
  1205                           
  1206  0073                     SetLEDOff@LED:	
  1207                           ; 1 bytes @ 0x3
  1208                           
  1209  0073                     IOCAF2_SetInterruptHandler@InterruptHandler:	
  1210                           ; 1 bytes @ 0x3
  1211                           
  1212  0073                     IOCAF3_SetInterruptHandler@InterruptHandler:	
  1213                           ; 2 bytes @ 0x3
  1214                           
  1215  0073                     TMR0_SetInterruptHandler@InterruptHandler:	
  1216                           ; 2 bytes @ 0x3
  1217                           
  1218                           
  1219                           ; 2 bytes @ 0x3
  1220  0073                     	ds	1
  1221  0074                     ??_RunRightFlash:	
  1222  0074                     ??_RunLeftFlash:	
  1223                           ; 1 bytes @ 0x4
  1224                           
  1225                           
  1226                           ; 1 bytes @ 0x4
  1227  0074                     	ds	1
  1228  0075                     ??_IOCAF2_SetInterruptHandler:	
  1229  0075                     ??_IOCAF3_SetInterruptHandler:	
  1230                           ; 1 bytes @ 0x5
  1231                           
  1232  0075                     ??_PIN_MANAGER_Initialize:	
  1233                           ; 1 bytes @ 0x5
  1234                           
  1235  0075                     ??_SYSTEM_Initialize:	
  1236                           ; 1 bytes @ 0x5
  1237                           
  1238  0075                     ??_TMR0_SetInterruptHandler:	
  1239                           ; 1 bytes @ 0x5
  1240                           
  1241                           
  1242                           	psect	cstackBANK0
  1243  0050                     __pcstackBANK0:	
  1244                           ; 1 bytes @ 0x5
  1245                           
  1246  0050                     ??_main:	
  1247                           
  1248                           ; 1 bytes @ 0x0
  1249  0050                     	ds	2
  1250  0052                     main@APatternIsRunning:	
  1251                           
  1252                           ; 1 bytes @ 0x2
  1253  0052                     	ds	1
  1254  0053                     main@i:	
  1255                           
  1256                           ; 1 bytes @ 0x3
  1257  0053                     	ds	1
  1258                           
  1259                           	psect	maintext
  1260  011E                     __pmaintext:	
  1261 ;;
  1262 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1263 ;;
  1264 ;; *************** function _main *****************
  1265 ;; Defined at:
  1266 ;;		line 374 in file "main.c"
  1267 ;; Parameters:    Size  Location     Type
  1268 ;;		None
  1269 ;; Auto vars:     Size  Location     Type
  1270 ;;  i               1    3[BANK0 ] unsigned char 
  1271 ;;  APatternIsRu    1    2[BANK0 ] unsigned char 
  1272 ;; Return value:  Size  Location     Type
  1273 ;;                  1    wreg      void 
  1274 ;; Registers used:
  1275 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1276 ;; Tracked objects:
  1277 ;;		On entry : B1F/0
  1278 ;;		On exit  : 1F/0
  1279 ;;		Unchanged: 0/0
  1280 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1281 ;;      Params:         0       0       0       0
  1282 ;;      Locals:         0       2       0       0
  1283 ;;      Temps:          0       2       0       0
  1284 ;;      Totals:         0       4       0       0
  1285 ;;Total ram usage:        4 bytes
  1286 ;; Hardware stack levels required when called:    7
  1287 ;; This function calls:
  1288 ;;		_CheckForButtonPushes
  1289 ;;		_RunLeftFlash
  1290 ;;		_RunRightFlash
  1291 ;;		_SYSTEM_Initialize
  1292 ;;		_SetAllLEDsOff
  1293 ;;		_TMR0_SetInterruptHandler
  1294 ;; This function is called by:
  1295 ;;		Startup code after reset
  1296 ;; This function uses a non-reentrant model
  1297 ;;
  1298                           
  1299                           
  1300                           ;psect for function _main
  1301  011E                     _main:	
  1302                           
  1303                           ;main.c: 377: SYSTEM_Initialize();
  1304                           
  1305                           ;incstack = 0
  1306                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1307  011E  221B               	fcall	_SYSTEM_Initialize
  1308                           
  1309                           ;main.c: 379: TMR0_SetInterruptHandler(CharlieplexLEDs);
  1310  011F  30E2               	movlw	low _CharlieplexLEDs
  1311  0120  00F3               	movwf	TMR0_SetInterruptHandler@InterruptHandler
  1312  0121  3000               	movlw	high _CharlieplexLEDs
  1313  0122  00F4               	movwf	TMR0_SetInterruptHandler@InterruptHandler+1
  1314  0123  220C               	fcall	_TMR0_SetInterruptHandler
  1315                           
  1316                           ;main.c: 385: (INTCONbits.GIE = 1);
  1317  0124  178B               	bsf	11,7	;volatile
  1318                           
  1319                           ;main.c: 388: (INTCONbits.PEIE = 1);
  1320  0125  170B               	bsf	11,6	;volatile
  1321  0126                     l1463:	
  1322                           
  1323                           ;main.c: 400: {
  1324                           ;main.c: 401: RunRightFlash();
  1325  0126  208C               	fcall	_RunRightFlash
  1326                           
  1327                           ;main.c: 402: RunLeftFlash();
  1328  0127  2029               	fcall	_RunLeftFlash
  1329                           
  1330                           ;main.c: 404: APatternIsRunning = 0;
  1331  0128  01D2               	clrf	main@APatternIsRunning
  1332                           
  1333                           ;main.c: 405: for (i=0; i < 8; i++)
  1334  0129  01D3               	clrf	main@i
  1335  012A                     l1475:	
  1336                           
  1337                           ;main.c: 406: {
  1338                           ;main.c: 407: if (PatternState[i] != 0)
  1339  012A  0853               	movf	main@i,w
  1340  012B  3E30               	addlw	(low (_PatternState| 0))& (0+255)
  1341  012C  0086               	movwf	6
  1342  012D  0187               	clrf	7
  1343  012E  0801               	movf	1,w
  1344  012F  1903               	btfsc	3,2
  1345  0130  2933               	goto	l1479
  1346                           
  1347                           ;main.c: 408: {
  1348                           ;main.c: 409: APatternIsRunning = 1;
  1349  0131  01D2               	clrf	main@APatternIsRunning
  1350  0132  0AD2               	incf	main@APatternIsRunning,f
  1351  0133                     l1479:	
  1352  0133  3008               	movlw	8
  1353  0134  0AD3               	incf	main@i,f
  1354  0135  0253               	subwf	main@i,w
  1355  0136  1C03               	skipc
  1356  0137  292A               	goto	l1475
  1357                           
  1358                           ;main.c: 410: }
  1359                           ;main.c: 411: }
  1360                           ;main.c: 412: if (!APatternIsRunning)
  1361  0138  0852               	movf	main@APatternIsRunning,w
  1362  0139  1D03               	btfss	3,2
  1363  013A  294C               	goto	l240
  1364                           
  1365                           ;main.c: 413: {
  1366                           ;main.c: 415: VREGCONbits.VREGPM = 1;
  1367  013B  0023               	movlb	3	; select bank3
  1368  013C  1497               	bsf	23,1	;volatile
  1369                           
  1370                           ;main.c: 417: SetAllLEDsOff();
  1371  013D  222A               	fcall	_SetAllLEDsOff
  1372                           
  1373                           ;main.c: 419: _delay((unsigned long)((50)*(16000000/4000.0)));
  1374  013E  3002               	movlw	2
  1375  013F  0020               	movlb	0	; select bank0
  1376  0140  00D1               	movwf	??_main+1
  1377  0141  3004               	movlw	4
  1378  0142  00D0               	movwf	??_main
  1379  0143  30BA               	movlw	186
  1380  0144                     u807:	
  1381  0144  0B89               	decfsz	9,f
  1382  0145  2944               	goto	u807
  1383  0146  0BD0               	decfsz	??_main,f
  1384  0147  2944               	goto	u807
  1385  0148  0BD1               	decfsz	??_main+1,f
  1386  0149  2944               	goto	u807
  1387  014A  0000               	nop
  1388  014B  0063               	sleep	;# 
  1389  014C                     l240:	
  1390                           
  1391                           ;main.c: 422: }
  1392                           ;main.c: 424: CheckForButtonPushes();
  1393  014C  2172               	fcall	_CheckForButtonPushes
  1394  014D  2926               	goto	l1463
  1395  014E                     __end_of_main:	
  1396                           
  1397                           	psect	text1
  1398  020C                     __ptext1:	
  1399 ;; *************** function _TMR0_SetInterruptHandler *****************
  1400 ;; Defined at:
  1401 ;;		line 134 in file "mcc_generated_files/tmr0.c"
  1402 ;; Parameters:    Size  Location     Type
  1403 ;;  InterruptHan    2    3[COMMON] PTR FTN()void 
  1404 ;;		 -> CharlieplexLEDs(1), 
  1405 ;; Auto vars:     Size  Location     Type
  1406 ;;		None
  1407 ;; Return value:  Size  Location     Type
  1408 ;;                  1    wreg      void 
  1409 ;; Registers used:
  1410 ;;		wreg
  1411 ;; Tracked objects:
  1412 ;;		On entry : B1F/0
  1413 ;;		On exit  : B1F/0
  1414 ;;		Unchanged: B00/0
  1415 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1416 ;;      Params:         2       0       0       0
  1417 ;;      Locals:         0       0       0       0
  1418 ;;      Temps:          0       0       0       0
  1419 ;;      Totals:         2       0       0       0
  1420 ;;Total ram usage:        2 bytes
  1421 ;; Hardware stack levels used:    1
  1422 ;; Hardware stack levels required when called:    4
  1423 ;; This function calls:
  1424 ;;		Nothing
  1425 ;; This function is called by:
  1426 ;;		_main
  1427 ;; This function uses a non-reentrant model
  1428 ;;
  1429                           
  1430                           
  1431                           ;psect for function _TMR0_SetInterruptHandler
  1432  020C                     _TMR0_SetInterruptHandler:	
  1433                           
  1434                           ;tmr0.c: 135: TMR0_InterruptHandler = InterruptHandler;
  1435                           
  1436                           ;incstack = 0
  1437                           ; Regs used in _TMR0_SetInterruptHandler: [wreg]
  1438  020C  0874               	movf	TMR0_SetInterruptHandler@InterruptHandler+1,w
  1439  020D  00CB               	movwf	_TMR0_InterruptHandler+1
  1440  020E  0873               	movf	TMR0_SetInterruptHandler@InterruptHandler,w
  1441  020F  00CA               	movwf	_TMR0_InterruptHandler
  1442  0210  0008               	return
  1443  0211                     __end_of_TMR0_SetInterruptHandler:	
  1444                           
  1445                           	psect	text2
  1446  022A                     __ptext2:	
  1447 ;; *************** function _SetAllLEDsOff *****************
  1448 ;; Defined at:
  1449 ;;		line 141 in file "main.c"
  1450 ;; Parameters:    Size  Location     Type
  1451 ;;		None
  1452 ;; Auto vars:     Size  Location     Type
  1453 ;;		None
  1454 ;; Return value:  Size  Location     Type
  1455 ;;                  1    wreg      void 
  1456 ;; Registers used:
  1457 ;;		status,2
  1458 ;; Tracked objects:
  1459 ;;		On entry : 1F/3
  1460 ;;		On exit  : 1F/3
  1461 ;;		Unchanged: 1E/0
  1462 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1463 ;;      Params:         0       0       0       0
  1464 ;;      Locals:         0       0       0       0
  1465 ;;      Temps:          0       0       0       0
  1466 ;;      Totals:         0       0       0       0
  1467 ;;Total ram usage:        0 bytes
  1468 ;; Hardware stack levels used:    1
  1469 ;; Hardware stack levels required when called:    4
  1470 ;; This function calls:
  1471 ;;		Nothing
  1472 ;; This function is called by:
  1473 ;;		_main
  1474 ;; This function uses a non-reentrant model
  1475 ;;
  1476                           
  1477                           
  1478                           ;psect for function _SetAllLEDsOff
  1479  022A                     _SetAllLEDsOff:	
  1480                           
  1481                           ;main.c: 143: LEDOns = 0;
  1482                           
  1483                           ;incstack = 0
  1484                           ; Regs used in _SetAllLEDsOff: [status,2]
  1485  022A  01F7               	clrf	_LEDOns	;volatile
  1486  022B  0008               	return
  1487  022C                     __end_of_SetAllLEDsOff:	
  1488                           
  1489                           	psect	text3
  1490  021B                     __ptext3:	
  1491 ;; *************** function _SYSTEM_Initialize *****************
  1492 ;; Defined at:
  1493 ;;		line 68 in file "mcc_generated_files/mcc.c"
  1494 ;; Parameters:    Size  Location     Type
  1495 ;;		None
  1496 ;; Auto vars:     Size  Location     Type
  1497 ;;		None
  1498 ;; Return value:  Size  Location     Type
  1499 ;;                  1    wreg      void 
  1500 ;; Registers used:
  1501 ;;		wreg, status,2, status,0, pclath, cstack
  1502 ;; Tracked objects:
  1503 ;;		On entry : B1F/0
  1504 ;;		On exit  : B1F/0
  1505 ;;		Unchanged: B00/0
  1506 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1507 ;;      Params:         0       0       0       0
  1508 ;;      Locals:         0       0       0       0
  1509 ;;      Temps:          0       0       0       0
  1510 ;;      Totals:         0       0       0       0
  1511 ;;Total ram usage:        0 bytes
  1512 ;; Hardware stack levels used:    1
  1513 ;; Hardware stack levels required when called:    6
  1514 ;; This function calls:
  1515 ;;		_OSCILLATOR_Initialize
  1516 ;;		_PIN_MANAGER_Initialize
  1517 ;;		_TMR0_Initialize
  1518 ;;		_WDT_Initialize
  1519 ;; This function is called by:
  1520 ;;		_main
  1521 ;; This function uses a non-reentrant model
  1522 ;;
  1523                           
  1524                           
  1525                           ;psect for function _SYSTEM_Initialize
  1526  021B                     _SYSTEM_Initialize:	
  1527                           
  1528                           ;mcc.c: 71: PIN_MANAGER_Initialize();
  1529                           
  1530                           ;incstack = 0
  1531                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  1532  021B  214E               	fcall	_PIN_MANAGER_Initialize
  1533                           
  1534                           ;mcc.c: 72: OSCILLATOR_Initialize();
  1535  021C  21CE               	fcall	_OSCILLATOR_Initialize
  1536                           
  1537                           ;mcc.c: 73: WDT_Initialize();
  1538  021D  221F               	fcall	_WDT_Initialize
  1539                           
  1540                           ;mcc.c: 74: TMR0_Initialize();
  1541  021E  29B9               	ljmp	l1325
  1542  021F                     __end_of_SYSTEM_Initialize:	
  1543                           
  1544                           	psect	text4
  1545  021F                     __ptext4:	
  1546 ;; *************** function _WDT_Initialize *****************
  1547 ;; Defined at:
  1548 ;;		line 87 in file "mcc_generated_files/mcc.c"
  1549 ;; Parameters:    Size  Location     Type
  1550 ;;		None
  1551 ;; Auto vars:     Size  Location     Type
  1552 ;;		None
  1553 ;; Return value:  Size  Location     Type
  1554 ;;                  1    wreg      void 
  1555 ;; Registers used:
  1556 ;;		wreg
  1557 ;; Tracked objects:
  1558 ;;		On entry : B1F/2
  1559 ;;		On exit  : B1F/1
  1560 ;;		Unchanged: B00/0
  1561 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1562 ;;      Params:         0       0       0       0
  1563 ;;      Locals:         0       0       0       0
  1564 ;;      Temps:          0       0       0       0
  1565 ;;      Totals:         0       0       0       0
  1566 ;;Total ram usage:        0 bytes
  1567 ;; Hardware stack levels used:    1
  1568 ;; Hardware stack levels required when called:    4
  1569 ;; This function calls:
  1570 ;;		Nothing
  1571 ;; This function is called by:
  1572 ;;		_SYSTEM_Initialize
  1573 ;; This function uses a non-reentrant model
  1574 ;;
  1575                           
  1576                           
  1577                           ;psect for function _WDT_Initialize
  1578  021F                     _WDT_Initialize:	
  1579                           
  1580                           ;mcc.c: 90: WDTCON = 0x16;
  1581                           
  1582                           ;incstack = 0
  1583                           ; Regs used in _WDT_Initialize: [wreg]
  1584  021F  3016               	movlw	22
  1585  0220  0021               	movlb	1	; select bank1
  1586  0221  0097               	movwf	23	;volatile
  1587  0222  0008               	return
  1588  0223                     __end_of_WDT_Initialize:	
  1589                           
  1590                           	psect	text5
  1591  01B9                     __ptext5:	
  1592 ;; *************** function _TMR0_Initialize *****************
  1593 ;; Defined at:
  1594 ;;		line 66 in file "mcc_generated_files/tmr0.c"
  1595 ;; Parameters:    Size  Location     Type
  1596 ;;		None
  1597 ;; Auto vars:     Size  Location     Type
  1598 ;;		None
  1599 ;; Return value:  Size  Location     Type
  1600 ;;                  1    wreg      void 
  1601 ;; Registers used:
  1602 ;;		wreg, status,2
  1603 ;; Tracked objects:
  1604 ;;		On entry : B1F/1
  1605 ;;		On exit  : B1F/0
  1606 ;;		Unchanged: B00/0
  1607 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1608 ;;      Params:         0       0       0       0
  1609 ;;      Locals:         0       0       0       0
  1610 ;;      Temps:          0       0       0       0
  1611 ;;      Totals:         0       0       0       0
  1612 ;;Total ram usage:        0 bytes
  1613 ;; Hardware stack levels used:    1
  1614 ;; Hardware stack levels required when called:    4
  1615 ;; This function calls:
  1616 ;;		Nothing
  1617 ;; This function is called by:
  1618 ;;		_SYSTEM_Initialize
  1619 ;; This function uses a non-reentrant model
  1620 ;;
  1621                           
  1622                           
  1623                           ;psect for function _TMR0_Initialize
  1624  01B9                     _TMR0_Initialize:	
  1625  01B9                     l1325:	
  1626                           ;incstack = 0
  1627                           ; Regs used in _TMR0_Initialize: [wreg+status,2]
  1628                           
  1629                           
  1630                           ;tmr0.c: 71: OPTION_REG = (uint8_t)((OPTION_REG & 0xC0) | 0xD1 & 0x3F);
  1631  01B9  0815               	movf	21,w	;volatile
  1632  01BA  39C0               	andlw	192
  1633  01BB  3811               	iorlw	17
  1634  01BC  0095               	movwf	21	;volatile
  1635                           
  1636                           ;tmr0.c: 74: TMR0 = 0x90;
  1637  01BD  3090               	movlw	144
  1638  01BE  0020               	movlb	0	; select bank0
  1639  01BF  0095               	movwf	21	;volatile
  1640                           
  1641                           ;tmr0.c: 77: timer0ReloadVal= 0x90;
  1642  01C0  00F9               	movwf	_timer0ReloadVal	;volatile
  1643                           
  1644                           ;tmr0.c: 80: INTCONbits.TMR0IF = 0;
  1645  01C1  110B               	bcf	11,2	;volatile
  1646                           
  1647                           ;tmr0.c: 83: INTCONbits.TMR0IE = 1;
  1648  01C2  168B               	bsf	11,5	;volatile
  1649  01C3  0008               	return
  1650  01C4                     __end_of_TMR0_Initialize:	
  1651                           
  1652                           	psect	text6
  1653  014E                     __ptext6:	
  1654 ;; *************** function _PIN_MANAGER_Initialize *****************
  1655 ;; Defined at:
  1656 ;;		line 55 in file "mcc_generated_files/pin_manager.c"
  1657 ;; Parameters:    Size  Location     Type
  1658 ;;		None
  1659 ;; Auto vars:     Size  Location     Type
  1660 ;;		None
  1661 ;; Return value:  Size  Location     Type
  1662 ;;                  1    wreg      void 
  1663 ;; Registers used:
  1664 ;;		wreg, status,2, status,0, pclath, cstack
  1665 ;; Tracked objects:
  1666 ;;		On entry : B1F/0
  1667 ;;		On exit  : B1F/0
  1668 ;;		Unchanged: B00/0
  1669 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1670 ;;      Params:         0       0       0       0
  1671 ;;      Locals:         0       0       0       0
  1672 ;;      Temps:          0       0       0       0
  1673 ;;      Totals:         0       0       0       0
  1674 ;;Total ram usage:        0 bytes
  1675 ;; Hardware stack levels used:    1
  1676 ;; Hardware stack levels required when called:    5
  1677 ;; This function calls:
  1678 ;;		_IOCAF2_SetInterruptHandler
  1679 ;;		_IOCAF3_SetInterruptHandler
  1680 ;; This function is called by:
  1681 ;;		_SYSTEM_Initialize
  1682 ;; This function uses a non-reentrant model
  1683 ;;
  1684                           
  1685                           
  1686                           ;psect for function _PIN_MANAGER_Initialize
  1687  014E                     _PIN_MANAGER_Initialize:	
  1688                           
  1689                           ;pin_manager.c: 60: LATA = 0x00;
  1690                           
  1691                           ;incstack = 0
  1692                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2+status,0+pclath+cstack]
  1693  014E  0022               	movlb	2	; select bank2
  1694  014F  018C               	clrf	12	;volatile
  1695                           
  1696                           ;pin_manager.c: 65: TRISA = 0x3F;
  1697  0150  303F               	movlw	63
  1698  0151  0021               	movlb	1	; select bank1
  1699  0152  008C               	movwf	12	;volatile
  1700                           
  1701                           ;pin_manager.c: 70: ANSELA = 0x13;
  1702  0153  3013               	movlw	19
  1703  0154  0023               	movlb	3	; select bank3
  1704  0155  008C               	movwf	12	;volatile
  1705                           
  1706                           ;pin_manager.c: 75: WPUA = 0x0C;
  1707  0156  300C               	movlw	12
  1708  0157  0024               	movlb	4	; select bank4
  1709  0158  008C               	movwf	12	;volatile
  1710                           
  1711                           ;pin_manager.c: 76: OPTION_REGbits.nWPUEN = 0;
  1712  0159  0021               	movlb	1	; select bank1
  1713  015A  1395               	bcf	21,7	;volatile
  1714                           
  1715                           ;pin_manager.c: 81: ODCONA = 0x00;
  1716  015B  0025               	movlb	5	; select bank5
  1717  015C  018C               	clrf	12	;volatile
  1718                           
  1719                           ;pin_manager.c: 86: APFCON = 0x00;
  1720  015D  0022               	movlb	2	; select bank2
  1721  015E  019D               	clrf	29	;volatile
  1722                           
  1723                           ;pin_manager.c: 92: IOCAFbits.IOCAF2 = 0;
  1724  015F  0027               	movlb	7	; select bank7
  1725  0160  1113               	bcf	19,2	;volatile
  1726                           
  1727                           ;pin_manager.c: 93: IOCAFbits.IOCAF3 = 0;
  1728  0161  1193               	bcf	19,3	;volatile
  1729                           
  1730                           ;pin_manager.c: 95: IOCANbits.IOCAN2 = 1;
  1731  0162  1512               	bsf	18,2	;volatile
  1732                           
  1733                           ;pin_manager.c: 96: IOCANbits.IOCAN3 = 1;
  1734  0163  1592               	bsf	18,3	;volatile
  1735                           
  1736                           ;pin_manager.c: 98: IOCAPbits.IOCAP2 = 1;
  1737  0164  1511               	bsf	17,2	;volatile
  1738                           
  1739                           ;pin_manager.c: 99: IOCAPbits.IOCAP3 = 1;
  1740  0165  1591               	bsf	17,3	;volatile
  1741                           
  1742                           ;pin_manager.c: 102: IOCAF2_SetInterruptHandler(IOCAF2_DefaultInterruptHandler);
  1743  0166  302D               	movlw	low _IOCAF2_DefaultInterruptHandler
  1744  0167  00F3               	movwf	IOCAF2_SetInterruptHandler@InterruptHandler
  1745  0168  3002               	movlw	high _IOCAF2_DefaultInterruptHandler
  1746  0169  00F4               	movwf	IOCAF2_SetInterruptHandler@InterruptHandler+1
  1747  016A  21EF               	fcall	_IOCAF2_SetInterruptHandler
  1748                           
  1749                           ;pin_manager.c: 103: IOCAF3_SetInterruptHandler(IOCAF3_DefaultInterruptHandler);
  1750  016B  302C               	movlw	low _IOCAF3_DefaultInterruptHandler
  1751  016C  00F3               	movwf	IOCAF3_SetInterruptHandler@InterruptHandler
  1752  016D  3002               	movlw	high _IOCAF3_DefaultInterruptHandler
  1753  016E  00F4               	movwf	IOCAF3_SetInterruptHandler@InterruptHandler+1
  1754  016F  2211               	fcall	_IOCAF3_SetInterruptHandler
  1755                           
  1756                           ;pin_manager.c: 106: INTCONbits.IOCIE = 1;
  1757  0170  158B               	bsf	11,3	;volatile
  1758  0171  0008               	return
  1759  0172                     __end_of_PIN_MANAGER_Initialize:	
  1760                           
  1761                           	psect	text7
  1762  0211                     __ptext7:	
  1763 ;; *************** function _IOCAF3_SetInterruptHandler *****************
  1764 ;; Defined at:
  1765 ;;		line 175 in file "mcc_generated_files/pin_manager.c"
  1766 ;; Parameters:    Size  Location     Type
  1767 ;;  InterruptHan    2    3[COMMON] PTR FTN()void 
  1768 ;;		 -> IOCAF3_DefaultInterruptHandler(1), 
  1769 ;; Auto vars:     Size  Location     Type
  1770 ;;		None
  1771 ;; Return value:  Size  Location     Type
  1772 ;;                  1    wreg      void 
  1773 ;; Registers used:
  1774 ;;		wreg
  1775 ;; Tracked objects:
  1776 ;;		On entry : B1F/0
  1777 ;;		On exit  : B1F/0
  1778 ;;		Unchanged: B00/0
  1779 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1780 ;;      Params:         2       0       0       0
  1781 ;;      Locals:         0       0       0       0
  1782 ;;      Temps:          0       0       0       0
  1783 ;;      Totals:         2       0       0       0
  1784 ;;Total ram usage:        2 bytes
  1785 ;; Hardware stack levels used:    1
  1786 ;; Hardware stack levels required when called:    4
  1787 ;; This function calls:
  1788 ;;		Nothing
  1789 ;; This function is called by:
  1790 ;;		_PIN_MANAGER_Initialize
  1791 ;; This function uses a non-reentrant model
  1792 ;;
  1793                           
  1794                           
  1795                           ;psect for function _IOCAF3_SetInterruptHandler
  1796  0211                     _IOCAF3_SetInterruptHandler:	
  1797                           
  1798                           ;pin_manager.c: 176: IOCAF3_InterruptHandler = InterruptHandler;
  1799                           
  1800                           ;incstack = 0
  1801                           ; Regs used in _IOCAF3_SetInterruptHandler: [wreg]
  1802  0211  0874               	movf	IOCAF3_SetInterruptHandler@InterruptHandler+1,w
  1803  0212  00CD               	movwf	_IOCAF3_InterruptHandler+1
  1804  0213  0873               	movf	IOCAF3_SetInterruptHandler@InterruptHandler,w
  1805  0214  00CC               	movwf	_IOCAF3_InterruptHandler
  1806  0215  0008               	return
  1807  0216                     __end_of_IOCAF3_SetInterruptHandler:	
  1808                           
  1809                           	psect	text8
  1810  01EF                     __ptext8:	
  1811 ;; *************** function _IOCAF2_SetInterruptHandler *****************
  1812 ;; Defined at:
  1813 ;;		line 145 in file "mcc_generated_files/pin_manager.c"
  1814 ;; Parameters:    Size  Location     Type
  1815 ;;  InterruptHan    2    3[COMMON] PTR FTN()void 
  1816 ;;		 -> IOCAF2_DefaultInterruptHandler(1), 
  1817 ;; Auto vars:     Size  Location     Type
  1818 ;;		None
  1819 ;; Return value:  Size  Location     Type
  1820 ;;                  1    wreg      void 
  1821 ;; Registers used:
  1822 ;;		wreg
  1823 ;; Tracked objects:
  1824 ;;		On entry : B1F/7
  1825 ;;		On exit  : B1F/0
  1826 ;;		Unchanged: B00/0
  1827 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1828 ;;      Params:         2       0       0       0
  1829 ;;      Locals:         0       0       0       0
  1830 ;;      Temps:          0       0       0       0
  1831 ;;      Totals:         2       0       0       0
  1832 ;;Total ram usage:        2 bytes
  1833 ;; Hardware stack levels used:    1
  1834 ;; Hardware stack levels required when called:    4
  1835 ;; This function calls:
  1836 ;;		Nothing
  1837 ;; This function is called by:
  1838 ;;		_PIN_MANAGER_Initialize
  1839 ;; This function uses a non-reentrant model
  1840 ;;
  1841                           
  1842                           
  1843                           ;psect for function _IOCAF2_SetInterruptHandler
  1844  01EF                     _IOCAF2_SetInterruptHandler:	
  1845                           
  1846                           ;pin_manager.c: 146: IOCAF2_InterruptHandler = InterruptHandler;
  1847                           
  1848                           ;incstack = 0
  1849                           ; Regs used in _IOCAF2_SetInterruptHandler: [wreg]
  1850  01EF  0874               	movf	IOCAF2_SetInterruptHandler@InterruptHandler+1,w
  1851  01F0  0020               	movlb	0	; select bank0
  1852  01F1  00CF               	movwf	_IOCAF2_InterruptHandler+1
  1853  01F2  0873               	movf	IOCAF2_SetInterruptHandler@InterruptHandler,w
  1854  01F3  00CE               	movwf	_IOCAF2_InterruptHandler
  1855  01F4  0008               	return
  1856  01F5                     __end_of_IOCAF2_SetInterruptHandler:	
  1857                           
  1858                           	psect	text9
  1859  01CE                     __ptext9:	
  1860 ;; *************** function _OSCILLATOR_Initialize *****************
  1861 ;; Defined at:
  1862 ;;		line 77 in file "mcc_generated_files/mcc.c"
  1863 ;; Parameters:    Size  Location     Type
  1864 ;;		None
  1865 ;; Auto vars:     Size  Location     Type
  1866 ;;		None
  1867 ;; Return value:  Size  Location     Type
  1868 ;;                  1    wreg      void 
  1869 ;; Registers used:
  1870 ;;		wreg, status,2
  1871 ;; Tracked objects:
  1872 ;;		On entry : B1F/0
  1873 ;;		On exit  : B1F/2
  1874 ;;		Unchanged: B00/0
  1875 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1876 ;;      Params:         0       0       0       0
  1877 ;;      Locals:         0       0       0       0
  1878 ;;      Temps:          0       0       0       0
  1879 ;;      Totals:         0       0       0       0
  1880 ;;Total ram usage:        0 bytes
  1881 ;; Hardware stack levels used:    1
  1882 ;; Hardware stack levels required when called:    4
  1883 ;; This function calls:
  1884 ;;		Nothing
  1885 ;; This function is called by:
  1886 ;;		_SYSTEM_Initialize
  1887 ;; This function uses a non-reentrant model
  1888 ;;
  1889                           
  1890                           
  1891                           ;psect for function _OSCILLATOR_Initialize
  1892  01CE                     _OSCILLATOR_Initialize:	
  1893                           
  1894                           ;mcc.c: 80: OSCCON = 0x78;
  1895                           
  1896                           ;incstack = 0
  1897                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  1898  01CE  3078               	movlw	120
  1899  01CF  0021               	movlb	1	; select bank1
  1900  01D0  0099               	movwf	25	;volatile
  1901                           
  1902                           ;mcc.c: 82: OSCTUNE = 0x00;
  1903  01D1  0198               	clrf	24	;volatile
  1904                           
  1905                           ;mcc.c: 84: BORCON = 0x00;
  1906  01D2  0022               	movlb	2	; select bank2
  1907  01D3  0196               	clrf	22	;volatile
  1908  01D4  0008               	return
  1909  01D5                     __end_of_OSCILLATOR_Initialize:	
  1910                           
  1911                           	psect	text10
  1912  008C                     __ptext10:	
  1913 ;; *************** function _RunRightFlash *****************
  1914 ;; Defined at:
  1915 ;;		line 193 in file "main.c"
  1916 ;; Parameters:    Size  Location     Type
  1917 ;;		None
  1918 ;; Auto vars:     Size  Location     Type
  1919 ;;		None
  1920 ;; Return value:  Size  Location     Type
  1921 ;;                  1    wreg      void 
  1922 ;; Registers used:
  1923 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1924 ;; Tracked objects:
  1925 ;;		On entry : 1F/0
  1926 ;;		On exit  : 1F/0
  1927 ;;		Unchanged: 0/0
  1928 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1929 ;;      Params:         0       0       0       0
  1930 ;;      Locals:         0       0       0       0
  1931 ;;      Temps:          0       0       0       0
  1932 ;;      Totals:         0       0       0       0
  1933 ;;Total ram usage:        0 bytes
  1934 ;; Hardware stack levels used:    1
  1935 ;; Hardware stack levels required when called:    5
  1936 ;; This function calls:
  1937 ;;		_RightButtonPressed
  1938 ;;		_SetLEDOff
  1939 ;;		_SetLEDOn
  1940 ;; This function is called by:
  1941 ;;		_main
  1942 ;; This function uses a non-reentrant model
  1943 ;;
  1944                           
  1945                           
  1946                           ;psect for function _RunRightFlash
  1947  008C                     _RunRightFlash:	
  1948                           
  1949                           ;main.c: 195: if (PatternState[0])
  1950                           
  1951                           ;incstack = 0
  1952                           ; Regs used in _RunRightFlash: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1953  008C  0830               	movf	_PatternState,w	;volatile
  1954  008D  1903               	btfsc	3,2
  1955  008E  0008               	return
  1956                           
  1957                           ;main.c: 196: {
  1958                           ;main.c: 197: if (PatternDelay[0] == 0)
  1959  008F  0820               	movf	_PatternDelay,w	;volatile
  1960  0090  0421               	iorwf	_PatternDelay+1,w	;volatile
  1961  0091  1D03               	btfss	3,2
  1962  0092  0008               	return
  1963  0093  28C3               	goto	l1375
  1964  0094                     l1359:	
  1965                           
  1966                           ;main.c: 206: SetLEDOn(0x01);
  1967  0094  3001               	movlw	1
  1968  0095  2227               	fcall	_SetLEDOn
  1969                           
  1970                           ;main.c: 207: SetLEDOff(0x02);
  1971  0096  3002               	movlw	2
  1972  0097  2223               	fcall	_SetLEDOff
  1973                           
  1974                           ;main.c: 208: SetLEDOff(0x04);
  1975  0098  3004               	movlw	4
  1976  0099  2223               	fcall	_SetLEDOff
  1977                           
  1978                           ;main.c: 209: SetLEDOff(0x08);
  1979  009A  3008               	movlw	8
  1980  009B  2223               	fcall	_SetLEDOff
  1981                           
  1982                           ;main.c: 210: break;
  1983  009C  28CD               	goto	l1377
  1984  009D                     l1361:	
  1985                           
  1986                           ;main.c: 213: SetLEDOff(0x01);
  1987  009D  3001               	movlw	1
  1988  009E  2223               	fcall	_SetLEDOff
  1989                           
  1990                           ;main.c: 214: SetLEDOn(0x02);
  1991  009F  3002               	movlw	2
  1992  00A0  2227               	fcall	_SetLEDOn
  1993                           
  1994                           ;main.c: 215: SetLEDOff(0x04);
  1995  00A1  3004               	movlw	4
  1996  00A2  2223               	fcall	_SetLEDOff
  1997                           
  1998                           ;main.c: 216: SetLEDOff(0x08);
  1999  00A3  3008               	movlw	8
  2000  00A4  2223               	fcall	_SetLEDOff
  2001                           
  2002                           ;main.c: 217: break;
  2003  00A5  28CD               	goto	l1377
  2004  00A6                     l1363:	
  2005                           
  2006                           ;main.c: 220: SetLEDOff(0x01);
  2007  00A6  3001               	movlw	1
  2008  00A7  2223               	fcall	_SetLEDOff
  2009                           
  2010                           ;main.c: 221: SetLEDOff(0x02);
  2011  00A8  3002               	movlw	2
  2012  00A9  2223               	fcall	_SetLEDOff
  2013                           
  2014                           ;main.c: 222: SetLEDOn(0x04);
  2015  00AA  3004               	movlw	4
  2016  00AB  2227               	fcall	_SetLEDOn
  2017                           
  2018                           ;main.c: 223: SetLEDOff(0x08);
  2019  00AC  3008               	movlw	8
  2020  00AD  2223               	fcall	_SetLEDOff
  2021                           
  2022                           ;main.c: 224: break;
  2023  00AE  28CD               	goto	l1377
  2024  00AF                     l1365:	
  2025                           
  2026                           ;main.c: 227: SetLEDOff(0x01);
  2027  00AF  3001               	movlw	1
  2028  00B0  2223               	fcall	_SetLEDOff
  2029                           
  2030                           ;main.c: 228: SetLEDOff(0x02);
  2031  00B1  3002               	movlw	2
  2032  00B2  2223               	fcall	_SetLEDOff
  2033                           
  2034                           ;main.c: 229: SetLEDOff(0x04);
  2035  00B3  3004               	movlw	4
  2036  00B4  2223               	fcall	_SetLEDOff
  2037                           
  2038                           ;main.c: 230: SetLEDOn(0x08);
  2039  00B5  3008               	movlw	8
  2040  00B6  2227               	fcall	_SetLEDOn
  2041                           
  2042                           ;main.c: 231: break;
  2043  00B7  28CD               	goto	l1377
  2044  00B8                     l1367:	
  2045                           
  2046                           ;main.c: 234: SetLEDOff(0x01);
  2047  00B8  3001               	movlw	1
  2048  00B9  2223               	fcall	_SetLEDOff
  2049                           
  2050                           ;main.c: 235: SetLEDOff(0x02);
  2051  00BA  3002               	movlw	2
  2052  00BB  2223               	fcall	_SetLEDOff
  2053                           
  2054                           ;main.c: 236: SetLEDOff(0x04);
  2055  00BC  3004               	movlw	4
  2056  00BD  2223               	fcall	_SetLEDOff
  2057                           
  2058                           ;main.c: 237: SetLEDOff(0x08);
  2059  00BE  3008               	movlw	8
  2060  00BF  2223               	fcall	_SetLEDOff
  2061                           
  2062                           ;main.c: 238: PatternState[0] = 0;
  2063  00C0  0020               	movlb	0	; select bank0
  2064  00C1                     l1371:	
  2065                           ;main.c: 239: break;
  2066                           
  2067                           
  2068                           ;main.c: 242: PatternState[0] = 0;
  2069  00C1  01B0               	clrf	_PatternState	;volatile
  2070                           
  2071                           ;main.c: 243: break;
  2072  00C2  28CD               	goto	l1377
  2073  00C3                     l1375:	
  2074  00C3  0830               	movf	_PatternState,w	;volatile
  2075                           
  2076                           ; Switch size 1, requested type "space"
  2077                           ; Number of cases is 6, Range of values is 0 to 5
  2078                           ; switch strategies available:
  2079                           ; Name         Instructions Cycles
  2080                           ; direct_byte           18     6 (fixed)
  2081                           ; simple_byte           19    10 (average)
  2082                           ; jumptable            260     6 (fixed)
  2083                           ;	Chosen strategy is direct_byte
  2084  00C4  0084               	movwf	4
  2085  00C5  3006               	movlw	6
  2086  00C6  0204               	subwf	4,w
  2087  00C7  1803               	skipnc
  2088  00C8  28C1               	goto	l1371
  2089  00C9  3181               	movlp	high S1531
  2090  00CA  30F5               	movlw	low S1531
  2091  00CB  0704               	addwf	4,w
  2092  00CC  0082               	movwf	2
  2093  00CD                     l1377:	
  2094                           
  2095                           ;main.c: 247: if (PatternState[0] != 0)
  2096  00CD  0020               	movlb	0	; select bank0
  2097  00CE  0830               	movf	_PatternState,w	;volatile
  2098  00CF  1903               	btfsc	3,2
  2099  00D0  0008               	return
  2100                           
  2101                           ;main.c: 248: {
  2102                           ;main.c: 249: if ((PatternState[0] == 4) && RightButtonPressed())
  2103  00D1  3004               	movlw	4
  2104  00D2  0630               	xorwf	_PatternState,w	;volatile
  2105  00D3  1D03               	btfss	3,2
  2106  00D4  28DC               	goto	l1385
  2107  00D5  2206               	fcall	_RightButtonPressed
  2108  00D6  3A00               	xorlw	0
  2109  00D7  1903               	skipnz
  2110  00D8  28DC               	goto	l1385
  2111                           
  2112                           ;main.c: 250: {
  2113                           ;main.c: 251: PatternState[0] = 1;
  2114  00D9  3001               	movlw	1
  2115  00DA  00B0               	movwf	_PatternState	;volatile
  2116                           
  2117                           ;main.c: 252: }
  2118  00DB  28DD               	goto	l1387
  2119  00DC                     l1385:	
  2120                           
  2121                           ;main.c: 253: else
  2122                           ;main.c: 254: {
  2123                           ;main.c: 255: PatternState[0]++;
  2124  00DC  0AB0               	incf	_PatternState,f	;volatile
  2125  00DD                     l1387:	
  2126                           
  2127                           ;main.c: 256: }
  2128                           ;main.c: 257: PatternDelay[0] = 1000;
  2129  00DD  30E8               	movlw	232
  2130  00DE  00A0               	movwf	_PatternDelay	;volatile
  2131  00DF  3003               	movlw	3
  2132  00E0  00A1               	movwf	_PatternDelay+1	;volatile
  2133  00E1  0008               	return
  2134  00E2                     __end_of_RunRightFlash:	
  2135                           
  2136                           	psect	swtext1
  2137  01F5                     __pswtext1:	
  2138  01F5                     S1531:	
  2139  01F5  28CD               	ljmp	l1377
  2140  01F6  2894               	ljmp	l1359
  2141  01F7  289D               	ljmp	l1361
  2142  01F8  28A6               	ljmp	l1363
  2143  01F9  28AF               	ljmp	l1365
  2144  01FA  28B8               	ljmp	l1367
  2145                           
  2146                           	psect	text11
  2147  0029                     __ptext11:	
  2148 ;; *************** function _RunLeftFlash *****************
  2149 ;; Defined at:
  2150 ;;		line 263 in file "main.c"
  2151 ;; Parameters:    Size  Location     Type
  2152 ;;		None
  2153 ;; Auto vars:     Size  Location     Type
  2154 ;;		None
  2155 ;; Return value:  Size  Location     Type
  2156 ;;                  1    wreg      void 
  2157 ;; Registers used:
  2158 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2159 ;; Tracked objects:
  2160 ;;		On entry : 1F/0
  2161 ;;		On exit  : 1F/0
  2162 ;;		Unchanged: 0/0
  2163 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2164 ;;      Params:         0       0       0       0
  2165 ;;      Locals:         0       0       0       0
  2166 ;;      Temps:          0       0       0       0
  2167 ;;      Totals:         0       0       0       0
  2168 ;;Total ram usage:        0 bytes
  2169 ;; Hardware stack levels used:    1
  2170 ;; Hardware stack levels required when called:    5
  2171 ;; This function calls:
  2172 ;;		_LeftButtonPressed
  2173 ;;		_SetLEDOff
  2174 ;;		_SetLEDOn
  2175 ;; This function is called by:
  2176 ;;		_main
  2177 ;; This function uses a non-reentrant model
  2178 ;;
  2179                           
  2180                           
  2181                           ;psect for function _RunLeftFlash
  2182  0029                     _RunLeftFlash:	
  2183                           
  2184                           ;main.c: 265: static uint16_t delay = 1000;
  2185                           ;main.c: 267: if (PatternDelay[1] == 0)
  2186                           
  2187                           ;incstack = 0
  2188                           ; Regs used in _RunLeftFlash: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2189  0029  0822               	movf	_PatternDelay+2,w	;volatile
  2190  002A  0423               	iorwf	_PatternDelay+3,w	;volatile
  2191  002B  1D03               	btfss	3,2
  2192  002C  0008               	return
  2193  002D  2862               	goto	l1415
  2194  002E                     l1397:	
  2195                           
  2196                           ;main.c: 273: delay = 1000;
  2197  002E  30E8               	movlw	232
  2198  002F  00C8               	movwf	RunLeftFlash@delay
  2199  0030  3003               	movlw	3
  2200  0031  00C9               	movwf	RunLeftFlash@delay+1
  2201                           
  2202                           ;main.c: 274: break;
  2203  0032  286C               	goto	l1417
  2204  0033                     l1399:	
  2205                           
  2206                           ;main.c: 277: SetLEDOn(0x80);
  2207  0033  3080               	movlw	128
  2208  0034  2227               	fcall	_SetLEDOn
  2209                           
  2210                           ;main.c: 278: SetLEDOff(0x40);
  2211  0035  3040               	movlw	64
  2212  0036  2223               	fcall	_SetLEDOff
  2213                           
  2214                           ;main.c: 279: SetLEDOff(0x20);
  2215  0037  3020               	movlw	32
  2216  0038  2223               	fcall	_SetLEDOff
  2217                           
  2218                           ;main.c: 280: SetLEDOff(0x10);
  2219  0039  3010               	movlw	16
  2220  003A  2223               	fcall	_SetLEDOff
  2221                           
  2222                           ;main.c: 281: break;
  2223  003B  286C               	goto	l1417
  2224  003C                     l1401:	
  2225                           
  2226                           ;main.c: 284: SetLEDOff(0x80);
  2227  003C  3080               	movlw	128
  2228  003D  2223               	fcall	_SetLEDOff
  2229                           
  2230                           ;main.c: 285: SetLEDOn(0x40);
  2231  003E  3040               	movlw	64
  2232  003F  2227               	fcall	_SetLEDOn
  2233                           
  2234                           ;main.c: 286: SetLEDOff(0x20);
  2235  0040  3020               	movlw	32
  2236  0041  2223               	fcall	_SetLEDOff
  2237                           
  2238                           ;main.c: 287: SetLEDOff(0x10);
  2239  0042  3010               	movlw	16
  2240  0043  2223               	fcall	_SetLEDOff
  2241                           
  2242                           ;main.c: 288: break;
  2243  0044  286C               	goto	l1417
  2244  0045                     l1403:	
  2245                           
  2246                           ;main.c: 291: SetLEDOff(0x80);
  2247  0045  3080               	movlw	128
  2248  0046  2223               	fcall	_SetLEDOff
  2249                           
  2250                           ;main.c: 292: SetLEDOff(0x40);
  2251  0047  3040               	movlw	64
  2252  0048  2223               	fcall	_SetLEDOff
  2253                           
  2254                           ;main.c: 293: SetLEDOn(0x20);
  2255  0049  3020               	movlw	32
  2256  004A  2227               	fcall	_SetLEDOn
  2257                           
  2258                           ;main.c: 294: SetLEDOff(0x10);
  2259  004B  3010               	movlw	16
  2260  004C  2223               	fcall	_SetLEDOff
  2261                           
  2262                           ;main.c: 295: break;
  2263  004D  286C               	goto	l1417
  2264  004E                     l1405:	
  2265                           
  2266                           ;main.c: 298: SetLEDOff(0x80);
  2267  004E  3080               	movlw	128
  2268  004F  2223               	fcall	_SetLEDOff
  2269                           
  2270                           ;main.c: 299: SetLEDOff(0x40);
  2271  0050  3040               	movlw	64
  2272  0051  2223               	fcall	_SetLEDOff
  2273                           
  2274                           ;main.c: 300: SetLEDOff(0x20);
  2275  0052  3020               	movlw	32
  2276  0053  2223               	fcall	_SetLEDOff
  2277                           
  2278                           ;main.c: 301: SetLEDOn(0x10);
  2279  0054  3010               	movlw	16
  2280  0055  2227               	fcall	_SetLEDOn
  2281                           
  2282                           ;main.c: 302: break;
  2283  0056  286C               	goto	l1417
  2284  0057                     l1407:	
  2285                           
  2286                           ;main.c: 305: SetLEDOff(0x80);
  2287  0057  3080               	movlw	128
  2288  0058  2223               	fcall	_SetLEDOff
  2289                           
  2290                           ;main.c: 306: SetLEDOff(0x40);
  2291  0059  3040               	movlw	64
  2292  005A  2223               	fcall	_SetLEDOff
  2293                           
  2294                           ;main.c: 307: SetLEDOff(0x20);
  2295  005B  3020               	movlw	32
  2296  005C  2223               	fcall	_SetLEDOff
  2297                           
  2298                           ;main.c: 308: SetLEDOff(0x10);
  2299  005D  3010               	movlw	16
  2300  005E  2223               	fcall	_SetLEDOff
  2301  005F                     l1409:	
  2302                           
  2303                           ;main.c: 309: PatternState[1] = 0;
  2304  005F  0020               	movlb	0	; select bank0
  2305  0060  01B1               	clrf	_PatternState+1	;volatile
  2306                           
  2307                           ;main.c: 310: break;
  2308  0061  286C               	goto	l1417
  2309  0062                     l1415:	
  2310  0062  0831               	movf	_PatternState+1,w	;volatile
  2311                           
  2312                           ; Switch size 1, requested type "space"
  2313                           ; Number of cases is 6, Range of values is 0 to 5
  2314                           ; switch strategies available:
  2315                           ; Name         Instructions Cycles
  2316                           ; direct_byte           18     6 (fixed)
  2317                           ; simple_byte           19    10 (average)
  2318                           ; jumptable            260     6 (fixed)
  2319                           ;	Chosen strategy is direct_byte
  2320  0063  0084               	movwf	4
  2321  0064  3006               	movlw	6
  2322  0065  0204               	subwf	4,w
  2323  0066  1803               	skipnc
  2324  0067  285F               	goto	l1409
  2325  0068  3182               	movlp	high S1533
  2326  0069  3000               	movlw	low S1533
  2327  006A  0704               	addwf	4,w
  2328  006B  0082               	movwf	2
  2329  006C                     l1417:	
  2330                           
  2331                           ;main.c: 318: if (PatternState[1] != 0)
  2332  006C  0020               	movlb	0	; select bank0
  2333  006D  0831               	movf	_PatternState+1,w	;volatile
  2334  006E  1903               	btfsc	3,2
  2335  006F  0008               	return
  2336                           
  2337                           ;main.c: 319: {
  2338                           ;main.c: 320: if ((PatternState[1] == 4) && LeftButtonPressed())
  2339  0070  3004               	movlw	4
  2340  0071  0631               	xorwf	_PatternState+1,w	;volatile
  2341  0072  1D03               	btfss	3,2
  2342  0073  2886               	goto	l1427
  2343  0074  21D5               	fcall	_LeftButtonPressed
  2344  0075  3A00               	xorlw	0
  2345  0076  1903               	skipnz
  2346  0077  2886               	goto	l1427
  2347                           
  2348                           ;main.c: 321: {
  2349                           ;main.c: 322: PatternState[1] = 1;
  2350  0078  3001               	movlw	1
  2351  0079  00B1               	movwf	_PatternState+1	;volatile
  2352                           
  2353                           ;main.c: 323: if (delay > 50)
  2354  007A  3000               	movlw	0
  2355  007B  0249               	subwf	RunLeftFlash@delay+1,w
  2356  007C  3033               	movlw	51
  2357  007D  1903               	skipnz
  2358  007E  0248               	subwf	RunLeftFlash@delay,w
  2359  007F  1C03               	skipc
  2360  0080  2887               	goto	l1429
  2361                           
  2362                           ;main.c: 324: {
  2363                           ;main.c: 325: delay -= 15;
  2364  0081  300F               	movlw	15
  2365  0082  02C8               	subwf	RunLeftFlash@delay,f
  2366  0083  3000               	movlw	0
  2367  0084  3BC9               	subwfb	RunLeftFlash@delay+1,f
  2368  0085  2887               	goto	l1429
  2369  0086                     l1427:	
  2370                           
  2371                           ;main.c: 328: else
  2372                           ;main.c: 329: {
  2373                           ;main.c: 330: PatternState[1]++;
  2374  0086  0AB1               	incf	_PatternState+1,f	;volatile
  2375  0087                     l1429:	
  2376                           
  2377                           ;main.c: 331: }
  2378                           ;main.c: 332: PatternDelay[1] = delay;
  2379  0087  0849               	movf	RunLeftFlash@delay+1,w
  2380  0088  00A3               	movwf	_PatternDelay+3	;volatile
  2381  0089  0848               	movf	RunLeftFlash@delay,w
  2382  008A  00A2               	movwf	_PatternDelay+2	;volatile
  2383  008B  0008               	return
  2384  008C                     __end_of_RunLeftFlash:	
  2385                           
  2386                           	psect	swtext2
  2387  0200                     __pswtext2:	
  2388  0200                     S1533:	
  2389  0200  282E               	ljmp	l1397
  2390  0201  2833               	ljmp	l1399
  2391  0202  283C               	ljmp	l1401
  2392  0203  2845               	ljmp	l1403
  2393  0204  284E               	ljmp	l1405
  2394  0205  2857               	ljmp	l1407
  2395                           
  2396                           	psect	text12
  2397  0227                     __ptext12:	
  2398 ;; *************** function _SetLEDOn *****************
  2399 ;; Defined at:
  2400 ;;		line 131 in file "main.c"
  2401 ;; Parameters:    Size  Location     Type
  2402 ;;  LED             1    wreg     unsigned char 
  2403 ;; Auto vars:     Size  Location     Type
  2404 ;;  LED             1    3[COMMON] unsigned char 
  2405 ;; Return value:  Size  Location     Type
  2406 ;;                  1    wreg      void 
  2407 ;; Registers used:
  2408 ;;		wreg, status,2, status,0
  2409 ;; Tracked objects:
  2410 ;;		On entry : 0/0
  2411 ;;		On exit  : 0/0
  2412 ;;		Unchanged: 0/0
  2413 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2414 ;;      Params:         0       0       0       0
  2415 ;;      Locals:         1       0       0       0
  2416 ;;      Temps:          0       0       0       0
  2417 ;;      Totals:         1       0       0       0
  2418 ;;Total ram usage:        1 bytes
  2419 ;; Hardware stack levels used:    1
  2420 ;; Hardware stack levels required when called:    4
  2421 ;; This function calls:
  2422 ;;		Nothing
  2423 ;; This function is called by:
  2424 ;;		_RunRightFlash
  2425 ;;		_RunLeftFlash
  2426 ;; This function uses a non-reentrant model
  2427 ;;
  2428                           
  2429                           
  2430                           ;psect for function _SetLEDOn
  2431  0227                     _SetLEDOn:	
  2432                           
  2433                           ;incstack = 0
  2434                           ; Regs used in _SetLEDOn: [wreg+status,2+status,0]
  2435                           ;SetLEDOn@LED stored from wreg
  2436  0227  00F3               	movwf	SetLEDOn@LED
  2437                           
  2438                           ;main.c: 133: LEDOns = (uint8_t)(LEDOns | LED);
  2439  0228  04F7               	iorwf	_LEDOns,f	;volatile
  2440  0229  0008               	return
  2441  022A                     __end_of_SetLEDOn:	
  2442                           
  2443                           	psect	text13
  2444  0223                     __ptext13:	
  2445 ;; *************** function _SetLEDOff *****************
  2446 ;; Defined at:
  2447 ;;		line 136 in file "main.c"
  2448 ;; Parameters:    Size  Location     Type
  2449 ;;  LED             1    wreg     unsigned char 
  2450 ;; Auto vars:     Size  Location     Type
  2451 ;;  LED             1    3[COMMON] unsigned char 
  2452 ;; Return value:  Size  Location     Type
  2453 ;;                  1    wreg      void 
  2454 ;; Registers used:
  2455 ;;		wreg, status,2, status,0
  2456 ;; Tracked objects:
  2457 ;;		On entry : 0/0
  2458 ;;		On exit  : 0/0
  2459 ;;		Unchanged: 0/0
  2460 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2461 ;;      Params:         0       0       0       0
  2462 ;;      Locals:         1       0       0       0
  2463 ;;      Temps:          0       0       0       0
  2464 ;;      Totals:         1       0       0       0
  2465 ;;Total ram usage:        1 bytes
  2466 ;; Hardware stack levels used:    1
  2467 ;; Hardware stack levels required when called:    4
  2468 ;; This function calls:
  2469 ;;		Nothing
  2470 ;; This function is called by:
  2471 ;;		_RunRightFlash
  2472 ;;		_RunLeftFlash
  2473 ;; This function uses a non-reentrant model
  2474 ;;
  2475                           
  2476                           
  2477                           ;psect for function _SetLEDOff
  2478  0223                     _SetLEDOff:	
  2479                           
  2480                           ;incstack = 0
  2481                           ; Regs used in _SetLEDOff: [wreg+status,2+status,0]
  2482                           ;SetLEDOff@LED stored from wreg
  2483  0223  00F3               	movwf	SetLEDOff@LED
  2484                           
  2485                           ;main.c: 138: LEDOns = (uint8_t)(LEDOns & ~LED);
  2486  0224  0973               	comf	SetLEDOff@LED,w
  2487  0225  05F7               	andwf	_LEDOns,f	;volatile
  2488  0226  0008               	return
  2489  0227                     __end_of_SetLEDOff:	
  2490                           
  2491                           	psect	text14
  2492  0172                     __ptext14:	
  2493 ;; *************** function _CheckForButtonPushes *****************
  2494 ;; Defined at:
  2495 ;;		line 337 in file "main.c"
  2496 ;; Parameters:    Size  Location     Type
  2497 ;;		None
  2498 ;; Auto vars:     Size  Location     Type
  2499 ;;		None
  2500 ;; Return value:  Size  Location     Type
  2501 ;;                  1    wreg      void 
  2502 ;; Registers used:
  2503 ;;		wreg, status,2, status,0, pclath, cstack
  2504 ;; Tracked objects:
  2505 ;;		On entry : 0/0
  2506 ;;		On exit  : 1F/0
  2507 ;;		Unchanged: 0/0
  2508 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2509 ;;      Params:         0       0       0       0
  2510 ;;      Locals:         0       0       0       0
  2511 ;;      Temps:          0       0       0       0
  2512 ;;      Totals:         0       0       0       0
  2513 ;;Total ram usage:        0 bytes
  2514 ;; Hardware stack levels used:    1
  2515 ;; Hardware stack levels required when called:    5
  2516 ;; This function calls:
  2517 ;;		_LeftButtonPressed
  2518 ;;		_RightButtonPressed
  2519 ;; This function is called by:
  2520 ;;		_main
  2521 ;; This function uses a non-reentrant model
  2522 ;;
  2523                           
  2524                           
  2525                           ;psect for function _CheckForButtonPushes
  2526  0172                     _CheckForButtonPushes:	
  2527                           
  2528                           ;main.c: 339: static bool LastLeftButtonState = 0;
  2529                           ;main.c: 340: static bool LastRightButtonState = 0;
  2530                           ;main.c: 343: if (LeftButtonPressed())
  2531                           
  2532                           ;incstack = 0
  2533                           ; Regs used in _CheckForButtonPushes: [wreg+status,2+status,0+pclath+cstack]
  2534  0172  21D5               	fcall	_LeftButtonPressed
  2535  0173  3A00               	xorlw	0
  2536  0174  1903               	skipnz
  2537  0175  297E               	goto	l1443
  2538                           
  2539                           ;main.c: 344: {
  2540                           ;main.c: 345: if (LastLeftButtonState == 0)
  2541  0176  0876               	movf	CheckForButtonPushes@LastLeftButtonState,w
  2542  0177  1D03               	btfss	3,2
  2543  0178  297B               	goto	l1441
  2544                           
  2545                           ;main.c: 346: {
  2546                           ;main.c: 347: PatternState[1] = 1;
  2547  0179  3001               	movlw	1
  2548  017A  00B1               	movwf	_PatternState+1	;volatile
  2549  017B                     l1441:	
  2550                           
  2551                           ;main.c: 348: }
  2552                           ;main.c: 349: LastLeftButtonState = 1;
  2553  017B  01F6               	clrf	CheckForButtonPushes@LastLeftButtonState
  2554  017C  0AF6               	incf	CheckForButtonPushes@LastLeftButtonState,f
  2555                           
  2556                           ;main.c: 350: }
  2557  017D  297F               	goto	l1445
  2558  017E                     l1443:	
  2559                           
  2560                           ;main.c: 351: else
  2561                           ;main.c: 352: {
  2562                           ;main.c: 353: LastLeftButtonState = 0;
  2563  017E  01F6               	clrf	CheckForButtonPushes@LastLeftButtonState
  2564  017F                     l1445:	
  2565                           
  2566                           ;main.c: 354: }
  2567                           ;main.c: 357: if (RightButtonPressed())
  2568  017F  2206               	fcall	_RightButtonPressed
  2569  0180  3A00               	xorlw	0
  2570  0181  1903               	skipnz
  2571  0182  298B               	goto	l1453
  2572                           
  2573                           ;main.c: 358: {
  2574                           ;main.c: 359: if (LastRightButtonState == 0)
  2575  0183  0875               	movf	CheckForButtonPushes@LastRightButtonState,w
  2576  0184  1D03               	btfss	3,2
  2577  0185  2988               	goto	l1451
  2578                           
  2579                           ;main.c: 360: {
  2580                           ;main.c: 361: PatternState[0] = 1;
  2581  0186  3001               	movlw	1
  2582  0187  00B0               	movwf	_PatternState	;volatile
  2583  0188                     l1451:	
  2584                           
  2585                           ;main.c: 362: }
  2586                           ;main.c: 363: LastRightButtonState = 1;
  2587  0188  01F5               	clrf	CheckForButtonPushes@LastRightButtonState
  2588  0189  0AF5               	incf	CheckForButtonPushes@LastRightButtonState,f
  2589                           
  2590                           ;main.c: 364: }
  2591  018A  0008               	return
  2592  018B                     l1453:	
  2593                           
  2594                           ;main.c: 365: else
  2595                           ;main.c: 366: {
  2596                           ;main.c: 367: LastRightButtonState = 0;
  2597  018B  01F5               	clrf	CheckForButtonPushes@LastRightButtonState
  2598  018C  0008               	return
  2599  018D                     __end_of_CheckForButtonPushes:	
  2600                           
  2601                           	psect	text15
  2602  0206                     __ptext15:	
  2603 ;; *************** function _RightButtonPressed *****************
  2604 ;; Defined at:
  2605 ;;		line 183 in file "main.c"
  2606 ;; Parameters:    Size  Location     Type
  2607 ;;		None
  2608 ;; Auto vars:     Size  Location     Type
  2609 ;;		None
  2610 ;; Return value:  Size  Location     Type
  2611 ;;                  1    wreg      unsigned char 
  2612 ;; Registers used:
  2613 ;;		wreg, status,0
  2614 ;; Tracked objects:
  2615 ;;		On entry : 1F/0
  2616 ;;		On exit  : 1F/0
  2617 ;;		Unchanged: 0/0
  2618 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2619 ;;      Params:         0       0       0       0
  2620 ;;      Locals:         0       0       0       0
  2621 ;;      Temps:          0       0       0       0
  2622 ;;      Totals:         0       0       0       0
  2623 ;;Total ram usage:        0 bytes
  2624 ;; Hardware stack levels used:    1
  2625 ;; Hardware stack levels required when called:    4
  2626 ;; This function calls:
  2627 ;;		Nothing
  2628 ;; This function is called by:
  2629 ;;		_RunRightFlash
  2630 ;;		_CheckForButtonPushes
  2631 ;; This function uses a non-reentrant model
  2632 ;;
  2633                           
  2634                           
  2635                           ;psect for function _RightButtonPressed
  2636  0206                     _RightButtonPressed:	
  2637                           
  2638                           ;main.c: 185: return (PORTAbits.RA3 == 0);
  2639                           
  2640                           ;incstack = 0
  2641                           ; Regs used in _RightButtonPressed: [wreg+status,0]
  2642  0206  1003               	clrc
  2643  0207  1D8C               	btfss	12,3	;volatile
  2644  0208  1403               	setc
  2645  0209  3000               	movlw	0
  2646  020A  3D09               	addwfc	9,w
  2647  020B  0008               	return
  2648  020C                     __end_of_RightButtonPressed:	
  2649                           
  2650                           	psect	text16
  2651  01D5                     __ptext16:	
  2652 ;; *************** function _LeftButtonPressed *****************
  2653 ;; Defined at:
  2654 ;;		line 188 in file "main.c"
  2655 ;; Parameters:    Size  Location     Type
  2656 ;;		None
  2657 ;; Auto vars:     Size  Location     Type
  2658 ;;		None
  2659 ;; Return value:  Size  Location     Type
  2660 ;;                  1    wreg      unsigned char 
  2661 ;; Registers used:
  2662 ;;		wreg, status,0
  2663 ;; Tracked objects:
  2664 ;;		On entry : 0/0
  2665 ;;		On exit  : 1F/0
  2666 ;;		Unchanged: 0/0
  2667 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2668 ;;      Params:         0       0       0       0
  2669 ;;      Locals:         0       0       0       0
  2670 ;;      Temps:          0       0       0       0
  2671 ;;      Totals:         0       0       0       0
  2672 ;;Total ram usage:        0 bytes
  2673 ;; Hardware stack levels used:    1
  2674 ;; Hardware stack levels required when called:    4
  2675 ;; This function calls:
  2676 ;;		Nothing
  2677 ;; This function is called by:
  2678 ;;		_RunLeftFlash
  2679 ;;		_CheckForButtonPushes
  2680 ;; This function uses a non-reentrant model
  2681 ;;
  2682                           
  2683                           
  2684                           ;psect for function _LeftButtonPressed
  2685  01D5                     _LeftButtonPressed:	
  2686                           
  2687                           ;main.c: 190: return (PORTAbits.RA2 == 0);
  2688                           
  2689                           ;incstack = 0
  2690                           ; Regs used in _LeftButtonPressed: [wreg+status,0]
  2691  01D5  1003               	clrc
  2692  01D6  0020               	movlb	0	; select bank0
  2693  01D7  1D0C               	btfss	12,2	;volatile
  2694  01D8  1403               	setc
  2695  01D9  3000               	movlw	0
  2696  01DA  3D09               	addwfc	9,w
  2697  01DB  0008               	return
  2698  01DC                     __end_of_LeftButtonPressed:	
  2699                           
  2700                           	psect	intentry
  2701  0004                     __pintentry:	
  2702 ;; *************** function _INTERRUPT_InterruptManager *****************
  2703 ;; Defined at:
  2704 ;;		line 51 in file "mcc_generated_files/interrupt_manager.c"
  2705 ;; Parameters:    Size  Location     Type
  2706 ;;		None
  2707 ;; Auto vars:     Size  Location     Type
  2708 ;;		None
  2709 ;; Return value:  Size  Location     Type
  2710 ;;                  1    wreg      void 
  2711 ;; Registers used:
  2712 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2713 ;; Tracked objects:
  2714 ;;		On entry : 0/0
  2715 ;;		On exit  : 0/0
  2716 ;;		Unchanged: 0/0
  2717 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2718 ;;      Params:         0       0       0       0
  2719 ;;      Locals:         0       0       0       0
  2720 ;;      Temps:          0       0       0       0
  2721 ;;      Totals:         0       0       0       0
  2722 ;;Total ram usage:        0 bytes
  2723 ;; Hardware stack levels used:    1
  2724 ;; Hardware stack levels required when called:    3
  2725 ;; This function calls:
  2726 ;;		_PIN_MANAGER_IOC
  2727 ;;		_TMR0_ISR
  2728 ;; This function is called by:
  2729 ;;		Interrupt level 1
  2730 ;; This function uses a non-reentrant model
  2731 ;;
  2732                           
  2733  0004                     _INTERRUPT_InterruptManager:	
  2734                           
  2735                           ;incstack = 0
  2736  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  2737                           
  2738                           ; Regs used in _INTERRUPT_InterruptManager: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  2739  0005  3180               	pagesel	$
  2740                           
  2741                           ;interrupt_manager.c: 54: if(INTCONbits.TMR0IE == 1 && INTCONbits.TMR0IF == 1)
  2742  0006  1A8B               	btfsc	11,5	;volatile
  2743  0007  1D0B               	btfss	11,2	;volatile
  2744  0008  280B               	goto	i1l102
  2745                           
  2746                           ;interrupt_manager.c: 55: {
  2747                           ;interrupt_manager.c: 56: TMR0_ISR();
  2748  0009  2216               	fcall	_TMR0_ISR
  2749                           
  2750                           ;interrupt_manager.c: 57: }
  2751  000A  280F               	goto	i1l106
  2752  000B                     i1l102:	
  2753                           
  2754                           ;interrupt_manager.c: 58: else if(INTCONbits.IOCIE == 1 && INTCONbits.IOCIF == 1)
  2755  000B  198B               	btfsc	11,3	;volatile
  2756  000C  1C0B               	btfss	11,0	;volatile
  2757  000D  280F               	goto	i1l106
  2758                           
  2759                           ;interrupt_manager.c: 59: {
  2760                           ;interrupt_manager.c: 60: PIN_MANAGER_IOC();
  2761  000E  21DC               	fcall	_PIN_MANAGER_IOC
  2762  000F                     i1l106:	
  2763                           ;interrupt_manager.c: 61: }
  2764                           
  2765  000F  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  2766  0010  0009               	retfie
  2767  0011                     __end_of_INTERRUPT_InterruptManager:	
  2768                           
  2769                           	psect	text18
  2770  0216                     __ptext18:	
  2771 ;; *************** function _TMR0_ISR *****************
  2772 ;; Defined at:
  2773 ;;		line 109 in file "mcc_generated_files/tmr0.c"
  2774 ;; Parameters:    Size  Location     Type
  2775 ;;		None
  2776 ;; Auto vars:     Size  Location     Type
  2777 ;;		None
  2778 ;; Return value:  Size  Location     Type
  2779 ;;                  1    wreg      void 
  2780 ;; Registers used:
  2781 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2782 ;; Tracked objects:
  2783 ;;		On entry : 0/0
  2784 ;;		On exit  : 0/0
  2785 ;;		Unchanged: 0/0
  2786 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2787 ;;      Params:         0       0       0       0
  2788 ;;      Locals:         0       0       0       0
  2789 ;;      Temps:          0       0       0       0
  2790 ;;      Totals:         0       0       0       0
  2791 ;;Total ram usage:        0 bytes
  2792 ;; Hardware stack levels used:    1
  2793 ;; Hardware stack levels required when called:    2
  2794 ;; This function calls:
  2795 ;;		_TMR0_CallBack
  2796 ;; This function is called by:
  2797 ;;		_INTERRUPT_InterruptManager
  2798 ;; This function uses a non-reentrant model
  2799 ;;
  2800                           
  2801                           
  2802                           ;psect for function _TMR0_ISR
  2803  0216                     _TMR0_ISR:	
  2804                           
  2805                           ;tmr0.c: 113: INTCONbits.TMR0IF = 0;
  2806                           
  2807                           ;incstack = 0
  2808                           ; Regs used in _TMR0_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2809  0216  110B               	bcf	11,2	;volatile
  2810                           
  2811                           ;tmr0.c: 115: TMR0 = timer0ReloadVal;
  2812  0217  0879               	movf	_timer0ReloadVal,w	;volatile
  2813  0218  0020               	movlb	0	; select bank0
  2814  0219  0095               	movwf	21	;volatile
  2815                           
  2816                           ;tmr0.c: 119: TMR0_CallBack();
  2817  021A  29C4               	ljmp	i1l1057
  2818  021B                     __end_of_TMR0_ISR:	
  2819                           
  2820                           	psect	text19
  2821  01C4                     __ptext19:	
  2822 ;; *************** function _TMR0_CallBack *****************
  2823 ;; Defined at:
  2824 ;;		line 124 in file "mcc_generated_files/tmr0.c"
  2825 ;; Parameters:    Size  Location     Type
  2826 ;;		None
  2827 ;; Auto vars:     Size  Location     Type
  2828 ;;		None
  2829 ;; Return value:  Size  Location     Type
  2830 ;;                  1    wreg      void 
  2831 ;; Registers used:
  2832 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2833 ;; Tracked objects:
  2834 ;;		On entry : 1F/0
  2835 ;;		On exit  : 0/0
  2836 ;;		Unchanged: 0/0
  2837 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2838 ;;      Params:         0       0       0       0
  2839 ;;      Locals:         0       0       0       0
  2840 ;;      Temps:          0       0       0       0
  2841 ;;      Totals:         0       0       0       0
  2842 ;;Total ram usage:        0 bytes
  2843 ;; Hardware stack levels used:    1
  2844 ;; Hardware stack levels required when called:    1
  2845 ;; This function calls:
  2846 ;;		Absolute function
  2847 ;;		_CharlieplexLEDs
  2848 ;; This function is called by:
  2849 ;;		_TMR0_ISR
  2850 ;; This function uses a non-reentrant model
  2851 ;;
  2852                           
  2853                           
  2854                           ;psect for function _TMR0_CallBack
  2855  01C4                     _TMR0_CallBack:	
  2856  01C4                     i1l1057:	
  2857                           ;incstack = 0
  2858                           ; Regs used in _TMR0_CallBack: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2859                           
  2860                           
  2861                           ;tmr0.c: 128: if(TMR0_InterruptHandler)
  2862  01C4  084A               	movf	_TMR0_InterruptHandler,w
  2863  01C5  044B               	iorwf	_TMR0_InterruptHandler+1,w
  2864  01C6  1903               	btfsc	3,2
  2865  01C7  0008               	return
  2866                           
  2867                           ;tmr0.c: 129: {
  2868                           ;tmr0.c: 130: TMR0_InterruptHandler();
  2869  01C8  084B               	movf	_TMR0_InterruptHandler+1,w
  2870  01C9  008A               	movwf	10
  2871  01CA  084A               	movf	_TMR0_InterruptHandler,w
  2872  01CB  000A               	callw
  2873  01CC  3181               	pagesel	$
  2874  01CD  0008               	return
  2875  01CE                     __end_of_TMR0_CallBack:	
  2876                           
  2877                           	psect	text20
  2878  00E2                     __ptext20:	
  2879 ;; *************** function _CharlieplexLEDs *****************
  2880 ;; Defined at:
  2881 ;;		line 147 in file "main.c"
  2882 ;; Parameters:    Size  Location     Type
  2883 ;;		None
  2884 ;; Auto vars:     Size  Location     Type
  2885 ;;  i               1    2[COMMON] unsigned char 
  2886 ;; Return value:  Size  Location     Type
  2887 ;;                  1    wreg      void 
  2888 ;; Registers used:
  2889 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  2890 ;; Tracked objects:
  2891 ;;		On entry : 1F/0
  2892 ;;		On exit  : 1F/0
  2893 ;;		Unchanged: 0/0
  2894 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2895 ;;      Params:         0       0       0       0
  2896 ;;      Locals:         1       0       0       0
  2897 ;;      Temps:          2       0       0       0
  2898 ;;      Totals:         3       0       0       0
  2899 ;;Total ram usage:        3 bytes
  2900 ;; Hardware stack levels used:    1
  2901 ;; This function calls:
  2902 ;;		Nothing
  2903 ;; This function is called by:
  2904 ;;		_main
  2905 ;;		_TMR0_CallBack
  2906 ;; This function uses a non-reentrant model
  2907 ;;
  2908                           
  2909                           
  2910                           ;psect for function _CharlieplexLEDs
  2911  00E2                     _CharlieplexLEDs:	
  2912                           
  2913                           ;main.c: 149: uint8_t i;
  2914                           ;main.c: 152: for (i=0; i < 8; i++)
  2915                           
  2916                           ;incstack = 0
  2917                           ; Regs used in _CharlieplexLEDs: [wreg+fsr1l+fsr1h+status,2+status,0]
  2918  00E2  01F2               	clrf	CharlieplexLEDs@i
  2919  00E3                     i1l971:	
  2920                           
  2921                           ;main.c: 153: {
  2922                           ;main.c: 154: if (PatternDelay[i])
  2923  00E3  3572               	lslf	CharlieplexLEDs@i,w
  2924  00E4  3E20               	addlw	(low (_PatternDelay| 0))& (0+255)
  2925  00E5  0086               	movwf	6
  2926  00E6  0187               	clrf	7
  2927  00E7  0016               	moviw fsr1++
  2928  00E8  0401               	iorwf	1,w
  2929  00E9  1903               	btfsc	3,2
  2930  00EA  28F5               	goto	i1l975
  2931                           
  2932                           ;main.c: 155: {
  2933                           ;main.c: 156: PatternDelay[i]--;
  2934  00EB  3572               	lslf	CharlieplexLEDs@i,w
  2935  00EC  3E20               	addlw	(low (_PatternDelay| 0))& (0+255)
  2936  00ED  0086               	movwf	6
  2937  00EE  3001               	movlw	1
  2938  00EF  0187               	clrf	7
  2939  00F0  0281               	subwf	1,f
  2940  00F1  3000               	movlw	0
  2941  00F2  3141               	addfsr 1,1
  2942  00F3  3B81               	subwfb	1,f
  2943  00F4  317F               	addfsr 1,-1
  2944  00F5                     i1l975:	
  2945  00F5  3008               	movlw	8
  2946  00F6  0AF2               	incf	CharlieplexLEDs@i,f
  2947  00F7  0272               	subwf	CharlieplexLEDs@i,w
  2948  00F8  1C03               	skipc
  2949  00F9  28E3               	goto	i1l971
  2950                           
  2951                           ;main.c: 157: }
  2952                           ;main.c: 158: }
  2953                           ;main.c: 161: TRISA = 0xCC;
  2954  00FA  30CC               	movlw	204
  2955  00FB  0021               	movlb	1	; select bank1
  2956  00FC  008C               	movwf	12	;volatile
  2957                           
  2958                           ;main.c: 162: PORTA = 0x00;
  2959  00FD  0020               	movlb	0	; select bank0
  2960  00FE  018C               	clrf	12	;volatile
  2961                           
  2962                           ;main.c: 165: i = 1 << LEDState;
  2963  00FF  3001               	movlw	1
  2964  0100  00F0               	movwf	??_CharlieplexLEDs
  2965  0101  0A78               	incf	_LEDState,w
  2966  0102  2904               	goto	u34_24
  2967  0103                     u34_25:	
  2968  0103  35F0               	lslf	??_CharlieplexLEDs,f
  2969  0104                     u34_24:	
  2970  0104  0B89               	decfsz	9,f
  2971  0105  2903               	goto	u34_25
  2972  0106  0870               	movf	??_CharlieplexLEDs,w
  2973  0107  00F2               	movwf	CharlieplexLEDs@i
  2974                           
  2975                           ;main.c: 168: if (i & LEDOns)
  2976  0108  0577               	andwf	_LEDOns,w	;volatile
  2977  0109  1903               	btfsc	3,2
  2978  010A  2918               	goto	i1l989
  2979                           
  2980                           ;main.c: 169: {
  2981                           ;main.c: 171: TRISA = TRISTable[LEDState];
  2982  010B  0878               	movf	_LEDState,w
  2983  010C  3E40               	addlw	(low (_TRISTable| 0))& (0+255)
  2984  010D  0086               	movwf	6
  2985  010E  0187               	clrf	7
  2986  010F  0801               	movf	1,w
  2987  0110  0021               	movlb	1	; select bank1
  2988  0111  008C               	movwf	12	;volatile
  2989                           
  2990                           ;main.c: 172: PORTA = PORTTable[LEDState];
  2991  0112  0878               	movf	_LEDState,w
  2992  0113  3E38               	addlw	(low (_PORTTable| 0))& (0+255)
  2993  0114  0086               	movwf	6
  2994  0115  0801               	movf	1,w
  2995  0116  0020               	movlb	0	; select bank0
  2996  0117  008C               	movwf	12	;volatile
  2997  0118                     i1l989:	
  2998  0118  3008               	movlw	8
  2999                           
  3000                           ;main.c: 173: }
  3001                           ;main.c: 176: LEDState++;
  3002  0119  0AF8               	incf	_LEDState,f
  3003                           
  3004                           ;main.c: 177: if (LEDState == 8)
  3005  011A  0678               	xorwf	_LEDState,w
  3006  011B  1903               	btfsc	3,2
  3007                           
  3008                           ;main.c: 178: {
  3009                           ;main.c: 179: LEDState = 0;
  3010  011C  01F8               	clrf	_LEDState
  3011  011D  0008               	return
  3012  011E                     __end_of_CharlieplexLEDs:	
  3013                           
  3014                           	psect	text21
  3015  01DC                     __ptext21:	
  3016 ;; *************** function _PIN_MANAGER_IOC *****************
  3017 ;; Defined at:
  3018 ;;		line 110 in file "mcc_generated_files/pin_manager.c"
  3019 ;; Parameters:    Size  Location     Type
  3020 ;;		None
  3021 ;; Auto vars:     Size  Location     Type
  3022 ;;		None
  3023 ;; Return value:  Size  Location     Type
  3024 ;;                  1    wreg      void 
  3025 ;; Registers used:
  3026 ;;		wreg, status,2, status,0, pclath, cstack
  3027 ;; Tracked objects:
  3028 ;;		On entry : 0/0
  3029 ;;		On exit  : 1F/7
  3030 ;;		Unchanged: 0/0
  3031 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3032 ;;      Params:         0       0       0       0
  3033 ;;      Locals:         0       0       0       0
  3034 ;;      Temps:          0       0       0       0
  3035 ;;      Totals:         0       0       0       0
  3036 ;;Total ram usage:        0 bytes
  3037 ;; Hardware stack levels used:    1
  3038 ;; Hardware stack levels required when called:    2
  3039 ;; This function calls:
  3040 ;;		_IOCAF2_ISR
  3041 ;;		_IOCAF3_ISR
  3042 ;; This function is called by:
  3043 ;;		_INTERRUPT_InterruptManager
  3044 ;; This function uses a non-reentrant model
  3045 ;;
  3046                           
  3047                           
  3048                           ;psect for function _PIN_MANAGER_IOC
  3049  01DC                     _PIN_MANAGER_IOC:	
  3050                           
  3051                           ;pin_manager.c: 113: if(IOCAFbits.IOCAF2 == 1)
  3052                           
  3053                           ;incstack = 0
  3054                           ; Regs used in _PIN_MANAGER_IOC: [wreg+status,2+status,0+pclath+cstack]
  3055  01DC  0027               	movlb	7	; select bank7
  3056  01DD  1D13               	btfss	19,2	;volatile
  3057  01DE  29E0               	goto	i1l1077
  3058                           
  3059                           ;pin_manager.c: 114: {
  3060                           ;pin_manager.c: 115: IOCAF2_ISR();
  3061  01DF  21AC               	fcall	_IOCAF2_ISR
  3062  01E0                     i1l1077:	
  3063                           
  3064                           ;pin_manager.c: 116: }
  3065                           ;pin_manager.c: 119: if(IOCAFbits.IOCAF3 == 1)
  3066  01E0  1D93               	btfss	19,3	;volatile
  3067  01E1  0008               	return
  3068                           
  3069                           ;pin_manager.c: 120: {
  3070                           ;pin_manager.c: 121: IOCAF3_ISR();
  3071  01E2  299F               	ljmp	i1l1033
  3072  01E3                     __end_of_PIN_MANAGER_IOC:	
  3073                           
  3074                           	psect	text22
  3075  019F                     __ptext22:	
  3076 ;; *************** function _IOCAF3_ISR *****************
  3077 ;; Defined at:
  3078 ;;		line 160 in file "mcc_generated_files/pin_manager.c"
  3079 ;; Parameters:    Size  Location     Type
  3080 ;;		None
  3081 ;; Auto vars:     Size  Location     Type
  3082 ;;		None
  3083 ;; Return value:  Size  Location     Type
  3084 ;;                  1    wreg      void 
  3085 ;; Registers used:
  3086 ;;		wreg, status,2, status,0, pclath, cstack
  3087 ;; Tracked objects:
  3088 ;;		On entry : 1F/7
  3089 ;;		On exit  : 1F/7
  3090 ;;		Unchanged: 0/0
  3091 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3092 ;;      Params:         0       0       0       0
  3093 ;;      Locals:         0       0       0       0
  3094 ;;      Temps:          0       0       0       0
  3095 ;;      Totals:         0       0       0       0
  3096 ;;Total ram usage:        0 bytes
  3097 ;; Hardware stack levels used:    1
  3098 ;; Hardware stack levels required when called:    1
  3099 ;; This function calls:
  3100 ;;		Absolute function
  3101 ;;		_IOCAF3_DefaultInterruptHandler
  3102 ;; This function is called by:
  3103 ;;		_PIN_MANAGER_IOC
  3104 ;; This function uses a non-reentrant model
  3105 ;;
  3106                           
  3107                           
  3108                           ;psect for function _IOCAF3_ISR
  3109  019F                     _IOCAF3_ISR:	
  3110  019F                     i1l1033:	
  3111                           ;incstack = 0
  3112                           ; Regs used in _IOCAF3_ISR: [wreg+status,2+status,0+pclath+cstack]
  3113                           
  3114                           
  3115                           ;pin_manager.c: 165: if(IOCAF3_InterruptHandler)
  3116  019F  0020               	movlb	0	; select bank0
  3117  01A0  084C               	movf	_IOCAF3_InterruptHandler,w
  3118  01A1  044D               	iorwf	_IOCAF3_InterruptHandler+1,w
  3119  01A2  1903               	btfsc	3,2
  3120  01A3  29A9               	goto	i1l1037
  3121                           
  3122                           ;pin_manager.c: 166: {
  3123                           ;pin_manager.c: 167: IOCAF3_InterruptHandler();
  3124  01A4  084D               	movf	_IOCAF3_InterruptHandler+1,w
  3125  01A5  008A               	movwf	10
  3126  01A6  084C               	movf	_IOCAF3_InterruptHandler,w
  3127  01A7  000A               	callw
  3128  01A8  3181               	pagesel	$
  3129  01A9                     i1l1037:	
  3130                           
  3131                           ;pin_manager.c: 168: }
  3132                           ;pin_manager.c: 169: IOCAFbits.IOCAF3 = 0;
  3133  01A9  0027               	movlb	7	; select bank7
  3134  01AA  1193               	bcf	19,3	;volatile
  3135  01AB  0008               	return
  3136  01AC                     __end_of_IOCAF3_ISR:	
  3137                           
  3138                           	psect	text23
  3139  022C                     __ptext23:	
  3140 ;; *************** function _IOCAF3_DefaultInterruptHandler *****************
  3141 ;; Defined at:
  3142 ;;		line 182 in file "mcc_generated_files/pin_manager.c"
  3143 ;; Parameters:    Size  Location     Type
  3144 ;;		None
  3145 ;; Auto vars:     Size  Location     Type
  3146 ;;		None
  3147 ;; Return value:  Size  Location     Type
  3148 ;;                  1    wreg      void 
  3149 ;; Registers used:
  3150 ;;		None
  3151 ;; Tracked objects:
  3152 ;;		On entry : 1F/0
  3153 ;;		On exit  : 1F/0
  3154 ;;		Unchanged: 1F/0
  3155 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3156 ;;      Params:         0       0       0       0
  3157 ;;      Locals:         0       0       0       0
  3158 ;;      Temps:          0       0       0       0
  3159 ;;      Totals:         0       0       0       0
  3160 ;;Total ram usage:        0 bytes
  3161 ;; Hardware stack levels used:    1
  3162 ;; This function calls:
  3163 ;;		Nothing
  3164 ;; This function is called by:
  3165 ;;		_PIN_MANAGER_Initialize
  3166 ;;		_IOCAF3_ISR
  3167 ;; This function uses a non-reentrant model
  3168 ;;
  3169                           
  3170                           
  3171                           ;psect for function _IOCAF3_DefaultInterruptHandler
  3172  022C                     _IOCAF3_DefaultInterruptHandler:	
  3173                           
  3174                           ;incstack = 0
  3175                           ; Regs used in _IOCAF3_DefaultInterruptHandler: []
  3176  022C  0008               	return
  3177  022D                     __end_of_IOCAF3_DefaultInterruptHandler:	
  3178                           
  3179                           	psect	text24
  3180  01AC                     __ptext24:	
  3181 ;; *************** function _IOCAF2_ISR *****************
  3182 ;; Defined at:
  3183 ;;		line 130 in file "mcc_generated_files/pin_manager.c"
  3184 ;; Parameters:    Size  Location     Type
  3185 ;;		None
  3186 ;; Auto vars:     Size  Location     Type
  3187 ;;		None
  3188 ;; Return value:  Size  Location     Type
  3189 ;;                  1    wreg      void 
  3190 ;; Registers used:
  3191 ;;		wreg, status,2, status,0, pclath, cstack
  3192 ;; Tracked objects:
  3193 ;;		On entry : 1F/7
  3194 ;;		On exit  : 1F/7
  3195 ;;		Unchanged: 0/0
  3196 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3197 ;;      Params:         0       0       0       0
  3198 ;;      Locals:         0       0       0       0
  3199 ;;      Temps:          0       0       0       0
  3200 ;;      Totals:         0       0       0       0
  3201 ;;Total ram usage:        0 bytes
  3202 ;; Hardware stack levels used:    1
  3203 ;; Hardware stack levels required when called:    1
  3204 ;; This function calls:
  3205 ;;		Absolute function
  3206 ;;		_IOCAF2_DefaultInterruptHandler
  3207 ;; This function is called by:
  3208 ;;		_PIN_MANAGER_IOC
  3209 ;; This function uses a non-reentrant model
  3210 ;;
  3211                           
  3212                           
  3213                           ;psect for function _IOCAF2_ISR
  3214  01AC                     _IOCAF2_ISR:	
  3215                           
  3216                           ;pin_manager.c: 135: if(IOCAF2_InterruptHandler)
  3217                           
  3218                           ;incstack = 0
  3219                           ; Regs used in _IOCAF2_ISR: [wreg+status,2+status,0+pclath+cstack]
  3220  01AC  0020               	movlb	0	; select bank0
  3221  01AD  084E               	movf	_IOCAF2_InterruptHandler,w
  3222  01AE  044F               	iorwf	_IOCAF2_InterruptHandler+1,w
  3223  01AF  1903               	btfsc	3,2
  3224  01B0  29B6               	goto	i1l1031
  3225                           
  3226                           ;pin_manager.c: 136: {
  3227                           ;pin_manager.c: 137: IOCAF2_InterruptHandler();
  3228  01B1  084F               	movf	_IOCAF2_InterruptHandler+1,w
  3229  01B2  008A               	movwf	10
  3230  01B3  084E               	movf	_IOCAF2_InterruptHandler,w
  3231  01B4  000A               	callw
  3232  01B5  3181               	pagesel	$
  3233  01B6                     i1l1031:	
  3234                           
  3235                           ;pin_manager.c: 138: }
  3236                           ;pin_manager.c: 139: IOCAFbits.IOCAF2 = 0;
  3237  01B6  0027               	movlb	7	; select bank7
  3238  01B7  1113               	bcf	19,2	;volatile
  3239  01B8  0008               	return
  3240  01B9                     __end_of_IOCAF2_ISR:	
  3241                           
  3242                           	psect	text25
  3243  022D                     __ptext25:	
  3244 ;; *************** function _IOCAF2_DefaultInterruptHandler *****************
  3245 ;; Defined at:
  3246 ;;		line 152 in file "mcc_generated_files/pin_manager.c"
  3247 ;; Parameters:    Size  Location     Type
  3248 ;;		None
  3249 ;; Auto vars:     Size  Location     Type
  3250 ;;		None
  3251 ;; Return value:  Size  Location     Type
  3252 ;;                  1    wreg      void 
  3253 ;; Registers used:
  3254 ;;		None
  3255 ;; Tracked objects:
  3256 ;;		On entry : 1F/0
  3257 ;;		On exit  : 1F/0
  3258 ;;		Unchanged: 1F/0
  3259 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3260 ;;      Params:         0       0       0       0
  3261 ;;      Locals:         0       0       0       0
  3262 ;;      Temps:          0       0       0       0
  3263 ;;      Totals:         0       0       0       0
  3264 ;;Total ram usage:        0 bytes
  3265 ;; Hardware stack levels used:    1
  3266 ;; This function calls:
  3267 ;;		Nothing
  3268 ;; This function is called by:
  3269 ;;		_PIN_MANAGER_Initialize
  3270 ;;		_IOCAF2_ISR
  3271 ;; This function uses a non-reentrant model
  3272 ;;
  3273                           
  3274                           
  3275                           ;psect for function _IOCAF2_DefaultInterruptHandler
  3276  022D                     _IOCAF2_DefaultInterruptHandler:	
  3277                           
  3278                           ;incstack = 0
  3279                           ; Regs used in _IOCAF2_DefaultInterruptHandler: []
  3280  022D  0008               	return
  3281  022E                     __end_of_IOCAF2_DefaultInterruptHandler:	
  3282  007E                     btemp	set	126	;btemp
  3283  007E                     int$flags	set	126
  3284  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        18
    BSS         28
    Persistent  7
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      5      10
    BANK0            80      4      52
    BANK1            80      0       0
    BANK2            80      0       0

Pointer List with Targets:

    TMR0_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> CharlieplexLEDs(), 

    TMR0_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> CharlieplexLEDs(), Absolute function(), 

    IOCAF3_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> IOCAF3_DefaultInterruptHandler(), 

    IOCAF3_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), IOCAF3_DefaultInterruptHandler(), 

    IOCAF2_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> IOCAF2_DefaultInterruptHandler(), 

    IOCAF2_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), IOCAF2_DefaultInterruptHandler(), 


Critical Paths under _main in COMMON

    _main->_TMR0_SetInterruptHandler
    _PIN_MANAGER_Initialize->_IOCAF2_SetInterruptHandler
    _PIN_MANAGER_Initialize->_IOCAF3_SetInterruptHandler
    _RunRightFlash->_SetLEDOff
    _RunRightFlash->_SetLEDOn
    _RunLeftFlash->_SetLEDOff
    _RunLeftFlash->_SetLEDOn

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _TMR0_CallBack->_CharlieplexLEDs

Critical Paths under _main in BANK0

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0     551
                                              0 BANK0      4     4      0
               _CheckForButtonPushes
                       _RunLeftFlash
                      _RunRightFlash
                  _SYSTEM_Initialize
                      _SetAllLEDsOff
           _TMR0_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (1) _TMR0_SetInterruptHandler                             2     0      2      96
                                              3 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (1) _SetAllLEDsOff                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     192
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR0_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR0_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0     192
         _IOCAF2_SetInterruptHandler
         _IOCAF3_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _IOCAF3_SetInterruptHandler                           2     0      2      96
                                              3 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (3) _IOCAF2_SetInterruptHandler                           2     0      2      96
                                              3 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _RunRightFlash                                        0     0      0      62
                 _RightButtonPressed
                          _SetLEDOff
                           _SetLEDOn
 ---------------------------------------------------------------------------------
 (1) _RunLeftFlash                                         0     0      0      62
                  _LeftButtonPressed
                          _SetLEDOff
                           _SetLEDOn
 ---------------------------------------------------------------------------------
 (2) _SetLEDOn                                             1     1      0      31
                                              3 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _SetLEDOff                                            1     1      0      31
                                              3 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _CheckForButtonPushes                                 0     0      0       0
                  _LeftButtonPressed
                 _RightButtonPressed
 ---------------------------------------------------------------------------------
 (2) _RightButtonPressed                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _LeftButtonPressed                                    0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _INTERRUPT_InterruptManager                           0     0      0     113
                    _PIN_MANAGER_IOC
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (5) _TMR0_ISR                                             0     0      0     113
                      _TMR0_CallBack
 ---------------------------------------------------------------------------------
 (6) _TMR0_CallBack                                        0     0      0     113
                   Absolute function *
                    _CharlieplexLEDs *
 ---------------------------------------------------------------------------------
 (7) _CharlieplexLEDs                                      3     3      0     113
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (5) _PIN_MANAGER_IOC                                      0     0      0       0
                         _IOCAF2_ISR
                         _IOCAF3_ISR
 ---------------------------------------------------------------------------------
 (6) _IOCAF3_ISR                                           0     0      0       0
                   Absolute function *
     _IOCAF3_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (7) _IOCAF3_DefaultInterruptHandler                       0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _IOCAF2_ISR                                           0     0      0       0
                   Absolute function *
     _IOCAF2_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (7) _IOCAF2_DefaultInterruptHandler                       0     0      0       0
 ---------------------------------------------------------------------------------
 (7) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _CheckForButtonPushes
     _LeftButtonPressed
     _RightButtonPressed
   _RunLeftFlash
     _LeftButtonPressed
     _SetLEDOff
     _SetLEDOn
   _RunRightFlash
     _RightButtonPressed
     _SetLEDOff
     _SetLEDOn
   _SYSTEM_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
       _IOCAF2_SetInterruptHandler
       _IOCAF3_SetInterruptHandler
     _TMR0_Initialize
     _WDT_Initialize
   _SetAllLEDsOff
   _TMR0_SetInterruptHandler

 _INTERRUPT_InterruptManager (ROOT)
   _PIN_MANAGER_IOC
     _IOCAF2_ISR
       Absolute function(Fake) *
       _IOCAF2_DefaultInterruptHandler *
     _IOCAF3_ISR
       Absolute function(Fake) *
       _IOCAF3_DefaultInterruptHandler *
   _TMR0_ISR
     _TMR0_CallBack
       Absolute function(Fake) *
       _CharlieplexLEDs *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      5       A       2       71.4%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      3E       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50      4      34       6       65.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
DATA                 0      0      3E      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Thu May 10 21:09:00 2018

                           ??_RunRightFlash 0074                                           pc 0002  
                               __CFG_CP$OFF 0000                             _timer0ReloadVal 0079  
                                       l240 014C                                         u807 0144  
                              __CFG_BORV$LO 0000                                         wreg 0009  
        __end_of_IOCAF2_SetInterruptHandler 01F5                  _IOCAF2_SetInterruptHandler 01EF  
                          CharlieplexLEDs@i 0072                                        S1531 01F5  
                                      S1533 0200                                __CFG_LVP$OFF 0000  
                                      l1401 003C                                        l1403 0045  
                                      l1405 004E                                        l1325 01B9  
                                      l1407 0057                                        l1415 0062  
                                      l1441 017B                                        l1409 005F  
                                      l1417 006C                                        l1361 009D  
                                      l1451 0188                                        l1443 017E  
                                      l1427 0086                                        l1371 00C1  
                                      l1363 00A6                                        l1453 018B  
                                      l1445 017F                                        l1429 0087  
                                      l1365 00AF                                        l1367 00B8  
                                      l1359 0094                                        l1375 00C3  
                                      l1463 0126                                        l1385 00DC  
                                      l1377 00CD                                        l1387 00DD  
                                      l1475 012A                                        l1397 002E  
                                      l1399 0033                                        l1479 0133  
                                      _LATA 010C                       ?_CheckForButtonPushes 0070  
                                      _TMR0 0015                                        _WPUA 020C  
                              __CFG_WRT$OFF 0000                          _RightButtonPressed 0206  
                                      _main 011E                                        fsr0h 0005  
                                      fsr1h 0007                                        indf0 0000  
                                      fsr0l 0004                                        indf1 0001  
                                      fsr1l 0006                                        btemp 007E  
                         RunLeftFlash@delay 0048                                        start 0011  
                       ?_RightButtonPressed 0070                     __end_of_TMR0_Initialize 01C4  
            __size_of_OSCILLATOR_Initialize 0007                         __size_of_IOCAF2_ISR 000D  
                       __size_of_IOCAF3_ISR 000D               __end_of_OSCILLATOR_Initialize 01D5  
                                     ?_main 0070                               __CFG_WDTE$OFF 0000  
                                     i1l102 000B                                       i1l106 000F  
                                     i1l971 00E3                                       i1l975 00F5  
                                     i1l989 0118                                       u34_24 0104  
                                     u34_25 0103                                       _PORTA 000C  
                                     _TRISA 008C           __size_of_TMR0_SetInterruptHandler 0005  
                 ?_TMR0_SetInterruptHandler 0073                        ??_RightButtonPressed 0073  
                          __end_of_TMR0_ISR 021B                     __end_of_PIN_MANAGER_IOC 01E3  
                            _WDT_Initialize 021F                                       main@i 0053  
                            __CFG_BOREN$OFF 0000                                       pclath 000A  
                                     status 0003                                       wtemp0 007E  
                               SetLEDOn@LED 0073                              __CFG_MCLRE$OFF 0000  
                           __initialization 0012                                __end_of_main 014E  
                          __end_of_SetLEDOn 022A                 ?_INTERRUPT_InterruptManager 0070  
                                    ??_main 0050                              __CFG_PLLEN$OFF 0000  
                    __end_of_WDT_Initialize 0223                       main@APatternIsRunning 0052  
                    __size_of_SetAllLEDsOff 0002                ??_IOCAF3_SetInterruptHandler 0075  
                    ??_CheckForButtonPushes 0073                                      _APFCON 011D  
                                    _ANSELA 018C                                      _BORCON 0116  
                                    i1l1031 01B6                                      i1l1033 019F  
                                    i1l1037 01A9                                      i1l1057 01C4  
                                    i1l1077 01E0                                      _ODCONA 028C  
                                    _LEDOns 0077                                      _OSCCON 0099  
   CheckForButtonPushes@LastLeftButtonState 0076                                      _WDTCON 0097  
                        __size_of_SetLEDOff 0004                              __CFG_PWRTE$OFF 0000  
                            __CFG_STVREN$ON 0000                            ?_TMR0_Initialize 0070  
       __size_of_IOCAF3_SetInterruptHandler 0005                             ?_WDT_Initialize 0070  
                     __end_of_TMR0_CallBack 01CE    TMR0_SetInterruptHandler@InterruptHandler 0073  
IOCAF3_SetInterruptHandler@InterruptHandler 0073  IOCAF2_SetInterruptHandler@InterruptHandler 0073  
                          ?_PIN_MANAGER_IOC 0070                                ??_IOCAF2_ISR 0070  
                              ??_IOCAF3_ISR 0070                           _SYSTEM_Initialize 021B  
                   __end_of__initialization 0026                          ?_SYSTEM_Initialize 0070  
                              SetLEDOff@LED 0073                               _SetAllLEDsOff 022A  
                            __pcstackCOMMON 0070                                __pidataBANK0 018D  
                       ??_SYSTEM_Initialize 0075                                   ?_TMR0_ISR 0070  
                        __end_of_IOCAF2_ISR 01B9                          __end_of_IOCAF3_ISR 01AC  
                         __end_of_SetLEDOff 0227                              _OPTION_REGbits 0095  
               ?_IOCAF2_SetInterruptHandler 0073            ??_IOCAF2_DefaultInterruptHandler 0070  
           ?_IOCAF2_DefaultInterruptHandler 0070                   __end_of_SYSTEM_Initialize 021F  
                                __pbssBANK0 0020                                   ?_SetLEDOn 0070  
                                __pnvCOMMON 0079                    __size_of_CharlieplexLEDs 003C  
                            ?_SetAllLEDsOff 0070                                  __pmaintext 011E  
          __end_of_TMR0_SetInterruptHandler 0211                                  ??_TMR0_ISR 0073  
                                __pintentry 0004                       __end_of_RunRightFlash 00E2  
        __end_of_IOCAF3_SetInterruptHandler 0216                  _IOCAF3_SetInterruptHandler 0211  
                                   _OSCTUNE 0098                                  ??_SetLEDOn 0073  
                             ?_RunLeftFlash 0070                                     __ptext1 020C  
                                   __ptext2 022A                                     __ptext3 021B  
                                   __ptext4 021F                                     __ptext5 01B9  
                                   __ptext6 014E                                     __ptext7 0211  
                                   __ptext8 01EF                                     __ptext9 01CE  
                     _OSCILLATOR_Initialize 01CE                    ??_PIN_MANAGER_Initialize 0075  
                                 _IOCAFbits 0393                                   _IOCANbits 0392  
                                 _IOCAPbits 0391                 __size_of_RightButtonPressed 0006  
                __size_of_SYSTEM_Initialize 0004                                     clrloop0 01EA  
                      end_of_initialization 0026                                     init_ram 01E3  
                                   initloop 01E4                             ??_SetAllLEDsOff 0073  
                            ??_RunLeftFlash 0074    CheckForButtonPushes@LastRightButtonState 0075  
                         ??_CharlieplexLEDs 0070                            ??_WDT_Initialize 0073  
                  _TMR0_SetInterruptHandler 020C                                   _PORTAbits 000C  
                                 _PORTTable 0038                            __CFG_FOSC$INTOSC 0000  
                         _LeftButtonPressed 01D5                                   _TRISTable 0040  
                        ?_LeftButtonPressed 0070               __size_of_CheckForButtonPushes 001B  
                       ??_LeftButtonPressed 0073                           __size_of_TMR0_ISR 0005  
                    ?_OSCILLATOR_Initialize 0070                   __end_of_LeftButtonPressed 01DC  
                       start_initialization 0012                    __size_of_TMR0_Initialize 000B  
           __size_of_PIN_MANAGER_Initialize 0024                                   _SetLEDOff 0223  
                  __size_of_PIN_MANAGER_IOC 0007                           __size_of_SetLEDOn 0003  
    __end_of_IOCAF2_DefaultInterruptHandler 022E     __size_of_IOCAF2_DefaultInterruptHandler 0001  
            _IOCAF2_DefaultInterruptHandler 022D                            __CFG_LPBOREN$OFF 0000  
                    __size_of_TMR0_CallBack 000A                                 __pdataBANK0 0038  
                               __pbssCOMMON 0075                                   ___latbits 0000  
                             __pcstackBANK0 0050                 ?_IOCAF3_SetInterruptHandler 0073  
                      __end_of_RunLeftFlash 008C                                  ?_SetLEDOff 0070  
          ??_IOCAF3_DefaultInterruptHandler 0070             ?_IOCAF3_DefaultInterruptHandler 0070  
                     _TMR0_InterruptHandler 004A                                   __pnvBANK0 004A  
                    _PIN_MANAGER_Initialize 014E                ??_INTERRUPT_InterruptManager 0073  
                                 __pswtext1 01F5                                   __pswtext2 0200  
                __size_of_LeftButtonPressed 0007                                _PatternDelay 0020  
                              _PatternState 0030                               _TMR0_CallBack 01C4  
                    __size_of_RunRightFlash 0056                           ??_TMR0_Initialize 0073  
                           _CharlieplexLEDs 00E2                                    _LEDState 0078  
                                 clear_ram0 01E9         __size_of_INTERRUPT_InterruptManager 000D  
                ??_TMR0_SetInterruptHandler 0075                                    _TMR0_ISR 0216  
                         ??_PIN_MANAGER_IOC 0070                  __end_of_RightButtonPressed 020C  
                               ??_SetLEDOff 0073                              ?_TMR0_CallBack 0070  
                                  _SetLEDOn 0227                       __end_of_SetAllLEDsOff 022C  
                   ??_OSCILLATOR_Initialize 0073                __end_of_CheckForButtonPushes 018D  
                             _RunRightFlash 008C                       __size_of_RunLeftFlash 0063  
                   _IOCAF2_InterruptHandler 004E                     __end_of_CharlieplexLEDs 011E  
              ??_IOCAF2_SetInterruptHandler 0075                                    __ptext10 008C  
                                  __ptext11 0029                                    __ptext20 00E2  
                                  __ptext12 0227                                    __ptext21 01DC  
                                  __ptext13 0223                                    __ptext22 019F  
                                  __ptext14 0172                                    __ptext23 022C  
                                  __ptext15 0206                                    __ptext24 01AC  
                                  __ptext16 01D5                                    __ptext25 022D  
                                  __ptext18 0216                                    __ptext19 01C4  
                                _IOCAF2_ISR 01AC                                  _IOCAF3_ISR 019F  
                             __size_of_main 0030                                _RunLeftFlash 0029  
                                  int$flags 007E                              ?_RunRightFlash 0070  
        __end_of_INTERRUPT_InterruptManager 0011                  _INTERRUPT_InterruptManager 0004  
       __size_of_IOCAF2_SetInterruptHandler 0006                                  _INTCONbits 000B  
                           ??_TMR0_CallBack 0073                     __size_of_WDT_Initialize 0004  
                                  intlevel1 0000                     ?_PIN_MANAGER_Initialize 0070  
                         __CFG_CLKOUTEN$OFF 0000      __end_of_IOCAF3_DefaultInterruptHandler 022D  
   __size_of_IOCAF3_DefaultInterruptHandler 0001              _IOCAF3_DefaultInterruptHandler 022C  
                                _OPTION_REG 0095                             _TMR0_Initialize 01B9  
                               _VREGCONbits 0197                            ?_CharlieplexLEDs 0070  
                               ?_IOCAF2_ISR 0070                                 ?_IOCAF3_ISR 0070  
            __end_of_PIN_MANAGER_Initialize 0172                        _CheckForButtonPushes 0172  
                           _PIN_MANAGER_IOC 01DC                     _IOCAF3_InterruptHandler 004C  
